// Generated by dart2js (full emitter, strong), the Dart to JavaScript compiler version: 2.0.0-edge.34f17b29735d5f8a9d3f6be7571edec379327a9f.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, metadataOffset, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var comma = "", body = "";
      for (var i = 0; i < fields.length; i++) {
        var fieldDescriptor = fields[i];
        if (fieldDescriptor.charCodeAt(0) == 48) {
          fieldDescriptor = fieldDescriptor.substring(1);
          var field = generateAccessor(fieldDescriptor, accessors, name);
          body += "this." + field + " = null;\n";
        } else {
          var field = generateAccessor(fieldDescriptor, accessors, name);
          var parameter = "p_" + field;
          str += comma;
          comma = ", ";
          str += parameter;
          body += "this." + field + " = " + parameter + ";\n";
        }
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"], split, supr, fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0, applyTrampolineIndex = index, alias = array[index], f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      if (typeof f == "number") {
        applyTrampolineIndex = f;
        f = array[++index];
      }
      prototype[name] = prototype[alias] = f;
      var funcs = [f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var isIntercepted = (requiredParameterInfo & 1) === 1;
      requiredParameterInfo = requiredParameterInfo >> 1;
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var totalParameterCount = requiredParameterCount + optionalParameterCount;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      if (metadataOffset > 0) {
        var position = 3;
        for (var i = 0; i < optionalParameterCount; i++) {
          if (typeof array[position] == "number")
            array[position] = array[position] + metadataOffset;
          position++;
        }
        for (var i = 0; i < totalParameterCount; i++) {
          array[position] = array[position] + metadataOffset;
          position++;
        }
      }
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, applyTrampolineIndex, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic)
          functions.push(getterStubName);
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
      var isReflectable = array.length > unmangledNameIndex;
      if (isReflectable) {
        funcs[0].$reflectable = 1;
        funcs[0].$reflectionInfo = array;
        for (var i = 1; i < funcs.length; i++) {
          funcs[i].$reflectable = 2;
          funcs[i].$reflectionInfo = array;
        }
        var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
        var unmangledName = array[unmangledNameIndex];
        var reflectionName = unmangledName;
        if (getterStubName)
          mangledNames[getterStubName] = reflectionName;
        if (isSetter)
          reflectionName += "=";
        else if (!isGetter)
          reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
        mangledNames[name] = reflectionName;
        funcs[0].$reflectionName = reflectionName;
        for (var i = unmangledNameIndex + 1; i < array.length; i++)
          array[i] = array[i] + metadataOffset;
        funcs[0].$metadataIndex = unmangledNameIndex + 1;
        if (optionalParameterCount)
          prototype[unmangledName + "*"] = funcs[applyTrampolineIndex];
      }
    }
    function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
      var cache;
      return isStatic ? function() {
        if (cache === void 0)
          cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, [], name).prototype;
        return cache;
      } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
      }],
      noSuchMethod$1: ["super$Interceptor$noSuchMethod", function(receiver, invocation) {
        H.interceptedTypeCheck(invocation, "$isInvocation");
        throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 5, 0, null, 6],
      "%": "ArrayBuffer|CanvasGradient|CanvasPattern|CanvasRenderingContext2D|DOMImplementation|Navigator|NavigatorConcurrentHardware|Range|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|StorageManager|WorkerLocation|WorkerNavigator"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      noSuchMethod$1: [function(receiver, invocation) {
        return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
      }, null, "get$noSuchMethod", 5, 0, null, 6],
      $isNull: 1
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }]
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        if (dartClosure == null)
          return this.super$JavaScriptObject$toString(receiver);
        return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;$ti",
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("add"));
        receiver.push(value);
      },
      removeAt$1: function(receiver, index) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeAt"));
        if (index < 0 || index >= receiver.length)
          throw H.wrapException(P.RangeError$value(index, null, null));
        return receiver.splice(index, 1)[0];
      },
      removeLast$0: function(receiver) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeLast"));
        if (receiver.length === 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, -1));
        return receiver.pop();
      },
      remove$1: function(receiver, element) {
        var i;
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("remove"));
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element)) {
            receiver.splice(i, 1);
            return true;
          }
        return false;
      },
      _removeWhere$2: function(receiver, test, removeMatching) {
        var retained, end, i, element, t1;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        retained = [];
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (!test.call$1(element))
            retained.push(element);
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        t1 = retained.length;
        if (t1 === end)
          return;
        this.set$length(receiver, t1);
        for (i = 0; i < retained.length; ++i)
          receiver[i] = retained[i];
      },
      addAll$1: function(receiver, collection) {
        var t1;
        H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("addAll"));
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      forEach$1: function(receiver, f) {
        var end, i;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          f.call$1(receiver[i]);
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
      },
      map$1$1: function(receiver, f, $T) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = new Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          this.$indexSet(list, i, H.S(receiver[i]));
        return list.join(separator);
      },
      skip$1: function(receiver, n) {
        return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
      },
      fold$1$2: function(receiver, initialValue, combine, $T) {
        var $length, value, i;
        H.assertSubtypeOfRuntimeType(initialValue, $T);
        H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return value;
      },
      firstWhere$2$orElse: function(receiver, test, orElse) {
        var end, i, element;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          element = receiver[i];
          if (test.call$1(element))
            return element;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        throw H.wrapException(H.IterableElementError_noElement());
      },
      firstWhere$1: function($receiver, test) {
        return this.firstWhere$2$orElse($receiver, test, null);
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      sublist$2: function(receiver, start, end) {
        if (start < 0 || start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
        if (end == null)
          end = receiver.length;
        else if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
        if (start === end)
          return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
        return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      sublist$1: function($receiver, start) {
        return this.sublist$2($receiver, start, null);
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var t1, $length, t2, otherStart, otherList, i;
        t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("setRange"));
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        if (typeof end !== "number")
          return end.$sub();
        if (typeof start !== "number")
          return H.iae(start);
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
        t2 = J.getInterceptor$(iterable);
        if (!!t2.$isList) {
          H.assertSubtype(iterable, "$isList", [t1], "$asList");
          otherStart = skipCount;
          otherList = iterable;
        } else {
          otherList = t2.skip$1(iterable, skipCount).toList$1$growable(0, false);
          otherStart = 0;
        }
        t1 = J.getInterceptor$asx(otherList);
        t2 = t1.get$length(otherList);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (otherStart + $length > t2)
          throw H.wrapException(H.IterableElementError_tooFew());
        if (otherStart < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = t1.$index(otherList, otherStart + i);
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = t1.$index(otherList, otherStart + i);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      fillRange$3: function(receiver, start, end, fillValue) {
        var i;
        H.assertSubtypeOfRuntimeType(fillValue, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("fill range"));
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        for (i = start; i < end; ++i)
          receiver[i] = fillValue;
      },
      any$1: function(receiver, test) {
        var end, i;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]))
            return true;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return false;
      },
      sort$1: function(receiver, compare) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("sort"));
        H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
      },
      sort$0: function($receiver) {
        return this.sort$1($receiver, null);
      },
      shuffle$1: function(receiver, random) {
        var $length, pos, t1, tmp;
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("shuffle"));
        if (random == null)
          random = C.C__JSRandom;
        $length = receiver.length;
        for (; $length > 1;) {
          pos = random.nextInt$1($length);
          --$length;
          t1 = receiver.length;
          if ($length >= t1)
            return H.ioore(receiver, $length);
          tmp = receiver[$length];
          if (pos < 0 || pos >= t1)
            return H.ioore(receiver, pos);
          this.$indexSet(receiver, $length, receiver[pos]);
          this.$indexSet(receiver, pos, tmp);
        }
      },
      indexOf$2: function(receiver, element, start) {
        var i;
        if (start >= receiver.length)
          return -1;
        for (i = start; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      toList$1$growable: function(receiver, growable) {
        var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
        return t1;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("set length"));
        if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
          throw H.wrapException(P.ArgumentError$value(newLength, "newLength", null));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("indexed set"));
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $add: function(receiver, other) {
        var t1, t2, t3, totalLength;
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
        H.assertSubtype(other, "$isList", t1, "$asList");
        t2 = receiver.length;
        t3 = J.get$length$asx(other);
        if (typeof t3 !== "number")
          return H.iae(t3);
        totalLength = t2 + t3;
        t1 = H.setRuntimeTypeInfo([], t1);
        this.set$length(t1, totalLength);
        this.setRange$3(t1, 0, receiver.length, receiver);
        this.setRange$3(t1, receiver.length, totalLength, other);
        return t1;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      static: {
        JSArray_JSArray$fixed: function($length, $E) {
          if (typeof $length !== "number" || Math.floor($length) !== $length)
            throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
          if ($length < 0 || $length > 4294967295)
            throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
          return J.JSArray_JSArray$markFixed(new Array($length), $E);
        },
        JSArray_JSArray$markFixed: function(allocation, $E) {
          return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
        },
        JSArray_markFixedList: function(list) {
          H.listTypeCheck(list);
          list.fixed$length = Array;
          return list;
        },
        JSArray__compareAny: [function(a, b) {
          return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
        }, "call$2", "_interceptors_JSArray__compareAny$closure", 8, 0, 130]
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,0__interceptors$_current,$ti",
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.__interceptors$_current = null;
          return false;
        }
        this.__interceptors$_current = t1[t2];
        this.__interceptors$_index = t2 + 1;
        return true;
      }
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        H.numTypeCheck(b);
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
      },
      ceil$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647) {
            truncated = receiver | 0;
            return receiver === truncated ? truncated : truncated + 1;
          }
        } else if (receiver >= -2147483648)
          return receiver | 0;
        d = Math.ceil(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
      },
      floor$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647)
            return receiver | 0;
        } else if (receiver >= -2147483648) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated - 1;
        }
        d = Math.floor(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
      },
      round$0: function(receiver) {
        if (receiver > 0) {
          if (receiver !== 1 / 0)
            return Math.round(receiver);
        } else if (receiver > -1 / 0)
          return 0 - Math.round(0 - receiver);
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
      },
      clamp$2: function(receiver, lowerLimit, upperLimit) {
        if (typeof upperLimit !== "number")
          throw H.wrapException(H.argumentErrorValue(upperLimit));
        if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
          throw H.wrapException(H.argumentErrorValue(lowerLimit));
        if (this.compareTo$1(receiver, lowerLimit) < 0)
          return lowerLimit;
        if (this.compareTo$1(receiver, upperLimit) > 0)
          return upperLimit;
        return receiver;
      },
      toStringAsFixed$1: function(receiver, fractionDigits) {
        var result;
        if (fractionDigits > 20)
          throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
        result = receiver.toFixed(fractionDigits);
        if (receiver === 0 && this.get$isNegative(receiver))
          return "-" + result;
        return result;
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $div: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver / other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      $tdiv: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        if ((receiver | 0) === receiver)
          if (other >= 1 || other < -1)
            return receiver / other | 0;
        return this._tdivSlow$1(receiver, other);
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrBothPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver >>> other;
      },
      $lt: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $ge: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      },
      $isdouble: 1,
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      get$sign: function(receiver) {
        var t1;
        if (receiver > 0)
          t1 = 1;
        else
          t1 = receiver < 0 ? -1 : receiver;
        return t1;
      },
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      allMatches$2: function(receiver, string, start) {
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        return new H._StringAllMatchesIterable(string, receiver, start);
      },
      allMatches$1: function($receiver, string) {
        return this.allMatches$2($receiver, string, 0);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this._codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      split$1: function(receiver, pattern) {
        var t1 = H.setRuntimeTypeInfo(receiver.split(pattern), [P.String]);
        return t1;
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        H.intTypeCheck(endIndex);
        if (endIndex == null)
          endIndex = receiver.length;
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this._codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      $mul: function(receiver, times) {
        var s, result;
        if (0 >= times)
          return "";
        if (times === 1 || receiver.length === 0)
          return receiver;
        if (times !== times >>> 0)
          throw H.wrapException(C.C_OutOfMemoryError);
        for (s = receiver, result = ""; true;) {
          if ((times & 1) === 1)
            result = s + result;
          times = times >>> 1;
          if (times === 0)
            break;
          s += s;
        }
        return result;
      },
      padLeft$2: function(receiver, width, padding) {
        var delta = width - receiver.length;
        if (delta <= 0)
          return receiver;
        return this.$mul(padding, delta) + receiver;
      },
      padLeft$1: function($receiver, width) {
        return this.padLeft$2($receiver, width, " ");
      },
      get$codeUnits: function(receiver) {
        return new H.CodeUnits(receiver);
      },
      indexOf$2: function(receiver, pattern, start) {
        var t1, t2, i;
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        if (start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (typeof pattern === "string")
          return receiver.indexOf(pattern, start);
        for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
          if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
            return i;
        return -1;
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      contains$2: function(receiver, other, startIndex) {
        if (other == null)
          H.throwExpression(H.argumentErrorValue(other));
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      compareTo$1: function(receiver, other) {
        var t1;
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    _checkCount: function(count) {
      if (count < 0)
        H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
      return count;
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      var t1;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      t1 = J.get$length$asx(a);
      if (typeof t1 !== "number")
        return t1.$sub();
      H.Sort__doSort(a, 0, t1 - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;_string",
      get$length: function(_) {
        return this._string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this._string, H.intTypeCheck(i));
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      }
    },
    EfficientLengthIterable: {
      "^": "Iterable;"
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      forEach$1: function(_, action) {
        var $length, i;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]});
        $length = this.get$length(this);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      join$1: function(_, separator) {
        var $length, first, t1, i;
        $length = this.get$length(this);
        if (separator.length !== 0) {
          if ($length === 0)
            return "";
          first = H.S(this.elementAt$1(0, 0));
          t1 = this.get$length(this);
          if ($length == null ? t1 != null : $length !== t1)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = first;
          i = 1;
          for (; i < $length; ++i) {
            t1 = t1 + separator + H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(P.ConcurrentModificationError$(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else {
          if (typeof $length !== "number")
            return H.iae($length);
          i = 0;
          t1 = "";
          for (; i < $length; ++i) {
            t1 += H.S(this.elementAt$1(0, i));
            if ($length !== this.get$length(this))
              throw H.wrapException(P.ConcurrentModificationError$(this));
          }
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
      },
      toList$1$growable: function(_, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        i = 0;
        while (true) {
          t1 = this.get$length(this);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          C.JSArray_methods.$indexSet(result, i, this.elementAt$1(0, i));
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      }
    },
    SubListIterable: {
      "^": "ListIterable;_iterable,_start,_endOrLength,$ti",
      get$_endIndex: function() {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this._endOrLength;
        if (t1 != null) {
          if (typeof $length !== "number")
            return H.iae($length);
          t2 = t1 > $length;
        } else
          t2 = true;
        if (t2)
          return $length;
        return t1;
      },
      get$_startIndex: function() {
        var $length, t1;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t1 > $length)
          return $length;
        return t1;
      },
      get$length: function(_) {
        var $length, t1, t2;
        $length = J.get$length$asx(this._iterable);
        t1 = this._start;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t1 >= $length)
          return 0;
        t2 = this._endOrLength;
        if (t2 == null || t2 >= $length)
          return $length - t1;
        if (typeof t2 !== "number")
          return t2.$sub();
        return t2 - t1;
      },
      elementAt$1: function(_, index) {
        var t1, realIndex;
        t1 = this.get$_startIndex();
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof index !== "number")
          return H.iae(index);
        realIndex = t1 + index;
        if (index >= 0) {
          t1 = this.get$_endIndex();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = realIndex >= t1;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.IndexError$(index, this, "index", null, null));
        return J.elementAt$1$ax(this._iterable, realIndex);
      },
      toList$1$growable: function(_, growable) {
        var start, t1, t2, end, end0, t3, $length, result, i;
        start = this._start;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        end = t2.get$length(t1);
        end0 = this._endOrLength;
        if (end0 != null) {
          if (typeof end !== "number")
            return H.iae(end);
          t3 = end0 < end;
        } else
          t3 = false;
        if (t3)
          end = end0;
        if (typeof end !== "number")
          return end.$sub();
        $length = end - start;
        if ($length < 0)
          $length = 0;
        t3 = new Array($length);
        t3.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t3, this.$ti);
        for (i = 0; i < $length; ++i) {
          C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
          t3 = t2.get$length(t1);
          if (typeof t3 !== "number")
            return t3.$lt();
          if (t3 < end)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return result;
      },
      static: {
        SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
          if (_start < 0)
            H.throwExpression(P.RangeError$range(_start, 0, null, "start", null));
          if (_endOrLength != null) {
            if (_endOrLength < 0)
              H.throwExpression(P.RangeError$range(_endOrLength, 0, null, "end", null));
            if (_start > _endOrLength)
              H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
          }
          return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
        }
      }
    },
    ListIterator: {
      "^": "Object;_iterable,_length,__internal$_index,0__internal$_current,$ti",
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        t3 = this._length;
        if (t3 == null ? $length != null : t3 !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        t3 = this.__internal$_index;
        if (typeof $length !== "number")
          return H.iae($length);
        if (t3 >= $length) {
          this.__internal$_current = null;
          return false;
        }
        this.__internal$_current = t2.elementAt$1(t1, t3);
        ++this.__internal$_index;
        return true;
      }
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
          H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
          if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f,$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;0__internal$_current,_iterator,_f,$ti",
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.__internal$_current = this._f.call$1(t1.get$current());
          return true;
        }
        this.__internal$_current = null;
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f,$ti",
      moveNext$0: function() {
        var t1, t2;
        for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
          if (t2.call$1(t1.get$current()))
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    TakeIterable: {
      "^": "Iterable;_iterable,_takeCount,$ti",
      get$iterator: function(_) {
        return new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount, this.$ti);
      },
      static: {
        TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
          H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
          if (takeCount < 0)
            throw H.wrapException(P.ArgumentError$(takeCount));
          if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
          return new H.TakeIterable(iterable, takeCount, [$E]);
        }
      }
    },
    EfficientLengthTakeIterable: {
      "^": "TakeIterable;_iterable,_takeCount,$ti",
      get$length: function(_) {
        var iterableLength, t1;
        iterableLength = J.get$length$asx(this._iterable);
        t1 = this._takeCount;
        if (typeof iterableLength !== "number")
          return iterableLength.$gt();
        if (iterableLength > t1)
          return t1;
        return iterableLength;
      },
      $isEfficientLengthIterable: 1
    },
    TakeIterator: {
      "^": "Iterator;_iterator,_remaining,$ti",
      moveNext$0: function() {
        if (--this._remaining >= 0)
          return this._iterator.moveNext$0();
        this._remaining = -1;
        return false;
      },
      get$current: function() {
        if (this._remaining < 0)
          return;
        return this._iterator.get$current();
      }
    },
    TakeWhileIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.TakeWhileIterator(J.get$iterator$ax(this._iterable), this._f, false, this.$ti);
      }
    },
    TakeWhileIterator: {
      "^": "Iterator;_iterator,_f,_isFinished,$ti",
      moveNext$0: function() {
        if (this._isFinished)
          return false;
        var t1 = this._iterator;
        if (!t1.moveNext$0() || !this._f.call$1(t1.get$current())) {
          this._isFinished = true;
          return false;
        }
        return true;
      },
      get$current: function() {
        if (this._isFinished)
          return;
        return this._iterator.get$current();
      }
    },
    SkipIterable: {
      "^": "Iterable;_iterable,_skipCount,$ti",
      get$iterator: function(_) {
        return new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount, this.$ti);
      },
      static: {
        SkipIterable_SkipIterable: function(iterable, count, $E) {
          H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
          if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthSkipIterable(iterable, H._checkCount(count), [$E]);
          return new H.SkipIterable(iterable, H._checkCount(count), [$E]);
        }
      }
    },
    EfficientLengthSkipIterable: {
      "^": "SkipIterable;_iterable,_skipCount,$ti",
      get$length: function(_) {
        var t1, $length;
        t1 = J.get$length$asx(this._iterable);
        if (typeof t1 !== "number")
          return t1.$sub();
        $length = t1 - this._skipCount;
        if ($length >= 0)
          return $length;
        return 0;
      },
      $isEfficientLengthIterable: 1
    },
    SkipIterator: {
      "^": "Iterator;_iterator,_skipCount,$ti",
      moveNext$0: function() {
        var t1, i;
        for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
          t1.moveNext$0();
        this._skipCount = 0;
        return t1.moveNext$0();
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    FixedLengthListMixin: {
      "^": "Object;$ti",
      set$length: function(receiver, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, index, value) {
        H.intTypeCheck(index);
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
      },
      set$length: function(_, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
      },
      add$1: function(_, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
      }
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;"
    },
    ReversedListIterable: {
      "^": "ListIterable;_source,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        var t1, t2, t3;
        t1 = this._source;
        t2 = J.getInterceptor$asx(t1);
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof index !== "number")
          return H.iae(index);
        return t2.elementAt$1(t1, t3 - 1 - index);
      }
    },
    Symbol: {
      "^": "Object;__internal$_name",
      get$hashCode: function(_) {
        var hash = this._hashCode;
        if (hash != null)
          return hash;
        hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
        this._hashCode = hash;
        return hash;
      },
      toString$0: function(_) {
        return 'Symbol("' + H.S(this.__internal$_name) + '")';
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof H.Symbol) {
          t1 = this.__internal$_name;
          t2 = other.__internal$_name;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      $isSymbol0: 1
    }
  }], ["dart._js", "dart:_js",, H, {
    "^": "",
    isBrowserObject: function(o) {
      var t1 = J.getInterceptor$(o);
      return !!t1.$isBlob0 || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: [function(index) {
      return init.types[H.intTypeCheck(index)];
    }, null, null, 4, 0, null, 44],
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      var className, t1, $arguments;
      className = H.Primitives__objectClassName(object);
      t1 = H.getRuntimeTypeInfo(object);
      $arguments = H.joinArgumentsV2(t1, 0, null);
      return className + $arguments;
    },
    Primitives__objectClassName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor$(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_u2C(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_dateNow: [function() {
      return Date.now();
    }, "call$0", "_js_helper_Primitives_dateNow$closure", 0, 0, 131],
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, namedArgumentList;
      t1 = {};
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, "call" + "$" + t1.argumentCount + t1.names, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
      var $arguments, t1;
      $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      t1 = $arguments.length;
      if (t1 === 0) {
        if (!!$function.call$0)
          return $function.call$0();
      } else if (t1 === 1) {
        if (!!$function.call$1)
          return $function.call$1($arguments[0]);
      } else if (t1 === 2) {
        if (!!$function.call$2)
          return $function.call$2($arguments[0], $arguments[1]);
      } else if (t1 === 3) {
        if (!!$function.call$3)
          return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
      } else if (t1 === 4) {
        if (!!$function.call$4)
          return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
      } else if (t1 === 5)
        if (!!$function.call$5)
          return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
      return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
    },
    Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
      var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
      argumentCount = $arguments.length;
      jsFunction = $function["call" + "$" + argumentCount];
      if (jsFunction == null) {
        jsFunction = J.getInterceptor$($function)["call*"];
        if (jsFunction == null)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        info = H.ReflectionInfo_ReflectionInfo(jsFunction);
        requiredArgumentCount = info.requiredParameterCount;
        maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
        if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        $arguments = P.List_List$from($arguments, true, null);
        for (pos = argumentCount; pos < maxArgumentCount; ++pos)
          C.JSArray_methods.add$1($arguments, init.metadata[info.defaultValue$1(0, pos)]);
      }
      return jsFunction.apply($function, $arguments);
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: [function() {
      return J.toString$0$(this.dartException);
    }, null, null, 0, 0, null],
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: [function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    }, null, null, 24, 0, null, 45, 26, 27, 28, 30, 35],
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, jsArguments, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor$(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        isIntercepted = jsArguments.length == 1 && true;
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
        isIntercepted = false;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (t1 = functions.length, applyTrampoline = trampoline, i = 1; i < t1; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t2;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, jsArguments, $name) {
      var t1, t2;
      t1 = J.JSArray_markFixedList(H.listTypeCheck(functions));
      H.intTypeCheck(applyTrampolineIndex);
      t2 = !!J.getInterceptor$(reflectionInfo).$isList ? J.JSArray_markFixedList(reflectionInfo) : reflectionInfo;
      return H.Closure_fromTearOff(receiver, t1, applyTrampolineIndex, t2, !!isStatic, jsArguments, $name);
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    boolTypeCast: function(value) {
      if (typeof value === "boolean" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    intTypeCast: function(value) {
      if (typeof value === "number" && Math.floor(value) === value || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.stringTypeCheck(property).substring(3)));
    },
    propertyTypeCastError: function(value, property) {
      var t1 = J.getInterceptor$asx(property);
      throw H.wrapException(H.CastErrorImplementation$(value, t1.substring$2(property, 3, t1.get$length(property))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject, t1;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      t1 = H.isFunctionSubtypeV2(functionTypeObject, null, functionTypeRti, null);
      return t1;
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    _typeDescription: function(value) {
      var t1, functionTypeObject;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      var t1 = H.runtimeTypeToStringV2(rti, null);
      return t1;
    },
    runtimeTypeToStringV2: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].builtin$cls) + H.joinArgumentsV2(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.builtin$cls);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToStringV2(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H.runtimeTypeToStringV2("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToStringV2: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H.runtimeTypeToStringV2(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H.runtimeTypeToStringV2(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H.runtimeTypeToStringV2(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    joinArgumentsV2: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H.runtimeTypeToStringV2(argument, genericContext);
      }
      t1 = "<" + buffer.toString$0(0) + ">";
      return t1;
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtypeV2: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypesV2(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      var t1, t2;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      t1 = H.checkSubtypeV2(object, isField, checks, asField);
      if (t1)
        return object;
      t1 = isField.substring(3);
      t2 = H.joinArgumentsV2(checks, 0, null);
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(t1 + t2, init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      var t1, t2;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      t1 = H.checkSubtypeV2(object, isField, checks, asField);
      if (t1)
        return object;
      t1 = isField.substring(3);
      t2 = H.joinArgumentsV2(checks, 0, null);
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(t1 + t2, init.mangledGlobalNames)));
    },
    areSubtypesV2: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H.isSubtypeV2(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H.isSubtypeV2(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var t1, type, rti;
      if (o == null) {
        t1 = t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
        return t1;
      }
      t1 = t == null || t === -1 || t.builtin$cls === "Object" || t === -2;
      if (t1)
        return true;
      if (typeof t == "object") {
        t1 = 'futureOr' in t;
        if (t1)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      t1 = H.isSubtypeV2(type, null, t, null);
      return t1;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    isSubtypeV2: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.builtin$cls === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H.isSubtypeV2(s, sEnv, "type" in t ? t.type : null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H.isFunctionSubtypeV2(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : null;
        if ('futureOr' in s)
          return H.isSubtypeV2("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
        else if (H.isSubtypeV2(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
          return H.isSubtypeV2(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.builtin$cls;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypesV2(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    isFunctionSubtypeV2: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H.isSubtypeV2(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H.isSubtypeV2(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H.isSubtypeV2(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H.isSubtypeV2(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheckV2(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheckV2: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H.isSubtypeV2(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1;
      if (typeof other === "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else {
        t1 = J.allMatches$1$s(other, C.JSString_methods.substring$1(receiver, startIndex));
        t1 = t1.get$isEmpty(t1);
        return !t1;
      }
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var $length, t1, i, nativeRegexp;
      if (typeof pattern === "string")
        if (pattern === "")
          if (receiver === "")
            return replacement;
          else {
            $length = receiver.length;
            for (t1 = replacement, i = 0; i < $length; ++i)
              t1 = t1 + receiver[i] + replacement;
            return t1.charCodeAt(0) == 0 ? t1 : t1;
          }
        else
          return receiver.replace(new RegExp(pattern.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
      else if (pattern instanceof H.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, replacement.replace(/\$/g, "$$$$"));
      } else {
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;_collection$_map,$ti"
    },
    ConstantMap: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      $indexSet: function(_, key, val) {
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
        return H.ConstantMap__throwUnmodifiable();
      },
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;__js_helper$_length,_jsObject,_keys,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      containsKey$1: function(_, key) {
        if (typeof key !== "string")
          return false;
        if ("__proto__" === key)
          return false;
        return this._jsObject.hasOwnProperty(key);
      },
      $index: function(_, key) {
        if (!this.containsKey$1(0, key))
          return;
        return this._fetch$1(key);
      },
      _fetch$1: function(key) {
        return this._jsObject[H.stringTypeCheck(key)];
      },
      forEach$1: function(_, f) {
        var t1, keys, t2, i, key;
        t1 = H.getTypeArgumentByIndex(this, 1);
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), t1]});
        keys = this._keys;
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          key = keys[i];
          f.call$2(key, H.assertSubtypeOfRuntimeType(this._fetch$1(key), t1));
        }
      },
      get$keys: function(_) {
        return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      }
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;_map,$ti",
      get$iterator: function(_) {
        var t1 = this._map._keys;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      get$length: function(_) {
        return this._map._keys.length;
      }
    },
    GeneralConstantMap: {
      "^": "ConstantMap;_jsData,$ti",
      _getMap$0: function() {
        var backingMap = this.$map;
        if (backingMap == null) {
          backingMap = new H.JsLinkedHashMap(0, 0, this.$ti);
          H.fillLiteralMap(this._jsData, backingMap);
          this.$map = backingMap;
        }
        return backingMap;
      },
      containsKey$1: function(_, key) {
        return this._getMap$0().containsKey$1(0, key);
      },
      $index: function(_, key) {
        return this._getMap$0().$index(0, key);
      },
      forEach$1: function(_, f) {
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
        this._getMap$0().forEach$1(0, f);
      },
      get$keys: function(_) {
        var t1 = this._getMap$0();
        return t1.get$keys(t1);
      },
      get$length: function(_) {
        var t1 = this._getMap$0();
        return t1.get$length(t1);
      }
    },
    JSInvocationMirror: {
      "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_typeArgumentCount",
      get$memberName: function() {
        var t1 = this.__js_helper$_memberName;
        return t1;
      },
      get$positionalArguments: function() {
        var t1, argumentCount, list, index;
        if (this._kind === 1)
          return C.List_empty0;
        t1 = this._arguments;
        argumentCount = t1.length - this._namedArgumentNames.length - this._typeArgumentCount;
        if (argumentCount === 0)
          return C.List_empty0;
        list = [];
        for (index = 0; index < argumentCount; ++index) {
          if (index >= t1.length)
            return H.ioore(t1, index);
          list.push(t1[index]);
        }
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      },
      get$namedArguments: function() {
        var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5;
        if (this._kind !== 0)
          return C.Map_empty;
        t1 = this._namedArgumentNames;
        namedArgumentCount = t1.length;
        t2 = this._arguments;
        namedArgumentsStartIndex = t2.length - namedArgumentCount - this._typeArgumentCount;
        if (namedArgumentCount === 0)
          return C.Map_empty;
        t3 = P.Symbol0;
        map = new H.JsLinkedHashMap(0, 0, [t3, null]);
        for (i = 0; i < namedArgumentCount; ++i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t4 = t1[i];
          t5 = namedArgumentsStartIndex + i;
          if (t5 < 0 || t5 >= t2.length)
            return H.ioore(t2, t5);
          map.$indexSet(0, new H.Symbol(t4), t2[t5]);
        }
        return new H.ConstantMapView(map, [t3, null]);
      },
      $isInvocation: 1
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,0cachedSortedIndices",
      defaultValue$1: function(_, parameter) {
        var t1 = this.requiredParameterCount;
        if (typeof parameter !== "number")
          return parameter.$lt();
        if (parameter < t1)
          return;
        return this.data[3 + parameter - t1];
      },
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data = J.JSArray_markFixedList(data);
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
        }
      }
    },
    Primitives_initTicker_closure: {
      "^": "Closure:15;performance",
      call$0: function() {
        return C.JSNumber_methods.floor$0(1000 * this.performance.now());
      }
    },
    Primitives_functionNoSuchMethod_closure: {
      "^": "Closure:14;_box_0,namedArgumentList,$arguments",
      call$2: function($name, argument) {
        var t1;
        H.stringTypeCheck($name);
        t1 = this._box_0;
        t1.names = t1.names + "$" + H.S($name);
        C.JSArray_methods.add$1(this.namedArgumentList, $name);
        C.JSArray_methods.add$1(this.$arguments, argument);
        ++t1.argumentCount;
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = H.setRuntimeTypeInfo([], [P.String]);
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NullError: " + H.S(this._message);
        return "NullError: method not found: '" + t1 + "' on null";
      },
      static: {
        NullError$: function(_message, match) {
          return new H.NullError(_message, match == null ? null : match.method);
        }
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace<"
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:4;ex",
      call$1: function(error) {
        if (!!J.getInterceptor$(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,0_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name, t1;
        $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        t1 = "Closure '" + H.unminifyOrTag($name) + "'";
        return t1;
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, names, t1, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    TypeErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;message>",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        CastErrorImplementation$: function(value, type) {
          return new H.CastErrorImplementation("CastError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    RuntimeError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      },
      static: {
        RuntimeError$: function(message) {
          return new H.RuntimeError(message);
        }
      }
    },
    JsLinkedHashMap: {
      "^": "MapBase;__js_helper$_length,0_strings,0_nums,0_rest,0_first,0_last,_modifications,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$keys: function(_) {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(this), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(_, key) {
        var strings, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return false;
          return this._containsTableEntry$2(nums, key);
        } else
          return this.internalContainsKey$1(key);
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      addAll$1: function(_, other) {
        H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, t1, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].hashMapCellValue;
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(_, key, ifAbsent) {
        var value;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
        if (this.containsKey$1(0, key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      remove$1: function(_, key) {
        if (typeof key === "string")
          return this._removeHashTableEntry$2(this._strings, key);
        else if (typeof key === "number" && (key & 0x3ffffff) === key)
          return this._removeHashTableEntry$2(this._nums, key);
        else
          return this.internalRemove$1(key);
      },
      internalRemove$1: function(key) {
        var rest, bucket, index, cell;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        cell = bucket.splice(index, 1)[0];
        this._unlinkCell$1(cell);
        return cell.hashMapCellValue;
      },
      clear$0: function(_) {
        if (this.__js_helper$_length > 0) {
          this._last = null;
          this._first = null;
          this._rest = null;
          this._nums = null;
          this._strings = null;
          this.__js_helper$_length = 0;
          this._modified$0();
        }
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _removeHashTableEntry$2: function(table, key) {
        var cell;
        if (table == null)
          return;
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          return;
        this._unlinkCell$1(cell);
        this._deleteTableEntry$2(table, key);
        return cell.hashMapCellValue;
      },
      _modified$0: function() {
        this._modifications = this._modifications + 1 & 67108863;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modified$0();
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._previous;
        next = cell._next;
        if (previous == null)
          this._first = next;
        else
          previous._next = next;
        if (next == null)
          this._last = previous;
        else
          next._previous = previous;
        --this.__js_helper$_length;
        this._modified$0();
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isLinkedHashMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure;$this",
      call$1: [function(each) {
        var t1 = this.$this;
        return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
      }, null, null, 4, 0, null, 18, "call"],
      $signature: function() {
        var t1 = this.$this;
        return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
      }
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;$this",
      call$2: function(key, value) {
        var t1 = this.$this;
        t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
      },
      $signature: function() {
        var t1 = this.$this;
        return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,0_next,0_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;_map,$ti",
      get$length: function(_) {
        return this._map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this._map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
        t2._cell = t1._first;
        return t2;
      },
      contains$1: function(_, element) {
        return this._map.containsKey$1(0, element);
      },
      forEach$1: function(_, f) {
        var t1, cell, modifications;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        t1 = this._map;
        cell = t1._first;
        modifications = t1._modifications;
        for (; cell != null;) {
          f.call$1(cell.hashMapCellKey);
          if (modifications !== t1._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(t1));
          cell = cell._next;
        }
      }
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,0_cell,0_current,$ti",
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this._current = null;
            return false;
          } else {
            this._current = t1.hashMapCellKey;
            this._cell = t1._next;
            return true;
          }
        }
      }
    },
    initHooks_closure: {
      "^": "Closure:4;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:48;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:42;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,0_nativeGlobalRegExp,0_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m;
        if (typeof string !== "string")
          H.throwExpression(H.argumentErrorValue(string));
        m = this._nativeRegExp.exec(string);
        if (m == null)
          return;
        return new H._MatchImplementation(this, m);
      },
      $isPattern: 1,
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      $index: function(_, index) {
        var t1;
        H.intTypeCheck(index);
        t1 = this._match;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $isMatch: 1
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        return this.group$1(H.intTypeCheck(g));
      },
      group$1: function(group_) {
        if (group_ !== 0)
          throw H.wrapException(P.RangeError$value(group_, null, null));
        return this.pattern;
      },
      $isMatch: 1
    },
    _StringAllMatchesIterable: {
      "^": "Iterable;_input,_pattern,_index",
      get$iterator: function(_) {
        return new H._StringAllMatchesIterator(this._input, this._pattern, this._index);
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _StringAllMatchesIterator: {
      "^": "Object;_input,_pattern,_index,0_current",
      moveNext$0: function() {
        var t1, t2, t3, t4, t5, index, end;
        t1 = this._index;
        t2 = this._pattern;
        t3 = t2.length;
        t4 = this._input;
        t5 = t4.length;
        if (t1 + t3 > t5) {
          this._current = null;
          return false;
        }
        index = t4.indexOf(t2, t1);
        if (index < 0) {
          this._index = t5 + 1;
          this._current = null;
          return false;
        }
        end = index + t3;
        this._current = new H.StringMatch(index, t4, t2);
        this._index = end === this._index ? end + 1 : end;
        return true;
      },
      get$current: function() {
        return this._current;
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    NativeTypedData: {
      "^": "Interceptor;",
      $isTypedData: 1,
      "%": "DataView;ArrayBufferView;NativeTypedArray|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin|_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin|_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfInt"
    },
    NativeTypedArray: {
      "^": "NativeTypedData;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.doubleTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asFixedLengthListMixin: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      "%": "Float32Array|Float64Array"
    },
    NativeTypedArrayOfInt: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin;",
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.intTypeCheck(value);
        H._checkValidIndex(index, receiver, receiver.length);
        receiver[index] = value;
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asFixedLengthListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int16Array"
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int32Array"
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Int8Array"
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Uint16Array"
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;",
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "Uint32Array"
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": "CanvasPixelArray|Uint8ClampedArray"
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        H._checkValidIndex(index, receiver, receiver.length);
        return receiver[index];
      },
      "%": ";Uint8Array"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray+ListMixin;"
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin+FixedLengthListMixin;"
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 4, 0, 19],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 4, 0, 19],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 4, 0, 19],
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, [$T]);
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]})) {
        zone.toString;
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      }
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 2],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, currentZone;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception, error0;
      H.functionTypeCheck(userCode, {func: 1, ret: $T});
      H.functionTypeCheck(onSuccess, {func: 1, args: [$T]});
      H.functionTypeCheck(onError, {func: 1, args: [, P.StackTrace]});
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        H.interceptedTypeCheck(s, "$isStackTrace");
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$x(replacement);
          error = error0;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0();
      if (!!J.getInterceptor$(cancelFuture).$isFuture && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1) {
        if (t1) {
          zone.toString;
          t1 = false;
        } else
          t1 = true;
        f = !t1 ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      }
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:12;_box_0",
      call$1: [function(_) {
        var t1, f;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }, null, null, 4, 0, null, 1, "call"]
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:126;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback",
      call$0: [function() {
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _TimerImpl: {
      "^": "Object;_once,0_handle,_tick",
      _TimerImpl$2: function(milliseconds, callback) {
        if (self.setTimeout != null)
          this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
        else
          throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
      },
      static: {
        _TimerImpl$: function(milliseconds, callback) {
          var t1 = new P._TimerImpl(true, 0);
          t1._TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    _TimerImpl_internalCallback: {
      "^": "Closure:2;$this,callback",
      call$0: [function() {
        var t1 = this.$this;
        t1._handle = null;
        t1._tick = 1;
        this.callback.call$0();
      }, null, null, 0, 0, null, "call"]
    },
    _IterationMarker: {
      "^": "Object;value,state",
      toString$0: function(_) {
        return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
      },
      static: {
        _IterationMarker_yieldStar: function(values) {
          return new P._IterationMarker(values, 1);
        },
        _IterationMarker_endOfIteration: function() {
          return C._IterationMarker_null_2;
        },
        _IterationMarker_uncaughtError: function(error) {
          return new P._IterationMarker(error, 3);
        }
      }
    },
    _SyncStarIterator: {
      "^": "Object;_body,0_async$_current,0_nestedIterator,0_suspendedBodies,$ti",
      get$current: function() {
        var t1 = this._nestedIterator;
        if (t1 == null)
          return this._async$_current;
        return H.assertSubtypeOfRuntimeType(t1.get$current(), H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var t1, value, state, inner;
        for (; true;) {
          t1 = this._nestedIterator;
          if (t1 != null)
            if (t1.moveNext$0())
              return true;
            else
              this._nestedIterator = null;
          value = function(body, SUCCESS, ERROR) {
            var errorValue, errorCode = SUCCESS;
            while (true)
              try {
                return body(errorCode, errorValue);
              } catch (error) {
                errorValue = error;
                errorCode = ERROR;
              }
          }(this._body, 0, 1);
          if (value instanceof P._IterationMarker) {
            state = value.state;
            if (state === 2) {
              t1 = this._suspendedBodies;
              if (t1 == null || t1.length === 0) {
                this._async$_current = null;
                return false;
              }
              if (0 >= t1.length)
                return H.ioore(t1, -1);
              this._body = t1.pop();
              continue;
            } else {
              t1 = value.value;
              if (state === 3)
                throw t1;
              else {
                inner = J.get$iterator$ax(t1);
                if (!!inner.$is_SyncStarIterator) {
                  t1 = this._suspendedBodies;
                  if (t1 == null) {
                    t1 = [];
                    this._suspendedBodies = t1;
                  }
                  C.JSArray_methods.add$1(t1, this._body);
                  this._body = inner._body;
                  continue;
                } else {
                  this._nestedIterator = inner;
                  continue;
                }
              }
            }
          } else {
            this._async$_current = value;
            return true;
          }
        }
        return false;
      }
    },
    _SyncStarIterable: {
      "^": "IterableBase;_outerHelper,$ti",
      get$iterator: function(_) {
        return new P._SyncStarIterator(this._outerHelper(), this.$ti);
      }
    },
    _FutureListener: {
      "^": "Object;0_nextListener,result,state,callback,errorCallback,$ti",
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
      },
      handleError$1: function(asyncError) {
        var errorCallback, t1, t2, t3;
        errorCallback = this.errorCallback;
        t1 = P.Object;
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
        t3 = this.result._zone;
        if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
          return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
        else
          return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone,0_resultOrListeners<,$ti",
      then$1$2$onError: function(f, onError, $R) {
        var t1, currentZone;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$1$2(f, onError, $R);
      },
      then$1$1: function(f, $R) {
        return this.then$1$2$onError(f, null, $R);
      },
      _thenNoZoneRegistration$1$2: function(f, onError, $E) {
        var t1, result, t2;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
        result = new P._Future(0, $.Zone__current, [$E]);
        t2 = onError == null ? 1 : 3;
        this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
        return result;
      },
      whenComplete$1: function(action) {
        var t1, result;
        H.functionTypeCheck(action, {func: 1});
        t1 = $.Zone__current;
        result = new P._Future(0, t1, this.$ti);
        if (t1 !== C.C__RootZone) {
          t1.toString;
          H.functionTypeCheck(action, {func: 1, ret: null});
        }
        t1 = H.getTypeArgumentByIndex(this, 0);
        this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
        return result;
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._addListener$1(listener);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, t1, existingListeners, cursor, cursor0, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        if (listeners == null)
          return;
        t1 = this._state;
        if (t1 <= 1) {
          existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
        }
      },
      _removeListeners$0: function() {
        var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, t2, t3, listeners;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.futureOrCheck(value, {futureOr: 1, type: t1});
        t2 = this.$ti;
        t3 = H.checkSubtypeV2(value, "$isFuture", t2, "$asFuture");
        if (t3) {
          t1 = H.checkSubtypeV2(value, "$is_Future", t2, null);
          if (t1)
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        } else {
          listeners = this._removeListeners$0();
          H.assertSubtypeOfRuntimeType(value, t1);
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 4, 2, 73, 10, 11, 12],
      $isFuture: 1,
      static: {
        _Future$zoneValue: function(value, _zone, $T) {
          var t1 = new P._Future(0, _zone, [$T]);
          H.assertSubtypeOfRuntimeType(value, $T);
          t1._state = 4;
          t1._resultOrListeners = value;
          return t1;
        },
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          target._state = 1;
          try {
            source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, listeners;
          for (; t1 = source._state, t1 === 2;)
            source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
          if (t1 >= 4) {
            listeners = target._removeListeners$0();
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
          _box_1 = {};
          _box_1.source = source;
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1._state === 8;
            if (listeners == null) {
              if (hasError) {
                asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
                t1 = t1._zone;
                t2 = asyncError.error;
                t3 = asyncError.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            t1 = _box_1.source;
            sourceResult = t1._resultOrListeners;
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (t2) {
              t3 = listeners.state;
              t3 = (t3 & 1) !== 0 || t3 === 8;
            } else
              t3 = true;
            if (t3) {
              t3 = listeners.result;
              zone = t3._zone;
              if (hasError) {
                t4 = t1._zone;
                t4.toString;
                t4 = t4 == null ? zone == null : t4 === zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                H.interceptedTypeCheck(sourceResult, "$isAsyncError");
                t1 = t1._zone;
                t2 = sourceResult.error;
                t3 = sourceResult.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone == null ? zone != null : oldZone !== zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              t1 = listeners.state;
              if (t1 === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
              else if (t2) {
                if ((t1 & 1) !== 0)
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if ((t1 & 2) !== 0)
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor$(t1).$isFuture) {
                if (t1._state >= 4) {
                  current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                  t3._resultOrListeners = null;
                  listeners = t3._reverseListeners$1(current);
                  t3._state = t1._state;
                  t3._resultOrListeners = t1._resultOrListeners;
                  _box_1.source = t1;
                  continue;
                } else
                  P._Future__chainCoreFuture(t1, t3);
                return;
              }
            }
            result = listeners.result;
            current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1) {
              H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
              result._state = 4;
              result._resultOrListeners = t2;
            } else {
              H.interceptedTypeCheck(t2, "$isAsyncError");
              result._state = 8;
              result._resultOrListeners = t2;
            }
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:12;target",
      call$1: function(value) {
        var t1 = this.target;
        t1._state = 0;
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:74;target",
      call$2: [function(error, stackTrace) {
        this.target._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }, function(error) {
        return this.call$2(error, null);
      }, "call$1", null, null, null, 4, 2, null, 10, 11, 12, "call"]
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:2;_box_1,_box_0,listener,hasError",
      call$0: function() {
        var completeResult, e, s, t1, exception, t2, originalSource;
        completeResult = null;
        try {
          t1 = this.listener;
          completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor$(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = H.interceptedTypeCheck(completeResult.get$_resultOrListeners(), "$isAsyncError");
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:112;originalSource",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:2;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, t1, t2, t3, t4, exception;
        try {
          t1 = this.listener;
          t1.toString;
          t2 = H.getTypeArgumentByIndex(t1, 0);
          t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
          t4 = H.getTypeArgumentByIndex(t1, 1);
          this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:2;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t2 = t1.error;
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1;
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,0next"
    },
    Stream: {
      "^": "Object;$ti",
      forEach$1: function(_, action) {
        var t1, future;
        t1 = {};
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Stream", 0)]});
        future = new P._Future(0, $.Zone__current, [null]);
        t1.subscription = null;
        t1.subscription = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
        return future;
      },
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.int]);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      }
    },
    Stream_forEach_closure: {
      "^": "Closure;_box_0,$this,action,future",
      call$1: [function(element) {
        P._runUserCode(new P.Stream_forEach__closure(this.action, H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgument(this.$this, "Stream", 0))), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0.subscription, this.future), null);
      }, null, null, 4, 0, null, 5, "call"],
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_forEach__closure: {
      "^": "Closure:2;action,element",
      call$0: function() {
        return this.action.call$1(this.element);
      }
    },
    Stream_forEach__closure0: {
      "^": "Closure:12;",
      call$1: function(_) {
      }
    },
    Stream_forEach_closure0: {
      "^": "Closure:0;future",
      call$0: [function() {
        this.future._complete$1(null);
      }, null, null, 0, 0, null, "call"]
    },
    Stream_length_closure: {
      "^": "Closure;_box_0,$this",
      call$1: [function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
        ++this._box_0.count;
      }, null, null, 4, 0, null, 1, "call"],
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future",
      call$0: [function() {
        this.future._complete$1(this._box_0.count);
      }, null, null, 0, 0, null, "call"]
    },
    StreamSubscription: {
      "^": "Object;$ti"
    },
    StreamTransformerBase: {
      "^": "Object;"
    },
    _cancelAndError_closure: {
      "^": "Closure:2;future,error,stackTrace",
      call$0: function() {
        return this.future._completeError$2(this.error, this.stackTrace);
      }
    },
    _cancelAndErrorClosure_closure: {
      "^": "Closure:117;subscription,future",
      call$2: function(error, stackTrace) {
        P._cancelAndError(this.subscription, this.future, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      }
    },
    AsyncError: {
      "^": "Object;error>,stackTrace<",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;",
      $isZone: 1
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = t2.toString$0(0);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$0();
            return;
          }
          P._rootRun(null, null, this, f, -1);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runUnaryGuarded$1$2: function(f, arg, $T) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$1(arg);
            return;
          }
          P._rootRunUnary(null, null, this, f, arg, -1, $T);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      bindCallback$1$1: function(f, $R) {
        return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
      },
      bindCallbackGuarded$1: function(f) {
        return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      },
      bindUnaryCallbackGuarded$1$1: function(f, $T) {
        return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
      },
      $index: function(_, key) {
        return;
      },
      run$1$1: function(f, $R) {
        H.functionTypeCheck(f, {func: 1, ret: $R});
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f, $R);
      },
      runUnary$2$2: function(f, arg, $R, $T) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg, $R, $T);
      },
      runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
      },
      registerBinaryCallback$3$1: function(f, $R, T1, T2) {
        return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure;$this,f,R",
      call$0: function() {
        return this.$this.run$1$1(this.f, this.R);
      },
      $signature: function() {
        return {func: 1, ret: this.R};
      }
    },
    _RootZone_bindCallbackGuarded_closure: {
      "^": "Closure:2;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindUnaryCallbackGuarded_closure: {
      "^": "Closure;$this,f,T",
      call$1: [function(arg) {
        var t1 = this.T;
        return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
      }, null, null, 4, 0, null, 31, "call"],
      $signature: function() {
        return {func: 1, ret: -1, args: [this.T]};
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap(0, 0, [$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap(0, 0, [null, null]);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._LinkedHashSet(0, 0, [$E]);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = [];
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2.set$_contents(P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", "));
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1.set$_contents(t1.get$_contents() + rightDelimiter);
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      it = J.get$iterator$ax(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$fromIterable: function(iterable, key, value, $K, $V) {
      var map;
      H.functionTypeCheck(key, {func: 1, ret: $K, args: [,]});
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      P.MapBase__fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        t2 = result;
        t2.set$_contents(t2.get$_contents() + "{");
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        t1 = result;
        t1.set$_contents(t1.get$_contents() + "}");
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: [function(x) {
      return x;
    }, "call$1", "collection_MapBase__id$closure", 4, 0, 4],
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, _i, element;
      H.functionTypeCheck(key, {func: 1, args: [,]});
      for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
        element = iterable[_i];
        map.$indexSet(0, key.call$1(element), P.collection_MapBase__id$closure().call$1(element));
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,0_collection$_strings,0_collection$_nums,0_collection$_rest,0_collection$_first,0_collection$_last,_collection$_modifications,$ti",
      _newSet$0: function() {
        return new P._LinkedHashSet(0, 0, this.$ti);
      },
      get$iterator: function(_) {
        var t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, this.$ti);
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      contains$1: function(_, object) {
        var strings, nums;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
        } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
          nums = this._collection$_nums;
          if (nums == null)
            return false;
          return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
        } else
          return this._contains$1(object);
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
      },
      forEach$1: function(_, action) {
        var t1, cell, modifications;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1]});
        cell = this._collection$_first;
        modifications = this._collection$_modifications;
        for (; cell != null;) {
          action.call$1(H.assertSubtypeOfRuntimeType(cell._element, t1));
          if (modifications !== this._collection$_modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell._collection$_next;
        }
      },
      get$first: function(_) {
        var t1 = this._collection$_first;
        if (t1 == null)
          throw H.wrapException(P.StateError$("No elements"));
        return H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0));
      },
      get$last: function(_) {
        var t1 = this._collection$_last;
        if (t1 == null)
          throw H.wrapException(P.StateError$("No elements"));
        return H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0));
      },
      add$1: function(_, element) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._LinkedHashSet__newHashTable();
            this._collection$_strings = strings;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._LinkedHashSet__newHashTable();
            this._collection$_nums = nums;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        if (typeof object === "string" && object !== "__proto__")
          return this._collection$_removeHashTableEntry$2(this._collection$_strings, object);
        else if (typeof object === "number" && (object & 0x3ffffff) === object)
          return this._collection$_removeHashTableEntry$2(this._collection$_nums, object);
        else
          return this._remove$1(object);
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = this._getBucket$2(rest, object);
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _collection$_removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
        if (cell == null)
          return false;
        this._collection$_unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_modified$0: function() {
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)));
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modified$0();
        return cell;
      },
      _collection$_unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._collection$_previous;
        next = cell._collection$_next;
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modified$0();
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _getBucket$2: function(table, element) {
        return table[this._computeHashCode$1(element)];
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i]._element, element))
            return i;
        return -1;
      },
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_element,0_collection$_next,0_collection$_previous"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,0_collection$_cell,0_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this._collection$_current = null;
            return false;
          } else {
            this._collection$_current = H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(this, 0));
            this._collection$_cell = t1._collection$_next;
            return true;
          }
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;",
      toSet$0: function(_) {
        var t1 = this._newSet$0();
        t1.addAll$1(0, this);
        return t1;
      }
    },
    IterableMixin: {
      "^": "Object;$ti",
      forEach$1: function(_, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "IterableMixin", 0)]});
        for (t1 = this._inventory$_items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          f.call$1(t1.__interceptors$_current);
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "IterableMixin", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var t1, it, count;
        t1 = this._inventory$_items;
        it = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        var t1 = this._inventory$_items;
        return !new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]).moveNext$0();
      },
      get$first: function(_) {
        var t1, it;
        t1 = this._inventory$_items;
        it = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.__interceptors$_current;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this._inventory$_items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), elementIndex = 0; t1.moveNext$0();) {
          element = t1.__interceptors$_current;
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $isIterable: 1
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:9;result,K,V",
      call$2: function(k, v) {
        this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
      }
    },
    ListBase: {
      "^": "_ListBase_Object_ListMixin;",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      forEach$1: function(receiver, action) {
        var $length, i;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]});
        $length = this.get$length(receiver);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          action.call$1(this.$index(receiver, i));
          if ($length !== this.get$length(receiver))
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      map$1$1: function(receiver, f, $T) {
        var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
        return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
      },
      skip$1: function(receiver, count) {
        return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      },
      toList$1$growable: function(receiver, growable) {
        var result, i, t1;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
        i = 0;
        while (true) {
          t1 = this.get$length(receiver);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          C.JSArray_methods.$indexSet(result, i, this.$index(receiver, i));
          ++i;
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      add$1: function(receiver, element) {
        var t1;
        H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return t1.$add();
        this.set$length(receiver, t1 + 1);
        this.$indexSet(receiver, t1, element);
      },
      $add: function(receiver, other) {
        var t1, result, t2;
        t1 = [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)];
        H.assertSubtype(other, "$isList", t1, "$asList");
        result = H.setRuntimeTypeInfo([], t1);
        t1 = this.get$length(receiver);
        t2 = J.get$length$asx(other);
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        C.JSArray_methods.set$length(result, t1 + t2);
        C.JSArray_methods.setRange$3(result, 0, this.get$length(receiver), receiver);
        C.JSArray_methods.setRange$3(result, this.get$length(receiver), result.length, other);
        return result;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      }
    },
    MapBase: {
      "^": "MapMixin;"
    },
    MapBase_mapToString_closure: {
      "^": "Closure:9;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    MapMixin: {
      "^": "Object;$ti",
      forEach$1: function(receiver, action) {
        var t1, key;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]});
        for (t1 = J.get$iterator$ax(this.get$keys(receiver)); t1.moveNext$0();) {
          key = t1.get$current();
          action.call$2(key, this.$index(receiver, key));
        }
      },
      containsKey$1: function(receiver, key) {
        return J.contains$1$asx(this.get$keys(receiver), key);
      },
      get$length: function(receiver) {
        return J.get$length$asx(this.get$keys(receiver));
      },
      get$isEmpty: function(receiver) {
        return J.get$isEmpty$asx(this.get$keys(receiver));
      },
      toString$0: function(receiver) {
        return P.MapBase_mapToString(receiver);
      },
      $isMap: 1
    },
    _UnmodifiableMapMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, key, value) {
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
      }
    },
    MapView: {
      "^": "Object;$ti",
      $index: function(_, key) {
        return this._collection$_map.$index(0, key);
      },
      $indexSet: function(_, key, value) {
        this._collection$_map.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
      },
      containsKey$1: function(_, key) {
        return this._collection$_map.containsKey$1(0, key);
      },
      forEach$1: function(_, action) {
        this._collection$_map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
      },
      get$isEmpty: function(_) {
        var t1 = this._collection$_map;
        return t1.get$isEmpty(t1);
      },
      get$length: function(_) {
        var t1 = this._collection$_map;
        return t1.get$length(t1);
      },
      get$keys: function(_) {
        var t1 = this._collection$_map;
        return t1.get$keys(t1);
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this._collection$_map);
      },
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "_UnmodifiableMapView_MapView__UnmodifiableMapMixin;$ti"
    },
    Queue: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    ListQueue: {
      "^": "ListIterable;0_table,_head,_tail,_modificationCount,$ti",
      get$iterator: function(_) {
        return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, this.$ti);
      },
      forEach$1: function(_, f) {
        var modificationCount, i, t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
        modificationCount = this._modificationCount;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          f.call$1(t1[i]);
          if (modificationCount !== this._modificationCount)
            H.throwExpression(P.ConcurrentModificationError$(this));
        }
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      get$last: function(_) {
        var t1, t2, t3;
        t1 = this._head;
        t2 = this._tail;
        if (t1 === t2)
          throw H.wrapException(H.IterableElementError_noElement());
        t1 = this._table;
        t3 = t1.length;
        t2 = (t2 - 1 & t3 - 1) >>> 0;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      elementAt$1: function(_, index) {
        var $length, t1, t2, t3;
        $length = this.get$length(this);
        if (typeof index !== "number")
          return H.iae(index);
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._table;
        t2 = t1.length;
        t3 = (this._head + index & t2 - 1) >>> 0;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      add$1: function(_, value) {
        this._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
      },
      remove$1: function(_, value) {
        var i, t1;
        for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
          t1 = this._table;
          if (i < 0 || i >= t1.length)
            return H.ioore(t1, i);
          if (J.$eq$(t1[i], value)) {
            this._remove$1(i);
            ++this._modificationCount;
            return true;
          }
        }
        return false;
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      removeFirst$0: function() {
        var t1, t2, result;
        t1 = this._head;
        if (t1 === this._tail)
          throw H.wrapException(H.IterableElementError_noElement());
        ++this._modificationCount;
        t2 = this._table;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        result = t2[t1];
        C.JSArray_methods.$indexSet(t2, t1, null);
        this._head = (this._head + 1 & this._table.length - 1) >>> 0;
        return result;
      },
      _add$1: function(element) {
        var t1;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        C.JSArray_methods.$indexSet(this._table, this._tail, element);
        t1 = (this._tail + 1 & this._table.length - 1) >>> 0;
        this._tail = t1;
        if (this._head === t1)
          this._grow$0();
        ++this._modificationCount;
      },
      _remove$1: function(offset) {
        var mask, t1, t2, i, prevOffset, nextOffset;
        mask = this._table.length - 1;
        t1 = this._head;
        t2 = this._tail;
        if ((offset - t1 & mask) >>> 0 < (t2 - offset & mask) >>> 0) {
          for (i = offset; t1 = this._head, i !== t1; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            t1 = this._table;
            if (prevOffset < 0 || prevOffset >= t1.length)
              return H.ioore(t1, prevOffset);
            t2 = t1[prevOffset];
            if (i < 0 || i >= t1.length)
              return H.ioore(t1, i);
            t1[i] = t2;
          }
          C.JSArray_methods.$indexSet(this._table, t1, null);
          this._head = (this._head + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else {
          this._tail = (t2 - 1 & mask) >>> 0;
          for (i = offset; t1 = this._tail, i !== t1; i = nextOffset) {
            nextOffset = (i + 1 & mask) >>> 0;
            t1 = this._table;
            if (nextOffset < 0 || nextOffset >= t1.length)
              return H.ioore(t1, nextOffset);
            t2 = t1[nextOffset];
            if (i < 0 || i >= t1.length)
              return H.ioore(t1, i);
            t1[i] = t2;
          }
          C.JSArray_methods.$indexSet(this._table, t1, null);
          return offset;
        }
      },
      _grow$0: function() {
        var t1, newTable, t2, split;
        t1 = new Array(this._table.length * 2);
        t1.fixed$length = Array;
        newTable = H.setRuntimeTypeInfo(t1, this.$ti);
        t1 = this._table;
        t2 = this._head;
        split = t1.length - t2;
        C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
        C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
        this._head = 0;
        this._tail = this._table.length;
        this._table = newTable;
      },
      $isQueue: 1,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1, t2;
          t1 = new P.ListQueue(0, 0, 0, [$E]);
          if (initialCapacity == null || initialCapacity < 8)
            initialCapacity = 8;
          else {
            if (typeof initialCapacity !== "number")
              return initialCapacity.$sub();
            if ((initialCapacity & initialCapacity - 1) >>> 0 !== 0)
              initialCapacity = P.ListQueue__nextPowerOf2(initialCapacity);
          }
          if (typeof initialCapacity !== "number")
            return H.iae(initialCapacity);
          t2 = new Array(initialCapacity);
          t2.fixed$length = Array;
          t1._table = H.setRuntimeTypeInfo(t2, [$E]);
          return t1;
        },
        ListQueue_ListQueue$from: function(elements, $E) {
          var queue, i;
          queue = P.ListQueue$(2, $E);
          for (i = 0; i < 1; ++i)
            C.JSArray_methods.$indexSet(queue._table, i, H.assertSubtypeOfRuntimeType(elements[i], $E));
          queue._tail = 1;
          return queue;
        },
        ListQueue__nextPowerOf2: function(number) {
          var nextNumber;
          if (typeof number !== "number")
            return number.$shl();
          number = (number << 1 >>> 0) - 1;
          for (; true; number = nextNumber) {
            nextNumber = (number & number - 1) >>> 0;
            if (nextNumber === 0)
              return number;
          }
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_collection$_position,0_collection$_current,$ti",
      get$current: function() {
        return this._collection$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(t1));
        t2 = this._collection$_position;
        if (t2 === this._end) {
          this._collection$_current = null;
          return false;
        }
        t1 = t1._table;
        t3 = t1.length;
        if (t2 >= t3)
          return H.ioore(t1, t2);
        this._collection$_current = t1[t2];
        this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
        return true;
      }
    },
    SetMixin: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", [H.getRuntimeTypeArgument(this, "SetMixin", 0)], "$asIterable")); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      toList$1$growable: function(_, growable) {
        var result, t1, i, i0;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "SetMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
          i0 = i + 1;
          C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
        }
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      forEach$1: function(_, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "SetMixin", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1._collection$_current);
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = this.get$iterator(this);
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator._collection$_current);
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator._collection$_current);
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator._collection$_current);
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "SetMixin", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1._collection$_current;
          if (test.call$1(element))
            return element;
        }
        throw H.wrapException(H.IterableElementError_noElement());
      },
      firstWhere$1: function($receiver, test) {
        return this.firstWhere$2$orElse($receiver, test, null);
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1._collection$_current;
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    SetBase: {
      "^": "SetMixin;"
    },
    _ListBase_Object_ListMixin: {
      "^": "Object+ListMixin;"
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: {
      "^": "MapView+_UnmodifiableMapMixin;$ti"
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    _defaultToEncodable: [function(object) {
      return object.toJson$0();
    }, "call$1", "convert___defaultToEncodable$closure", 4, 0, 4, 33],
    _JsonMap: {
      "^": "MapBase;_original,_processed,0_data",
      $index: function(_, key) {
        var t1, result;
        t1 = this._processed;
        if (t1 == null)
          return this._data.$index(0, key);
        else if (typeof key !== "string")
          return;
        else {
          result = t1[key];
          return typeof result == "undefined" ? this._convert$_process$1(key) : result;
        }
      },
      get$length: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          t1 = t1.get$length(t1);
        } else
          t1 = this._computeKeys$0().length;
        return t1;
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      get$keys: function(_) {
        var t1;
        if (this._processed == null) {
          t1 = this._data;
          return t1.get$keys(t1);
        }
        return new P._JsonMapKeyIterable(this);
      },
      $indexSet: function(_, key, value) {
        var processed, original;
        if (this._processed == null)
          this._data.$indexSet(0, key, value);
        else if (this.containsKey$1(0, key)) {
          processed = this._processed;
          processed[key] = value;
          original = this._original;
          if (original == null ? processed != null : original !== processed)
            original[key] = null;
        } else
          this._upgrade$0().$indexSet(0, key, value);
      },
      containsKey$1: function(_, key) {
        if (this._processed == null)
          return this._data.containsKey$1(0, key);
        if (typeof key !== "string")
          return false;
        return Object.prototype.hasOwnProperty.call(this._original, key);
      },
      forEach$1: function(_, f) {
        var keys, i, key, value;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
        if (this._processed == null)
          return this._data.forEach$1(0, f);
        keys = this._computeKeys$0();
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          value = this._processed[key];
          if (typeof value == "undefined") {
            value = P._convertJsonToDartLazy(this._original[key]);
            this._processed[key] = value;
          }
          f.call$2(key, value);
          if (keys !== this._data)
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
      },
      _computeKeys$0: function() {
        var keys = H.listTypeCheck(this._data);
        if (keys == null) {
          keys = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
          this._data = keys;
        }
        return keys;
      },
      _upgrade$0: function() {
        var result, keys, i, t1, key;
        if (this._processed == null)
          return this._data;
        result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
        keys = this._computeKeys$0();
        for (i = 0; t1 = keys.length, i < t1; ++i) {
          key = keys[i];
          result.$indexSet(0, key, this.$index(0, key));
        }
        if (t1 === 0)
          C.JSArray_methods.add$1(keys, null);
        else
          C.JSArray_methods.set$length(keys, 0);
        this._processed = null;
        this._original = null;
        this._data = result;
        return result;
      },
      _convert$_process$1: function(key) {
        var result;
        if (!Object.prototype.hasOwnProperty.call(this._original, key))
          return;
        result = P._convertJsonToDartLazy(this._original[key]);
        return this._processed[key] = result;
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $asMap: function() {
        return [P.String, null];
      }
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;_convert$_parent",
      get$length: function(_) {
        var t1 = this._convert$_parent;
        return t1.get$length(t1);
      },
      elementAt$1: function(_, index) {
        var t1 = this._convert$_parent;
        if (t1._processed == null)
          t1 = t1.get$keys(t1).elementAt$1(0, index);
        else {
          t1 = t1._computeKeys$0();
          if (index >>> 0 !== index || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
        }
        return t1;
      },
      get$iterator: function(_) {
        var t1 = this._convert$_parent;
        if (t1._processed == null) {
          t1 = t1.get$keys(t1);
          t1 = t1.get$iterator(t1);
        } else {
          t1 = t1._computeKeys$0();
          t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
        }
        return t1;
      },
      contains$1: function(_, key) {
        return this._convert$_parent.containsKey$1(0, key);
      },
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $asListIterable: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      }
    },
    Codec: {
      "^": "Object;$ti"
    },
    Converter: {
      "^": "StreamTransformerBase;$ti"
    },
    JsonUnsupportedObjectError: {
      "^": "Error;unsupportedObject,cause,partialResult",
      toString$0: function(_) {
        var safeString = P.Error_safeToString(this.unsupportedObject);
        return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + H.S(safeString);
      },
      static: {
        JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
          return new P.JsonUnsupportedObjectError(unsupportedObject, cause, partialResult);
        }
      }
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;unsupportedObject,cause,partialResult",
      toString$0: function(_) {
        return "Cyclic error in JSON stringify";
      }
    },
    JsonCodec: {
      "^": "Codec;_reviver,_toEncodable",
      decode$2$reviver: function(_, source, reviver) {
        var t1 = P._parseJson(source, this.get$decoder()._reviver);
        return t1;
      },
      decode$1: function($receiver, source) {
        return this.decode$2$reviver($receiver, source, null);
      },
      encode$2$toEncodable: function(value, toEncodable) {
        var t1 = this.get$encoder();
        t1 = P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
        return t1;
      },
      encode$1: function(value) {
        return this.encode$2$toEncodable(value, null);
      },
      get$encoder: function() {
        return C.JsonEncoder_null_null;
      },
      get$decoder: function() {
        return C.JsonDecoder_null;
      },
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;indent,_toEncodable",
      $asConverter: function() {
        return [P.Object, P.String];
      }
    },
    JsonDecoder: {
      "^": "Converter;_reviver",
      $asConverter: function() {
        return [P.String, P.Object];
      }
    },
    _JsonStringifier: {
      "^": "Object;",
      writeStringContent$1: function(s) {
        var $length, t1, offset, i, charCode, t2;
        $length = s.length;
        for (t1 = J.getInterceptor$s(s), offset = 0, i = 0; i < $length; ++i) {
          charCode = t1._codeUnitAt$1(s, i);
          if (charCode > 92)
            continue;
          if (charCode < 32) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            switch (charCode) {
              case 8:
                this.writeCharCode$1(98);
                break;
              case 9:
                this.writeCharCode$1(116);
                break;
              case 10:
                this.writeCharCode$1(110);
                break;
              case 12:
                this.writeCharCode$1(102);
                break;
              case 13:
                this.writeCharCode$1(114);
                break;
              default:
                this.writeCharCode$1(117);
                this.writeCharCode$1(48);
                this.writeCharCode$1(48);
                t2 = charCode >>> 4 & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                t2 = charCode & 15;
                this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
                break;
            }
          } else if (charCode === 34 || charCode === 92) {
            if (i > offset)
              this.writeStringSlice$3(s, offset, i);
            offset = i + 1;
            this.writeCharCode$1(92);
            this.writeCharCode$1(charCode);
          }
        }
        if (offset === 0)
          this.writeString$1(s);
        else if (offset < $length)
          this.writeStringSlice$3(s, offset, $length);
      },
      _checkCycle$1: function(object) {
        var t1, t2, i, t3;
        for (t1 = this._convert$_seen, t2 = t1.length, i = 0; i < t2; ++i) {
          t3 = t1[i];
          if (object == null ? t3 == null : object === t3)
            throw H.wrapException(new P.JsonCyclicError(object, null, null));
        }
        C.JSArray_methods.add$1(t1, object);
      },
      writeObject$1: function(object) {
        var customJson, e, t1, exception;
        if (this.writeJsonValue$1(object))
          return;
        this._checkCycle$1(object);
        try {
          customJson = this._toEncodable.call$1(object);
          if (!this.writeJsonValue$1(customJson)) {
            t1 = P.JsonUnsupportedObjectError$(object, null, this.get$_partialResult());
            throw H.wrapException(t1);
          }
          t1 = this._convert$_seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = P.JsonUnsupportedObjectError$(object, e, this.get$_partialResult());
          throw H.wrapException(t1);
        }
      },
      writeJsonValue$1: function(object) {
        var t1, success;
        if (typeof object === "number") {
          if (!isFinite(object))
            return false;
          this.writeNumber$1(object);
          return true;
        } else if (object === true) {
          this.writeString$1("true");
          return true;
        } else if (object === false) {
          this.writeString$1("false");
          return true;
        } else if (object == null) {
          this.writeString$1("null");
          return true;
        } else if (typeof object === "string") {
          this.writeString$1('"');
          this.writeStringContent$1(object);
          this.writeString$1('"');
          return true;
        } else {
          t1 = J.getInterceptor$(object);
          if (!!t1.$isList) {
            this._checkCycle$1(object);
            this.writeList$1(object);
            t1 = this._convert$_seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return true;
          } else if (!!t1.$isMap) {
            this._checkCycle$1(object);
            success = this.writeMap$1(object);
            t1 = this._convert$_seen;
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            t1.pop();
            return success;
          } else
            return false;
        }
      },
      writeList$1: function(list) {
        var t1, t2, i;
        this.writeString$1("[");
        t1 = J.getInterceptor$asx(list);
        t2 = t1.get$length(list);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (t2 > 0) {
          this.writeObject$1(t1.$index(list, 0));
          i = 1;
          while (true) {
            t2 = t1.get$length(list);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            this.writeString$1(",");
            this.writeObject$1(t1.$index(list, i));
            ++i;
          }
        }
        this.writeString$1("]");
      },
      writeMap$1: function(map) {
        var _box_0, t1, t2, keyValueList, separator, i;
        _box_0 = {};
        t1 = J.getInterceptor$asx(map);
        if (t1.get$isEmpty(map)) {
          this.writeString$1("{}");
          return true;
        }
        t2 = t1.get$length(map);
        if (typeof t2 !== "number")
          return t2.$mul();
        t2 *= 2;
        keyValueList = new Array(t2);
        keyValueList.fixed$length = Array;
        _box_0.i = 0;
        _box_0.allStringKeys = true;
        t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
        if (!_box_0.allStringKeys)
          return false;
        this.writeString$1("{");
        for (separator = '"', i = 0; i < t2; i += 2, separator = ',"') {
          this.writeString$1(separator);
          this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
          this.writeString$1('":');
          t1 = i + 1;
          if (t1 >= t2)
            return H.ioore(keyValueList, t1);
          this.writeObject$1(keyValueList[t1]);
        }
        this.writeString$1("}");
        return true;
      }
    },
    _JsonStringifier_writeMap_closure: {
      "^": "Closure:9;_box_0,keyValueList",
      call$2: function(key, value) {
        var t1, t2;
        if (typeof key !== "string")
          this._box_0.allStringKeys = false;
        t1 = this.keyValueList;
        t2 = this._box_0;
        C.JSArray_methods.$indexSet(t1, t2.i++, key);
        C.JSArray_methods.$indexSet(t1, t2.i++, value);
      }
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;_convert$_sink,_convert$_seen,_toEncodable",
      get$_partialResult: function() {
        var t1 = this._convert$_sink;
        return !!t1.$isStringBuffer ? t1.toString$0(0) : null;
      },
      writeNumber$1: function(number) {
        this._convert$_sink.write$1(C.JSNumber_methods.toString$0(number));
      },
      writeString$1: function(string) {
        this._convert$_sink.write$1(string);
      },
      writeStringSlice$3: function(string, start, end) {
        this._convert$_sink.write$1(J.substring$2$s(string, start, end));
      },
      writeCharCode$1: function(charCode) {
        this._convert$_sink.writeCharCode$1(charCode);
      },
      static: {
        _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
          var output, t1;
          output = new P.StringBuffer("");
          P._JsonStringStringifier_printOn(object, output, toEncodable, indent);
          t1 = output._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        },
        _JsonStringStringifier_printOn: function(object, output, toEncodable, indent) {
          var stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
          stringifier.writeObject$1(object);
        }
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var result, i;
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t1, list, t2;
      t1 = [$E];
      list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var t1, len;
      t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len, null, null, null);
        if (start <= 0) {
          if (typeof end !== "number")
            return end.$lt();
          t1 = end < len;
        } else
          t1 = true;
        return H.Primitives_stringFromCharCodes(t1 ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, null, null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false));
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    print: function(object) {
      H.printString(object);
    },
    NoSuchMethodError_toString_closure: {
      "^": "Closure:132;_box_0,sb",
      call$2: function(key, value) {
        var t1, t2, t3;
        H.interceptedTypeCheck(key, "$isSymbol0");
        t1 = this.sb;
        t2 = this._box_0;
        t1._contents += t2.comma;
        t3 = t1._contents += H.S(key.__internal$_name);
        t1._contents = t3 + ": ";
        t1._contents += H.S(P.Error_safeToString(value));
        t2.comma = ", ";
      }
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    DateTime: {
      "^": "Object;_core$_value,isUtc",
      add$1: function(_, duration) {
        return P.DateTime$_withValue(C.JSInt_methods.$add(this._core$_value, H.interceptedTypeCheck(duration, "$isDuration").get$inMilliseconds()), this.isUtc);
      },
      get$millisecondsSinceEpoch: function() {
        return this._core$_value;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.DateTime))
          return false;
        return this._core$_value === other._core$_value && this.isUtc === other.isUtc;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._core$_value, H.interceptedTypeCheck(other, "$isDateTime")._core$_value);
      },
      get$hashCode: function(_) {
        var t1 = this._core$_value;
        return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
      },
      toString$0: function(_) {
        var y, m, d, h, min, sec, ms;
        y = P.DateTime__fourDigits(H.Primitives_getYear(this));
        m = P.DateTime__twoDigits(H.Primitives_getMonth(this));
        d = P.DateTime__twoDigits(H.Primitives_getDay(this));
        h = P.DateTime__twoDigits(H.Primitives_getHours(this));
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(this));
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(this));
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(this));
        if (this.isUtc)
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
        else
          return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.DateTime];
      },
      static: {
        DateTime$_withValue: function(_value, isUtc) {
          var t1, t2;
          t1 = new P.DateTime(_value, isUtc);
          if (Math.abs(_value) <= 864e13)
            t2 = false;
          else
            t2 = true;
          if (t2)
            H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + t1.get$millisecondsSinceEpoch()));
          return t1;
        },
        DateTime__fourDigits: function(n) {
          var absN, sign;
          absN = Math.abs(n);
          sign = n < 0 ? "-" : "";
          if (absN >= 1000)
            return "" + n;
          if (absN >= 100)
            return sign + "0" + absN;
          if (absN >= 10)
            return sign + "00" + absN;
          return sign + "000" + absN;
        },
        DateTime__threeDigits: function(n) {
          if (n >= 100)
            return "" + n;
          if (n >= 10)
            return "0" + n;
          return "00" + n;
        },
        DateTime__twoDigits: function(n) {
          if (n >= 10)
            return "" + n;
          return "0" + n;
        }
      }
    },
    double: {
      "^": "num;"
    },
    "+double": 0,
    Error: {
      "^": "Object;",
      get$stackTrace: function() {
        return H.getTraceFromException(this.$thrownJsError);
      }
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message>",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        },
        ArgumentError$notNull: function($name) {
          return new P.ArgumentError(false, null, $name, "Must not be null");
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          var t1;
          if (typeof start !== "number")
            return H.iae(start);
          if (0 <= start) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = start > $length;
          } else
            t1 = true;
          if (t1)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (!(start > end)) {
              if (typeof $length !== "number")
                return H.iae($length);
              t1 = end > $length;
            } else
              t1 = true;
            if (t1)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (J.$lt$n(this.invalidValue, 0))
          return ": index must not be negative";
        var t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = H.intTypeCheck($length != null ? $length : J.get$length$asx(indexable));
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    NoSuchMethodError: {
      "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
      toString$0: function(_) {
        var _box_0, sb, t1, t2, _i, t3, t4, argument, memberName, receiverText, actualParameters;
        _box_0 = {};
        sb = new P.StringBuffer("");
        _box_0.comma = "";
        t1 = this._core$_arguments;
        if (t1 != null)
          for (t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
            argument = t1[_i];
            sb._contents = t3 + t4;
            t3 = sb._contents += H.S(P.Error_safeToString(argument));
            _box_0.comma = ", ";
          }
        t1 = this._namedArguments;
        if (t1 != null)
          t1.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
        memberName = this._memberName.__internal$_name;
        receiverText = P.Error_safeToString(this._core$_receiver);
        actualParameters = sb.toString$0(0);
        t1 = "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + H.S(receiverText) + "\nArguments: [" + actualParameters + "]";
        return t1;
      },
      static: {
        NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
          return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      },
      static: {
        UnsupportedError$: function(message) {
          return new P.UnsupportedError(message);
        }
      }
    },
    UnimplementedError: {
      "^": "Error;message>",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
      },
      static: {
        UnimplementedError$: function(message) {
          return new P.UnimplementedError(message);
        }
      }
    },
    StateError: {
      "^": "Error;message>",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      },
      static: {
        StateError$: function(message) {
          return new P.StateError(message);
        }
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      },
      static: {
        ConcurrentModificationError$: function(modifiedObject) {
          return new P.ConcurrentModificationError(modifiedObject);
        }
      }
    },
    OutOfMemoryError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Out of Memory";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      get$stackTrace: function() {
        return;
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message>",
      toString$0: function(_) {
        return "Exception: " + this.message;
      }
    },
    FormatException: {
      "^": "Object;message>,source,offset",
      toString$0: function(_) {
        var t1, report, offset, source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice;
        t1 = this.message;
        report = "" !== t1 ? "FormatException: " + t1 : "FormatException";
        offset = this.offset;
        source = this.source;
        if (typeof source !== "string")
          return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      },
      static: {
        FormatException$: function(message, source, offset) {
          return new P.FormatException(message, source, offset);
        }
      }
    },
    Function: {
      "^": "Object;"
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      where$1: ["super$Iterable$where", function(_, test) {
        var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      }],
      forEach$1: function(_, f) {
        var t1;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          f.call$1(t1.get$current());
      },
      any$1: function(_, test) {
        var t1;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (test.call$1(t1.get$current()))
            return true;
        return false;
      },
      toList$1$growable: function(_, growable) {
        return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$first: function(_) {
        var it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        return it.get$current();
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      firstWhere$2$orElse: function(_, test, orElse) {
        var t1, element;
        t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
        H.functionTypeCheck(orElse, {func: 1, ret: t1});
        for (t1 = this.get$iterator(this); t1.moveNext$0();) {
          element = t1.get$current();
          if (test.call$1(element))
            return element;
        }
        return orElse.call$0();
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(P.ArgumentError$notNull("index"));
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;$ti"
    },
    Null: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: ["super$Object$toString", function(_) {
        return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
      }],
      noSuchMethod$1: [function(_, invocation) {
        H.interceptedTypeCheck(invocation, "$isInvocation");
        throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
      }, null, "get$noSuchMethod", 5, 0, null, 6],
      toString: function() {
        return this.toString$0(this);
      }
    },
    Match: {
      "^": "Object;"
    },
    Set: {
      "^": "EfficientLengthIterable;$ti"
    },
    StackTrace: {
      "^": "Object;"
    },
    Stopwatch: {
      "^": "Object;_core$_start,_stop"
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents@",
      get$length: function(_) {
        return this._contents.length;
      },
      write$1: function(obj) {
        this._contents += H.S(obj);
      },
      writeCharCode$1: function(charCode) {
        this._contents += H.Primitives_stringFromCharCode(charCode);
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $isStringSink: 1,
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    },
    Symbol0: {
      "^": "Object;"
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    CanvasElement_CanvasElement: function(height, width) {
      var e = document.createElement("canvas");
      if (width != null)
        e.width = width;
      if (height != null)
        e.height = height;
      return e;
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement0");
    },
    Element__safeTagName: function(element) {
      var result, t1, t2, exception;
      result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t2 = t1.get$tagName(element);
        if (typeof t2 === "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1, hash;
      t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _convertNativeToDart_Window: function(win) {
      if (win == null)
        return;
      return W._DOMWindowCrossFrame__createSafe(win);
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: {
      "^": "Element0;",
      "%": "HTMLBRElement|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;0type=",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAnchorElement"
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;0message=",
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAreaElement"
    },
    BaseElement: {
      "^": "HtmlElement;",
      $isBaseElement: 1,
      "%": "HTMLBaseElement"
    },
    Blob0: {
      "^": "Interceptor;0type=",
      $isBlob0: 1,
      "%": ";Blob"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;0name=,0type=",
      "%": "HTMLButtonElement"
    },
    CanvasElement: {
      "^": "HtmlElement;0height=,0width=",
      $isCanvasElement: 1,
      "%": "HTMLCanvasElement"
    },
    CharacterData: {
      "^": "Node;0length=",
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    Client: {
      "^": "Interceptor;0type=",
      "%": "Client|WindowClient"
    },
    CssStyleDeclaration: {
      "^": "_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase;0length=",
      getPropertyValue$1: function(receiver, propertyName) {
        var propValue = receiver.getPropertyValue(this._browserPropertyName$1(receiver, propertyName));
        return propValue == null ? "" : propValue;
      },
      _browserPropertyName$1: function(receiver, propertyName) {
        var t1, $name;
        t1 = $.$get$CssStyleDeclaration__propertyCache();
        $name = t1[propertyName];
        if (typeof $name === "string")
          return $name;
        $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
        t1[propertyName] = $name;
        return $name;
      },
      _supportedBrowserPropertyName$1: function(receiver, propertyName) {
        var prefixed;
        if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
          return letter.toUpperCase();
        }) in receiver)
          return propertyName;
        prefixed = P.Device_cssPrefix() + propertyName;
        if (prefixed in receiver)
          return prefixed;
        return propertyName;
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$position: function(receiver) {
        return receiver.position;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
    },
    CssStyleDeclarationBase: {
      "^": "Object;",
      get$appearance: function(receiver) {
        return this.getPropertyValue$1(receiver, "appearance");
      },
      get$height: function(receiver) {
        return this.getPropertyValue$1(receiver, "height");
      },
      get$left: function(receiver) {
        return this.getPropertyValue$1(receiver, "left");
      },
      get$position: function(receiver) {
        return this.getPropertyValue$1(receiver, "position");
      },
      get$top: function(receiver) {
        return this.getPropertyValue$1(receiver, "top");
      },
      get$width: function(receiver) {
        return this.getPropertyValue$1(receiver, "width");
      }
    },
    DomError: {
      "^": "Interceptor;0message=,0name=",
      "%": "DOMError"
    },
    DomException: {
      "^": "Interceptor;0message=",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomRectReadOnly: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isRectangle", [P.num], "$asRectangle");
        if (!t1)
          return false;
        t1 = J.getInterceptor$x(other);
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, receiver.width & 0x1FFFFFFF, receiver.height & 0x1FFFFFFF);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$left: function(receiver) {
        return receiver.left;
      },
      get$top: function(receiver) {
        return receiver.top;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      },
      "%": ";DOMRectReadOnly"
    },
    DomTokenList: {
      "^": "Interceptor;0length=",
      add$1: function(receiver, tokens) {
        return receiver.add(H.stringTypeCheck(tokens));
      },
      "%": "DOMTokenList"
    },
    _ChildrenElementList: {
      "^": "ListBase;_html$_element<,_childElements",
      get$isEmpty: function(_) {
        return this._html$_element.firstElementChild == null;
      },
      get$length: function(_) {
        return this._childElements.length;
      },
      $index: function(_, index) {
        var t1;
        H.intTypeCheck(index);
        t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return H.interceptedTypeCheck(t1[index], "$isElement0");
      },
      $indexSet: function(_, index, value) {
        var t1;
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isElement0");
        t1 = this._childElements;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        this._html$_element.replaceChild(value, t1[index]);
      },
      set$length: function(_, newLength) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
      },
      add$1: function(_, value) {
        H.interceptedTypeCheck(value, "$isElement0");
        this._html$_element.appendChild(value);
        return value;
      },
      get$iterator: function(_) {
        var t1 = this.toList$0(this);
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asEfficientLengthIterable: function() {
        return [W.Element0];
      },
      $asListMixin: function() {
        return [W.Element0];
      },
      $asIterable: function() {
        return [W.Element0];
      },
      $asList: function() {
        return [W.Element0];
      }
    },
    Element0: {
      "^": "Node;0tagName=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      get$children: function(receiver) {
        return new W._ChildrenElementList(receiver, receiver.children);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, contextElement, fragment;
        if (treeSanitizer == null) {
          t1 = $.Element__defaultValidator;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
            t2 = new W.NodeValidatorBuilder(t1);
            C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
            C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
            $.Element__defaultValidator = t2;
            validator = t2;
          } else
            validator = t1;
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        }
        if ($.Element__parseDocument == null) {
          t1 = document;
          t2 = t1.implementation.createHTMLDocument("");
          $.Element__parseDocument = t2;
          $.Element__parseRange = t2.createRange();
          t2 = $.Element__parseDocument;
          t2.toString;
          t2 = t2.createElement("base");
          H.interceptedTypeCheck(t2, "$isBaseElement");
          t2.href = t1.baseURI;
          $.Element__parseDocument.head.appendChild(t2);
        }
        t1 = $.Element__parseDocument;
        if (t1.body == null) {
          t1.toString;
          t2 = t1.createElement("body");
          t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          t2 = receiver.tagName;
          t1.toString;
          contextElement = t1.createElement(t2);
          $.Element__parseDocument.body.appendChild(contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          $.Element__parseRange.selectNodeContents(contextElement);
          fragment = $.Element__parseRange.createContextualFragment(html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (; t1 = contextElement.firstChild, t1 != null;)
            fragment.appendChild(t1);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$ax(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        document.adoptNode(fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 5, 5, null],
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$1: function($receiver, html) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, null);
      },
      $isElement0: 1,
      "%": ";Element"
    },
    Element_Element$html_closure: {
      "^": "Closure:25;",
      call$1: function(e) {
        return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement0;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;0height=,0name=,0type=,0width=",
      "%": "HTMLEmbedElement"
    },
    ErrorEvent: {
      "^": "Event;0error=,0message=",
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;0type=",
      $isEvent: 1,
      "%": "AbortPaymentEvent|AnimationEvent|AnimationPlaybackEvent|AudioProcessingEvent|BackgroundFetchClickEvent|BackgroundFetchEvent|BackgroundFetchFailEvent|BackgroundFetchedEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|BlobEvent|CanMakePaymentEvent|ClipboardEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|ExtendableMessageEvent|FetchEvent|FontFaceSetLoadEvent|ForeignFetchEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MojoInterfaceRequestEvent|MutationEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PaymentRequestEvent|PaymentRequestUpdateEvent|PopStateEvent|PresentationConnectionAvailableEvent|ProgressEvent|PromiseRejectionEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCPeerConnectionIceEvent|RTCTrackEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|StorageEvent|SyncEvent|TrackEvent|TransitionEvent|USBConnectionEvent|VRDeviceEvent|VRDisplayEvent|VRSessionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      addEventListener$3: ["super$EventTarget$addEventListener", function(receiver, type, listener, useCapture) {
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, false);
      }],
      _addEventListener$3: function(receiver, type, listener, options) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      _removeEventListener$3: function(receiver, type, listener, options) {
        return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
      },
      "%": "MediaStream|ServiceWorker;EventTarget"
    },
    FieldSetElement: {
      "^": "HtmlElement;0name=,0type=",
      "%": "HTMLFieldSetElement"
    },
    File: {
      "^": "Blob0;0name=",
      "%": "File"
    },
    FormElement: {
      "^": "HtmlElement;0length=,0name=",
      "%": "HTMLFormElement"
    },
    HtmlCollection: {
      "^": "_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
    },
    IFrameElement: {
      "^": "HtmlElement;0height=,0name=,0width=",
      "%": "HTMLIFrameElement"
    },
    ImageData: {
      "^": "Interceptor;0height=,0width=",
      $isImageData: 1,
      "%": "ImageData"
    },
    ImageElement: {
      "^": "HtmlElement;0height=,0width=",
      "%": "HTMLImageElement"
    },
    InputElement: {
      "^": "HtmlElement;0height=,0name=,0type=,0width=",
      "%": "HTMLInputElement"
    },
    KeyboardEvent: {
      "^": "UIEvent;",
      $isKeyboardEvent: 1,
      "%": "KeyboardEvent"
    },
    LinkElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLLinkElement"
    },
    Location: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLMapElement"
    },
    MediaElement: {
      "^": "HtmlElement;0error=",
      "%": "HTMLAudioElement;HTMLMediaElement"
    },
    MediaError: {
      "^": "Interceptor;0message=",
      "%": "MediaError"
    },
    MediaKeyMessageEvent: {
      "^": "Event;0message=",
      "%": "MediaKeyMessageEvent"
    },
    MessagePort: {
      "^": "EventTarget;",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        if (type === "message")
          receiver.start();
        this.super$EventTarget$addEventListener(receiver, type, listener, false);
      },
      "%": "MessagePort"
    },
    MetaElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLMetaElement"
    },
    MidiPort: {
      "^": "EventTarget;0name=,0type=",
      "%": "MIDIInput|MIDIOutput|MIDIPort"
    },
    MouseEvent: {
      "^": "UIEvent;",
      $isMouseEvent: 1,
      "%": "WheelEvent;DragEvent|MouseEvent"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;0message=,0name=",
      "%": "NavigatorUserMediaError"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(P.StateError$("No elements"));
        if (l > 1)
          throw H.wrapException(P.StateError$("More than one element"));
        return t1.firstChild;
      },
      add$1: function(_, value) {
        this._this.appendChild(H.interceptedTypeCheck(value, "$isNode"));
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, i;
        H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      },
      $indexSet: function(_, index, value) {
        var t1, t2;
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        t1 = this._this;
        t2 = t1.childNodes;
        if (index >>> 0 !== index || index >= t2.length)
          return H.ioore(t2, index);
        t1.replaceChild(value, t2[index]);
      },
      get$iterator: function(_) {
        var t1 = this._this.childNodes;
        return new W.FixedSizeListIterator(t1, t1.length, -1, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      set$length: function(_, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
      },
      $index: function(_, index) {
        var t1;
        H.intTypeCheck(index);
        t1 = this._this.childNodes;
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;0previousNode:previousSibling=,0text:textContent=",
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          t1.removeChild(receiver);
      },
      replaceWith$1: function(receiver, otherNode) {
        var $parent, exception;
        try {
          $parent = receiver.parentNode;
          J._replaceChild$2$x($parent, otherNode, receiver);
        } catch (exception) {
          H.unwrapException(exception);
        }
        return receiver;
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      _replaceChild$2: function(receiver, node, child) {
        return receiver.replaceChild(node, child);
      },
      $isNode: 1,
      "%": "Document|DocumentFragment|DocumentType|HTMLDocument|ShadowRoot|XMLDocument;Node"
    },
    NodeList: {
      "^": "_NodeList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    OListElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLOListElement"
    },
    ObjectElement: {
      "^": "HtmlElement;0height=,0name=,0type=,0width=",
      "%": "HTMLObjectElement"
    },
    OutputElement: {
      "^": "HtmlElement;0name=,0type=",
      "%": "HTMLOutputElement"
    },
    OverconstrainedError: {
      "^": "Interceptor;0message=,0name=",
      "%": "OverconstrainedError"
    },
    ParamElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLParamElement"
    },
    PointerEvent: {
      "^": "MouseEvent;0height=,0width=",
      "%": "PointerEvent"
    },
    PositionError: {
      "^": "Interceptor;0message=",
      "%": "PositionError"
    },
    PresentationConnectionCloseEvent: {
      "^": "Event;0message=",
      "%": "PresentationConnectionCloseEvent"
    },
    ProgressElement: {
      "^": "HtmlElement;0position=",
      "%": "HTMLProgressElement"
    },
    PushMessageData: {
      "^": "Interceptor;",
      text$0: [function(receiver) {
        return receiver.text();
      }, "call$0", "get$text", 1, 0, 45],
      "%": "PushMessageData"
    },
    ScriptElement0: {
      "^": "HtmlElement;0type=",
      "%": "HTMLScriptElement"
    },
    SelectElement: {
      "^": "HtmlElement;0length=,0name=,0type=",
      "%": "HTMLSelectElement"
    },
    SensorErrorEvent: {
      "^": "Event;0error=",
      "%": "SensorErrorEvent"
    },
    SharedWorkerGlobalScope: {
      "^": "WorkerGlobalScope;0name=",
      "%": "SharedWorkerGlobalScope"
    },
    SlotElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLSlotElement"
    },
    SourceElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLSourceElement"
    },
    SpeechRecognitionError: {
      "^": "Event;0error=,0message=",
      "%": "SpeechRecognitionError"
    },
    SpeechSynthesisEvent: {
      "^": "Event;0name=",
      "%": "SpeechSynthesisEvent"
    },
    Storage0: {
      "^": "_Storage_Interceptor_MapMixin;",
      containsKey$1: function(receiver, key) {
        return receiver.getItem(key) != null;
      },
      $index: function(receiver, key) {
        return receiver.getItem(H.stringTypeCheck(key));
      },
      $indexSet: function(receiver, key, value) {
        receiver.setItem(key, H.stringTypeCheck(value));
      },
      forEach$1: function(receiver, f) {
        var i, key;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
        for (i = 0; true; ++i) {
          key = receiver.key(i);
          if (key == null)
            return;
          f.call$2(key, receiver.getItem(key));
        }
      },
      get$keys: function(receiver) {
        var keys = H.setRuntimeTypeInfo([], [P.String]);
        this.forEach$1(receiver, new W.Storage_keys_closure(keys));
        return keys;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      get$isEmpty: function(receiver) {
        return receiver.key(0) == null;
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      "%": "Storage"
    },
    Storage_keys_closure: {
      "^": "Closure:46;keys",
      call$2: function(k, v) {
        return C.JSArray_methods.add$1(this.keys, k);
      }
    },
    StyleElement: {
      "^": "HtmlElement;0type=",
      "%": "HTMLStyleElement"
    },
    TableElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        table.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;",
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;0name=,0type=",
      "%": "HTMLTextAreaElement"
    },
    UIEvent: {
      "^": "Event;",
      "%": "CompositionEvent|FocusEvent|TextEvent|TouchEvent;UIEvent"
    },
    VideoElement: {
      "^": "MediaElement;0height=,0width=",
      "%": "HTMLVideoElement"
    },
    Window: {
      "^": "EventTarget;0name=",
      requestAnimationFrame$1: function(receiver, callback) {
        H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]});
        this._ensureRequestAnimationFrame$0(receiver);
        return this._requestAnimationFrame$1(receiver, W._wrapZone(callback, P.num));
      },
      _requestAnimationFrame$1: function(receiver, callback) {
        return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
      },
      _ensureRequestAnimationFrame$0: function(receiver) {
        if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
          return;
        (function($this) {
          var vendors = ['ms', 'moz', 'webkit', 'o'];
          for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
            $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
            $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
          }
          if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
            return;
          $this.requestAnimationFrame = function(callback) {
            return window.setTimeout(function() {
              callback(Date.now());
            }, 16);
          };
          $this.cancelAnimationFrame = function(id) {
            clearTimeout(id);
          };
        })(receiver);
      },
      get$top: function(receiver) {
        return W._convertNativeToDart_Window(receiver.top);
      },
      $isWindow: 1,
      $isWindowBase: 1,
      "%": "DOMWindow|Window"
    },
    WorkerGlobalScope: {
      "^": "EventTarget;",
      $isWorkerGlobalScope: 1,
      "%": "DedicatedWorkerGlobalScope|ServiceWorkerGlobalScope;WorkerGlobalScope"
    },
    _Attr: {
      "^": "Node;0name=",
      $is_Attr: 1,
      "%": "Attr"
    },
    _DomRect: {
      "^": "DomRectReadOnly;",
      toString$0: function(receiver) {
        return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
      },
      $eq: function(receiver, other) {
        var t1;
        if (other == null)
          return false;
        t1 = H.checkSubtypeV2(other, "$isRectangle", [P.num], "$asRectangle");
        if (!t1)
          return false;
        t1 = J.getInterceptor$x(other);
        return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
      },
      get$hashCode: function(receiver) {
        return W._JenkinsSmiHash_hash4(receiver.left & 0x1FFFFFFF, receiver.top & 0x1FFFFFFF, receiver.width & 0x1FFFFFFF, receiver.height & 0x1FFFFFFF);
      },
      get$height: function(receiver) {
        return receiver.height;
      },
      get$width: function(receiver) {
        return receiver.width;
      },
      get$x: function(receiver) {
        return receiver.x;
      },
      get$y: function(receiver) {
        return receiver.y;
      },
      "%": "ClientRect|DOMRect"
    },
    _NamedNodeMap: {
      "^": "__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    _AttributeMap: {
      "^": "MapBase;_html$_element<",
      forEach$1: function(_, f) {
        var t1, t2, t3, _i, key;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
        for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t3.getAttribute(key));
        }
      },
      get$keys: function(_) {
        var attributes, keys, len, i, attr;
        attributes = this._html$_element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
          if (attr.namespaceURI == null)
            C.JSArray_methods.add$1(keys, attr.name);
        }
        return keys;
      },
      get$isEmpty: function(_) {
        return this.get$keys(this).length === 0;
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_html$_element",
      containsKey$1: function(_, key) {
        return this._html$_element.hasAttribute(key);
      },
      $index: function(_, key) {
        return this._html$_element.getAttribute(H.stringTypeCheck(key));
      },
      $indexSet: function(_, key, value) {
        this._html$_element.setAttribute(key, H.stringTypeCheck(value));
      },
      get$length: function(_) {
        return this.get$keys(this).length;
      }
    },
    _EventStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture,$ti"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture,$ti",
      cancel$0: function() {
        if (this._html$_target == null)
          return;
        this._unlisten$0();
        this._html$_target = null;
        this._onData = null;
        return;
      },
      _tryResume$0: function() {
        var t1 = this._onData;
        if (t1 != null && this._pauseCount <= 0)
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, false);
      },
      _unlisten$0: function() {
        var t1, t2, t3;
        t1 = this._onData;
        t2 = t1 != null;
        if (t2) {
          t3 = this._html$_target;
          t3.toString;
          H.functionTypeCheck(t1, {func: 1, args: [W.Event]});
          if (t2)
            J._removeEventListener$3$x(t3, this._eventType, t1, false);
        }
      },
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
          t1 = new W._EventStreamSubscription(0, _target, _eventType, t1, false, [$T]);
          t1._tryResume$0();
          return t1;
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:47;onData",
      call$1: [function(e) {
        return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
      }, null, null, 4, 0, null, 19, "call"]
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy",
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 262; ++_i)
            t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = W.Element__safeTagName(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
      },
      $isNodeValidator: 1,
      static: {
        _Html5NodeValidator$: function(uriPolicy) {
          var e, t1;
          e = document.createElement("a");
          t1 = new W._SameOriginUriPolicy(e, window.location);
          t1 = new W._Html5NodeValidator(t1);
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        },
        _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          H.interceptedTypeCheck(element, "$isElement0");
          H.stringTypeCheck(attributeName);
          H.stringTypeCheck(value);
          H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 16, 0, 24, 5, 9, 13, 14],
        _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3, t4, t5;
          H.interceptedTypeCheck(element, "$isElement0");
          H.stringTypeCheck(attributeName);
          H.stringTypeCheck(value);
          t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
          t2 = t1._hiddenAnchor;
          t2.href = value;
          t3 = t2.hostname;
          t1 = t1._loc;
          t4 = t1.hostname;
          if (t3 == null ? t4 == null : t3 === t4) {
            t4 = t2.port;
            t5 = t1.port;
            if (t4 == null ? t5 == null : t4 === t5) {
              t4 = t2.protocol;
              t1 = t1.protocol;
              t1 = t4 == null ? t1 == null : t4 === t1;
            } else
              t1 = false;
          } else
            t1 = false;
          if (!t1)
            if (t3 === "")
              if (t2.port === "") {
                t1 = t2.protocol;
                t1 = t1 === ":" || t1 === "";
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 16, 0, 24, 5, 9, 13, 14]
      }
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
      }
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      add$1: function(_, validator) {
        C.JSArray_methods.add$1(this._validators, H.interceptedTypeCheck(validator, "$isNodeValidator"));
      },
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      },
      $isNodeValidator: 1
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:27;element",
      call$1: function(v) {
        return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:27;element,attributeName,value",
      call$1: function(v) {
        return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;",
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var legalAttributes, extraUriAttributes, t1;
        this.allowedElements.addAll$1(0, allowedElements);
        legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
        extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      },
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = W.Element__safeTagName(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      $isNodeValidator: 1
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:22;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:22;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (element.getAttribute("template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {
        _TemplatingNodeValidator$: function() {
          var t1, t2, t3, t4, t5;
          t1 = P.String;
          t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1);
          t3 = H.getTypeArgumentByIndex(C.List_wSV, 0);
          t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]});
          t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
          t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), null);
          t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
          return t2;
        }
      }
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:5;",
      call$1: [function(attr) {
        return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
      }, null, null, 4, 0, null, 20, "call"]
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor$(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && W.Element__safeTagName(element) === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      },
      $isNodeValidator: 1
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_position,0_html$_current,$ti",
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this._html$_current = J.$index$asx(this._array, nextPosition);
          this._position = nextPosition;
          return true;
        }
        this._html$_current = null;
        this._position = t1;
        return false;
      },
      get$current: function() {
        return this._html$_current;
      }
    },
    _DOMWindowCrossFrame: {
      "^": "Object;_window",
      get$top: function(_) {
        return W._DOMWindowCrossFrame__createSafe(this._window.top);
      },
      $isWindowBase: 1,
      static: {
        _DOMWindowCrossFrame__createSafe: function(w) {
          if (w === window)
            return H.interceptedTypeCheck(w, "$isWindowBase");
          else
            return new W._DOMWindowCrossFrame(w);
        }
      }
    },
    NodeValidator: {
      "^": "Object;"
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc",
      $isUriPolicy: 1
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        if ($parent == null)
          J.remove$0$ax(node);
        else
          $parent.removeChild(node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = attrs.get$_html$_element().getAttribute("is");
          H.interceptedTypeCheck(element, "$isElement0");
          corruptedTest1 = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            var length = 0;
            if (element.children)
              length = element.children.length;
            for (var i = 0; i < length; i++) {
              var child = element.children[i];
              if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
                return true;
            }
            return false;
          }(element);
          corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        try {
          elementTagName = W.Element__safeTagName(element);
          this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement0"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.ArgumentError)
            throw exception;
          else {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing corrupted element " + H.S(elementText);
            if (typeof console != "undefined")
              window.console.warn(t1);
          }
        }
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, $name, t2, t3;
        if (corrupted) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
            if (typeof console != "undefined")
              window.console.warn(t1);
            return;
          }
        t1 = attrs.get$keys(attrs);
        keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          $name = keys[i];
          t2 = this.validator;
          t3 = J.toLowerCase$0$s($name);
          H.stringTypeCheck($name);
          if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
            window;
            t2 = "Removing disallowed attribute <" + H.S(tag) + " " + H.S($name) + '="' + H.S(t1.getAttribute($name)) + '">';
            if (typeof console != "undefined")
              window.console.warn(t2);
            t1.getAttribute($name);
            t1.removeAttribute($name);
          }
        }
        if (!!J.getInterceptor$(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      },
      $isNodeTreeSanitizer: 1
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:76;$this",
      call$2: function(node, $parent) {
        var child, nextChild, t1, exception, t2, t3;
        t1 = this.$this;
        switch (node.nodeType) {
          case 1:
            t1._sanitizeUntrustedElement$2(node, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(node, $parent);
        }
        child = node.lastChild;
        for (t1 = node == null; null != child;) {
          nextChild = null;
          try {
            nextChild = J.get$previousNode$x(child);
          } catch (exception) {
            H.unwrapException(exception);
            t2 = H.interceptedTypeCheck(child, "$isNode");
            if (t1) {
              t3 = t2.parentNode;
              if (t3 != null)
                t3.removeChild(t2);
            } else
              node.removeChild(t2);
            child = null;
            nextChild = node.lastChild;
          }
          if (child != null)
            this.call$2(child, node);
          child = H.interceptedTypeCheck(nextChild, "$isNode");
        }
      }
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor+CssStyleDeclarationBase;"
    },
    _HtmlCollection_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_HtmlCollection_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _NodeList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NodeList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _Storage_Interceptor_MapMixin: {
      "^": "Interceptor+MapMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__NamedNodeMap_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
        $.Device__isOpera = t1;
      }
      return t1;
    },
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    },
    Device_cssPrefix: function() {
      var prefix, t1;
      prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = !P.Device_isOpera() && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1)
          prefix = "-ms-";
        else
          prefix = P.Device_isOpera() ? "-o-" : "-webkit-";
      }
      $.Device__cachedCssPrefix = prefix;
      return prefix;
    },
    FilteredElementList: {
      "^": "ListBase;_node,_childNodes",
      get$_html_common$_iterable: function() {
        var t1, t2, t3;
        t1 = this._childNodes;
        t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0);
        t3 = W.Element0;
        return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new P.FilteredElementList__iterable_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new P.FilteredElementList__iterable_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
      },
      forEach$1: function(_, f) {
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [W.Element0]});
        C.JSArray_methods.forEach$1(P.List_List$from(this.get$_html_common$_iterable(), false, W.Element0), f);
      },
      $indexSet: function(_, index, value) {
        var t1;
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isElement0");
        t1 = this.get$_html_common$_iterable();
        J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1._iterable, index)), value);
      },
      set$length: function(_, newLength) {
        var len = J.get$length$asx(this.get$_html_common$_iterable()._iterable);
        if (typeof len !== "number")
          return H.iae(len);
        if (newLength >= len)
          return;
        else if (newLength < 0)
          throw H.wrapException(P.ArgumentError$("Invalid list length"));
        this.removeRange$2(0, newLength, len);
      },
      add$1: function(_, value) {
        this._childNodes._this.appendChild(H.interceptedTypeCheck(value, "$isElement0"));
      },
      removeRange$2: function(_, start, end) {
        var t1 = this.get$_html_common$_iterable();
        t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        if (typeof end !== "number")
          return end.$sub();
        C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$_html_common$_iterable()._iterable);
      },
      $index: function(_, index) {
        var t1;
        H.intTypeCheck(index);
        t1 = this.get$_html_common$_iterable();
        return t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
      },
      get$iterator: function(_) {
        var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element0);
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asEfficientLengthIterable: function() {
        return [W.Element0];
      },
      $asListMixin: function() {
        return [W.Element0];
      },
      $asIterable: function() {
        return [W.Element0];
      },
      $asList: function() {
        return [W.Element0];
      }
    },
    FilteredElementList__iterable_closure: {
      "^": "Closure:25;",
      call$1: function(n) {
        return !!J.getInterceptor$(H.interceptedTypeCheck(n, "$isNode")).$isElement0;
      }
    },
    FilteredElementList__iterable_closure0: {
      "^": "Closure:82;",
      call$1: [function(n) {
        return H.interceptedTypeCast(H.interceptedTypeCheck(n, "$isNode"), "$isElement0");
      }, null, null, 4, 0, null, 21, "call"]
    },
    FilteredElementList_removeRange_closure: {
      "^": "Closure:83;",
      call$1: function(el) {
        return J.remove$0$ax(el);
      }
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    KeyRange: {
      "^": "Interceptor;",
      $isKeyRange: 1,
      "%": "IDBKeyRange"
    },
    Request: {
      "^": "EventTarget;0error=",
      "%": "IDBOpenDBRequest|IDBRequest|IDBVersionChangeRequest"
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    _callDartFunction: [function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs, t1;
      H.boolTypeCheck(captureThis);
      H.listTypeCheck($arguments);
      if (captureThis) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
      H.interceptedTypeCheck(callback, "$isFunction");
      t1 = H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs);
      return P._convertToJS(t1);
    }, null, null, 16, 0, null, 22, 23, 24, 25],
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: [function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor$(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (!!t1.$isTypedData)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    }, "call$1", "js___convertToJS$closure", 4, 0, 4, 15],
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: [function(o) {
      var ms, t1, t2;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && !!J.getInterceptor$(o).$isTypedData)
        return o;
      else if (o instanceof Date) {
        ms = H.intTypeCheck(o.getTime());
        t1 = new P.DateTime(ms, false);
        if (Math.abs(ms) <= 864e13)
          t2 = false;
        else
          t2 = true;
        if (t2)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + t1.get$millisecondsSinceEpoch()));
        return t1;
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }, "call$1", "js___convertToDart$closure", 4, 0, 134, 15],
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy;
      H.functionTypeCheck(createProxy, {func: 1, args: [,]});
      dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    JsObject: {
      "^": "Object;_js$_jsObject",
      $index: ["super$JsObject$$index", function(_, property) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return P._convertToDart(this._js$_jsObject[property]);
      }],
      $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
        if (typeof property !== "string" && typeof property !== "number")
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        this._js$_jsObject[property] = P._convertToJS(value);
      }],
      get$hashCode: function(_) {
        return 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
      },
      hasProperty$1: function(property) {
        if (typeof property !== "string" && true)
          throw H.wrapException(P.ArgumentError$("property is not a String or num"));
        return property in this._js$_jsObject;
      },
      toString$0: function(_) {
        var t1, exception;
        try {
          t1 = String(this._js$_jsObject);
          return t1;
        } catch (exception) {
          H.unwrapException(exception);
          t1 = this.super$Object$toString(this);
          return t1;
        }
      },
      callMethod$2: function(method, args) {
        var t1, t2;
        if (typeof method !== "string" && true)
          throw H.wrapException(P.ArgumentError$("method is not a String or num"));
        t1 = this._js$_jsObject;
        if (args == null)
          t2 = null;
        else {
          t2 = H.getTypeArgumentByIndex(args, 0);
          t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
        }
        return P._convertToDart(t1[method].apply(t1, t2));
      },
      callMethod$1: function(method) {
        return this.callMethod$2(method, null);
      }
    },
    JsFunction: {
      "^": "JsObject;_js$_jsObject"
    },
    JsArray: {
      "^": "_JsArray_JsObject_ListMixin;_js$_jsObject,$ti",
      _checkIndex$1: function(index) {
        var t1 = index < 0 || index >= this.get$length(this);
        if (t1)
          throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this), null, null));
      },
      $index: function(_, index) {
        if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
          this._checkIndex$1(H.intTypeCheck(index));
        return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
      },
      $indexSet: function(_, index, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index))
          this._checkIndex$1(H.intTypeCheck(index));
        this.super$JsObject$$indexSet(0, index, value);
      },
      get$length: function(_) {
        var len = this._js$_jsObject.length;
        if (typeof len === "number" && len >>> 0 === len)
          return len;
        throw H.wrapException(P.StateError$("Bad JsArray length"));
      },
      set$length: function(_, $length) {
        this.super$JsObject$$indexSet(0, "length", $length);
      },
      add$1: function(_, value) {
        this.callMethod$2("push", [H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0))]);
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    _convertToJS_closure: {
      "^": "Closure:4;",
      call$1: function(o) {
        var jsFunction;
        H.interceptedTypeCheck(o, "$isFunction");
        jsFunction = function(_call, f, captureThis) {
          return function() {
            return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
          };
        }(P._callDartFunction, o, false);
        P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
        return jsFunction;
      }
    },
    _convertToJS_closure0: {
      "^": "Closure:4;ctor",
      call$1: function(o) {
        return new this.ctor(o);
      }
    },
    _wrapToDart_closure: {
      "^": "Closure:84;",
      call$1: function(o) {
        return new P.JsFunction(o);
      }
    },
    _wrapToDart_closure0: {
      "^": "Closure:90;",
      call$1: function(o) {
        return new P.JsArray(o, [null]);
      }
    },
    _wrapToDart_closure1: {
      "^": "Closure:91;",
      call$1: function(o) {
        return new P.JsObject(o);
      }
    },
    _JsArray_JsObject_ListMixin: {
      "^": "JsObject+ListMixin;"
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JSRandom: {
      "^": "Object;",
      nextInt$1: function(max) {
        if (typeof max !== "number")
          return max.$le();
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        return Math.random() * max >>> 0;
      },
      nextDouble$0: function() {
        return Math.random();
      },
      $isRandom: 1
    },
    _Random: {
      "^": "Object;_lo,_hi",
      _Random$1: function(seed) {
        var empty_seed, low, high, tmplow, low0, t1, t2, t3;
        empty_seed = seed < 0 ? -1 : 0;
        do {
          low = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - low, 4294967296);
          high = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - high, 4294967296);
          tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
          low0 = (tmplow & 4294967295) >>> 0;
          high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
          tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          low = (low ^ (low >>> 28 | high << 4)) >>> 0;
          high = (high ^ high >>> 28) >>> 0;
          tmplow = (low << 31 >>> 0) + low;
          low0 = (tmplow & 4294967295) >>> 0;
          t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
          tmplow = this._lo * 1037;
          t2 = (tmplow & 4294967295) >>> 0;
          this._lo = t2;
          t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
          this._hi = t3;
          t2 = (t2 ^ low0) >>> 0;
          this._lo = t2;
          t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
          this._hi = t1;
        } while (seed !== empty_seed);
        if (t1 === 0 && t2 === 0)
          this._lo = 23063;
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
      },
      _nextState$0: function() {
        var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
        t1 = this._lo;
        tmpHi = 4294901760 * t1;
        tmpHiLo = (tmpHi & 4294967295) >>> 0;
        tmpLo = 55905 * t1;
        tmpLoLo = (tmpLo & 4294967295) >>> 0;
        newLo = tmpLoLo + tmpHiLo + this._hi;
        t1 = (newLo & 4294967295) >>> 0;
        this._lo = t1;
        this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
      },
      nextInt$1: function(max) {
        var t1, rnd32, result;
        if (typeof max !== "number")
          return max.$le();
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        t1 = max - 1;
        if ((max & t1) >>> 0 === 0) {
          this._nextState$0();
          return (this._lo & t1) >>> 0;
        }
        do {
          this._nextState$0();
          rnd32 = this._lo;
          result = rnd32 % max;
        } while (rnd32 - result + max >= 4294967296);
        return result;
      },
      nextDouble$0: function() {
        this._nextState$0();
        var t1 = this._lo;
        this._nextState$0();
        return ((t1 & 67108863) * 134217728 + (this._lo & 134217727)) / 9007199254740992;
      },
      $isRandom: 1,
      static: {
        _Random$: function(seed) {
          var t1 = new P._Random(0, 0);
          t1._Random$1(seed);
          return t1;
        }
      }
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    FEBlendElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEBlendElement"
    },
    FEColorMatrixElement: {
      "^": "SvgElement;0type=,0height=,0width=,0x=,0y=",
      "%": "SVGFEColorMatrixElement"
    },
    FEComponentTransferElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEComponentTransferElement"
    },
    FECompositeElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFECompositeElement"
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEConvolveMatrixElement"
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEDiffuseLightingElement"
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEDisplacementMapElement"
    },
    FEFloodElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEFloodElement"
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEGaussianBlurElement"
    },
    FEImageElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEImageElement"
    },
    FEMergeElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEMergeElement"
    },
    FEMorphologyElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEMorphologyElement"
    },
    FEOffsetElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFEOffsetElement"
    },
    FEPointLightElement: {
      "^": "SvgElement;0x=,0y=",
      "%": "SVGFEPointLightElement"
    },
    FESpecularLightingElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFESpecularLightingElement"
    },
    FESpotLightElement: {
      "^": "SvgElement;0x=,0y=",
      "%": "SVGFESpotLightElement"
    },
    FETileElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFETileElement"
    },
    FETurbulenceElement: {
      "^": "SvgElement;0type=,0height=,0width=,0x=,0y=",
      "%": "SVGFETurbulenceElement"
    },
    FilterElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGFilterElement"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGForeignObjectElement"
    },
    GeometryElement: {
      "^": "GraphicsElement;",
      "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
    },
    GraphicsElement: {
      "^": "SvgElement;",
      "%": "SVGAElement|SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
    },
    ImageElement0: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGImageElement"
    },
    Length: {
      "^": "Interceptor;",
      $isLength: 1,
      "%": "SVGLength"
    },
    LengthList: {
      "^": "_LengthList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isLength");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $asListMixin: function() {
        return [P.Length];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $asImmutableListMixin: function() {
        return [P.Length];
      },
      "%": "SVGLengthList"
    },
    MaskElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGMaskElement"
    },
    Number: {
      "^": "Interceptor;",
      $isNumber: 1,
      "%": "SVGNumber"
    },
    NumberList: {
      "^": "_NumberList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver.getItem(index);
      },
      $indexSet: function(receiver, index, value) {
        H.intTypeCheck(index);
        H.interceptedTypeCheck(value, "$isNumber");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      set$length: function(receiver, value) {
        throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $asListMixin: function() {
        return [P.Number];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $asImmutableListMixin: function() {
        return [P.Number];
      },
      "%": "SVGNumberList"
    },
    PatternElement: {
      "^": "SvgElement;0height=,0width=,0x=,0y=",
      "%": "SVGPatternElement"
    },
    Point: {
      "^": "Interceptor;0x=,0y=",
      "%": "SVGPoint"
    },
    PointList: {
      "^": "Interceptor;0length=",
      "%": "SVGPointList"
    },
    RectElement: {
      "^": "GeometryElement;0height=,0width=,0x=,0y=",
      "%": "SVGRectElement"
    },
    ScriptElement: {
      "^": "SvgElement;0type=",
      $isScriptElement: 1,
      "%": "SVGScriptElement"
    },
    StyleElement0: {
      "^": "SvgElement;0type=",
      "%": "SVGStyleElement"
    },
    SvgElement: {
      "^": "Element0;",
      get$children: function(receiver) {
        return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
      },
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, t2, fragment, svgFragment, root;
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
        C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
        C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
        C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
        treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
        html = '<svg version="1.1">' + svg + "</svg>";
        t1 = document;
        t2 = t1.body;
        fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
        svgFragment = t1.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (; t1 = root.firstChild, t1 != null;)
          svgFragment.appendChild(t1);
        return svgFragment;
      },
      $isSvgElement: 1,
      "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGGradientElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGViewElement;SVGElement"
    },
    SvgSvgElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGSVGElement"
    },
    TextContentElement: {
      "^": "GraphicsElement;",
      "%": "SVGTextPathElement;SVGTextContentElement"
    },
    TextPositioningElement: {
      "^": "TextContentElement;0x=,0y=",
      "%": "SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
    },
    UseElement: {
      "^": "GraphicsElement;0height=,0width=,0x=,0y=",
      "%": "SVGUseElement"
    },
    _LengthList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_LengthList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    _NumberList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NumberList_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlError: {
      "^": "Interceptor;0message=",
      "%": "SQLError"
    }
  }], ["", "package:hauberk/src/content.dart",, T, {
    "^": "",
    GameContent: {
      "^": "Object;",
      createHero$3: function($name, race, heroClass) {
        var t1, t2, t3, t4, t5, t6, t7, t8, hero;
        if (race == null)
          race = $.$get$Races_human();
        if (heroClass == null)
          heroClass = $.$get$Classes_adventurer();
        t1 = O.Inventory$(C.ItemLocation_wMy, 24, null);
        t2 = E.Equipment$();
        t3 = O.Inventory$(C.ItemLocation_ukJ, 26, null);
        t4 = O.Inventory$(C.ItemLocation_vOz, 8, null);
        t5 = P.LinkedHashMap_LinkedHashMap$_empty(O.Shop, O.Inventory);
        t6 = M.Skill;
        t7 = P.int;
        t8 = B.Breed;
        hero = new G.HeroSave($name, race.rollStats$0(), heroClass, t1, t2, t3, t4, t5, 0, new M.SkillSet(P.LinkedHashMap_LinkedHashMap$_empty(t6, t7), P.LinkedHashMap_LinkedHashMap$_empty(t6, t7)), 60, 0, new V.Lore(P.LinkedHashMap_LinkedHashMap$_empty(t8, t7), P.LinkedHashMap_LinkedHashMap$_empty(t8, t7)));
        P.LinkedHashMap_LinkedHashMap$_literal(["Mending Salve", 3, "Scroll of Sidestepping", 2, "Tallow Candle", 4, "Loaf of Bread", 5], P.String, t7).forEach$1(0, new T.GameContent_createHero_closure(hero));
        heroClass.startingItems.spawnDrop$1(hero.inventory.get$tryAdd());
        for (t1 = $.$get$Shops_all(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current();
          t5.$indexSet(0, t2, t2.create$0());
        }
        return hero;
      },
      updateSubstance$2: function(stage, pos) {
        var t1, t2, t3, t4;
        t1 = stage.tiles.$index(0, pos);
        t2 = t1.substance;
        if (t2 === 0) {
          if (!this._tryToIgniteTile$3(stage, pos, t1))
            this._spreadPoison$3(stage, pos, t1);
        } else {
          t3 = t1.element;
          t4 = $.$get$Elements_fire();
          if (t3 == null ? t4 == null : t3 === t4) {
            --t2;
            t1.substance = t2;
            if (t2 <= 0) {
              if (Z.Tiles_ignition(t1.type) > 0) {
                t2 = $.$get$rng();
                t3 = Z.Tiles_burnResult(t1.type);
                t2.toString;
                H.assertSubtype(t3, "$isList", [Q.TileType], "$asList");
                t2 = t2.range$1(t3.length);
                if (t2 < 0 || t2 >= t3.length)
                  return H.ioore(t3, t2);
                t1.type = t3[t2];
              }
              stage._lighting._floorLightDirty = true;
            } else
              return new G.BurningFloorAction(pos);
          } else {
            t2 = $.$get$Elements_poison();
            if (t3 == null ? t2 == null : t3 === t2) {
              this._spreadPoison$3(stage, pos, t1);
              if (t1.substance > 0)
                return new G.PoisonedFloorAction(pos);
            }
          }
        }
        return;
      },
      _tryToIgniteTile$3: function(stage, pos, tile) {
        var t1, ignition, t2, fuel;
        t1 = {};
        ignition = Z.Tiles_ignition(tile.type);
        if (ignition === 0)
          return false;
        t1.fire = 0;
        t2 = new T.GameContent__tryToIgniteTile_neighbor(t1, stage, pos);
        t2.call$3(-1, 0, 3);
        t2.call$3(1, 0, 3);
        t2.call$3(0, -1, 3);
        t2.call$3(0, 1, 3);
        t2.call$3(-1, -1, 2);
        t2.call$3(-1, 1, 2);
        t2.call$3(1, -1, 2);
        t2.call$3(1, 1, 2);
        t1 = t1.fire;
        t2 = $.$get$rng();
        if (t1 <= t2.range$1(50 + ignition))
          return false;
        fuel = Z.Tiles_fuel(tile.type);
        tile.substance = t2.range$2(fuel / 2 | 0, fuel);
        tile.element = $.$get$Elements_fire();
        stage._lighting._floorLightDirty = true;
        return true;
      },
      _spreadPoison$3: function(stage, pos, tile) {
        var t1, t2, t3, t4, poison;
        t1 = {};
        tile.toString;
        t2 = $.$get$Motility_fly();
        if ((tile.type.motility._bitMask & t2._bitMask) === 0)
          return;
        t2 = tile.element;
        t3 = $.$get$Elements_poison();
        t1.poison = (t2 == null ? t3 == null : t2 === t3) ? tile.substance * 4 : 0;
        t1.open = 4;
        t4 = new T.GameContent__spreadPoison_neighbor(t1, stage, pos);
        t4.call$2(-1, 0);
        t4.call$2(1, 0);
        t4.call$2(0, -1);
        t4.call$2(0, 1);
        poison = C.JSDouble_methods.round$0(t1.poison / t1.open);
        t1.poison = poison;
        tile.element = t3;
        tile.substance = H.intTypeCheck(C.JSInt_methods.clamp$2(poison - 1, 0, 255));
      }
    },
    GameContent_createHero_closure: {
      "^": "Closure:96;hero",
      call$2: function(type, amount) {
        H.stringTypeCheck(type);
        H.intTypeCheck(amount);
        this.hero.inventory.tryAdd$1(new R.Item($.$get$Items_types().find$1(0, type), null, null, amount));
      }
    },
    GameContent__tryToIgniteTile_neighbor: {
      "^": "Closure;_box_0,stage,pos",
      call$3: function(x, y, amount) {
        var t1, t2;
        t1 = this.pos;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$add();
        t1 = t1.y;
        t1 = this.stage.tiles.$get$2(t2 + x, t1 + y);
        if (t1.substance === 0)
          return;
        t1 = t1.element;
        t2 = $.$get$Elements_fire();
        if (t1 == null ? t2 == null : t1 === t2)
          this._box_0.fire += amount;
      }
    },
    GameContent__spreadPoison_neighbor: {
      "^": "Closure:105;_box_0,stage,pos",
      call$2: function(x, y) {
        var t1, t2, t3, t4;
        t1 = this.pos;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$add();
        t1 = t1.y;
        t1 = this.stage.tiles.$get$2(t2 + x, t1 + y);
        t1.toString;
        t2 = $.$get$Motility_fly();
        if ((t1.type.motility._bitMask & t2._bitMask) !== 0) {
          t2 = this._box_0;
          ++t2.open;
          t3 = t1.element;
          t4 = $.$get$Elements_poison();
          if (t3 == null ? t4 == null : t3 === t4)
            t2.poison = t2.poison + t1.substance;
        }
      }
    }
  }], ["", "package:hauberk/src/content/action/barrier.dart",, R, {
    "^": "",
    BarrierAction: {
      "^": "_BarrierAction_Action_ElementActionMixin;_center,_h,_v,_barrier$_hit,_barrier$_hitTiles,_distance,_goingPositive,_goingNegative,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2;
        for (; this._distance < 6;) {
          t1 = {};
          t1.madeProgress = false;
          t2 = new R.BarrierAction_onPerform_tryDirection(t1, this);
          this._goingPositive = t2.call$2(this._goingPositive, 1);
          this._goingNegative = t2.call$2(this._goingNegative, -1);
          if (t1.madeProgress)
            return C.ActionResult_null_true_false;
          this._distance += 0.1;
        }
        return C.ActionResult_null_true_true;
      }
    },
    BarrierAction_onPerform_tryDirection: {
      "^": "Closure:107;_box_0,$this",
      call$2: function(going, sign) {
        var t1, allStopped;
        if (!going)
          return false;
        t1 = new R.BarrierAction_onPerform_tryDirection_tryOffset(this._box_0, this.$this, sign);
        allStopped = !t1.call$2(0, 0) || false;
        if (t1.call$2(-0.1, 0))
          allStopped = false;
        if (t1.call$2(0.1, 0))
          allStopped = false;
        if (t1.call$2(0, -0.1))
          allStopped = false;
        return !(t1.call$2(0, 0.1) ? false : allStopped);
      }
    },
    BarrierAction_onPerform_tryDirection_tryOffset: {
      "^": "Closure:111;_box_0,$this,sign",
      call$2: function(h, v) {
        var t1, t2, pos, t3;
        t1 = this.$this;
        t2 = t1._distance;
        pos = t1._center.$add(0, new L.Vec(C.JSNumber_methods.round$0(t1._h * t2 + h), C.JSNumber_methods.round$0(t1._v * t2 + v)).$mul(0, this.sign));
        t2 = t1._action$_game._stage.tiles.$index(0, pos);
        t2.toString;
        t3 = $.$get$Motility_fly();
        if ((t2.type.motility._bitMask & t3._bitMask) === 0)
          return false;
        if (t1._barrier$_hitTiles.add$1(0, pos)) {
          t1.hitTile$4(t1._barrier$_hit, pos, t1._distance, $.$get$rng().range$2(30, 40));
          this._box_0.madeProgress = true;
        }
        return true;
      }
    },
    _BarrierAction_Action_ElementActionMixin: {
      "^": "Action+ElementActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/bolt.dart",, O, {
    "^": "",
    BoltAction: {
      "^": "LosAction;_bolt$_hit,_canMiss,_bolt$_range,_los$_target,0_lastPos,0_los,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$range: function() {
        var t1 = this._bolt$_range;
        return t1 == null ? this._bolt$_hit.get$range() : t1;
      },
      onStep$1: function(pos) {
        this.addEvent$3$element$pos(C.EventType_bolt, this._bolt$_hit.get$element(), pos);
      },
      onHitActor$2: function(pos, target) {
        this._bolt$_hit.perform$4$canMiss(this, this._action$_actor, target, this._canMiss);
        return true;
      }
    }
  }], ["", "package:hauberk/src/content/action/condition.dart",, E, {
    "^": "",
    HasteAction: {
      "^": "ConditionAction;_condition$_duration,_condition$_speed,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.haste;
      },
      getIntensity$0: function() {
        return this._condition$_speed;
      },
      getDuration$0: function() {
        return this._condition$_duration;
      },
      onActivate$0: function(_) {
        return this.log$2("{1} start[s] moving faster.", this._action$_actor);
      },
      onExtend$0: function() {
        return this.log$2("{1} [feel]s the haste lasting longer.", this._action$_actor);
      },
      onIntensify$0: function() {
        return this.log$2("{1} move[s] even faster.", this._action$_actor);
      }
    },
    FreezeActorAction: {
      "^": "_FreezeActorAction_ConditionAction_DestroyActionMixin;_condition$_damage,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.cold;
      },
      onPerform$0: function() {
        this.destroyHeldItems$1($.$get$Elements_cold());
        return this.super$ConditionAction$onPerform();
      },
      getIntensity$0: function() {
        var t1 = this._condition$_damage;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return 1 + C.JSInt_methods._tdivFast$1(t1, 40);
      },
      getDuration$0: function() {
        var t1, t2;
        t1 = $.$get$rng();
        t2 = this._condition$_damage;
        if (typeof t2 !== "number")
          return t2.$mul();
        return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
      },
      onActivate$0: function(_) {
        return this.log$2("{1} [are|is] frozen!", this._action$_actor);
      },
      onExtend$0: function() {
        return this.log$2("{1} feel[s] the cold linger!", this._action$_actor);
      },
      onIntensify$0: function() {
        return this.log$2("{1} feel[s] the cold intensify!", this._action$_actor);
      }
    },
    PoisonAction: {
      "^": "ConditionAction;_condition$_damage,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.poison;
      },
      getIntensity$0: function() {
        var t1 = this._condition$_damage;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return 1 + C.JSInt_methods._tdivFast$1(t1, 20);
      },
      getDuration$0: function() {
        var t1, t2;
        t1 = $.$get$rng();
        t2 = this._condition$_damage;
        if (typeof t2 !== "number")
          return t2.$mul();
        return 1 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
      },
      onActivate$0: function(_) {
        return this.log$2("{1} [are|is] poisoned!", this._action$_actor);
      },
      onExtend$0: function() {
        return this.log$2("{1} feel[s] the poison linger!", this._action$_actor);
      },
      onIntensify$0: function() {
        return this.log$2("{1} feel[s] the poison intensify!", this._action$_actor);
      }
    },
    BlindAction: {
      "^": "ConditionAction;_condition$_damage,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.blindness;
      },
      getDuration$0: function() {
        var t1, t2;
        t1 = $.$get$rng();
        t2 = this._condition$_damage;
        if (typeof t2 !== "number")
          return t2.$mul();
        return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
      },
      onActivate$0: function(_) {
        this.log$2("{1 his} vision dims!", this._action$_actor);
        this._action$_game._stage._lighting._visibilityDirty = true;
      },
      onExtend$0: function() {
        return this.log$2("{1 his} vision dims!", this._action$_actor);
      }
    },
    DazzleAction: {
      "^": "ConditionAction;_condition$_damage,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.dazzle;
      },
      getDuration$0: function() {
        var t1, t2;
        t1 = $.$get$rng();
        t2 = this._condition$_damage;
        if (typeof t2 !== "number")
          return t2.$mul();
        return 3 + t1.triangleInt$2(t2 * 2, C.JSInt_methods._tdivFast$1(t2, 2));
      },
      onActivate$0: function(_) {
        return this.log$2("{1} [are|is] dazzled by the light!", this._action$_actor);
      },
      onExtend$0: function() {
        return this.log$2("{1} [are|is] dazzled by the light!", this._action$_actor);
      }
    },
    ResistAction: {
      "^": "ConditionAction;_condition$_duration,_condition$_element,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$condition: function() {
        return this._action$_actor.resistances.$index(0, this._condition$_element);
      },
      getDuration$0: function() {
        return this._condition$_duration;
      },
      onActivate$0: function(_) {
        return this.log$2("{1} [are|is] resistant to " + H.S(this._condition$_element) + ".", this._action$_actor);
      },
      onExtend$0: function() {
        return this.log$2("{1} feel[s] the resistance extend.", this._action$_actor);
      }
    },
    _FreezeActorAction_ConditionAction_DestroyActionMixin: {
      "^": "ConditionAction+DestroyActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/detection.dart",, T, {
    "^": "",
    DetectType: {
      "^": "Object;index,_detection$_name",
      toString$0: function(_) {
        return this._detection$_name;
      }
    },
    DetectAction: {
      "^": "Action;_types,_detection$_maxDistance,0_tilesByDistance,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2, t3;
        if (this._tilesByDistance == null)
          this._findTiles$0();
        t1 = this._tilesByDistance;
        if (t1.length === 0)
          return C.ActionResult_null_true_true;
        for (t1 = J.get$iterator$ax((t1 && C.JSArray_methods).removeLast$0(t1)); t1.moveNext$0();) {
          t2 = t1.get$current();
          t3 = this._action$_game._stage;
          t3.toString;
          t3.exploreAt$3$force(t2.x, t2.y, true);
          C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_detect, null, null, null, t2, null));
        }
        return C.ActionResult_null_true_false;
      },
      _findTiles$0: function() {
        var _box_0, t1, distanceMap, addTile, t2, t3, foundExits, t4, t5, t6, t7, distances;
        _box_0 = {};
        t1 = [P.List, L.Vec];
        distanceMap = P.LinkedHashMap_LinkedHashMap$_empty(P.int, t1);
        addTile = new T.DetectAction__findTiles_addTile(this, distanceMap);
        t2 = this._types;
        if (t2.contains$1(0, C.DetectType_0))
          for (t3 = X.RectIterator$(this._action$_game._stage.tiles.bounds), foundExits = 0; t3.moveNext$0();) {
            t4 = t3._rect$_x;
            t5 = t3._rect$_y;
            t6 = this._action$_game._stage.tiles;
            t7 = t6._elements;
            t6 = t6.bounds.size.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (typeof t4 !== "number")
              return H.iae(t4);
            t6 = t5 * t6 + t4;
            if (t6 < 0 || t6 >= t7.length)
              return H.ioore(t7, t6);
            t6 = t7[t6];
            if (t6._isExplored)
              continue;
            if (!t6.type.isExit)
              continue;
            ++foundExits;
            addTile.call$1(new L.Vec(t4, t5));
          }
        else
          foundExits = 0;
        _box_0.foundItems = 0;
        if (t2.contains$1(0, C.DetectType_1))
          this._action$_game._stage.forEachItem$1(new T.DetectAction__findTiles_closure(_box_0, this, addTile));
        if (foundExits > 0) {
          t2 = _box_0.foundItems;
          t3 = this._action$_actor;
          if (t2 > 0)
            this.log$2("{1} sense[s] hidden secrets in the dark!", t3);
          else
            this.log$2("{1} sense[s] places to escape!", t3);
        } else if (_box_0.foundItems > 0)
          this.log$2("{1} sense[s] the treasures held in the dark!", this._action$_actor);
        else
          this.log$1("The darkness holds no secrets.");
        t2 = distanceMap.get$keys(distanceMap);
        distances = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
        C.JSArray_methods.sort$1(distances, new T.DetectAction__findTiles_closure0());
        t2 = H.getTypeArgumentByIndex(distances, 0);
        this._tilesByDistance = new H.MappedListIterable(distances, H.functionTypeCheck(new T.DetectAction__findTiles_closure1(distanceMap), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
      }
    },
    DetectAction__findTiles_addTile: {
      "^": "Closure:13;$this,distanceMap",
      call$1: function(pos) {
        var t1, distance;
        t1 = this.$this;
        distance = t1._action$_actor._pos.$sub(0, pos).get$lengthSquared();
        t1 = t1._detection$_maxDistance;
        if (t1 != null && distance > t1 * t1)
          return;
        t1 = this.distanceMap;
        t1.putIfAbsent$2(0, distance, new T.DetectAction__findTiles_addTile_closure());
        J.add$1$ax(t1.$index(0, distance), pos);
      }
    },
    DetectAction__findTiles_addTile_closure: {
      "^": "Closure:115;",
      call$0: function() {
        return H.setRuntimeTypeInfo([], [L.Vec]);
      }
    },
    DetectAction__findTiles_closure: {
      "^": "Closure:23;_box_0,$this,addTile",
      call$2: function(item, pos) {
        if (this.$this._action$_game._stage.tiles.$index(0, pos)._isExplored)
          return;
        ++this._box_0.foundItems;
        this.addTile.call$1(pos);
      }
    },
    DetectAction__findTiles_closure0: {
      "^": "Closure:118;",
      call$2: function(a, b) {
        H.intTypeCheck(a);
        return J.compareTo$1$ns(H.intTypeCheck(b), a);
      }
    },
    DetectAction__findTiles_closure1: {
      "^": "Closure:125;distanceMap",
      call$1: [function(distance) {
        return this.distanceMap.$index(0, H.intTypeCheck(distance));
      }, null, null, 4, 0, null, 2, "call"]
    }
  }], ["", "package:hauberk/src/content/action/eat.dart",, X, {
    "^": "",
    EatAction: {
      "^": "Action;_eat$_amount,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2;
        t1 = H.interceptedTypeCast(this._action$_actor, "$isHero");
        t2 = t1._stomach;
        if (t2 === 400)
          this.log$2("{1} [is|are] already full!", t1);
        else if (t2 + this._eat$_amount > 400)
          this.log$2("{1} [is|are] stuffed!", t1);
        else
          this.log$2("{1} feel[s] satiated.", t1);
        t1 = H.interceptedTypeCast(this._action$_actor, "$isHero");
        t2 = t1._stomach;
        t1.toString;
        t1._stomach = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + this._eat$_amount, 0, 400));
        return C.ActionResult_null_true_true;
      }
    }
  }], ["", "package:hauberk/src/content/action/element.dart",, G, {
    "^": "",
    ElementActionMixin: {
      "^": "Object;",
      hitTile$4: function(hit, pos, distance, fuel) {
        var t1, action;
        t1 = this._action$_game._stage.tiles.$index(0, pos).type.onOpen;
        if (t1 != null)
          this.addAction$1(t1.call$1(pos));
        this.addEvent$3$element$pos(C.EventType_cone, hit.get$element(), pos);
        t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
        if (t1 != null && t1 !== this._action$_actor)
          hit.perform$4$canMiss(this, this._action$_actor, t1, false);
        action = hit.get$element().floorAction.call$4(pos, hit, distance, fuel);
        if (action != null)
          this.addAction$1(action);
      },
      hitTile$3: function(hit, pos, distance) {
        return this.hitTile$4(hit, pos, distance, 0);
      }
    },
    BurnActorAction: {
      "^": "_BurnActorAction_Action_DestroyActionMixin;0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2;
        this.destroyHeldItems$1($.$get$Elements_fire());
        t1 = this._action$_actor;
        t2 = t1.cold;
        if (t2._turnsRemaining > 0) {
          t2._turnsRemaining = 0;
          t2._intensity = 0;
          return this.succeed$2("The fire warms {1} back up.", t1);
        }
        return C.ActionResult_null_true_true;
      }
    },
    BurnFloorAction: {
      "^": "_BurnFloorAction_Action_DestroyActionMixin;_element$_pos,_element$_damage,_element$_fuel,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3, t4, fuel, ignition;
        t1 = this._element$_fuel;
        t2 = this._element$_pos;
        t3 = $.$get$Elements_fire();
        t4 = this.destroyFloorItems$2(t2, t3);
        if (typeof t1 !== "number")
          return t1.$add();
        fuel = t1 + t4;
        t2 = this._action$_game._stage.tiles.$index(0, t2);
        ignition = Z.Tiles_ignition(t2.type);
        if (fuel <= 0)
          t1 = ignition > 0 && this._element$_damage > $.$get$rng().range$1(ignition);
        else
          t1 = true;
        if (t1) {
          fuel += Z.Tiles_fuel(t2.type);
          t1 = $.$get$rng().range$2(C.JSInt_methods._tdivFast$1(fuel, 2), fuel);
          t2.substance = t1;
          t1 -= C.JSInt_methods._tdivFast$1(this._element$_damage, 4);
          t2.substance = t1;
          if (t1 <= 0)
            t2.substance = 1;
          t2.element = t3;
          this._action$_game._stage._lighting._floorLightDirty = true;
        }
        return C.ActionResult_null_true_true;
      }
    },
    BurningFloorAction: {
      "^": "_BurningFloorAction_Action_DestroyActionMixin;_element$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2;
        t1 = this._element$_pos;
        t2 = this._action$_game._stage._actorsByTile.$index(0, t1);
        if (t2 != null)
          new U.Hit(U.Attack$(new O.Noun("fire"), "burns", 10, 0, $.$get$Elements_fire()), 0, 1, 1, 0, $.$get$Element_none(), 1).perform$4$canMiss(this, null, t2, false);
        t2 = this._action$_game._stage.tiles.$index(0, t1);
        t2.substance = t2.substance + this.destroyFloorItems$2(t1, $.$get$Elements_fire());
        return C.ActionResult_null_true_true;
      }
    },
    FreezeFloorAction: {
      "^": "_FreezeFloorAction_Action_DestroyActionMixin;_element$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        this.destroyFloorItems$2(this._element$_pos, $.$get$Elements_cold());
        return C.ActionResult_null_true_true;
      }
    },
    PoisonFloorAction: {
      "^": "_PoisonFloorAction_Action_DestroyActionMixin;_element$_pos,_element$_damage,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3;
        t1 = this._action$_game._stage.tiles.$index(0, this._element$_pos);
        t2 = t1.element;
        t3 = $.$get$Elements_fire();
        if ((t2 == null ? t3 == null : t2 === t3) && t1.substance > 0)
          return C.ActionResult_null_true_true;
        t1.toString;
        t2 = $.$get$Motility_fly();
        if ((t1.type.motility._bitMask & t2._bitMask) !== 0) {
          t1.element = $.$get$Elements_poison();
          t1.substance = H.intTypeCheck(C.JSInt_methods.clamp$2(t1.substance + this._element$_damage * 16, 0, 255));
        }
        return C.ActionResult_null_true_true;
      }
    },
    PoisonedFloorAction: {
      "^": "_PoisonedFloorAction_Action_DestroyActionMixin;_element$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1 = this._action$_game._stage._actorsByTile.$index(0, this._element$_pos);
        if (t1 != null)
          new U.Hit(U.Attack$(new O.Noun("poison"), "chokes", 4, 0, $.$get$Elements_poison()), 0, 1, 1, 0, $.$get$Element_none(), 1).perform$4$canMiss(this, null, t1, false);
        return C.ActionResult_null_true_true;
      }
    },
    WindAction: {
      "^": "Action;0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2, distance, positions;
        t1 = this._action$_actor.get$motility();
        t2 = $.$get$Motility_fly();
        distance = (t1._bitMask & t2._bitMask) !== 0 ? 6 : 3;
        t1 = this._action$_actor.get$motility();
        t2 = $.$get$Motility_door();
        t1 = t1._bitMask;
        t2 = t2._bitMask;
        t2 = N.MotilityFlow$(this._action$_game._stage, this._action$_actor._pos, new Q.Motility(t1 & ~t2), null, null, distance).get$reachable();
        t2.toString;
        t1 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
        positions = P.List_List$from(new H.WhereIterable(t2, H.functionTypeCheck(new G.WindAction_onPerform_closure(this), {func: 1, ret: P.bool, args: [t1]}), [t1]), true, t1);
        if (positions.length === 0)
          return C.ActionResult_null_false_true;
        this.log$2("{1} [are|is] thrown by the wind!", this._action$_actor);
        t1 = this._action$_actor;
        this.addEvent$3$actor$pos(C.EventType_wind, t1, t1._pos);
        t1 = this._action$_actor;
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(positions, "$isList", [L.Vec], "$asList");
        t2 = t2.range$1(positions.length);
        if (t2 < 0 || t2 >= positions.length)
          return H.ioore(positions, t2);
        t1.set$pos(positions[t2]);
        return C.ActionResult_null_true_true;
      }
    },
    WindAction_onPerform_closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        H.interceptedTypeCheck(pos, "$isVec");
        return this.$this._action$_game._stage._actorsByTile.$index(0, pos) == null;
      }
    },
    LightFloorAction: {
      "^": "Action;_element$_pos,0_emanation,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        this._action$_game._stage.tiles.$index(0, this._element$_pos).addEmanation$1(this._emanation);
        this._action$_game._stage._lighting._floorLightDirty = true;
        return C.ActionResult_null_true_true;
      }
    },
    _BurnActorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _BurnFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _BurningFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _FreezeFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _PoisonFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _PoisonedFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/flow.dart",, N, {
    "^": "",
    FlowAction: {
      "^": "_FlowAction_Action_ElementActionMixin;_flow0$_from,_flow0$_hit,0_flow0$_flow,0_tiles,_flow0$_motility,_slowness,_flow0$_frame,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2, distance, end, t3, _i;
        t1 = (this._flow0$_frame + 1) % this._slowness;
        this._flow0$_frame = t1;
        if (t1 !== 0) {
          this.addEvent$1(C.EventType_pause);
          return C.ActionResult_null_true_false;
        }
        t1 = this._tiles;
        if (t1 == null) {
          t1 = N.MotilityFlow$(this._action$_game._stage, this._flow0$_from, this._flow0$_motility, false, null, null);
          this._flow0$_flow = t1;
          t1 = t1.get$reachable();
          t1.toString;
          t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
          t2 = P.List_List$from(new H.TakeWhileIterable(t1, H.functionTypeCheck(new N.FlowAction_onPerform_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
          this._tiles = t2;
          t1 = t2;
        }
        distance = this._flow0$_flow.costAt$1(C.JSArray_methods.get$first(t1));
        for (end = 0; t1 = this._tiles, end < t1.length; ++end) {
          t1 = this._flow0$_flow.costAt$1(t1[end]);
          if (t1 == null ? distance != null : t1 !== distance)
            break;
        }
        for (t1 = this._tiles, t1 = (t1 && C.JSArray_methods).sublist$2(t1, 0, end), t2 = t1.length, t3 = this._flow0$_hit, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          this.hitTile$3(t3, t1[_i], distance);
        t1 = this._tiles;
        t1 = (t1 && C.JSArray_methods).sublist$1(t1, end);
        this._tiles = t1;
        if (t1.length === 0)
          return C.ActionResult_null_true_true;
        return C.ActionResult_null_true_false;
      },
      static: {
        FlowAction$: function(_from, _hit, _motility, slowness) {
          return new N.FlowAction(_from, _hit, _motility, slowness == null ? 1 : slowness, 0);
        }
      }
    },
    FlowAction_onPerform_closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        var t1, t2;
        H.interceptedTypeCheck(pos, "$isVec");
        t1 = this.$this;
        t2 = t1._flow0$_flow.costAt$1(pos);
        t1 = t1._flow0$_hit.get$range();
        if (typeof t2 !== "number")
          return t2.$le();
        return t2 <= t1;
      }
    },
    FlowSelfAction: {
      "^": "Action;_flow0$_attack,_flow0$_motility,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        return this.alternate$1(N.FlowAction$(this._action$_actor._pos, new U.Hit(this._flow0$_attack, 0, 1, 1, 0, $.$get$Element_none(), 1), this._flow0$_motility, null));
      }
    },
    FlowFromAction: {
      "^": "Action;_flow0$_attack,_flow0$_pos,_flow0$_motility,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        return this.alternate$1(N.FlowAction$(this._flow0$_pos, new U.Hit(this._flow0$_attack, 0, 1, 1, 0, $.$get$Element_none(), 1), this._flow0$_motility, null));
      }
    },
    _FlowAction_Action_ElementActionMixin: {
      "^": "Action+ElementActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/heal.dart",, O, {
    "^": "",
    HealAction: {
      "^": "Action;amount<,curePoison,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, changed, t3;
        t1 = this._action$_actor;
        t2 = t1.poison;
        if (t2._turnsRemaining > 0 && this.curePoison) {
          t2._turnsRemaining = 0;
          t2._intensity = 0;
          this.log$2("{1} [are|is] cleansed of poison.", t1);
          changed = true;
        } else
          changed = false;
        t1 = this._action$_actor;
        if (t1._health !== t1.get$maxHealth() && this.amount > 0) {
          t1 = this._action$_actor;
          t2 = t1._health;
          t3 = this.amount;
          if (typeof t2 !== "number")
            return t2.$add();
          t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + t3, 0, t1.get$maxHealth()));
          this.addEvent$3$actor$other(C.EventType_heal, this._action$_actor, t3);
          this.log$2("{1} feel[s] better.", this._action$_actor);
          changed = true;
        }
        if (changed)
          return C.ActionResult_null_true_true;
        else
          return this.succeed$2("{1} [don't|doesn't] feel any different.", this._action$_actor);
      }
    }
  }], ["", "package:hauberk/src/content/action/howl.dart",, U, {
    "^": "",
    HowlAction: {
      "^": "Action;_howl0$_range,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3, _i, other, t4, t5, t6;
        this.log$2("{1} howls!", this._action$_actor);
        this.addEvent$2$actor(C.EventType_howl, this._action$_actor);
        for (t1 = H.interceptedTypeCast(this._action$_actor, "$isMonster").game._stage._actors, t2 = t1.length, t3 = this._howl0$_range, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          other = t1[_i];
          t4 = this._action$_actor;
          if ((other == null ? t4 != null : other !== t4) && other instanceof B.Monster && other._pos.$sub(0, H.interceptedTypeCast(t4, "$isMonster")._pos).$le(0, t3)) {
            t4 = this._action$_game._stage;
            t5 = this._action$_actor._pos;
            t6 = other._pos;
            other.hear$1(t4._sound.volumeBetween$2(t5, t6));
          }
        }
        return C.ActionResult_null_true_true;
      }
    }
  }], ["", "package:hauberk/src/content/action/illuminate.dart",, F, {
    "^": "",
    IlluminateAction: {
      "^": "RayActionBase;range<,_illuminate$_emanationLevel,_from,_to,_hitTiles,_radius,_rays,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      reachStartTile$1: function(pos) {
        this.reachTile$2(pos, 0);
      },
      reachTile$2: function(pos, distance) {
        this._action$_game._stage.tiles.$index(0, pos).addEmanation$1(F.Lighting_emanationForLevel(this._illuminate$_emanationLevel));
        this._action$_game._stage._lighting._floorLightDirty = true;
        this.addEvent$1(C.EventType_pause);
      }
    },
    IlluminateSelfAction: {
      "^": "Action;_illuminate$_range,_illuminate$_emanationLevel,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2;
        t1 = this._action$_actor._pos;
        t2 = new F.IlluminateAction(this._illuminate$_range, this._illuminate$_emanationLevel, t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
        t2.RayActionBase$3(t1, t1, 1);
        return this.alternate$1(t2);
      }
    }
  }], ["", "package:hauberk/src/content/action/mapping.dart",, Q, {
    "^": "",
    MappingAction: {
      "^": "Action;_mapping$_maxDistance,_illuminate,_currentDistance,0_mapping$_tilesByDistance,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, i, t2, t3, _i, pos, t4, t5, t6, t7, _i0, dir;
        if (this._mapping$_tilesByDistance == null)
          this._mapping$_findTiles$0();
        for (t1 = this._illuminate, i = 0; i < 2; ++i) {
          t2 = this._currentDistance;
          t3 = this._mapping$_tilesByDistance;
          if (t2 >= t3.length)
            return C.ActionResult_null_true_true;
          for (t2 = t3[t2], t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            pos = t2[_i];
            t4 = this._action$_game._stage;
            t4.toString;
            H.interceptedTypeCheck(pos, "$isVec");
            t5 = pos.x;
            t6 = pos.y;
            t4.exploreAt$3$force(t5, t6, true);
            C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_map, null, null, null, pos, null));
            if (t1) {
              t4 = this._action$_game._stage.tiles;
              t7 = t4._elements;
              t4 = t4.bounds.size.x;
              if (typeof t4 !== "number")
                return H.iae(t4);
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = t6 * t4 + t5;
              if (t5 < 0 || t5 >= t7.length)
                return H.ioore(t7, t5);
              t5 = t7[t5];
              t5._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t5._appliedEmanation + 255, 0, 192));
              this._action$_game._stage._lighting._floorLightDirty = true;
            }
            for (_i0 = 0; _i0 < 8; ++_i0) {
              dir = C.List_slV[_i0];
              t4 = this._action$_game._stage;
              t5 = pos.$add(0, dir);
              t4.exploreAt$3$force(t5.x, t5.y, true);
            }
          }
          ++this._currentDistance;
        }
        return C.ActionResult_null_true_false;
      },
      _mapping$_findTiles$0: function() {
        var t1, t2, t3, t4, t5, flow, distance, i;
        t1 = L.Vec;
        t2 = [t1];
        t3 = H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([], t2)], [[P.List, L.Vec]]);
        this._mapping$_tilesByDistance = t3;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        C.JSArray_methods.add$1(t3[0], this._action$_actor._pos);
        t3 = this._action$_game._stage;
        t4 = this._action$_actor._pos;
        t5 = this._mapping$_maxDistance;
        flow = new Q.MappingFlow(t5, t3, t4, t5, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), 0, [t1]), H.setRuntimeTypeInfo([], t2));
        flow.Flow$3$maxDistance(t3, t4, t5);
        for (t1 = flow.get$reachable(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          t3 = t1.get$current();
          distance = flow.costAt$1(t3);
          i = this._mapping$_tilesByDistance.length;
          if (typeof distance !== "number")
            return H.iae(distance);
          for (; i <= distance; ++i) {
            t4 = this._mapping$_tilesByDistance;
            (t4 && C.JSArray_methods).add$1(t4, H.setRuntimeTypeInfo([], t2));
          }
          t4 = this._mapping$_tilesByDistance;
          if (distance < 0 || distance >= t4.length)
            return H.ioore(t4, distance);
          C.JSArray_methods.add$1(t4[distance], t3);
        }
        for (i = 0; t1 = this._mapping$_tilesByDistance, i < t1.length; ++i) {
          t3 = $.$get$rng();
          t1 = t1[i];
          t3.toString;
          C.JSArray_methods.shuffle$1(H.assertSubtype(t1, "$isList", t2, "$asList"), t3._random);
        }
      }
    },
    MappingFlow: {
      "^": "Flow;_mapping$_maxDistance,stage,_flow$_start,_maxDistance,0_costs,0_offset,_open,_found",
      tileCost$4: function(parentCost, pos, tile, isDiagonal) {
        var t1 = $.$get$Motility_doorAndFly();
        if ((tile.type.motility._bitMask & t1._bitMask) === 0)
          return;
        if (typeof parentCost !== "number")
          return parentCost.$ge();
        if (parentCost >= this._mapping$_maxDistance * 2)
          return;
        return isDiagonal ? 3 : 2;
      }
    }
  }], ["", "package:hauberk/src/content/action/missive.dart",, R, {
    "^": "",
    Missive: {
      "^": "Object;index,_missive$_name",
      toString$0: function(_) {
        return this._missive$_name;
      }
    },
    MissiveAction: {
      "^": "Action;target,missive,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2;
        t1 = $.$get$rng();
        t2 = $.$get$_messages().$index(0, this.missive);
        t1.toString;
        H.assertSubtype(t2, "$isList", [P.String], "$asList");
        t1 = t1.range$1(t2.length);
        if (t1 < 0 || t1 >= t2.length)
          return H.ioore(t2, t1);
        return this.succeed$3(t2[t1], this._action$_actor, this.target);
      }
    }
  }], ["", "package:hauberk/src/content/action/ray.dart",, G, {
    "^": "",
    RayActionBase: {
      "^": "Action;",
      get$isImmediate: function() {
        return false;
      },
      RayActionBase$3: function(_from, _to, fraction) {
        var numRays, t1, t2, offset, centerTheta, t3, i, thetaStep;
        numRays = C.JSDouble_methods.ceil$0(6.283185307179586 * this.get$range() * fraction * 2);
        if (fraction < 1) {
          t1 = this._to;
          t2 = this._from;
          offset = t1.$sub(0, t2);
          centerTheta = !J.$eq$(t2, t1) ? Math.atan2(H.checkNum(offset.x), offset.y) : 0;
          for (t1 = numRays - 1, t2 = this._rays, t3 = 6.283185307179586 * fraction, i = 0; i < numRays; ++i)
            C.JSArray_methods.add$1(t2, centerTheta + (i / t1 - 0.5) * t3);
        } else {
          thetaStep = 6.283185307179586 / numRays;
          for (t1 = this._rays, i = 0; i < numRays; ++i)
            C.JSArray_methods.add$1(t1, i * thetaStep);
        }
      },
      onPerform$0: function() {
        var t1, t2;
        if (this._radius === 0) {
          this.reachStartTile$1(this._from);
          ++this._radius;
          return C.ActionResult_null_true_false;
        }
        t1 = this._rays;
        t2 = H.functionTypeCheck(new G.RayActionBase_onPerform_closure(this), {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(t1, 0)]});
        C.JSArray_methods._removeWhere$2(t1, t2, true);
        if (++this._radius > this.get$range() || t1.length === 0)
          return C.ActionResult_null_true_true;
        return C.ActionResult_null_true_false;
      },
      reachStartTile$1: function(pos) {
      }
    },
    RayActionBase_onPerform_closure: {
      "^": "Closure:127;$this",
      call$1: function(ray) {
        var t1, t2, t3, t4, pos;
        H.doubleTypeCheck(ray);
        t1 = this.$this;
        t2 = t1._from;
        t3 = t2.x;
        t4 = C.JSNumber_methods.round$0(Math.sin(H.checkNum(ray)) * t1._radius);
        if (typeof t3 !== "number")
          return t3.$add();
        pos = new L.Vec(t3 + t4, t2.y + C.JSNumber_methods.round$0(Math.cos(H.checkNum(ray)) * t1._radius));
        t3 = t1._action$_game._stage.tiles.$index(0, pos);
        t3.toString;
        t4 = $.$get$Motility_fly();
        if ((t3.type.motility._bitMask & t4._bitMask) === 0)
          return true;
        if (!t1._hitTiles.add$1(0, pos))
          return false;
        t1.reachTile$2(pos, Math.sqrt(pos.$sub(0, t2).get$lengthSquared()));
        return false;
      }
    },
    RayAction: {
      "^": "_RayAction_RayActionBase_ElementActionMixin;_hit,_from,_to,_hitTiles,_radius,_rays,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$range: function() {
        return this._hit.get$range();
      },
      reachTile$2: function(pos, distance) {
        this.hitTile$3(this._hit, pos, distance);
      }
    },
    RingSelfAction: {
      "^": "Action;_ray$_attack,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2;
        t1 = this._action$_actor._pos;
        t2 = new G.RayAction(new U.Hit(this._ray$_attack, 0, 1, 1, 0, $.$get$Element_none(), 1), t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
        t2.RayActionBase$3(t1, t1, 1);
        return this.alternate$1(t2);
      }
    },
    RingFromAction: {
      "^": "Action;_ray$_attack,_ray$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2;
        t1 = this._ray$_pos;
        t2 = new G.RayAction(new U.Hit(this._ray$_attack, 0, 1, 1, 0, $.$get$Element_none(), 1), t1, t1, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
        t2.RayActionBase$3(t1, t1, 1);
        return this.alternate$1(t2);
      }
    },
    _RayAction_RayActionBase_ElementActionMixin: {
      "^": "RayActionBase+ElementActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/spawn.dart",, L, {
    "^": "",
    SpawnAction: {
      "^": "Action;_spawn$_pos,_breed,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, spawned;
        if ($.$get$rng().range$1(H.interceptedTypeCast(this._action$_actor, "$isMonster").generation) !== 0)
          return C.ActionResult_null_true_true;
        t1 = H.interceptedTypeCast(this._action$_actor, "$isMonster");
        ++t1.generation;
        spawned = this._breed.spawn$3(this._action$_game, this._spawn$_pos, t1);
        this._action$_game._stage.addActor$1(spawned);
        this.addEvent$2$actor(C.EventType_spawn, spawned);
        return C.ActionResult_null_true_true;
      }
    }
  }], ["", "package:hauberk/src/content/action/teleport.dart",, S, {
    "^": "",
    TeleportAction: {
      "^": "Action;distance,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, targets, t2, t3, t4, t5, t6, pos, t7, t8, best, tries, max, from;
        t1 = [L.Vec];
        targets = H.setRuntimeTypeInfo([], t1);
        t2 = this._action$_actor._pos;
        t3 = t2.x;
        t4 = this.distance;
        if (typeof t3 !== "number")
          return t3.$sub();
        t5 = t3 - t4;
        t2 = t2.y;
        t6 = t2 - t4;
        for (t2 = X.RectIterator$(X.Rect_intersect(new X.Rect(new L.Vec(t5, t6), new L.Vec(t3 + t4 - t5, t2 + t4 - t6)), this._action$_game._stage.tiles.bounds)); t2.moveNext$0();) {
          t3 = t2._rect$_x;
          t5 = t2._rect$_y;
          pos = new L.Vec(t3, t5);
          t6 = this._action$_actor;
          if (t6.canOccupy$1(pos)) {
            t7 = t6.game._stage._actorsByTile;
            t8 = t7._elements;
            t7 = t7.bounds.size.x;
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t3 !== "number")
              return H.iae(t3);
            t7 = t5 * t7 + t3;
            if (t7 < 0 || t7 >= t8.length)
              return H.ioore(t8, t7);
            t7 = t8[t7] == null;
          } else
            t7 = false;
          if (t7) {
            t6 = t6.game._stage.tiles;
            t7 = t6._elements;
            t6 = t6.bounds.size.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = t5 * t6 + t3;
            if (t3 < 0 || t3 >= t7.length)
              return H.ioore(t7, t3);
            t3 = t7[t3].substance === 0;
          } else
            t3 = false;
          if (!t3)
            continue;
          if (pos.$sub(0, this._action$_actor._pos).$gt(0, t4))
            continue;
          C.JSArray_methods.add$1(targets, pos);
        }
        t2 = targets.length;
        if (t2 === 0)
          return this.fail$2("{1} couldn't escape.", this._action$_actor);
        t3 = $.$get$rng();
        t3.toString;
        H.assertSubtype(targets, "$isList", t1, "$asList");
        t2 = t3.range$1(t2);
        if (t2 < 0 || t2 >= targets.length)
          return H.ioore(targets, t2);
        best = targets[t2];
        for (tries = 0; tries < 10; ++tries) {
          max = targets.length;
          t1 = t3._random.nextInt$1(max - 0);
          if (t1 < 0 || t1 >= targets.length)
            return H.ioore(targets, t1);
          pos = targets[t1];
          if (pos.$sub(0, this._action$_actor._pos).$gt(0, best.$sub(0, this._action$_actor._pos)))
            best = pos;
        }
        t1 = this._action$_actor;
        from = t1._pos;
        t1.set$pos(best);
        this.addEvent$3$actor$pos(C.EventType_teleport, this._action$_actor, from);
        return this.succeed$2("{1} teleport[s]!", this._action$_actor);
      }
    }
  }], ["", "package:hauberk/src/content/action/tile.dart",, Q, {
    "^": "",
    _OpenTileAction: {
      "^": "Action;",
      onPerform$0: function() {
        var t1, t2, t3;
        t1 = this._tile$_pos;
        this._action$_game._stage.tiles.$index(0, t1).type = this.get$_openTile();
        this.addEvent$2$pos(C.EventType_openBarrel, t1);
        t2 = $.$get$rng();
        t3 = C.JSNumber_methods.round$0(E.lerpDouble(this._action$_game.depth, 1, 100, this.get$_minDepthEmptyChance(), this.get$_maxDepthEmptyChance()));
        if (t2.range$1(100) < t3)
          this.log$2("The " + this.get$_tile$_name() + " is empty.", this._action$_actor);
        else {
          this._action$_game._stage.placeDrops$3(t1, $.$get$Motility_walk(), this._createDrop$0());
          this.log$2("{1} open[s] the " + this.get$_tile$_name() + ".", this._action$_actor);
        }
        return C.ActionResult_null_true_true;
      }
    },
    OpenBarrelAction: {
      "^": "_OpenTileAction;_tile$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$_tile$_name: function() {
        return "barrel";
      },
      get$_openTile: function() {
        return $.$get$Tiles_openBarrel();
      },
      get$_minDepthEmptyChance: function() {
        return 40;
      },
      get$_maxDepthEmptyChance: function() {
        return 10;
      },
      _createDrop$0: function() {
        return X.parseDrop("food", this._action$_game.depth);
      }
    },
    OpenChestAction: {
      "^": "_OpenTileAction;_tile$_pos,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$_tile$_name: function() {
        return "chest";
      },
      get$_openTile: function() {
        return $.$get$Tiles_openChest();
      },
      get$_minDepthEmptyChance: function() {
        return 20;
      },
      get$_maxDepthEmptyChance: function() {
        return 2;
      },
      _createDrop$0: function() {
        return X._OneOfDrop$(P.LinkedHashMap_LinkedHashMap$_literal([X.parseDrop("treasure", this._action$_game.depth), 0.5, X.parseDrop("magic", this._action$_game.depth), 0.2, X.parseDrop("equipment", this._action$_game.depth), 0.3], L.Drop, P.double));
      }
    }
  }], ["", "package:hauberk/src/content/classes.dart",, V, {
    "^": "",
    _class: function($name, description, startingItems, masteries, spells) {
      var proficiencies, t1, t2, _i, skill, t3, proficiency;
      proficiencies = P.LinkedHashMap_LinkedHashMap$_empty(M.Skill, P.double);
      for (t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        t3 = J.getInterceptor$(skill);
        proficiency = !!t3.$isMasteryDiscipline ? masteries : 1;
        proficiencies.$indexSet(0, skill, !!t3.$isSpell ? proficiency * spells : proficiency);
      }
      return new T.HeroClass($name, description, proficiencies, startingItems);
    }
  }], ["", "package:hauberk/src/content/decor/blast.dart",, L, {
    "^": "",
    Blast: {
      "^": "Decor;",
      canPlace$2: function(dungeon, pos) {
        var t1, t2;
        t1 = dungeon.stage.tiles.$index(0, pos).type;
        t1.toString;
        t2 = $.$get$Motility_walk();
        return (t1.motility._bitMask & t2._bitMask) !== 0;
      },
      place$2: function(dungeon, pos) {
        var particles, t1, t2, i, t3, theta, distance, r, here, t4, t5, from, to, max, t6;
        H.interceptedTypeCheck(pos, "$isVec");
        particles = $.$get$rng().range$2(3, 10);
        for (t1 = dungeon.stage, t2 = [Q.TileType], i = 0; i < particles; ++i) {
          t3 = $.$get$rng();
          theta = t3.float$1(0, 6.283185307179586);
          distance = t3.float$2(0, 2, 6);
          for (r = 0; r < distance; r += 0.5) {
            here = pos.$add(0, new L.Vec(C.JSNumber_methods.round$0(Math.cos(theta) * r), C.JSNumber_methods.round$0(Math.sin(theta) * r)));
            t3 = t1.tiles;
            t4 = t3.bounds;
            if (!t4.contains$1(0, here))
              break;
            t3 = t3._elements;
            t4 = t4.size.x;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t5 = here.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = here.y * t4 + t5;
            if (t5 < 0 || t5 >= t3.length)
              return H.ioore(t3, t5);
            from = t3[t5].type;
            to = $.$get$Blast__tileMap().$index(0, from);
            if (to != null) {
              t4 = $.$get$rng();
              t4.toString;
              H.assertSubtype(to, "$isList", t2, "$asList");
              max = to.length;
              t6 = t4._random.nextInt$1(max - 0);
              if (t6 < 0 || t6 >= to.length)
                return H.ioore(to, t6);
              t6 = to[t6];
              t5 = t3[t5];
              t5.type = t6;
              t3 = $.$get$Tiles_water();
              if (t6 == null ? t3 == null : t6 === t3)
                t3 = t4._random.nextInt$1(100) < 2;
              else
                t3 = false;
              if (t3) {
                t3 = F.Lighting_emanationForLevel(5);
                t5._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t5._appliedEmanation + t3, 0, 192));
              }
            } else {
              from.toString;
              t3 = $.$get$Motility_walk();
              if ((from.motility._bitMask & t3._bitMask) === 0)
                break;
            }
          }
        }
      }
    }
  }], ["", "package:hauberk/src/content/decor/decor.dart",, Y, {
    "^": "",
    Decor_choose: function(theme) {
      var t1 = $.$get$Decor_all();
      if (!t1._tags.containsKey$1(0, theme))
        return;
      return t1.tryChoose$2(1, theme);
    },
    Decor: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/content/decor/furnishing.dart",, S, {
    "^": "",
    Furnishing: {
      "^": "Decor;_furnishing$_cells",
      canPlace$2: function(dungeon, pos) {
        var t1, t2, t3, t4, t5, t6, t7, y, t8, x, t9, t10, t11;
        for (t1 = this._furnishing$_cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, t5 = pos.x, t6 = pos.y, t7 = dungeon.stage, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          t8 = t6 + y;
          x = 0;
          for (; x < t2; ++x) {
            t9 = y * t2 + x;
            if (t9 < 0 || t9 >= t4)
              return H.ioore(t1, t9);
            t9 = t1[t9];
            if (typeof t5 !== "number")
              return t5.$add();
            t10 = t7.tiles;
            t11 = t10._elements;
            t10 = t10.bounds.size.x;
            if (typeof t10 !== "number")
              return H.iae(t10);
            t10 = t8 * t10 + (t5 + x);
            if (t10 < 0 || t10 >= t11.length)
              return H.ioore(t11, t10);
            if (!t9.meetsRequirement$1(t11[t10].type))
              return false;
          }
        }
        return true;
      },
      place$2: function(dungeon, pos) {
        var t1, t2, t3, t4, y, x, t5, t6;
        H.interceptedTypeCheck(pos, "$isVec");
        for (t1 = this._furnishing$_cells, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = 0;
          for (; x < t2; ++x) {
            t5 = y * t2 + x;
            if (t5 < 0 || t5 >= t4)
              return H.ioore(t1, t5);
            t5 = t1[t5];
            t6 = pos.x;
            if (typeof t6 !== "number")
              return t6.$add();
            t5.apply$2(dungeon, new L.Vec(t6 + x, pos.y + y));
          }
        }
      }
    },
    Cell: {
      "^": "Object;_apply,_furnishing$_motility,_require",
      meetsRequirement$1: function(tile) {
        var t1 = this._furnishing$_motility;
        if (t1 != null && (tile.motility._bitMask & t1._bitMask) === 0)
          return false;
        t1 = this._require;
        if (t1.length !== 0 && !C.JSArray_methods.contains$1(t1, tile))
          return false;
        return true;
      },
      apply$2: function(dungeon, pos) {
        var t1 = this._apply;
        if (t1 != null)
          dungeon.setTileAt$2(pos, t1);
      },
      static: {
        Cell$: function(apply, motility, require, requireAny) {
          var t1 = H.setRuntimeTypeInfo([], [Q.TileType]);
          if (require != null)
            C.JSArray_methods.add$1(t1, require);
          if (requireAny != null)
            C.JSArray_methods.addAll$1(t1, requireAny);
          return new S.Cell(apply, motility, t1);
        }
      }
    }
  }], ["", "package:hauberk/src/content/decor/furnishing_builder.dart",, T, {
    "^": "",
    furnishing: function(symmetry, applied, template) {
      var t1, t2, t3, lines, mirrorApplied, mirrorLines, i, rotateApplied, rotateLines, x, line, y;
      t1 = P.String;
      t2 = H.setRuntimeTypeInfo(template.split("\n"), [t1]);
      t3 = H.getTypeArgumentByIndex(t2, 0);
      lines = new H.MappedListIterable(t2, H.functionTypeCheck(new T.furnishing_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).toList$0(0);
      T._singleFurnishing(applied, lines);
      if (symmetry === C.Symmetry_1 || symmetry === C.Symmetry_3) {
        mirrorApplied = T._mapString(applied, T.furnishing_builder___mirrorCharHorizontal$closure());
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; i < lines.length; ++i) {
          t2 = J.get$codeUnits$s(lines[i]);
          C.JSArray_methods.$indexSet(mirrorLines, i, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(t2, [H.getRuntimeTypeArgument(t2, "ListMixin", 0)]), 0, null), T.furnishing_builder___mirrorCharHorizontal$closure()));
        }
        T._singleFurnishing(mirrorApplied, mirrorLines);
      }
      if (symmetry === C.Symmetry_2 || symmetry === C.Symmetry_3) {
        mirrorApplied = T._mapString(applied, T.furnishing_builder___mirrorCharVertical$closure());
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; t2 = lines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(lines[i], T.furnishing_builder___mirrorCharVertical$closure()));
        T._singleFurnishing(mirrorApplied, mirrorLines);
      }
      if (symmetry === C.Symmetry_3 || symmetry === C.Symmetry_5 || symmetry === C.Symmetry_4) {
        mirrorApplied = T._mapString(applied, T.furnishing_builder___mirrorCharBoth$closure());
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; t2 = lines.length, i < t2; ++i) {
          t3 = J.get$codeUnits$s(lines[i]);
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(t3, [H.getRuntimeTypeArgument(t3, "ListMixin", 0)]), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
        }
        T._singleFurnishing(mirrorApplied, mirrorLines);
      }
      if (symmetry === C.Symmetry_4) {
        rotateApplied = T._mapString(applied, T.furnishing_builder___rotateChar90$closure());
        rotateLines = H.setRuntimeTypeInfo([], [t1]);
        x = 0;
        while (true) {
          if (0 >= lines.length)
            return H.ioore(lines, 0);
          t1 = J.get$length$asx(lines[0]);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(x < t1))
            break;
          for (line = "", y = 0; y < lines.length; ++y)
            line = C.JSString_methods.$add(line, T._rotateChar90(J.$index$asx(lines[y], x)));
          C.JSArray_methods.add$1(rotateLines, line);
          ++x;
        }
        T._singleFurnishing(rotateApplied, rotateLines);
        mirrorApplied = T._mapString(rotateApplied, T.furnishing_builder___mirrorCharBoth$closure());
        mirrorLines = H.setRuntimeTypeInfo(rotateLines.slice(0), [H.getTypeArgumentByIndex(rotateLines, 0)]);
        for (t1 = [P.int], i = 0; t2 = rotateLines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(rotateLines[i]), t1), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
        T._singleFurnishing(mirrorApplied, mirrorLines);
      }
    },
    _mapString: function(input, map) {
      var t1, i, t2;
      H.stringTypeCheck(input);
      H.functionTypeCheck(map, {func: 1, ret: P.String, args: [P.String]});
      for (t1 = input.length, i = 0, t2 = ""; i < t1; ++i)
        t2 += H.S(map.call$1(input[i]));
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _mirrorCharBoth: [function(input) {
      return T._mirrorCharHorizontal(T._mirrorCharVertical(input));
    }, "call$1", "furnishing_builder___mirrorCharBoth$closure", 4, 0, 5],
    _mirrorCharHorizontal: [function(input) {
      var t1, _i, mirror, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_mirrorHorizontal(), _i = 0; _i < 3; ++_i) {
        mirror = t1[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    }, "call$1", "furnishing_builder___mirrorCharHorizontal$closure", 4, 0, 5, 7],
    _mirrorCharVertical: [function(input) {
      var t1, _i, mirror, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_mirrorVertical(), _i = 0; _i < 3; ++_i) {
        mirror = t1[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    }, "call$1", "furnishing_builder___mirrorCharVertical$closure", 4, 0, 5, 7],
    _rotateChar90: [function(input) {
      var t1, _i, rotate, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_rotate(), _i = 0; _i < 2; ++_i) {
        rotate = t1[_i];
        index = C.JSString_methods.indexOf$1(rotate, input);
        if (index !== -1) {
          t1 = C.JSInt_methods.$mod(index + 1, 4);
          if (t1 >= rotate.length)
            return H.ioore(rotate, t1);
          return rotate[t1];
        }
      }
      return input;
    }, "call$1", "furnishing_builder___rotateChar90$closure", 4, 0, 5, 7],
    _singleFurnishing: function(applied, lines) {
      var cells, t1, t2, t3, y, x, t4, char, cell, t5;
      H.assertSubtype(lines, "$isList", [P.String], "$asList");
      cells = M.Array2D$(J.get$length$asx(C.JSArray_methods.get$first(lines)), lines.length, null, S.Cell);
      for (t1 = H.getTypeArgumentByIndex(cells, 0), t2 = cells._elements, t3 = cells.bounds.size.x, y = 0; y < lines.length; ++y) {
        x = 0;
        while (true) {
          t4 = J.get$length$asx(C.JSArray_methods.get$first(lines));
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(x < t4))
            break;
          if (y >= lines.length)
            return H.ioore(lines, y);
          char = J.$index$asx(lines[y], x);
          if (char == null)
            H.throwExpression(H.argumentErrorValue(char));
          cell = H.assertSubtypeOfRuntimeType(H.stringContainsUnchecked(applied, char, 0) ? $.$get$_applyCells().$index(0, char) : $.$get$_requireCells().$index(0, char), t1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          C.JSArray_methods.$indexSet(t2, y * t3 + x, cell);
          ++x;
        }
      }
      t1 = $.$get$Decor_all();
      t2 = $._frequency;
      t3 = $._themes;
      t1.toString;
      t4 = H.assertSubtypeOfRuntimeType(new S.Furnishing(cells), H.getTypeArgumentByIndex(t1, 0));
      t5 = t1._resources;
      t1.add$5(0, C.JSInt_methods.toString$0(t5.get$length(t5)), t4, 1, t2, t3);
    },
    Symmetry: {
      "^": "Object;index,_furnishing_builder$_name",
      toString$0: function(_) {
        return this._furnishing_builder$_name;
      }
    },
    furnishing_closure: {
      "^": "Closure:5;",
      call$1: [function(line) {
        return J.trim$0$s(H.stringTypeCheck(line));
      }, null, null, 4, 0, null, 29, "call"]
    }
  }], ["", "package:hauberk/src/content/dungeon/aquatic.dart",, S, {
    "^": "",
    AquaticBiome: {
      "^": "Biome;",
      _makePlace$2: function(grottoes, cells) {
        var t1, t2, t3, t4, i, i0, t5, max, pos, t6, t7, t8;
        t1 = [L.Vec];
        H.assertSubtype(cells, "$isList", t1, "$asList");
        for (t2 = this._aquatic$_dungeon, t3 = t2.stage, t4 = [Q.TileType], i = 0; i < grottoes; ++i)
          for (i0 = 0; i0 < 200; ++i0) {
            t5 = $.$get$rng();
            t5.toString;
            H.assertSubtype(cells, "$isList", t1, "$asList");
            max = cells.length;
            t5 = t5._random.nextInt$1(max - 0);
            if (t5 < 0 || t5 >= cells.length)
              return H.ioore(cells, t5);
            pos = cells[t5];
            t5 = t3.tiles;
            t6 = t5._elements;
            t7 = pos.y;
            t5 = t5.bounds.size.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t8 = pos.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            t8 = t7 * t5 + t8;
            if (t8 < 0 || t8 >= t6.length)
              return H.ioore(t6, t8);
            t8 = t6[t8].type;
            t6 = $.$get$Tiles_grass();
            if ((t8 == null ? t6 == null : t8 === t6) && t2.hasCardinalNeighbor$2(pos, H.setRuntimeTypeInfo([$.$get$Tiles_wall(), $.$get$Tiles_rock()], t4))) {
              this._erode$5(H.setRuntimeTypeInfo([pos], t1), 30, 3, t6, cells);
              break;
            }
          }
        t2.addPlace$1(new D.AquaticPlace(false, false, cells, P.LinkedHashSet_LinkedHashSet(null, null, null, D.Place), 0.07, 0, 0.02, 0, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.double), 0));
      },
      _erode$5: function(starts, size, smoothing, tile, cells) {
        var t1, t2, edges, addNeighbors, scorePos, count, t3, edgeList, best, bestScore, i, max, t4, pos, score, t5, t6, t7;
        t1 = L.Vec;
        t2 = [t1];
        H.assertSubtype(starts, "$isList", t2, "$asList");
        H.assertSubtype(cells, "$isList", t2, "$asList");
        edges = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        addNeighbors = new S.AquaticBiome__erode_addNeighbors(this, edges);
        scorePos = new S.AquaticBiome__erode_scorePos(this, tile);
        C.JSArray_methods.forEach$1(starts, addNeighbors);
        t1 = $.$get$rng();
        count = t1.triangleInt$2(size, size / 2 | 0);
        t3 = this._aquatic$_dungeon.stage;
        while (true) {
          if (!(edges._collection$_length !== 0 && count > 0))
            break;
          edgeList = edges.toList$0(0);
          best = H.setRuntimeTypeInfo([], t2);
          for (bestScore = -1, i = 0; i < smoothing; ++i) {
            H.assertSubtype(edgeList, "$isList", t2, "$asList");
            max = edgeList.length;
            t4 = t1._random.nextInt$1(max - 0);
            if (t4 < 0 || t4 >= edgeList.length)
              return H.ioore(edgeList, t4);
            pos = edgeList[t4];
            score = scorePos.call$1(pos);
            if (typeof score !== "number")
              return score.$gt();
            if (score > bestScore) {
              best = H.setRuntimeTypeInfo([pos], t2);
              bestScore = score;
            } else if (score === bestScore)
              C.JSArray_methods.add$1(best, pos);
          }
          H.assertSubtype(best, "$isList", t2, "$asList");
          max = best.length;
          t4 = t1._random.nextInt$1(max - 0);
          if (t4 < 0 || t4 >= best.length)
            return H.ioore(best, t4);
          pos = best[t4];
          t4 = t3.tiles;
          t5 = t4._elements;
          t6 = pos.y;
          t4 = t4.bounds.size.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t7 = pos.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t7 = t6 * t4 + t7;
          if (t7 < 0 || t7 >= t5.length)
            return H.ioore(t5, t7);
          t7 = t5[t7];
          t7.type = tile;
          t4 = $.$get$Tiles_water();
          if (tile == null ? t4 == null : tile === t4)
            t4 = t1._random.nextInt$1(100) < 2;
          else
            t4 = false;
          if (t4) {
            t4 = F.Lighting_emanationForLevel(5);
            t7._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t7._appliedEmanation + t4, 0, 192));
          }
          addNeighbors.call$1(pos);
          edges.remove$1(0, pos);
          C.JSArray_methods.add$1(cells, pos);
          --count;
        }
      }
    },
    AquaticBiome__erode_addNeighbors: {
      "^": "Closure:8;$this,edges",
      call$1: function(pos) {
        var t1, t2, _i, neighbor, t3, t4, t5, type;
        H.interceptedTypeCheck(pos, "$isVec");
        for (t1 = this.edges, t2 = this.$this._aquatic$_dungeon.stage, _i = 0; _i < 4; ++_i) {
          neighbor = pos.$add(0, C.List_aAW[_i]);
          t3 = t2.tiles;
          t4 = t3.bounds;
          if (!t4.inflate$1(-1).contains$1(0, neighbor))
            continue;
          t3 = t3._elements;
          t4 = t4.size.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t5 = neighbor.x;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = neighbor.y * t4 + t5;
          if (t5 < 0 || t5 >= t3.length)
            return H.ioore(t3, t5);
          type = t3[t5].type;
          t3 = $.$get$Tiles_wall();
          if (type == null ? t3 != null : type !== t3) {
            t3 = $.$get$Tiles_rock();
            t3 = type == null ? t3 != null : type !== t3;
          } else
            t3 = false;
          if (t3)
            continue;
          t1.add$1(0, neighbor);
        }
      }
    },
    AquaticBiome__erode_scorePos: {
      "^": "Closure:133;$this,tile",
      call$1: function(pos) {
        var t1, t2, score, _i, neighbor, t3, t4, t5;
        for (t1 = this.$this._aquatic$_dungeon.stage, t2 = this.tile, score = 0, _i = 0; _i < 4; ++_i) {
          neighbor = pos.$add(0, C.List_aAW[_i]);
          t3 = t1.tiles;
          t4 = t3._elements;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t5 = neighbor.x;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = neighbor.y * t3 + t5;
          if (t5 < 0 || t5 >= t4.length)
            return H.ioore(t4, t5);
          t5 = t4[t5].type;
          if (t5 == null ? t2 == null : t5 === t2)
            score += 2;
        }
        for (_i = 0; _i < 4; ++_i) {
          neighbor = pos.$add(0, C.List_izR[_i]);
          t3 = t1.tiles;
          t4 = t3._elements;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t5 = neighbor.x;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = neighbor.y * t3 + t5;
          if (t5 < 0 || t5 >= t4.length)
            return H.ioore(t4, t5);
          t5 = t4[t5].type;
          if (t5 == null ? t2 == null : t5 === t2)
            ++score;
        }
        return score;
      }
    },
    RiverBiome: {
      "^": "AquaticBiome;_aquatic$_cells,_aquatic$_dungeon",
      generate$0: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, startSide, endSide, mid;
          return function $async$generate$0($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$goto = 3;
                  return "Carving river";
                case 3:
                  // after yield
                  t1 = $.$get$rng();
                  t1.toString;
                  t2 = [Z.Direction];
                  H.assertSubtype(C.List_aAW, "$isList", t2, "$asList");
                  t3 = C.List_aAW.length;
                  t4 = t1.range$1(t3);
                  if (t4 < 0 || t4 >= t3) {
                    H.ioore(C.List_aAW, t4);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  startSide = C.List_aAW[t4];
                  t3 = H.setRuntimeTypeInfo(C.List_aAW.slice(0), [H.getTypeArgumentByIndex(C.List_aAW, 0)]);
                  C.JSArray_methods.remove$1(t3, startSide);
                  H.assertSubtype(t3, "$isList", t2, "$asList");
                  t2 = t1.range$1(t3.length);
                  if (t2 < 0 || t2 >= t3.length) {
                    H.ioore(t3, t2);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  endSide = t3[t2];
                  mid = $async$self._makePoint$1(C.Direction_0_0);
                  t2 = $async$self._aquatic$_dungeon;
                  $async$self._displace$3(t2, $async$self._makePoint$1(startSide), mid);
                  $async$self._displace$3(t2, mid, $async$self._makePoint$1(endSide));
                  $async$goto = 4;
                  return "Placing bridges";
                case 4:
                  // after yield
                  $async$self._placeBridges$0();
                  $async$self._makePlace$2(t1.taper$2(2, 4), $async$self._aquatic$_cells.toList$0(0));
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, P.String);
      },
      _makePoint$1: function(side) {
        var t1, t2, t3, x, y;
        t1 = $.$get$rng();
        t2 = this._aquatic$_dungeon.stage.tiles.bounds.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return t3.$mul();
        x = t1.float$2(0, t3 * 0.25, t3 * 0.75);
        t2 = t2.y;
        y = t1.float$2(0, t2 * 0.25, t2 * 0.75);
        switch (side) {
          case C.Direction_0_0:
            return S._RiverPoint$(x, y, null);
          case C.Direction_0_m1:
            return S._RiverPoint$(x, -2, null);
          case C.Direction_0_1:
            return S._RiverPoint$(x, t2 + 2, null);
          case C.Direction_1_0:
            return S._RiverPoint$(t3 + 2, y, null);
          case C.Direction_m1_0:
            return S._RiverPoint$(-2, y, null);
        }
        throw H.wrapException("unreachable");
      },
      _displace$3: function(dungeon, start, end) {
        var t1, t2, h, t3, t4, v, $length, t5, t6, t7, mid, radius, shoreRadius, x1, y1, x2, y2, radiusSquared, shoreSquared, y, yy, t8, x, xx, lengthSquared, pos, t9, t10, t11;
        t1 = start.x;
        t2 = end.x;
        h = t1 - t2;
        t3 = start.y;
        t4 = end.y;
        v = t3 - t4;
        $length = Math.sqrt(h * h + v * v);
        if ($length > 1) {
          t5 = $.$get$rng();
          t6 = $length / 2;
          t7 = $length / 4;
          mid = S._RiverPoint$((t1 + t2) / 2 + t5.float$1(0, t6) - t7, (t3 + t4) / 2 + t5.float$1(0, t6) - t7, (start.radius + end.radius) / 2);
          this._displace$3(dungeon, start, mid);
          this._displace$3(dungeon, mid, end);
          return;
        }
        radius = start.radius;
        shoreRadius = radius + $.$get$rng().float$2(0, 1, 3);
        x1 = C.JSNumber_methods.floor$0(t1 - shoreRadius);
        y1 = C.JSNumber_methods.floor$0(t3 - shoreRadius);
        x2 = C.JSNumber_methods.ceil$0(t1 + shoreRadius);
        y2 = C.JSNumber_methods.ceil$0(t3 + shoreRadius);
        t2 = dungeon.stage.tiles;
        t4 = t2.bounds.size;
        t5 = t4.x;
        if (typeof t5 !== "number")
          return t5.$sub();
        t6 = t5 - 2;
        x1 = H.intTypeCheck(C.JSInt_methods.clamp$2(x1, 1, t6));
        t4 = t4.y - 2;
        y1 = H.intTypeCheck(C.JSInt_methods.clamp$2(y1, 1, t4));
        x2 = H.intTypeCheck(C.JSInt_methods.clamp$2(x2, 1, t6));
        y2 = H.intTypeCheck(C.JSInt_methods.clamp$2(y2, 1, t4));
        radiusSquared = radius * radius;
        shoreSquared = shoreRadius * shoreRadius;
        for (t4 = this._aquatic$_cells, t2 = t2._elements, t6 = t2.length, y = y1; y <= y2; ++y)
          for (yy = t3 - y, t7 = yy * yy, t8 = y * t5, x = x1; x <= x2; ++x) {
            xx = t1 - x;
            lengthSquared = xx * xx + t7;
            pos = new L.Vec(x, y);
            if (lengthSquared <= radiusSquared) {
              t9 = $.$get$Tiles_water();
              t10 = t8 + x;
              if (t10 < 0 || t10 >= t6)
                return H.ioore(t2, t10);
              t10 = t2[t10];
              t10.type = t9;
              t9 = $.$get$rng();
              t9 = t9._random.nextInt$1(100) < 2;
              if (t9) {
                t9 = F.Lighting_emanationForLevel(5);
                t10._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t10._appliedEmanation + t9, 0, 192));
              }
              t4.add$1(0, pos);
            } else {
              if (lengthSquared <= shoreSquared) {
                t9 = t8 + x;
                if (t9 < 0 || t9 >= t6)
                  return H.ioore(t2, t9);
                t9 = t2[t9].type;
                t10 = $.$get$Tiles_rock();
                t10 = t9 == null ? t10 == null : t9 === t10;
                t9 = t10;
              } else
                t9 = false;
              if (t9) {
                t9 = $.$get$Tiles_grass();
                t10 = t8 + x;
                if (t10 < 0 || t10 >= t6)
                  return H.ioore(t2, t10);
                t10 = t2[t10];
                t10.type = t9;
                t11 = $.$get$Tiles_water();
                if (t9 == null ? t11 == null : t9 === t11) {
                  t9 = $.$get$rng();
                  t9 = t9._random.nextInt$1(100) < 2;
                } else
                  t9 = false;
                if (t9) {
                  t9 = F.Lighting_emanationForLevel(5);
                  t10._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t10._appliedEmanation + t9, 0, 192));
                }
                t4.add$1(0, pos);
              }
            }
          }
      },
      _placeBridges$0: function() {
        var t1, t2, t3, shore1, shore2, bridges, t4, _i, dir, here, t5, t6, t7, t8, t9, t10, t11, bridge, placed, count, i, shortest, i0, max;
        t1 = this._aquatic$_cells;
        t2 = this._aquatic$_dungeon.stage;
        t3 = N.MotilityFlow$(t2, t1.firstWhere$1(0, new S.RiverBiome__placeBridges_closure(this)), $.$get$Motility_walk(), null, null, null).get$reachable();
        t3.toString;
        shore1 = P.LinkedHashSet_LinkedHashSet$from(t3, H.getRuntimeTypeArgument(t3, "Iterable", 0));
        t3 = H.getRuntimeTypeArgument(t1, "SetMixin", 0);
        shore2 = P.LinkedHashSet_LinkedHashSet$from(new H.WhereIterable(t1, H.functionTypeCheck(new S.RiverBiome__placeBridges_closure0(this, shore1), {func: 1, ret: P.bool, args: [t3]}), [t3]), t3);
        t3 = [X.Rect];
        bridges = H.setRuntimeTypeInfo([], t3);
        for (t1 = new P._LinkedHashSetIterator(shore1, shore1._collection$_modifications, [H.getTypeArgumentByIndex(shore1, 0)]), t1._collection$_cell = shore1._collection$_first; t1.moveNext$0();) {
          t4 = t1._collection$_current;
          for (_i = 0; _i < 4; ++_i) {
            dir = C.List_aAW[_i];
            here = t4.$add(0, dir);
            t5 = t2.tiles;
            t6 = t5._elements;
            t5 = t5.bounds.size.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t7 = here.x;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t7 = here.y * t5 + t7;
            t8 = t6.length;
            if (t7 < 0 || t7 >= t8)
              return H.ioore(t6, t7);
            t7 = t6[t7].type;
            t9 = $.$get$Tiles_water();
            if (t7 == null ? t9 != null : t7 !== t9)
              continue;
            while (true) {
              t7 = here.y;
              t10 = here.x;
              if (typeof t10 !== "number")
                return H.iae(t10);
              t11 = t7 * t5 + t10;
              if (t11 < 0 || t11 >= t8)
                return H.ioore(t6, t11);
              t11 = t6[t11].type;
              if (!(t11 == null ? t9 == null : t11 === t9))
                break;
              here = here.$add(0, dir);
            }
            if (!shore2.contains$1(0, here))
              continue;
            switch (dir) {
              case C.Direction_0_m1:
                bridge = new X.Rect(new L.Vec(t10, t7), new L.Vec(1, t4.y - t7));
                break;
              case C.Direction_0_1:
                t5 = t4.x;
                t6 = t4.y;
                bridge = new X.Rect(new L.Vec(t5, t6), new L.Vec(1, t7 - t6));
                break;
              case C.Direction_1_0:
                t5 = t4.x;
                t6 = t4.y;
                if (typeof t5 !== "number")
                  return H.iae(t5);
                bridge = new X.Rect(new L.Vec(t5, t6), new L.Vec(t10 - t5, 1));
                break;
              case C.Direction_m1_0:
                t5 = t4.x;
                if (typeof t5 !== "number")
                  return t5.$sub();
                bridge = new X.Rect(new L.Vec(t10, t7), new L.Vec(t5 - t10, 1));
                break;
              default:
                bridge = null;
            }
            C.JSArray_methods.add$1(bridges, bridge);
          }
        }
        if (bridges.length === 0)
          return;
        placed = H.setRuntimeTypeInfo([], t3);
        count = Math.min(bridges.length, $.$get$rng().taper$2(1, 4));
        for (i = 0; i < count; ++i) {
          for (shortest = null, i0 = 0; i0 < 5; ++i0) {
            t1 = $.$get$rng();
            t1.toString;
            H.assertSubtype(bridges, "$isList", t3, "$asList");
            max = bridges.length;
            t1 = t1._random.nextInt$1(max - 0);
            if (t1 < 0 || t1 >= bridges.length)
              return H.ioore(bridges, t1);
            bridge = bridges[t1];
            if (C.JSArray_methods.contains$1(placed, bridge) || C.JSArray_methods.any$1(placed, new S.RiverBiome__placeBridges_closure1(bridge)))
              continue;
            if (shortest != null) {
              t1 = bridge.size;
              t4 = t1.x;
              if (typeof t4 !== "number")
                return t4.$mul();
              t5 = shortest.size;
              t6 = t5.x;
              if (typeof t6 !== "number")
                return t6.$mul();
              t5 = t4 * t1.y < t6 * t5.y;
              t1 = t5;
            } else
              t1 = true;
            if (t1)
              shortest = bridge;
          }
          if (shortest == null)
            continue;
          t1 = new X.RectIterator(shortest);
          t4 = shortest.pos;
          t5 = t4.x;
          if (typeof t5 !== "number")
            return t5.$sub();
          t1._rect$_x = t5 - 1;
          t1._rect$_y = t4.y;
          for (; t1.moveNext$0();) {
            t4 = t1._rect$_x;
            t5 = t1._rect$_y;
            t6 = $.$get$Tiles_bridge();
            t7 = t2.tiles;
            t8 = t7._elements;
            t7 = t7.bounds.size.x;
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t4 !== "number")
              return H.iae(t4);
            t4 = t5 * t7 + t4;
            if (t4 < 0 || t4 >= t8.length)
              return H.ioore(t8, t4);
            t4 = t8[t4];
            t4.type = t6;
            t5 = $.$get$Tiles_water();
            if (t6 == null ? t5 == null : t6 === t5) {
              t5 = $.$get$rng();
              t5 = t5._random.nextInt$1(100) < 2;
            } else
              t5 = false;
            if (t5) {
              t5 = F.Lighting_emanationForLevel(5);
              t4._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t4._appliedEmanation + t5, 0, 192));
            }
          }
        }
      }
    },
    RiverBiome__placeBridges_closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        var t1, t2;
        H.interceptedTypeCheck(pos, "$isVec");
        t1 = this.$this._aquatic$_dungeon.stage.tiles.$index(0, pos).type;
        t2 = $.$get$Tiles_grass();
        return t1 == null ? t2 == null : t1 === t2;
      }
    },
    RiverBiome__placeBridges_closure0: {
      "^": "Closure:3;$this,shore1",
      call$1: function(pos) {
        var t1, t2;
        H.interceptedTypeCheck(pos, "$isVec");
        t1 = this.$this._aquatic$_dungeon.stage.tiles.$index(0, pos).type;
        t2 = $.$get$Tiles_grass();
        return (t1 == null ? t2 == null : t1 === t2) && !this.shore1.contains$1(0, pos);
      }
    },
    RiverBiome__placeBridges_closure1: {
      "^": "Closure:41;bridge",
      call$1: function(previous) {
        var t1 = X.Rect_intersect(H.interceptedTypeCheck(previous, "$isRect").inflate$1(1), this.bridge);
        return !t1.get$isEmpty(t1);
      }
    },
    _RiverPoint: {
      "^": "Object;x>,y>,radius",
      toString$0: function(_) {
        return H.S(this.x) + "," + H.S(this.y) + " (" + H.S(this.radius) + ")";
      },
      static: {
        _RiverPoint$: function(x, y, radius) {
          return new S._RiverPoint(x, y, radius == null ? $.$get$rng().float$2(0, 1, 3) : radius);
        }
      }
    },
    LakeBiome: {
      "^": "AquaticBiome;_blob,_aquatic$_dungeon",
      generate$0: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, i, t4, t5, t6, t7, t8, t9, t10, t11, x, y, t12, t13, t14, canPlace, t15, t16, t17, t18, cells, edges, shoreBounds, pos, count;
          return function $async$generate$0($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              $async$outer:
                switch ($async$goto) {
                  case 0:
                    // Function start
                    for (t1 = $async$self._blob, t2 = $async$self._aquatic$_dungeon, t3 = t2.stage, i = 0; i < 100; ++i) {
                      t4 = $.$get$rng();
                      t5 = t3.tiles;
                      t6 = t5.bounds;
                      t7 = t6.size;
                      t8 = t7.x;
                      t9 = t1.bounds;
                      t10 = t9.size;
                      t11 = t10.x;
                      if (typeof t8 !== "number") {
                        t8.$sub();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      if (typeof t11 !== "number") {
                        H.iae(t11);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      x = t4._random.nextInt$1(t8 - t11 - 0);
                      t10 = t10.y;
                      y = t4._random.nextInt$1(t7.y - t10 - 0);
                      t4 = new X.RectIterator(t9);
                      t7 = t9.pos;
                      t12 = t7.x;
                      if (typeof t12 !== "number") {
                        t12.$sub();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t13 = t12 - 1;
                      t4._rect$_x = t13;
                      t7 = t7.y;
                      t4._rect$_y = t7;
                      t5 = t5._elements;
                      t14 = t5.length;
                      while (true) {
                        if (!t4.moveNext$0()) {
                          canPlace = true;
                          break;
                        }
                        t15 = t4._rect$_x;
                        t16 = t4._rect$_y;
                        t17 = t1._elements;
                        if (typeof t15 !== "number") {
                          H.iae(t15);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t18 = t16 * t11 + t15;
                        if (t18 < 0 || t18 >= t17.length) {
                          H.ioore(t17, t18);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        if (t17[t18]) {
                          t15 = (t16 + y) * t8 + (t15 + x);
                          if (t15 < 0 || t15 >= t14) {
                            H.ioore(t5, t15);
                            // goto return
                            $async$goto = 1;
                            break $async$outer;
                          }
                          t15 = t5[t15].type;
                          t16 = $.$get$Tiles_rock();
                          if (t15 == null ? t16 != null : t15 !== t16) {
                            canPlace = false;
                            break;
                          }
                        }
                      }
                      if (!canPlace)
                        continue;
                      t3 = [L.Vec];
                      cells = H.setRuntimeTypeInfo([], t3);
                      for (t4 = new X.RectIterator(t9), t4._rect$_x = t13, t4._rect$_y = t7; t4.moveNext$0();) {
                        t9 = t4._rect$_x;
                        t13 = t4._rect$_y;
                        t15 = t1._elements;
                        if (typeof t9 !== "number") {
                          H.iae(t9);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t16 = t13 * t11 + t9;
                        if (t16 < 0 || t16 >= t15.length) {
                          H.ioore(t15, t16);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        if (t15[t16]) {
                          t9 += x;
                          t13 += y;
                          t15 = $.$get$Tiles_water();
                          t16 = t13 * t8 + t9;
                          if (t16 < 0 || t16 >= t14) {
                            H.ioore(t5, t16);
                            // goto return
                            $async$goto = 1;
                            break $async$outer;
                          }
                          t16 = t5[t16];
                          t16.type = t15;
                          t15 = $.$get$rng();
                          t15 = t15._random.nextInt$1(100) < 2;
                          if (t15) {
                            t15 = F.Lighting_emanationForLevel(5);
                            t16._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t16._appliedEmanation + t15, 0, 192));
                          }
                          C.JSArray_methods.add$1(cells, new L.Vec(t9, t13));
                        }
                      }
                      edges = H.setRuntimeTypeInfo([], t3);
                      shoreBounds = X.Rect_intersect(new X.Rect(new L.Vec(t12 + x, t7 + y), new L.Vec(t11, t10)), t6.inflate$1(-1));
                      t1 = new X.RectIterator(shoreBounds);
                      t3 = shoreBounds.pos;
                      t4 = t3.x;
                      if (typeof t4 !== "number") {
                        t4.$sub();
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t1._rect$_x = t4 - 1;
                      t1._rect$_y = t3.y;
                      for (; t1.moveNext$0();) {
                        t3 = t1._rect$_x;
                        t4 = t1._rect$_y;
                        pos = new L.Vec(t3, t4);
                        if (typeof t3 !== "number") {
                          H.iae(t3);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t3 = t4 * t8 + t3;
                        if (t3 < 0 || t3 >= t14) {
                          H.ioore(t5, t3);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t4 = t5[t3].type;
                        t6 = $.$get$Tiles_rock();
                        if ((t4 == null ? t6 == null : t4 === t6) && t2.hasNeighbor$2(pos, $.$get$Tiles_water())) {
                          t4 = $.$get$Tiles_grass();
                          t3 = t5[t3];
                          t3.type = t4;
                          t6 = $.$get$Tiles_water();
                          if (t4 == null ? t6 == null : t4 === t6) {
                            t4 = $.$get$rng();
                            t4 = t4._random.nextInt$1(100) < 2;
                          } else
                            t4 = false;
                          if (t4) {
                            t4 = F.Lighting_emanationForLevel(5);
                            t3._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t3._appliedEmanation + t4, 0, 192));
                          }
                          C.JSArray_methods.add$1(edges, pos);
                          C.JSArray_methods.add$1(cells, pos);
                        }
                      }
                      $async$self._erode$5(edges, edges.length, 4, $.$get$Tiles_grass(), cells);
                      t1 = $.$get$rng();
                      t2 = edges.length / 80;
                      t1.toString;
                      count = C.JSDouble_methods.floor$0(t2);
                      $async$self._makePlace$2(t1.float$1(0, 1) < t2 - count ? count + 1 : count, cells);
                      // goto return
                      $async$goto = 1;
                      break $async$outer;
                    }
                  case 1:
                    // return
                    return P._IterationMarker_endOfIteration();
                  case 2:
                    // rethrow
                    return P._IterationMarker_uncaughtError($async$currentError);
                }
          };
        }, P.String);
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/blob.dart",, M, {
    "^": "",
    Blob: {
      "^": "Object;_blob$_cells,_dest",
      Blob$_$3: function(size, smoothing, input) {
        var t1, t2, t3, t4, t5, t6, t7, value, center, maxLength, i, walls, t8, temp;
        if (input != null)
          for (t1 = X.RectIterator$(this._blob$_cells.bounds.inflate$1(-1)); t1.moveNext$0();) {
            t2 = t1._rect$_x;
            t3 = t1._rect$_y;
            t4 = input._blob$_cells;
            if (typeof t2 !== "number")
              return t2.$tdiv();
            t5 = C.JSInt_methods._tdivFast$1(t2, 2);
            t6 = C.JSInt_methods._tdivFast$1(t3, 2);
            t7 = t4._elements;
            t4 = t4.bounds.size.x;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t5 = t6 * t4 + t5;
            if (t5 < 0 || t5 >= t7.length)
              return H.ioore(t7, t5);
            value = t7[t5] ? 0.3 : 0.7;
            t4 = this._blob$_cells;
            t5 = $.$get$rng().float$1(0, 1);
            t4.toString;
            t5 = H.assertSubtypeOfRuntimeType(t5 > value, H.getTypeArgumentByIndex(t4, 0));
            t6 = t4._elements;
            t4 = t4.bounds.size.x;
            if (typeof t4 !== "number")
              return H.iae(t4);
            C.JSArray_methods.$indexSet(t6, t3 * t4 + t2, t5);
          }
        else {
          center = this._blob$_cells.bounds.get$center();
          t1 = this._blob$_cells.bounds;
          maxLength = Math.sqrt(new L.Vec(t1.get$left(t1), t1.get$top(t1)).$sub(0, this._blob$_cells.bounds.get$center()).get$lengthSquared());
          for (t1 = X.RectIterator$(this._blob$_cells.bounds.inflate$1(-1)); t1.moveNext$0();) {
            t2 = t1._rect$_x;
            t3 = t1._rect$_y;
            t4 = new L.Vec(t2, t3).$sub(0, center);
            t5 = t4.x;
            if (typeof t5 !== "number")
              return t5.$mul();
            t4 = t4.y;
            t4 = Math.sqrt(t5 * t5 + t4 * t4);
            t5 = this._blob$_cells;
            t6 = $.$get$rng().float$1(0, 1);
            t5.toString;
            t4 = H.assertSubtypeOfRuntimeType(t6 > t4 / maxLength, H.getTypeArgumentByIndex(t5, 0));
            t6 = t5._elements;
            t5 = t5.bounds.size.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (typeof t2 !== "number")
              return H.iae(t2);
            C.JSArray_methods.$indexSet(t6, t3 * t5 + t2, t4);
          }
        }
        for (t1 = H.getTypeArgumentByIndex(C.List_slV, 0), t2 = {func: 1, ret: P.bool, args: [t1]}, t1 = [t1], i = 0; i < smoothing; ++i) {
          t3 = this._blob$_cells.bounds.inflate$1(-1);
          t4 = new X.RectIterator(t3);
          t3 = t3.pos;
          t5 = t3.x;
          if (typeof t5 !== "number")
            return t5.$sub();
          t4._rect$_x = t5 - 1;
          t4._rect$_y = t3.y;
          for (; t4.moveNext$0();) {
            t3 = t4._rect$_x;
            t5 = t4._rect$_y;
            t6 = new H.WhereIterable(C.List_slV, H.functionTypeCheck(new M.Blob$__closure(this, new L.Vec(t3, t5)), t2), t1);
            walls = t6.get$length(t6);
            t6 = this._blob$_cells;
            t7 = t6._elements;
            t6 = t6.bounds.size.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (typeof t3 !== "number")
              return H.iae(t3);
            t6 = t5 * t6 + t3;
            if (t6 < 0 || t6 >= t7.length)
              return H.ioore(t7, t6);
            if (t7[t6])
              ++walls;
            t6 = this._dest;
            t6.toString;
            t7 = H.assertSubtypeOfRuntimeType(walls >= 5, H.getTypeArgumentByIndex(t6, 0));
            t8 = t6._elements;
            t6 = t6.bounds.size.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            C.JSArray_methods.$indexSet(t8, t5 * t6 + t3, t7);
          }
          temp = this._blob$_cells;
          this._blob$_cells = this._dest;
          this._dest = temp;
        }
      },
      static: {
        Blob$_: function(size, smoothing, input) {
          var t1 = P.bool;
          t1 = new M.Blob(M.Array2D$(size, size, false, t1), M.Array2D$(size, size, false, t1));
          t1.Blob$_$3(size, smoothing, input);
          return t1;
        }
      }
    },
    Blob$__closure: {
      "^": "Closure:1;$this,pos",
      call$1: function(dir) {
        H.interceptedTypeCheck(dir, "$isDirection");
        return this.$this._blob$_cells.$index(0, this.pos.$add(0, dir));
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/dungeon.dart",, Q, {
    "^": "",
    Biome: {
      "^": "Object;"
    },
    Dungeon: {
      "^": "Object;_dungeon$_lore,stage,depth<,_biomes,_places,_cells,_spawnedUniques",
      get$width: function(_) {
        return this.stage.tiles.bounds.size.x;
      },
      get$height: function(_) {
        return this.stage.tiles.bounds.size.y;
      },
      generate$1: function(placeHero) {
        return this.generate$body$Dungeon(H.functionTypeCheck(placeHero, {func: 1, args: [L.Vec]}));
      },
      generate$body$Dungeon: function($async$placeHero) {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var placeHero = $async$placeHero;
          var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, t4, t5, t6, t7, y, t8, x, t9, t10, t11, hasWater, t12, _i, decorCount, i, t13, place, decor, allowed, cell, offset, max, _i0, stairCount, pos;
          return function $async$generate$1($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              $async$outer:
                switch ($async$goto) {
                  case 0:
                    // Function start
                    $.Dungeon_last = $async$self;
                    t1 = $async$self._places;
                    $.Dungeon_debugPlaces = t1;
                    for (t2 = $async$self.stage, t3 = t2.tiles, t4 = t3.bounds, t5 = t4.size, t6 = t5.y, t5 = t5.x, t3 = t3._elements, t7 = t3.length, y = 0; y < t6; ++y) {
                      if (typeof t5 !== "number") {
                        H.iae(t5);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t8 = y * t5;
                      x = 0;
                      for (; x < t5; ++x) {
                        t9 = $.$get$Tiles_rock();
                        t10 = t8 + x;
                        if (t10 < 0 || t10 >= t7) {
                          H.ioore(t3, t10);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t10 = t3[t10];
                        t10.type = t9;
                        t11 = $.$get$Tiles_water();
                        if (t9 == null ? t11 == null : t9 === t11) {
                          t9 = $.$get$rng();
                          t9 = t9._random.nextInt$1(100) < 2;
                        } else
                          t9 = false;
                        if (t9) {
                          t9 = F.Lighting_emanationForLevel(5);
                          t10._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t10._appliedEmanation + t9, 0, 192));
                        }
                      }
                    }
                    hasWater = $async$self._tryRiver$0();
                    if ($async$self._tryLake64$1(hasWater))
                      hasWater = true;
                    $async$self._tryLakes16$1($async$self._tryLake32$1(hasWater) ? true : hasWater);
                    t8 = $async$self._biomes;
                    t9 = L.Vec;
                    t10 = L.Junction;
                    t11 = P.ListQueue$(null, t10);
                    t12 = P.LinkedHashSet_LinkedHashSet(null, null, null, t9);
                    C.JSArray_methods.add$1(t8, new Q.RoomsBiome($async$self, new Q.RoomStyle(30, 40, 5, 80, 20, 10, 3), new L.JunctionSet(P.LinkedHashMap_LinkedHashMap$_empty(t9, t10), t11), t12, new H.JsLinkedHashMap(0, 0, [t9, [P.Set, L.Vec]])));
                    t10 = t8.length, _i = 0;
                  case 3:
                    // for condition
                    if (!(_i < t8.length)) {
                      // goto after for
                      $async$goto = 5;
                      break;
                    }
                    $async$goto = 6;
                    return P._IterationMarker_yieldStar(t8[_i].generate$0());
                  case 6:
                    // after yield
                  case 4:
                    // for update
                    t8.length === t10 || (0, H.throwConcurrentModificationError)(t8), ++_i;
                    // goto for condition
                    $async$goto = 3;
                    break;
                  case 5:
                    // after for
                    $async$goto = 7;
                    return "Applying themes";
                  case 7:
                    // after yield
                    C.JSArray_methods.sort$1(t1, new Q.Dungeon_generate_closure());
                    $async$self._findConnections$2($async$self, t1);
                    for (t8 = t1.length, _i = 0; _i < t1.length; t1.length === t8 || (0, H.throwConcurrentModificationError)(t1), ++_i)
                      t1[_i].applyThemes$0();
                    $async$goto = 8;
                    return "Placing decor";
                  case 8:
                    // after yield
                    if (typeof t5 !== "number") {
                      t5.$mul();
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    decorCount = C.JSInt_methods._tdivFast$1(t5 * t6, 20);
                    t6 = [t9], i = 0;
                  case 9:
                    // for condition
                    if (!(i < decorCount)) {
                      // goto after for
                      $async$goto = 11;
                      break;
                    }
                    t8 = $.$get$rng();
                    t9 = t4.inflate$1(-1);
                    t8.toString;
                    t10 = t9.pos;
                    t11 = t10.x;
                    t9 = t9.size;
                    t12 = t9.x;
                    if (typeof t11 !== "number") {
                      t11.$add();
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    if (typeof t12 !== "number") {
                      H.iae(t12);
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    t12 = t11 + t12;
                    t13 = Math.min(t11, t12);
                    t12 = Math.max(t11, t12);
                    t11 = t8._random.nextInt$1(t12 - t13);
                    t10 = t10.y;
                    t9 = t10 + t9.y;
                    t12 = Math.min(t10, t9);
                    t9 = Math.max(t10, t9);
                    place = $async$self.placeAt$1(new L.Vec(t11 + t13, t8._random.nextInt$1(t9 - t12) + t12));
                    if (place == null) {
                      // goto for update
                      $async$goto = 10;
                      break;
                    }
                    decor = Y.Decor_choose(place.chooseTheme$0());
                    if (decor == null) {
                      // goto for update
                      $async$goto = 10;
                      break;
                    }
                    allowed = H.setRuntimeTypeInfo([], t6);
                    for (t8 = place.cells, t9 = t8.length, _i = 0; _i < t8.length; t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i) {
                      cell = t8[_i];
                      t10 = J.getInterceptor$x(cell);
                      offset = new L.Vec(J.$add$ansx(t10.get$x(cell), -1), t10.get$y(cell) + -1);
                      if (decor.canPlace$2($async$self, offset))
                        C.JSArray_methods.add$1(allowed, offset);
                    }
                    max = allowed.length;
                    $async$goto = max !== 0 ? 12 : 13;
                    break;
                  case 12:
                    // then
                    t8 = $.$get$rng();
                    t8.toString;
                    H.assertSubtype(allowed, "$isList", t6, "$asList");
                    t8 = t8._random.nextInt$1(max - 0);
                    if (t8 < 0 || t8 >= allowed.length) {
                      H.ioore(allowed, t8);
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    decor.place$2($async$self, allowed[t8]);
                    $async$goto = 14;
                    return "Placed decor";
                  case 14:
                    // after yield
                  case 13:
                    // join
                  case 10:
                    // for update
                    ++i;
                    // goto for condition
                    $async$goto = 9;
                    break;
                  case 11:
                    // after for
                    for (t4 = t1.length, _i = 0; _i < t1.length; t1.length === t4 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                      place = t1[_i];
                      if (place.emanates)
                        for (t8 = place.cells, t9 = t8.length, _i0 = 0; _i0 < t8.length; t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i0) {
                          cell = t8[_i0];
                          t2.toString;
                          H.interceptedTypeCheck(cell, "$isVec");
                          t10 = cell.y;
                          t11 = cell.x;
                          if (typeof t11 !== "number") {
                            H.iae(t11);
                            // goto return
                            $async$goto = 1;
                            break $async$outer;
                          }
                          t11 = t10 * t5 + t11;
                          if (t11 < 0 || t11 >= t7) {
                            H.ioore(t3, t11);
                            // goto return
                            $async$goto = 1;
                            break $async$outer;
                          }
                          t11 = t3[t11];
                          t11.toString;
                          t10 = $.$get$Motility_fly();
                          if ((t11.type.motility._bitMask & t10._bitMask) !== 0)
                            t11._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t11._appliedEmanation + 128, 0, 192));
                        }
                    }
                    stairCount = $.$get$rng().range$2(2, 4);
                    for (i = 0; i < stairCount; ++i) {
                      pos = t2.findOpenTile$0();
                      t4 = $.$get$Tiles_stairs();
                      t8 = pos.y;
                      t9 = pos.x;
                      if (typeof t9 !== "number") {
                        H.iae(t9);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t9 = t8 * t5 + t9;
                      if (t9 < 0 || t9 >= t7) {
                        H.ioore(t3, t9);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t9 = t3[t9];
                      t9.type = t4;
                      t8 = $.$get$Tiles_water();
                      if (t4 == null ? t8 == null : t4 === t8) {
                        t4 = $.$get$rng();
                        t4 = t4._random.nextInt$1(100) < 2;
                      } else
                        t4 = false;
                      if (t4) {
                        t4 = F.Lighting_emanationForLevel(5);
                        t9._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t9._appliedEmanation + t4, 0, 192));
                      }
                    }
                    for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
                      place = t1[_i];
                      t3 = $.$get$rng();
                      t3.toString;
                      C.JSArray_methods.shuffle$1(H.assertSubtype(place.cells, "$isList", t6, "$asList"), t3._random);
                      $async$self._placeMonsters$1(place);
                      $async$self._placeItems$1(place);
                    }
                    placeHero.call$1($async$self._tryFindSpawnPos$4$avoidActors(C.JSArray_methods.firstWhere$1(t1, new Q.Dungeon_generate_closure0()), $.$get$Motility_walk(), C.SpawnLocation_1, true));
                  case 1:
                    // return
                    return P._IterationMarker_endOfIteration();
                  case 2:
                    // rethrow
                    return P._IterationMarker_uncaughtError($async$currentError);
                }
          };
        }, P.String);
      },
      placeAt$1: function(pos) {
        return this._cells.$index(0, pos);
      },
      setTile$3: function(x, y, type) {
        var t1 = this.stage.tiles.$get$2(x, y);
        t1.type = type;
        this._tileEmanation$1(t1);
      },
      setTileAt$2: function(pos, type) {
        var t1;
        H.interceptedTypeCheck(type, "$isTileType");
        t1 = this.stage.tiles.$index(0, pos);
        t1.type = type;
        this._tileEmanation$1(t1);
      },
      _tileEmanation$1: function(tile) {
        var t1, t2;
        t1 = tile.type;
        t2 = $.$get$Tiles_water();
        if ((t1 == null ? t2 == null : t1 === t2) && $.$get$rng().range$1(100) < 2)
          tile.addEmanation$1(F.Lighting_emanationForLevel(5));
      },
      hasCardinalNeighbor$2: function(pos, tiles) {
        var t1, _i, neighbor, t2, t3, t4;
        H.assertSubtype(tiles, "$isList", [Q.TileType], "$asList");
        for (t1 = this.stage, _i = 0; _i < 4; ++_i) {
          neighbor = pos.$add(0, C.List_aAW[_i]);
          t2 = t1.tiles;
          t3 = t2.bounds;
          if (!t3.inflate$1(-1).contains$1(0, neighbor))
            continue;
          t2 = t2._elements;
          t3 = t3.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = neighbor.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = neighbor.y * t3 + t4;
          if (t4 < 0 || t4 >= t2.length)
            return H.ioore(t2, t4);
          if (C.JSArray_methods.contains$1(tiles, t2[t4].type))
            return true;
        }
        return false;
      },
      hasNeighbor$2: function(pos, tile) {
        var t1, _i, neighbor, t2, t3, t4;
        for (t1 = this.stage, _i = 0; _i < 8; ++_i) {
          neighbor = pos.$add(0, C.List_slV[_i]);
          t2 = t1.tiles;
          t3 = t2.bounds;
          if (!t3.inflate$1(-1).contains$1(0, neighbor))
            continue;
          t2 = t2._elements;
          t3 = t3.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = neighbor.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = neighbor.y * t3 + t4;
          if (t4 < 0 || t4 >= t2.length)
            return H.ioore(t2, t4);
          t4 = t2[t4].type;
          if (t4 == null ? tile == null : t4 === tile)
            return true;
        }
        return false;
      },
      addPlace$1: function(place) {
        var t1, t2, t3, t4, t5, _i, cell, t6, t7;
        C.JSArray_methods.add$1(this._places, place);
        place._place$_dungeon = this;
        for (t1 = place.cells, t2 = t1.length, t3 = this._cells, t4 = H.getTypeArgumentByIndex(t3, 0), t5 = t3._elements, t3 = t3.bounds.size.x, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          cell = H.interceptedTypeCheck(t1[_i], "$isVec");
          H.assertSubtypeOfRuntimeType(place, t4);
          t6 = cell.y;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t7 = cell.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          C.JSArray_methods.$indexSet(t5, t6 * t3 + t7, place);
        }
      },
      _findConnections$2: function(dungeon, places) {
        var t1, t2, t3, t4, t5, t6, pos, from, _i, t7, to;
        H.assertSubtype(places, "$isList", [D.Place], "$asList");
        for (t1 = X.RectIterator$(dungeon.stage.tiles.bounds.inflate$1(-1)), t2 = this._cells, t3 = t2._elements, t2 = t2.bounds.size.x, t4 = t3.length; t1.moveNext$0();) {
          t5 = t1._rect$_x;
          t6 = t1._rect$_y;
          pos = new L.Vec(t5, t6);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = t6 * t2 + t5;
          if (t5 < 0 || t5 >= t4)
            return H.ioore(t3, t5);
          from = t3[t5];
          if (from == null)
            continue;
          for (t5 = from.neighbors, _i = 0; _i < 4; ++_i) {
            t6 = pos.$add(0, C.List_aAW[_i]);
            t7 = t6.x;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t7 = t6.y * t2 + t7;
            if (t7 < 0 || t7 >= t4)
              return H.ioore(t3, t7);
            to = t3[t7];
            if (to != null && to !== from) {
              t5.add$1(0, to);
              to.neighbors.add$1(0, from);
            }
          }
        }
      },
      spreadTheme$3: function(start, theme, strength) {
        var t1, visited, queue, here, t2, t3, t4;
        t1 = D.Place;
        visited = P.LinkedHashMap_LinkedHashMap$_literal([start, strength], t1, P.double);
        queue = P.ListQueue$(null, t1);
        t1 = H.getTypeArgumentByIndex(queue, 0);
        queue._add$1(H.assertSubtypeOfRuntimeType(start, t1));
        for (; !queue.get$isEmpty(queue);) {
          here = queue.removeFirst$0();
          strength = J.$div$n(visited.$index(0, here), 2);
          if (strength < 0.3)
            continue;
          for (t2 = here.neighbors, t3 = new P._LinkedHashSetIterator(t2, t2._collection$_modifications, [H.getTypeArgumentByIndex(t2, 0)]), t3._collection$_cell = t2._collection$_first; t3.moveNext$0();) {
            t2 = t3._collection$_current;
            if (visited.containsKey$1(0, t2))
              continue;
            t4 = t2.themes;
            t4.putIfAbsent$2(0, theme, new Q.Dungeon_spreadTheme_closure());
            t4.$indexSet(0, theme, J.$add$ansx(t4.$index(0, theme), strength));
            t2.totalStrength += strength;
            visited.$indexSet(0, t2, strength);
            queue._add$1(H.assertSubtypeOfRuntimeType(t2, t1));
          }
        }
      },
      _placeMonsters$1: function(place) {
        var spawnCount, t1, t2, t3, theme, breed, t4, spawned;
        if (place.hasHero)
          return;
        spawnCount = this._rollCount$2(place, place.monsterDensity);
        for (t1 = this.depth, t2 = this._spawnedUniques, t3 = this._dungeon$_lore._slain; spawnCount > 0;) {
          theme = place.chooseTheme$0();
          breed = $.$get$Monsters_breeds().tryChoose$2(t1 + place.monsterDepthOffset, theme);
          if (breed.flags.unique) {
            t4 = t3.$index(0, breed);
            if ((t4 == null ? 0 : t4) > 0)
              continue;
            if (t2.contains$1(0, breed))
              continue;
            t2.add$1(0, breed);
          }
          spawned = this._spawnMonster$2(place, breed);
          if (spawned == null)
            break;
          spawnCount -= spawned;
        }
      },
      _placeItems$1: function(place) {
        var density, dropCount, t1, t2, i, theme, t3, t4, pos;
        density = place.itemDensity;
        dropCount = this._rollCount$2(place, place.hasHero ? density * 1.2 : density);
        for (t1 = this.stage, t2 = this.depth, i = 0; i < dropCount; ++i) {
          theme = place.chooseTheme$0();
          t3 = place.itemDepthOffset;
          t3 = $.$get$_floorDrops().tryChoose$2(t2 + t3, theme);
          t4 = $.$get$Motility_walk();
          pos = this._tryFindSpawnPos$4$avoidActors(place, t4, t3.location, false);
          if (pos == null)
            break;
          t1.placeDrops$3(pos, t4, t3.drop);
        }
      },
      _rollCount$2: function(place, density) {
        var base, t1;
        base = Math.pow(place.cells.length, 0.8) * density;
        t1 = $.$get$rng();
        return t1.countFromFloat$1(base + t1.normal$0() * (base / 2));
      },
      _spawnMonster$2: function(place, breed) {
        var _box_0, pos, t1, breeds, spawn, t2, t3, t4, t5, t6, t7, flow, here;
        _box_0 = {};
        pos = this._tryFindSpawnPos$4$avoidActors(place, breed.motility, breed.location, true);
        if (pos == null)
          return;
        t1 = $.$get$rng().range$1(8);
        breeds = breed.spawnAll$0();
        _box_0.spawned = 0;
        spawn = new Q.Dungeon__spawnMonster_spawn(_box_0, this, t1 === 0);
        if (0 >= breeds.length)
          return H.ioore(breeds, 0);
        spawn.call$2(breeds[0], pos);
        for (t1 = H.SubListIterable$(breeds, 1, null, H.getTypeArgumentByIndex(breeds, 0)), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = L.Vec, t3 = [[P.Queue, L.Vec]], t4 = [t2], t2 = [t2], t5 = this.stage; t1.moveNext$0();) {
          t6 = t1.__internal$_current;
          t7 = t6.motility;
          flow = new N.MotilityFlow(t7, true, false, t5, pos, null, new B.BucketQueue(H.setRuntimeTypeInfo([], t3), 0, t4), H.setRuntimeTypeInfo([], t2));
          flow.Flow$3$maxDistance(t5, pos, null);
          here = flow.get$reachable().firstWhere$2$orElse(0, new Q.Dungeon__spawnMonster_closure(), new Q.Dungeon__spawnMonster_closure0());
          if (here == null)
            break;
          spawn.call$2(t6, here);
        }
        return _box_0.spawned;
      },
      _tryFindSpawnPos$4$avoidActors: function(place, motility, $location, avoidActors) {
        var minWalls, maxWalls, t1, t2, t3, t4, t5, acceptable, _i, pos, t6, t7, t8, t9, wallCount;
        switch ($location) {
          case C.SpawnLocation_0:
            minWalls = 0;
            maxWalls = 8;
            break;
          case C.SpawnLocation_2:
            minWalls = 3;
            maxWalls = 8;
            break;
          case C.SpawnLocation_3:
            minWalls = 4;
            maxWalls = 8;
            break;
          case C.SpawnLocation_1:
            minWalls = 0;
            maxWalls = 0;
            break;
          default:
            minWalls = null;
            maxWalls = null;
        }
        for (t1 = place.cells, t2 = t1.length, t3 = H.getTypeArgumentByIndex(C.List_slV, 0), t4 = {func: 1, ret: P.bool, args: [t3]}, t3 = [t3], t5 = this.stage, acceptable = null, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          pos = H.interceptedTypeCheck(t1[_i], "$isVec");
          t6 = t5.tiles;
          t7 = t6._elements;
          t8 = pos.y;
          t6 = t6.bounds.size.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t9 = pos.x;
          if (typeof t9 !== "number")
            return H.iae(t9);
          t6 = t8 * t6 + t9;
          if (t6 < 0 || t6 >= t7.length)
            return H.ioore(t7, t6);
          if ((t7[t6].type.motility._bitMask & motility._bitMask) === 0)
            continue;
          t6 = t5._actorsByTile;
          t7 = t6._elements;
          t6 = t6.bounds.size.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t9 = t8 * t6 + t9;
          if (t9 < 0 || t9 >= t7.length)
            return H.ioore(t7, t9);
          if (t7[t9] != null)
            continue;
          t6 = new H.WhereIterable(C.List_slV, H.functionTypeCheck(new Q.Dungeon__tryFindSpawnPos_closure(this, pos), t4), t3);
          wallCount = t6.get$length(t6);
          if (typeof minWalls !== "number")
            return H.iae(minWalls);
          if (wallCount >= minWalls) {
            if (typeof maxWalls !== "number")
              return H.iae(maxWalls);
            t6 = wallCount <= maxWalls;
          } else
            t6 = false;
          if (t6)
            return pos;
          acceptable = pos;
        }
        return acceptable;
      },
      _dungeon$_stain$4: function(tile, start, distance, count) {
        var t1, t2, t3, t4, t5, i, _box_0, j, t6, t7, t8, t9, t10, dirs, max;
        for (t1 = [Z.Direction], t2 = H.getTypeArgumentByIndex(C.List_slV, 0), t3 = {func: 1, ret: P.bool, args: [t2]}, t4 = [t2], t5 = this.stage, i = 0; i < count; ++i) {
          _box_0 = {};
          _box_0.pos = start;
          for (j = 0; j < distance; ++j) {
            t6 = $.$get$rng();
            if (t6._random.nextInt$1(100) < 60) {
              t7 = _box_0.pos;
              t8 = t5.tiles;
              t9 = t8._elements;
              t8 = t8.bounds.size.x;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t10 = t7.x;
              if (typeof t10 !== "number")
                return H.iae(t10);
              t10 = t7.y * t8 + t10;
              if (t10 < 0 || t10 >= t9.length)
                return H.ioore(t9, t10);
              t10 = t9[t10].type;
              t9 = $.$get$Tiles_floor();
              t9 = t10 == null ? t9 == null : t10 === t9;
              t7 = t9;
            } else
              t7 = false;
            if (t7) {
              t7 = _box_0.pos;
              t8 = t5.tiles;
              t9 = t8._elements;
              t8 = t8.bounds.size.x;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t10 = t7.x;
              if (typeof t10 !== "number")
                return H.iae(t10);
              t10 = t7.y * t8 + t10;
              if (t10 < 0 || t10 >= t9.length)
                return H.ioore(t9, t10);
              t10 = t9[t10];
              t10.type = tile;
              t7 = $.$get$Tiles_water();
              if (tile == null ? t7 == null : tile === t7)
                t7 = t6._random.nextInt$1(100) < 2;
              else
                t7 = false;
              if (t7) {
                t7 = F.Lighting_emanationForLevel(5);
                t10._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t10._appliedEmanation + t7, 0, 192));
              }
            }
            dirs = P.List_List$from(new H.WhereIterable(C.List_slV, H.functionTypeCheck(new Q.Dungeon__stain_closure(_box_0, this), t3), t4), true, t2);
            max = dirs.length;
            if (max === 0)
              return;
            t7 = _box_0.pos;
            t6.toString;
            H.assertSubtype(dirs, "$isList", t1, "$asList");
            t6 = t6._random.nextInt$1(max - 0);
            if (t6 < 0 || t6 >= dirs.length)
              return H.ioore(dirs, t6);
            _box_0.pos = t7.$add(0, dirs[t6]);
          }
        }
      },
      _tryRiver$0: function() {
        if ($.$get$rng().range$1(3) !== 0)
          return false;
        C.JSArray_methods.add$1(this._biomes, new S.RiverBiome(P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), this));
        return true;
      },
      _tryLake64$1: function(hasWater) {
        var t1, t2, odds;
        t1 = this.stage.tiles.bounds.size;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$le();
        if (t2 <= 64 || t1.y <= 64)
          return false;
        odds = hasWater ? 20 : 10;
        if ($.$get$rng().range$1(odds) !== 0)
          return false;
        C.JSArray_methods.add$1(this._biomes, new S.LakeBiome(M.Blob$_(64, 6, M.Blob$_(32, 2, M.Blob$_(16, 2, M.Blob$_(8, 2, null))))._blob$_cells, this));
        return true;
      },
      _tryLake32$1: function(hasWater) {
        var t1, t2, odds;
        t1 = this.stage.tiles.bounds.size;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$le();
        if (t2 <= 32 || t1.y <= 32)
          return false;
        odds = hasWater ? 10 : 5;
        if ($.$get$rng().range$1(odds) !== 0)
          return false;
        C.JSArray_methods.add$1(this._biomes, new S.LakeBiome(M.Blob$_(32, 5, M.Blob$_(16, 2, M.Blob$_(8, 1, null)))._blob$_cells, this));
        return true;
      },
      _tryLakes16$1: function(hasWater) {
        var t1, ponds, i;
        t1 = $.$get$rng();
        if (t1.range$1(5) !== 0)
          return false;
        ponds = t1.taper$2(0, 3);
        for (t1 = this._biomes, i = 0; i < ponds; ++i)
          C.JSArray_methods.add$1(t1, new S.LakeBiome(M.Blob$_(16, 3, M.Blob$_(8, 1, null))._blob$_cells, this));
        return true;
      }
    },
    Dungeon_generate_closure: {
      "^": "Closure:43;",
      call$2: function(a, b) {
        H.interceptedTypeCheck(a, "$isPlace");
        return C.JSInt_methods.compareTo$1(H.interceptedTypeCheck(b, "$isPlace").cells.length, a.cells.length);
      }
    },
    Dungeon_generate_closure0: {
      "^": "Closure:44;",
      call$1: function(place) {
        return H.interceptedTypeCheck(place, "$isPlace").hasHero;
      }
    },
    Dungeon_spreadTheme_closure: {
      "^": "Closure:26;",
      call$0: function() {
        return 0;
      }
    },
    Dungeon__spawnMonster_spawn: {
      "^": "Closure:40;_box_0,$this,isCorpse",
      call$2: function(breed, pos) {
        var t1, t2;
        t1 = this.$this;
        t2 = t1.stage;
        if (this.isCorpse)
          t2.placeDrops$3(pos, breed.motility, breed.drop);
        else {
          t2.addActor$1(breed.spawn$2(t2.game, pos));
          ++this._box_0.spawned;
        }
        t2 = breed.stain;
        if (t2 != null)
          t1._dungeon$_stain$4(t2, pos, 5, 2);
      }
    },
    Dungeon__spawnMonster_closure: {
      "^": "Closure:3;",
      call$1: function(_) {
        H.interceptedTypeCheck(_, "$isVec");
        return true;
      }
    },
    Dungeon__spawnMonster_closure0: {
      "^": "Closure:0;",
      call$0: function() {
        return;
      }
    },
    Dungeon__tryFindSpawnPos_closure: {
      "^": "Closure:1;$this,pos",
      call$1: function(dir) {
        var t1, t2;
        t1 = this.pos.$add(0, H.interceptedTypeCheck(dir, "$isDirection"));
        t1 = this.$this.stage.tiles.$index(0, t1).type;
        t1.toString;
        t2 = $.$get$Motility_walk();
        return (t1.motility._bitMask & t2._bitMask) === 0;
      }
    },
    Dungeon__stain_closure: {
      "^": "Closure:1;_box_0,$this",
      call$1: function(dir) {
        var t1, t2;
        H.interceptedTypeCheck(dir, "$isDirection");
        t1 = this._box_0.pos.$add(0, dir);
        t1 = this.$this.stage.tiles.$index(0, t1).type;
        t1.toString;
        t2 = $.$get$Motility_doorAndWalk();
        return (t1.motility._bitMask & t2._bitMask) !== 0;
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/junction.dart",, L, {
    "^": "",
    Junction: {
      "^": "Object;theme,direction,position>,tries"
    },
    JunctionSet: {
      "^": "Object;_byPosition,_junction$_queue",
      add$1: function(_, junction) {
        var t1, t2;
        H.interceptedTypeCheck(junction, "$isJunction");
        t1 = this._byPosition;
        t2 = junction.position;
        if (t1.containsKey$1(0, t2))
          return;
        t1.$indexSet(0, t2, junction);
        t1 = this._junction$_queue;
        t1._add$1(H.assertSubtypeOfRuntimeType(junction, H.getTypeArgumentByIndex(t1, 0)));
      },
      removeAt$1: function(_, pos) {
        var t1, junction;
        t1 = this._byPosition;
        if (!t1.containsKey$1(0, pos))
          return;
        junction = t1.$index(0, pos);
        t1.remove$1(0, pos);
        this._junction$_queue.remove$1(0, junction);
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/place.dart",, D, {
    "^": "",
    Place: {
      "^": "Object;",
      addTheme$3$spread: function(theme, strength, spread) {
        var t1 = this.themes;
        t1.putIfAbsent$2(0, theme, new D.Place_addTheme_closure());
        t1.$indexSet(0, theme, J.$add$ansx(t1.$index(0, theme), strength));
        this.totalStrength += strength;
        if (spread)
          this._place$_dungeon.spreadTheme$3(this, theme, strength);
      },
      addTheme$2: function(theme, strength) {
        return this.addTheme$3$spread(theme, strength, true);
      },
      chooseTheme$0: function() {
        var i, t1, t2, t3, t4;
        i = $.$get$rng().float$1(0, this.totalStrength);
        for (t1 = this.themes, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          t4 = t1.$index(0, t3);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (i < t4)
            return t3;
          t3 = t1.$index(0, t3);
          if (typeof t3 !== "number")
            return H.iae(t3);
          i -= t3;
        }
        throw H.wrapException("unreachable");
      }
    },
    Place_addTheme_closure: {
      "^": "Closure:26;",
      call$0: function() {
        return 0;
      }
    },
    AquaticPlace: {
      "^": "Place;hasHero,emanates,cells,neighbors,monsterDensity,monsterDepthOffset,itemDensity,itemDepthOffset,0_place$_dungeon,themes,totalStrength",
      applyThemes$0: function() {
        this.addTheme$2("aquatic", 2 + this.cells.length / 200);
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/room_types.dart",, R, {
    "^": "",
    RoomTypes_add: function(type, frequency, from) {
      var t1, t2;
      t1 = $.$get$RoomTypes__resources();
      t2 = frequency == null ? 1 : frequency;
      t1.add$5(0, type.theme, type, 1, t2, from);
    },
    RoomType: {
      "^": "Object;"
    },
    RectangleRoom: {
      "^": "RoomType;minWide,maxWide,minNarrow,maxNarrow,theme,spread,monsterDensity,monsterDepthOffset,itemDensity,itemDepthOffset",
      create$0: function() {
        var _box_0, t1, width, height, t2, tiles, t3, t4, y, t5, t6, x, junctions;
        _box_0 = {};
        t1 = $.$get$rng();
        width = t1.inclusive$2(this.minWide, this.maxWide);
        _box_0.width = width;
        height = t1.inclusive$2(this.minNarrow, this.maxNarrow);
        _box_0.height = height;
        if (t1.range$1(2) === 0) {
          _box_0.width = height;
          _box_0.height = width;
          t2 = width;
          t1 = height;
        } else {
          t2 = height;
          t1 = width;
        }
        tiles = M.Array2D$(t1 + 2, t2 + 2, $.$get$Tiles_floor(), Q.TileType);
        for (t1 = tiles.bounds.size, t2 = t1.y, t3 = H.getTypeArgumentByIndex(tiles, 0), t4 = tiles._elements, t1 = t1.x, y = 0; y < t2; ++y) {
          t5 = H.assertSubtypeOfRuntimeType($.$get$Tiles_wall(), t3);
          if (typeof t1 !== "number")
            return H.iae(t1);
          t6 = y * t1;
          C.JSArray_methods.$indexSet(t4, t6, t5);
          C.JSArray_methods.$indexSet(t4, t6 + (t1 - 1), H.assertSubtypeOfRuntimeType(t5, t3));
        }
        if (typeof t1 !== "number")
          return H.iae(t1);
        --t2;
        x = 0;
        for (; x < t1; ++x) {
          t5 = H.assertSubtypeOfRuntimeType($.$get$Tiles_wall(), t3);
          C.JSArray_methods.$indexSet(t4, 0 * t1 + x, t5);
          C.JSArray_methods.$indexSet(t4, t2 * t1 + x, H.assertSubtypeOfRuntimeType(t5, t3));
        }
        junctions = H.setRuntimeTypeInfo([], [L.Junction]);
        this._placeJunctions$2(_box_0.width, new R.RectangleRoom_create_closure(this, junctions));
        this._placeJunctions$2(_box_0.width, new R.RectangleRoom_create_closure0(_box_0, this, junctions));
        this._placeJunctions$2(_box_0.height, new R.RectangleRoom_create_closure1(this, junctions));
        this._placeJunctions$2(_box_0.height, new R.RectangleRoom_create_closure2(_box_0, this, junctions));
        return new Q.Room(this, tiles, junctions);
      },
      _placeJunctions$2: function($length, callback) {
        var t1, start, i;
        H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.int]});
        t1 = $.$get$rng();
        start = t1.range$1(2) === 0 ? 0 : 1;
        for (i = start; i < $length; ++i)
          if (t1._random.nextInt$1(100) < 40) {
            callback.call$1(i);
            ++i;
          }
      },
      static: {
        RectangleRoom$: function(theme, itemDensity, itemDepthOffset, maxNarrow, maxWide, minNarrow, minWide, monsterDensity, monsterDepthOffset, spread) {
          var t1, t2, t3, t4, t5, t6;
          t1 = minWide == null ? 3 : minWide;
          t2 = minNarrow == null ? 3 : minNarrow;
          t3 = spread == null ? false : spread;
          t4 = monsterDensity == null ? 1 : monsterDensity;
          t5 = monsterDepthOffset == null ? 0 : monsterDepthOffset;
          t6 = itemDensity == null ? 1 : itemDensity;
          return new R.RectangleRoom(t1, maxWide, t2, maxNarrow, theme, t3, t4, t5, t6, itemDepthOffset == null ? 0 : itemDepthOffset);
        }
      }
    },
    RectangleRoom_create_closure: {
      "^": "Closure:6;$this,junctions",
      call$1: function(i) {
        C.JSArray_methods.add$1(this.junctions, new L.Junction(this.$this.theme, C.Direction_0_m1, new L.Vec(i + 1, 0), 0));
      }
    },
    RectangleRoom_create_closure0: {
      "^": "Closure:6;_box_0,$this,junctions",
      call$1: function(i) {
        C.JSArray_methods.add$1(this.junctions, new L.Junction(this.$this.theme, C.Direction_0_1, new L.Vec(i + 1, this._box_0.height + 1), 0));
      }
    },
    RectangleRoom_create_closure1: {
      "^": "Closure:6;$this,junctions",
      call$1: function(i) {
        C.JSArray_methods.add$1(this.junctions, new L.Junction(this.$this.theme, C.Direction_m1_0, new L.Vec(0, i + 1), 0));
      }
    },
    RectangleRoom_create_closure2: {
      "^": "Closure:6;_box_0,$this,junctions",
      call$1: function(i) {
        C.JSArray_methods.add$1(this.junctions, new L.Junction(this.$this.theme, C.Direction_1_0, new L.Vec(this._box_0.width + 1, i + 1), 0));
      }
    }
  }], ["", "package:hauberk/src/content/dungeon/rooms.dart",, Q, {
    "^": "",
    RoomPlace: {
      "^": "Place;_rooms$_type,hasHero,emanates,cells,neighbors,monsterDensity,monsterDepthOffset,itemDensity,itemDepthOffset,0_place$_dungeon,themes,totalStrength",
      applyThemes$0: function() {
        var t1 = this._rooms$_type;
        this.addTheme$3$spread(t1.theme, 2, t1.spread);
        this.monsterDensity = this.monsterDensity * t1.monsterDensity;
        this.monsterDepthOffset = this.monsterDepthOffset + t1.monsterDepthOffset;
        this.itemDensity = this.itemDensity * t1.itemDensity;
        this.itemDepthOffset = this.itemDepthOffset + t1.itemDepthOffset;
      }
    },
    PassagePlace: {
      "^": "Place;hasHero,emanates,cells,neighbors,monsterDensity,monsterDepthOffset,itemDensity,itemDepthOffset,0_place$_dungeon,themes,totalStrength",
      applyThemes$0: function() {
        this.addTheme$3$spread("passage", 5, false);
      }
    },
    RoomStyle: {
      "^": "Object;passageTurnPercent,passageBranchPercent,passageMinLength,passageMaxLength,passageTries,passageShortcutScale,junctionMaxTries"
    },
    RoomsBiome: {
      "^": "Biome;_dungeon,_style,_junctions,_reached,_failedShortcuts",
      generate$0: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, roomNumber, junction;
          return function $async$generate$0($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  $async$goto = 2;
                  return "Add starting room";
                case 2:
                  // after yield
                  $async$self._createStartingRoom$0();
                  $async$goto = 3;
                  return "Adding rooms";
                case 3:
                  // after yield
                  t1 = $async$self._junctions, t2 = t1._junction$_queue, t1 = t1._byPosition, roomNumber = 1;
                case 4:
                  // for condition
                  if (!!t2.get$isEmpty(t2)) {
                    // goto after for
                    $async$goto = 5;
                    break;
                  }
                  junction = t2.removeFirst$0();
                  t1.remove$1(0, junction.position);
                  $async$goto = $async$self._tryJunction$1(junction) ? 6 : 7;
                  break;
                case 6:
                  // then
                  $async$goto = 8;
                  return "Room " + roomNumber;
                case 8:
                  // after yield
                  ++roomNumber;
                case 7:
                  // join
                  // goto for condition
                  $async$goto = 4;
                  break;
                case 5:
                  // after for
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, P.String);
      },
      _tryJunction$1: function(junction) {
        var t1, t2, i, t3, from, to, t4;
        for (t1 = this._style, t2 = t1.passageTries, i = 0; i < t2; ++i)
          if (this._tryPlacePassageRoom$1(junction))
            return true;
        t2 = junction.position;
        t3 = junction.direction;
        from = t2.$sub(0, t3);
        to = t2.$add(0, t3);
        if (this._isOtherBiome$1(to) && this._isShortcut$3(from, to, 1)) {
          this._placeDoor$1(t2);
          this._reachOtherBiome$1(to);
          return true;
        }
        t3 = this._dungeon.stage.tiles.$index(0, to).type;
        t4 = $.$get$Tiles_rock();
        if (t3 == null ? t4 != null : t3 !== t4)
          return false;
        if (this._tryPlaceRoom$2(junction, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec))) {
          this._placeDoor$1(t2);
          return true;
        }
        if (++junction.tries < t1.junctionMaxTries)
          this._junctions.add$1(0, junction);
        return false;
      },
      _tryPlacePassageRoom$1: function(junction) {
        var _box_0, pos, dir, t1, passage, newJunctions, maybeBranch, $length, t2, t3, t4, t5, distanceThisDir, t6, t7, reachedJunction, place, left, right, t8, t9, t10, t11;
        _box_0 = {};
        pos = junction.position;
        _box_0.pos = pos;
        dir = junction.direction;
        t1 = H.setRuntimeTypeInfo([pos], [L.Vec]);
        passage = P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0));
        newJunctions = H.setRuntimeTypeInfo([], [L.Junction]);
        maybeBranch = new Q.RoomsBiome__tryPlacePassageRoom_maybeBranch(_box_0, this, newJunctions, junction);
        t1 = this._style;
        $length = $.$get$rng().inclusive$2(t1.passageMinLength, t1.passageMaxLength);
        for (t2 = this._dungeon, t3 = t2.stage, t4 = this._junctions, t5 = t4._byPosition, t1 = t1.passageTurnPercent, distanceThisDir = 0; passage._collection$_length < $length;) {
          if (distanceThisDir > 1) {
            t6 = $.$get$rng();
            t6 = t6._random.nextInt$1(100) < t1;
          } else
            t6 = false;
          if (t6) {
            t6 = $.$get$rng();
            if (t6._random.nextInt$1(2) === 0) {
              dir = dir.get$rotateLeft90();
              maybeBranch.call$1(dir.get$rotateRight90());
            } else {
              dir = dir.get$rotateRight90();
              maybeBranch.call$1(dir.get$rotateLeft90());
            }
            maybeBranch.call$1(dir.get$rotate180());
            distanceThisDir = 0;
          }
          _box_0.pos = _box_0.pos.$add(0, dir);
          t6 = t3.tiles;
          t7 = t6.bounds;
          if (!t7.inflate$1(-1).contains$1(0, _box_0.pos))
            return false;
          if (passage.contains$1(0, _box_0.pos))
            return false;
          passage.add$1(0, _box_0.pos);
          reachedJunction = t5.$index(0, _box_0.pos);
          if (reachedJunction != null && reachedJunction.direction === dir.get$rotate180()) {
            if (passage._collection$_length <= 2 || !this._isShortcut$3(pos, _box_0.pos.$add(0, dir), passage._collection$_length))
              return false;
            t4.removeAt$1(0, _box_0.pos);
            this._placePassage$4(_box_0.pos, junction, passage, newJunctions);
            return true;
          }
          place = t2.placeAt$1(_box_0.pos);
          if (place != null && !place.$isRoomPlace && !place.$isPassagePlace) {
            if (passage._collection$_length <= 3 || !this._isShortcut$3(pos, _box_0.pos.$add(0, dir), passage._collection$_length))
              return false;
            this._reachOtherBiome$1(_box_0.pos);
            passage.remove$1(0, _box_0.pos);
            pos = _box_0.pos.$sub(0, dir);
            _box_0.pos = pos;
            this._placePassage$4(pos, junction, passage, newJunctions);
            return true;
          }
          left = _box_0.pos.$add(0, dir.get$rotateLeft90());
          right = _box_0.pos.$add(0, dir.get$rotateRight90());
          if (!t7.inflate$1(-1).contains$1(0, left))
            return false;
          t6 = t6._elements;
          t8 = t7.size.x;
          if (typeof t8 !== "number")
            return H.iae(t8);
          t9 = left.x;
          if (typeof t9 !== "number")
            return H.iae(t9);
          t9 = left.y * t8 + t9;
          t10 = t6.length;
          if (t9 < 0 || t9 >= t10)
            return H.ioore(t6, t9);
          t9 = t6[t9].type;
          t9.toString;
          t11 = $.$get$Motility_doorAndWalk();
          t9 = t9.motility._bitMask;
          t11 = t11._bitMask;
          if ((t9 & t11) !== 0)
            return false;
          if (passage.contains$1(0, left))
            return false;
          if (!t7.inflate$1(-1).contains$1(0, right))
            return false;
          t7 = right.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t7 = right.y * t8 + t7;
          if (t7 < 0 || t7 >= t10)
            return H.ioore(t6, t7);
          if ((t6[t7].type.motility._bitMask & t11) !== 0)
            return false;
          if (passage.contains$1(0, right))
            return false;
          ++distanceThisDir;
        }
        passage.remove$1(0, passage.get$last(passage));
        if (!this._tryPlaceRoom$2(new L.Junction(junction.theme, dir, _box_0.pos, 0), passage))
          return false;
        this._placePassage$4(_box_0.pos, junction, passage, newJunctions);
        return true;
      },
      _placePassage$4: function(pos, junction, passage, newJunctions) {
        var t1, t2, _i, t3, t4, t5, t6, t7, t8, t9, t10, neighbor;
        H.assertSubtype(passage, "$isSet", [L.Vec], "$asSet");
        H.assertSubtype(newJunctions, "$isList", [L.Junction], "$asList");
        for (t1 = newJunctions.length, t2 = this._junctions, _i = 0; _i < newJunctions.length; newJunctions.length === t1 || (0, H.throwConcurrentModificationError)(newJunctions), ++_i)
          t2.add$1(0, newJunctions[_i]);
        for (t1 = new P._LinkedHashSetIterator(passage, passage._collection$_modifications, [H.getTypeArgumentByIndex(passage, 0)]), t1._collection$_cell = passage._collection$_first, t2 = this._dungeon, t3 = t2.stage; t1.moveNext$0();) {
          t4 = t1._collection$_current;
          t5 = $.$get$Tiles_floor();
          t6 = t3.tiles;
          t7 = t6._elements;
          t8 = t4.y;
          t6 = t6.bounds.size.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t9 = t4.x;
          if (typeof t9 !== "number")
            return H.iae(t9);
          t9 = t8 * t6 + t9;
          t8 = t7.length;
          if (t9 < 0 || t9 >= t8)
            return H.ioore(t7, t9);
          t9 = t7[t9];
          t9.type = t5;
          t10 = $.$get$Tiles_water();
          if (t5 == null ? t10 == null : t5 === t10) {
            t5 = $.$get$rng();
            t5 = t5._random.nextInt$1(100) < 2;
          } else
            t5 = false;
          if (t5) {
            t5 = F.Lighting_emanationForLevel(5);
            t9._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t9._appliedEmanation + t5, 0, 192));
          }
          for (_i = 0; _i < 8; ++_i) {
            neighbor = t4.$add(0, C.List_slV[_i]);
            t5 = neighbor.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = neighbor.y * t6 + t5;
            if (t5 < 0 || t5 >= t8)
              return H.ioore(t7, t5);
            t9 = t7[t5].type;
            t10 = $.$get$Tiles_rock();
            if (t9 == null ? t10 == null : t9 === t10) {
              t9 = $.$get$Tiles_wall();
              t5 = t7[t5];
              t5.type = t9;
              t10 = $.$get$Tiles_water();
              if (t9 == null ? t10 == null : t9 === t10) {
                t9 = $.$get$rng();
                t9 = t9._random.nextInt$1(100) < 2;
              } else
                t9 = false;
              if (t9) {
                t9 = F.Lighting_emanationForLevel(5);
                t5._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t5._appliedEmanation + t9, 0, 192));
              }
            }
          }
        }
        this._placeDoor$1(junction.position);
        this._placeDoor$1(pos);
        t2.addPlace$1(new Q.PassagePlace(false, false, passage.toList$0(0), P.LinkedHashSet_LinkedHashSet(null, null, null, D.Place), 0.04, 0, 0.02, 0, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.double), 0));
      },
      _isShortcut$3: function(from, to, $length) {
        var t1, cache, t2;
        t1 = this._failedShortcuts;
        cache = t1.$index(0, from);
        if (cache != null && cache.contains$1(0, to))
          return false;
        t2 = new Q.CyclePathfinder($length * this._style.passageShortcutScale, this._dungeon.stage, from, to).search$0(0);
        if (t2)
          J.add$1$ax(t1.putIfAbsent$2(0, from, new Q.RoomsBiome__isShortcut_closure()), to);
        return !t2;
      },
      _createStartingRoom$0: function() {
        var t1, startRoom, t2, t3, t4, t5, x, y;
        t1 = this._dungeon;
        startRoom = this._tryCreateRoom$1(t1.depth);
        t2 = t1.stage.tiles.bounds.size;
        t3 = t2.x;
        t4 = startRoom.tiles.bounds.size;
        t5 = t4.x;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t5 = t3 - t5;
        t4 = t2.y - t4.y;
        t2 = L.Vec;
        do {
          t3 = $.$get$rng();
          x = t3.inclusive$2(0, t5);
          y = t3.inclusive$2(0, t4);
        } while (!startRoom.canPlaceAt$4(t1, x, y, P.LinkedHashSet_LinkedHashSet(null, null, null, t2)));
        startRoom.place$3(this, x, y);
      },
      _tryPlaceRoom$2: function(junction, passageTiles) {
        var t1, room, t2, t3, roomJunctions, _i, roomJunction, roomPos, t4, t5;
        H.assertSubtype(passageTiles, "$isSet", [L.Vec], "$asSet");
        t1 = this._dungeon;
        room = this._tryCreateRoom$2(t1.depth, junction.theme);
        if (room == null)
          return false;
        t2 = room.junctions;
        t3 = H.getTypeArgumentByIndex(t2, 0);
        roomJunctions = P.List_List$from(new H.WhereIterable(t2, H.functionTypeCheck(new Q.RoomsBiome__tryPlaceRoom_closure(junction), {func: 1, ret: P.bool, args: [t3]}), [t3]), true, t3);
        t3 = $.$get$rng();
        t3.toString;
        C.JSArray_methods.shuffle$1(H.assertSubtype(roomJunctions, "$isList", [L.Junction], "$asList"), t3._random);
        for (t2 = roomJunctions.length, _i = 0; _i < roomJunctions.length; roomJunctions.length === t2 || (0, H.throwConcurrentModificationError)(roomJunctions), ++_i) {
          roomJunction = roomJunctions[_i];
          t3 = junction.position;
          roomPos = t3.$sub(0, J.get$position$x(roomJunction));
          t4 = roomPos.x;
          t5 = roomPos.y;
          if (!room.canPlaceAt$4(t1, t4, t5, passageTiles))
            continue;
          room.place$4(this, t4, t5, t3);
          return true;
        }
        return false;
      },
      _tryCreateRoom$2: function(depth, from) {
        var t1, t2;
        if (from == null)
          from = "starting";
        t1 = $.$get$RoomTypes__resources();
        t2 = t1._resources;
        if (t2.get$isEmpty(t2)) {
          Y.Themes_defineTags(t1, null, R.RoomType);
          t1.defineTags$1("starting");
          R.RoomTypes_add(R.RectangleRoom$("great-hall", null, null, 10, 16, 6, 8, null, null, true), null, "chamber hall nature starting");
          R.RoomTypes_add(R.RectangleRoom$("kitchen", null, null, 12, 7, 6, 4, null, null, null), null, "great-hall");
          R.RoomTypes_add(R.RectangleRoom$("larder", null, null, 5, 6, null, null, null, null, null), 0.2, "kitchen");
          R.RoomTypes_add(R.RectangleRoom$("pantry", null, null, 4, 5, null, null, null, null, null), 0.1, "kitchen larder storeroom");
          R.RoomTypes_add(R.RectangleRoom$("chamber", null, null, 7, 8, null, 4, null, null, null), null, "chamber great-hall hall nature");
          R.RoomTypes_add(R.RectangleRoom$("closet", null, null, 4, 5, null, null, null, null, null), 0.1, "chamber laboratory storeroom");
          R.RoomTypes_add(R.RectangleRoom$("laboratory", null, null, 8, 10, null, 4, null, null, true), null, "hall laboratory");
          R.RoomTypes_add(R.RectangleRoom$("storeroom", null, null, 10, 10, 4, 4, null, null, true), null, "hall");
          R.RoomTypes_add(R.RectangleRoom$("hall", null, null, 4, 16, 2, 6, null, null, null), null, "nature passage starting storeroom");
          R.RoomTypes_add(R.RectangleRoom$("boss-chamber", null, null, 10, 16, 6, 8, 2, 5, null), 0.3, "great-hall passage");
          R.RoomTypes_add(R.RectangleRoom$("treasure-room", 10, 5, 10, 12, 4, 4, 0.5, null, null), 0.3, "boss-chamber");
        }
        t1 = t1.tryChoose$2(depth, from);
        if (t1 == null)
          return;
        return t1.create$0();
      },
      _tryCreateRoom$1: function(depth) {
        return this._tryCreateRoom$2(depth, null);
      },
      _placeDoor$1: function(pos) {
        this._dungeon.setTile$3(pos.x, pos.y, $.$get$Tiles_closedDoor());
        this._junctions.removeAt$1(0, pos);
      },
      _tryAddJunction$3: function(theme, junctionPos, junctionDir) {
        var t1 = new Q.RoomsBiome__tryAddJunction_isBlocked(this, junctionPos);
        if (t1.call$1(C.Direction_0_0))
          return;
        if (t1.call$1(junctionDir))
          return;
        if (t1.call$1(junctionDir.get$rotateLeft45()))
          return;
        if (t1.call$1(junctionDir.get$rotateRight45()))
          return;
        if (t1.call$1(junctionDir.get$rotateLeft90()))
          return;
        if (t1.call$1(junctionDir.get$rotateRight90()))
          return;
        this._junctions.add$1(0, new L.Junction(theme, junctionDir, junctionPos, 0));
      },
      _isOtherBiome$1: function(pos) {
        var place = this._dungeon.placeAt$1(pos);
        return place != null && !place.$isRoomPlace && !place.$isPassagePlace;
      },
      _reachOtherBiome$1: function(start) {
        var t1, queue, t2, t3, pos, _i, dir, neighbor, t4, t5, t6, tile;
        t1 = this._reached;
        if (t1.contains$1(0, start))
          return;
        queue = P.ListQueue_ListQueue$from([start], L.Vec);
        t1.add$1(0, start);
        for (t2 = H.getTypeArgumentByIndex(queue, 0), t3 = this._dungeon.stage; !queue.get$isEmpty(queue);) {
          pos = queue.removeFirst$0();
          for (_i = 0; _i < 8; ++_i) {
            dir = C.List_slV[_i];
            neighbor = pos.$add(0, dir);
            t4 = t3.tiles;
            t5 = t4.bounds;
            if (!t5.contains$1(0, neighbor))
              continue;
            if (t1.contains$1(0, neighbor))
              continue;
            t4 = t4._elements;
            t5 = t5.size.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t6 = neighbor.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = neighbor.y * t5 + t6;
            if (t6 < 0 || t6 >= t4.length)
              return H.ioore(t4, t6);
            tile = t4[t6].type;
            t4 = $.$get$Tiles_grass();
            if (tile == null ? t4 != null : tile !== t4) {
              t4 = $.$get$Tiles_bridge();
              t4 = tile == null ? t4 != null : tile !== t4;
            } else
              t4 = false;
            if (t4) {
              if (C.JSArray_methods.contains$1(C.List_aAW, dir)) {
                t4 = $.$get$rng();
                t4 = t4._random.nextInt$1(100) < 30;
              } else
                t4 = false;
              if (t4)
                this._tryAddJunction$3("nature", neighbor, dir);
              continue;
            }
            queue._add$1(H.assertSubtypeOfRuntimeType(neighbor, t2));
            t1.add$1(0, neighbor);
          }
        }
      }
    },
    RoomsBiome__tryPlacePassageRoom_maybeBranch: {
      "^": "Closure:39;_box_0,$this,newJunctions,junction",
      call$1: function(dir) {
        if ($.$get$rng().range$1(100) < this.$this._style.passageBranchPercent)
          C.JSArray_methods.add$1(this.newJunctions, new L.Junction(this.junction.theme, dir, this._box_0.pos.$add(0, dir), 0));
      }
    },
    RoomsBiome__isShortcut_closure: {
      "^": "Closure:49;",
      call$0: function() {
        return P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec);
      }
    },
    RoomsBiome__tryPlaceRoom_closure: {
      "^": "Closure:50;junction",
      call$1: function(roomJunction) {
        return H.interceptedTypeCheck(roomJunction, "$isJunction").direction === this.junction.direction.get$rotate180();
      }
    },
    RoomsBiome__tryAddJunction_isBlocked: {
      "^": "Closure:1;$this,junctionPos",
      call$1: function(direction) {
        var pos, t1, tile;
        pos = this.junctionPos.$add(0, direction);
        t1 = this.$this._dungeon.stage.tiles;
        if (!t1.bounds.inflate$1(-1).contains$1(0, pos))
          return true;
        tile = t1.$index(0, pos).type;
        t1 = $.$get$Tiles_wall();
        if (tile == null ? t1 != null : tile !== t1) {
          t1 = $.$get$Tiles_rock();
          if (tile == null ? t1 != null : tile !== t1) {
            t1 = $.$get$Tiles_grass();
            t1 = tile == null ? t1 != null : tile !== t1;
          } else
            t1 = false;
        } else
          t1 = false;
        return t1;
      }
    },
    Room: {
      "^": "Object;type>,tiles,junctions",
      canPlaceAt$4: function(dungeon, x, y, passageTiles) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, tile;
        H.assertSubtype(passageTiles, "$isSet", [L.Vec], "$asSet");
        t1 = dungeon.stage.tiles;
        t2 = t1.bounds;
        t3 = this.tiles;
        t4 = t3.bounds;
        if (!t2.containsRect$1(t4.offset$2(0, x, y)))
          return false;
        for (t5 = X.RectIterator$(t4), t3 = t3._elements, t4 = t4.size.x, t6 = t3.length; t5.moveNext$0();) {
          t7 = t5._rect$_x;
          t8 = t5._rect$_y;
          if (typeof t7 !== "number")
            return t7.$add();
          if (typeof x !== "number")
            return H.iae(x);
          t9 = t7 + x;
          t10 = t8 + y;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t7 = t8 * t4 + t7;
          if (t7 < 0 || t7 >= t6)
            return H.ioore(t3, t7);
          if (t3[t7] == null)
            continue;
          if (passageTiles.contains$1(0, new L.Vec(t9, t10)))
            return false;
          t8 = t1._elements;
          t11 = t2.size.x;
          if (typeof t11 !== "number")
            return H.iae(t11);
          t9 = t10 * t11 + t9;
          if (t9 < 0 || t9 >= t8.length)
            return H.ioore(t8, t9);
          tile = t8[t9].type;
          t8 = $.$get$Tiles_rock();
          if (tile == null ? t8 != null : tile !== t8) {
            t7 = t3[t7];
            t7 = tile == null ? t7 != null : tile !== t7;
          } else
            t7 = false;
          if (t7)
            return false;
        }
        return true;
      },
      place$4: function(biome, x, y, junction) {
        var cells, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, tile, t11, roomPos, _i;
        cells = H.setRuntimeTypeInfo([], [L.Vec]);
        t1 = junction == null;
        if (!t1)
          C.JSArray_methods.add$1(cells, junction);
        for (t2 = this.tiles, t3 = t2.bounds, t4 = X.RectIterator$(t3), t5 = biome._dungeon, t6 = t5.stage, t2 = t2._elements, t3 = t3.size.x, t7 = t2.length; t4.moveNext$0();) {
          t8 = t4._rect$_x;
          t9 = t4._rect$_y;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (typeof t8 !== "number")
            return H.iae(t8);
          t10 = t9 * t3 + t8;
          if (t10 < 0 || t10 >= t7)
            return H.ioore(t2, t10);
          tile = t2[t10];
          if (tile == null)
            continue;
          if (typeof x !== "number")
            return H.iae(x);
          t8 += x;
          t9 += y;
          t10 = t6.tiles;
          t11 = t10._elements;
          t10 = t10.bounds.size.x;
          if (typeof t10 !== "number")
            return H.iae(t10);
          t10 = t9 * t10 + t8;
          if (t10 < 0 || t10 >= t11.length)
            return H.ioore(t11, t10);
          t10 = t11[t10];
          t10.type = tile;
          if (tile === $.$get$Tiles_water()) {
            t11 = $.$get$rng();
            t11 = t11._random.nextInt$1(100) < 2;
          } else
            t11 = false;
          if (t11) {
            t11 = F.Lighting_emanationForLevel(5);
            t10._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t10._appliedEmanation + t11, 0, 192));
          }
          t10 = $.$get$Motility_walk();
          if ((tile.motility._bitMask & t10._bitMask) !== 0)
            C.JSArray_methods.add$1(cells, new L.Vec(t8, t9));
        }
        roomPos = new L.Vec(x, y);
        for (t2 = this.junctions, t3 = t2.length, t4 = this.type, t6 = t4.theme, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          junction = t2[_i];
          biome._tryAddJunction$3(t6, roomPos.$add(0, junction.position), junction.direction);
        }
        t2 = $.$get$rng();
        t3 = C.JSNumber_methods.round$0(E.lerpDouble(t5.depth, 1, 30, 80, 10));
        t5.addPlace$1(new Q.RoomPlace(t4, t1, t2.range$1(100) < t3, cells, P.LinkedHashSet_LinkedHashSet(null, null, null, D.Place), 0.05, 0, 0.05, 0, P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.double), 0));
      },
      place$3: function(biome, x, y) {
        return this.place$4(biome, x, y, null);
      }
    },
    CyclePathfinder: {
      "^": "Pathfinder;_maxLength,stage,start,end",
      processStep$1: function(path) {
        if (path.length >= this._maxLength)
          return false;
        return;
      },
      reachedGoal$1: function(path) {
        return true;
      },
      stepCost$2: function(pos, tile) {
        var t1 = $.$get$Motility_doorAndWalk();
        if ((tile.type.motility._bitMask & t1._bitMask) !== 0)
          return 1;
        return;
      },
      unreachableGoal$0: function() {
        return false;
      },
      $asPathfinder: function() {
        return [P.bool];
      }
    }
  }], ["", "package:hauberk/src/content/elements.dart",, A, {
    "^": "",
    Elements_closure0: {
      "^": "Closure:51;",
      call$1: [function(_) {
        H.intTypeCheck(_);
        return new G.WindAction();
      }, null, null, 4, 0, null, 1, "call"]
    },
    Elements_closure7: {
      "^": "Closure:52;",
      call$1: [function(_) {
        H.intTypeCheck(_);
        return new G.BurnActorAction();
      }, null, null, 4, 0, null, 1, "call"]
    },
    Elements_closure8: {
      "^": "Closure:53;",
      call$4: [function(pos, hit, distance, fuel) {
        H.interceptedTypeCheck(pos, "$isVec");
        H.interceptedTypeCheck(hit, "$isHit");
        H.numTypeCheck(distance);
        H.intTypeCheck(fuel);
        return new G.BurnFloorAction(pos, C.JSNumber_methods.toInt$0(hit.get$averageDamage()), fuel);
      }, null, null, 16, 0, null, 0, 3, 2, 48, "call"]
    },
    Elements_closure3: {
      "^": "Closure:54;",
      call$1: [function(damage) {
        return new E.FreezeActorAction(H.intTypeCheck(damage));
      }, null, null, 4, 0, null, 4, "call"]
    },
    Elements_closure4: {
      "^": "Closure:55;",
      call$4: [function(pos, hit, distance, _) {
        H.interceptedTypeCheck(pos, "$isVec");
        H.interceptedTypeCheck(hit, "$isHit");
        H.numTypeCheck(distance);
        H.intTypeCheck(_);
        return new G.FreezeFloorAction(pos);
      }, null, null, 16, 0, null, 0, 3, 2, 1, "call"]
    },
    Elements_closure5: {
      "^": "Closure:56;",
      call$1: [function(damage) {
        return new E.PoisonAction(H.intTypeCheck(damage));
      }, null, null, 4, 0, null, 4, "call"]
    },
    Elements_closure6: {
      "^": "Closure:57;",
      call$4: [function(pos, hit, distance, _) {
        H.interceptedTypeCheck(pos, "$isVec");
        H.interceptedTypeCheck(hit, "$isHit");
        H.numTypeCheck(distance);
        H.intTypeCheck(_);
        return new G.PoisonFloorAction(pos, C.JSNumber_methods.toInt$0(hit.get$averageDamage()));
      }, null, null, 16, 0, null, 0, 3, 2, 1, "call"]
    },
    Elements_closure: {
      "^": "Closure:58;",
      call$1: [function(damage) {
        return new E.BlindAction(H.intTypeCheck(damage));
      }, null, null, 4, 0, null, 4, "call"]
    },
    Elements_closure1: {
      "^": "Closure:59;",
      call$1: [function(damage) {
        return new E.DazzleAction(H.intTypeCheck(damage));
      }, null, null, 4, 0, null, 4, "call"]
    },
    Elements_closure2: {
      "^": "Closure:60;",
      call$4: [function(pos, hit, distance, _) {
        var t1, min, max, t2;
        H.interceptedTypeCheck(pos, "$isVec");
        H.interceptedTypeCheck(hit, "$isHit");
        H.numTypeCheck(distance);
        H.intTypeCheck(_);
        t1 = new G.LightFloorAction(pos);
        min = C.JSInt_methods.clamp$2(1 + C.JSNumber_methods.toInt$0(hit.get$averageDamage()) * 4, 0, 255);
        max = C.JSNumber_methods.clamp$2(128 + hit.get$averageDamage() * 16, 0, 255);
        t2 = hit.get$range();
        if (typeof distance !== "number")
          return H.iae(distance);
        t1._emanation = C.JSNumber_methods.toInt$0(E.lerpDouble(t2 - distance, 0, hit.get$range(), min, max));
        return t1;
      }, null, null, 16, 0, null, 0, 3, 2, 1, "call"]
    }
  }], ["", "package:hauberk/src/content/item/affixes.dart",, Z, {
    "^": "",
    Affixes_createItem: function(itemType, droppedDepth) {
      var t1, t2, t3, depth, t4, t5, affixDepth;
      t1 = $.$get$Items_types();
      t2 = itemType.quantifiableName;
      if (J.get$isEmpty$asx(t1.getTags$1(O.Log__categorize(t2, false, true))._iterable))
        return new R.Item(itemType, null, null, 1);
      t3 = itemType.depth;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof droppedDepth !== "number")
        return H.iae(droppedDepth);
      depth = Math.max(1, droppedDepth - C.JSInt_methods._tdivFast$1(t3 - droppedDepth, 3));
      t4 = $.$get$rng();
      t5 = C.JSNumber_methods.ceil$0(1 + 0.006 * depth * depth + 0.2 * depth);
      if (t4.range$1(100) >= t5)
        return new R.Item(itemType, null, null, 1);
      affixDepth = Math.max(droppedDepth, t3) + t4.taper$2(0, 2);
      t3 = $.$get$Affixes_prefixes().tryChooseMatching$2(affixDepth, t1.getTags$1(O.Log__categorize(t2, false, true)));
      t2 = $.$get$Affixes_suffixes().tryChooseMatching$2(affixDepth, t1.getTags$1(O.Log__categorize(t2, false, true)));
      switch (t4.range$1(5)) {
        case 0:
        case 1:
          return new R.Item(itemType, t3, null, 1);
        case 2:
        case 3:
          return new R.Item(itemType, null, t2, 1);
        default:
          return new R.Item(itemType, t3, t2, 1);
      }
    },
    Affixes_find: function($name) {
      var type = $.$get$Affixes_prefixes().tryFind$1($name);
      if (type != null)
        return type;
      return $.$get$Affixes_suffixes().find$1(0, $name);
    }
  }], ["", "package:hauberk/src/content/item/builder.dart",, R, {
    "^": "",
    category: function(glyph, stack, verb) {
      var t1;
      R.finishItem();
      t1 = new R._CategoryBuilder(false, H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int));
      $._category = t1;
      t1._builder$_glyph = glyph;
      t1._verb = verb;
      t1._maxStack = stack;
      return t1;
    },
    item: function($name, depth, color, frequency, price) {
      var t1;
      R.finishItem();
      t1 = new R._ItemBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int));
      $._item = t1;
      t1._builder$_name = $name;
      t1._builder$_depth = depth;
      t1._color = color;
      t1._frequency = frequency == null ? 1 : frequency;
      t1._price = price == null ? 0 : price;
      return t1;
    },
    affix: function($name, depth, frequency) {
      var isPrefix, t1;
      R.finishAffix();
      if (C.JSString_methods.endsWith$1($name, " _")) {
        $name = C.JSString_methods.substring$2($name, 0, $name.length - 2);
        isPrefix = true;
      } else {
        if (C.JSString_methods.startsWith$1($name, "_ "))
          $name = C.JSString_methods.substring$1($name, 2);
        else
          throw H.wrapException('Affix "' + $name + '" must start or end with "_".');
        isPrefix = false;
      }
      t1 = new R._AffixBuilder($name, isPrefix, depth, frequency, P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int));
      $._affix = t1;
      return t1;
    },
    finishItem: function() {
      var t1, t2, appearance, tossDamage, verb, range, t3, element, use, t4, breakage, toss, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      t1 = $._item;
      if (t1 == null)
        return;
      t2 = $._category;
      appearance = L.Glyph$fromCharCode(t2._builder$_glyph, t1._color, null);
      tossDamage = t1._tossDamage;
      if (tossDamage == null)
        tossDamage = t2._tossDamage;
      if (tossDamage != null) {
        t1 = "the " + t1._builder$_name.toLowerCase();
        t2 = t2._verb;
        verb = t2 != null ? O.Log_conjugate(t2, C.Pronoun_it_it_its) : "hits";
        t2 = $._item;
        range = t2._tossRange;
        if (range == null)
          range = $._category._tossRange;
        t3 = t2._tossElement;
        element = t3 == null ? $._category._tossElement : t3;
        if (element == null)
          element = $.$get$Element_none();
        use = t2._tossUse;
        if (use == null)
          use = $._category._tossUse;
        t3 = $._category;
        t4 = t3._breakage;
        breakage = t4 == null ? t2._breakage : t4;
        if (breakage == null)
          breakage = 0;
        toss = new L.Toss(breakage, U.Attack$(new O.Noun(t1), verb, tossDamage, range, element), use);
        t1 = t2;
        t2 = t3;
      } else
        toss = null;
      t3 = t1._builder$_name;
      t4 = t1._builder$_depth;
      t5 = $._sortIndex;
      $._sortIndex = t5 + 1;
      t6 = t2._equipSlot;
      t7 = t2._weaponType;
      t8 = t1._use;
      t9 = t1._builder$_attack;
      t10 = t1._armor;
      if (t10 == null)
        t10 = 0;
      t11 = t1._price;
      t12 = t1._maxStack;
      if (t12 == null)
        t12 = t2._maxStack;
      if (t12 == null)
        t12 = 1;
      t13 = t1._weight;
      if (t13 == null)
        t13 = 0;
      t14 = t1._heft;
      if (t14 == null)
        t14 = 0;
      t15 = t1._builder$_emanation;
      if (t15 == null)
        t15 = t2._builder$_emanation;
      t1 = t1._fuel;
      if (t1 == null)
        t1 = t2._fuel;
      t2 = t2._isTreasure;
      t16 = P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int);
      t17 = H.setRuntimeTypeInfo([], [M.Skill]);
      if (t15 == null)
        t15 = 0;
      if (t1 == null)
        t1 = 0;
      t16.addAll$1(0, $._category._destroyChance);
      t16.addAll$1(0, $._item._destroyChance);
      C.JSArray_methods.addAll$1(t17, $._category._skills);
      C.JSArray_methods.addAll$1(t17, $._item._skills);
      $.$get$Items_types().add$5(0, O.Log__categorize(t3, false, true), new L.ItemType(t3, appearance, t4, t5, t6, t7, t8, t9, toss, t10, t11, t13, t14, t15, t2, t12, t16, t1, t17), t4, $._item._frequency, $._category._builder$_tag);
      $._item = null;
    },
    finishAffix: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, affix, affixes;
      t1 = $._affix;
      if (t1 == null)
        return;
      t2 = t1._builder$_name;
      t3 = t1._heftScale;
      t4 = t1._damageScale;
      t5 = t1._damageBonus;
      t6 = t1._builder$_brand;
      t7 = t1._priceBonus;
      t8 = t1._priceScale;
      if (t3 == null)
        t3 = 1;
      if (t4 == null)
        t4 = 1;
      if (t5 == null)
        t5 = 1;
      if (t6 == null)
        t6 = $.$get$Element_none();
      if (t7 == null)
        t7 = 0;
      if (t8 == null)
        t8 = 1;
      affix = new L.Affix(t2, t3, 0, 0, t4, t5, t6, 0, P.LinkedHashMap_LinkedHashMap$_empty(G.Element, P.int), t7, t8);
      t1._builder$_resists.forEach$1(0, affix.get$resist());
      t1 = $._affix;
      affixes = t1._isPrefix ? $.$get$Affixes_prefixes() : $.$get$Affixes_suffixes();
      affixes.add$5(0, t1._builder$_name, affix, t1._builder$_depth, t1._frequency, $._affixTag);
      $._affix = null;
    },
    _BaseBuilder: {
      "^": "Object;",
      stack$1: function(stack) {
        this._maxStack = stack;
      },
      toss$4$breakage$damage$element$range: function(breakage, damage, element, range) {
        this._tossDamage = damage;
        this._tossElement = element;
        this._tossRange = range;
        this._breakage = breakage;
      },
      toss$3$breakage$damage$range: function(breakage, damage, range) {
        return this.toss$4$breakage$damage$element$range(breakage, damage, null, range);
      },
      toss$1$breakage: function(breakage) {
        return this.toss$4$breakage$damage$element$range(breakage, null, null, null);
      },
      toss$3$damage$element$range: function(damage, element, range) {
        return this.toss$4$breakage$damage$element$range(null, damage, element, range);
      },
      toss$2$breakage$range: function(breakage, range) {
        return this.toss$4$breakage$damage$element$range(breakage, null, null, range);
      },
      toss$1$damage: function(damage) {
        return this.toss$4$breakage$damage$element$range(null, damage, null, null);
      },
      toss$1$range: function(range) {
        return this.toss$4$breakage$damage$element$range(null, null, null, range);
      },
      toss$2$damage$range: function(damage, range) {
        return this.toss$4$breakage$damage$element$range(null, damage, null, range);
      }
    },
    _CategoryBuilder: {
      "^": "_BaseBuilder;0_builder$_glyph,0_equipSlot,0_weaponType,0_builder$_tag,0_verb,_isTreasure,_skills,_destroyChance,0_maxStack,0_tossElement,0_tossDamage,0_tossRange,0_tossUse,0_builder$_emanation,0_fuel,0_breakage",
      tag$1: function(_, tagPath) {
        var tags, _i, equipSlot, t1;
        $.$get$Items_types().defineTags$1("item/" + tagPath);
        tags = H.setRuntimeTypeInfo(tagPath.split("/"), [P.String]);
        this._builder$_tag = C.JSArray_methods.get$last(tags);
        for (_i = 0; _i < 9; ++_i) {
          equipSlot = C.List_tBY[_i];
          if (C.JSArray_methods.contains$1(tags, equipSlot)) {
            this._equipSlot = equipSlot;
            break;
          }
        }
        if (C.JSArray_methods.contains$1(tags, "weapon")) {
          t1 = C.JSArray_methods.indexOf$1(tags, "weapon") + 1;
          if (t1 < 0 || t1 >= tags.length)
            return H.ioore(tags, t1);
          this._weaponType = tags[t1];
        }
        $.$get$Affixes_prefixes().defineTags$1(tagPath);
        $.$get$Affixes_suffixes().defineTags$1(tagPath);
      }
    },
    _ItemBuilder: {
      "^": "_BaseBuilder;0_color,0_frequency,0_price,0_use,0_builder$_attack,0_weight,0_heft,0_armor,0_builder$_name,0_builder$_depth,_skills,_destroyChance,0_maxStack,0_tossElement,0_tossDamage,0_tossRange,0_tossUse,0_builder$_emanation,0_fuel,0_breakage",
      weapon$3$element$heft: function(damage, element, heft) {
        this._builder$_attack = U.Attack$(null, $._category._verb, damage, null, element);
        this._heft = heft;
      },
      weapon$2$heft: function(damage, heft) {
        return this.weapon$3$element$heft(damage, null, heft);
      },
      ranged$4$damage$heft$range: function(noun, damage, heft, range) {
        this._builder$_attack = U.Attack$(new O.Noun(noun), "pierce[s]", damage, range, null);
        this._heft = heft;
      },
      food$1: function(amount) {
        this._use = H.functionTypeCheck(new R._ItemBuilder_food_closure(amount), {func: 1, ret: V.Action});
      },
      detection$2$range: function(types, range) {
        this._use = H.functionTypeCheck(new R._ItemBuilder_detection_closure(H.assertSubtype(types, "$isList", [T.DetectType], "$asList"), range), {func: 1, ret: V.Action});
      },
      detection$1: function(types) {
        return this.detection$2$range(types, null);
      },
      resistSalve$1: function(element) {
        this._use = H.functionTypeCheck(new R._ItemBuilder_resistSalve_closure(element), {func: 1, ret: V.Action});
      },
      mapping$2$illuminate: function(distance, illuminate) {
        this._use = H.functionTypeCheck(new R._ItemBuilder_mapping_closure(distance, illuminate), {func: 1, ret: V.Action});
      },
      mapping$1: function(distance) {
        return this.mapping$2$illuminate(distance, null);
      },
      heal$2$curePoison: function(amount, curePoison) {
        this._use = H.functionTypeCheck(new R._ItemBuilder_heal_closure(amount, curePoison), {func: 1, ret: V.Action});
      },
      heal$1: function(amount) {
        return this.heal$2$curePoison(amount, false);
      },
      ball$5$range: function(element, noun, verb, damage, range) {
        var attack = U.Attack$(new O.Noun(noun), verb, damage, 3, element);
        this._use = H.functionTypeCheck(new R._ItemBuilder_ball_closure(attack), {func: 1, ret: V.Action});
        this._tossUse = H.functionTypeCheck(new R._ItemBuilder_ball_closure0(attack), {func: 1, ret: V.Action, args: [L.Vec]});
      },
      ball$4: function(element, noun, verb, damage) {
        return this.ball$5$range(element, noun, verb, damage, null);
      },
      flow$6$fly$range: function(element, noun, verb, damage, fly, range) {
        var t1, attack, motility, t2;
        t1 = {};
        attack = U.Attack$(new O.Noun(noun), verb, damage, range, element);
        motility = $.$get$Motility_walk();
        t1.motility = motility;
        if (fly) {
          t2 = $.$get$Motility_fly();
          t1.motility = new Q.Motility(motility._bitMask | t2._bitMask);
        }
        this._use = H.functionTypeCheck(new R._ItemBuilder_flow_closure(t1, attack), {func: 1, ret: V.Action});
        this._tossUse = H.functionTypeCheck(new R._ItemBuilder_flow_closure0(t1, attack), {func: 1, ret: V.Action, args: [L.Vec]});
      },
      flow$5$fly: function(element, noun, verb, damage, fly) {
        return this.flow$6$fly$range(element, noun, verb, damage, fly, 5);
      },
      flow$4: function(element, noun, verb, damage) {
        return this.flow$6$fly$range(element, noun, verb, damage, false, 5);
      },
      lightSource$2$level$range: function(level, range) {
        this._builder$_emanation = level;
        this._use = H.functionTypeCheck(new R._ItemBuilder_lightSource_closure(range, level), {func: 1, ret: V.Action});
      }
    },
    _ItemBuilder_food_closure: {
      "^": "Closure:61;amount",
      call$0: [function() {
        return new X.EatAction(this.amount);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_detection_closure: {
      "^": "Closure:62;types,range",
      call$0: [function() {
        var t1 = this.types;
        return new T.DetectAction(P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0)), this.range);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_resistSalve_closure: {
      "^": "Closure:63;element",
      call$0: [function() {
        return new E.ResistAction(40, this.element);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_mapping_closure: {
      "^": "Closure:64;distance,illuminate",
      call$0: [function() {
        var t1 = this.illuminate;
        if (t1 == null)
          t1 = false;
        return new Q.MappingAction(this.distance, t1, 0);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_heal_closure: {
      "^": "Closure:65;amount,curePoison",
      call$0: [function() {
        return new O.HealAction(this.amount, this.curePoison);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_ball_closure: {
      "^": "Closure:66;attack",
      call$0: [function() {
        return new G.RingSelfAction(this.attack);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_ball_closure0: {
      "^": "Closure:67;attack",
      call$1: [function(pos) {
        return new G.RingFromAction(this.attack, H.interceptedTypeCheck(pos, "$isVec"));
      }, null, null, 4, 0, null, 0, "call"]
    },
    _ItemBuilder_flow_closure: {
      "^": "Closure:68;_box_0,attack",
      call$0: [function() {
        return new N.FlowSelfAction(this.attack, this._box_0.motility);
      }, null, null, 0, 0, null, "call"]
    },
    _ItemBuilder_flow_closure0: {
      "^": "Closure:69;_box_0,attack",
      call$1: [function(pos) {
        return new N.FlowFromAction(this.attack, H.interceptedTypeCheck(pos, "$isVec"), this._box_0.motility);
      }, null, null, 4, 0, null, 0, "call"]
    },
    _ItemBuilder_lightSource_closure: {
      "^": "Closure:70;range,level",
      call$0: [function() {
        return new F.IlluminateSelfAction(this.range, this.level + 1);
      }, null, null, 0, 0, null, "call"]
    },
    _AffixBuilder: {
      "^": "Object;_builder$_name,_isPrefix,_builder$_depth,_frequency,0_heftScale,0_weightBonus,0_builder$_strikeBonus,0_damageScale,0_damageBonus,0_builder$_brand,0_armor,0_priceBonus,0_priceScale,_builder$_resists",
      brand$2$resist: function(element, resist) {
        var t1;
        this._builder$_brand = element;
        t1 = resist == null ? 1 : resist;
        this._builder$_resists.$indexSet(0, element, t1);
      },
      brand$1: function(element) {
        return this.brand$2$resist(element, null);
      },
      resist$2: function(element, power) {
        var t1 = power == null ? 1 : power;
        this._builder$_resists.$indexSet(0, element, t1);
      },
      resist$1: function(element) {
        return this.resist$2(element, null);
      },
      price$2: [function(bonus, scale) {
        this._priceBonus = bonus;
        this._priceScale = scale;
      }, "call$2", "get$price", 8, 0, 71]
    }
  }], ["", "package:hauberk/src/content/item/drops.dart",, X, {
    "^": "",
    parseDrop: function($name, depth) {
      var itemType = $.$get$Items_types().tryFind$1($name);
      if (itemType != null)
        return new X._ItemDrop(itemType, depth);
      return new X._TagDrop($name, depth);
    },
    _ItemDrop: {
      "^": "Object;_type,_depth",
      spawnDrop$1: function(addItem) {
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]}).call$1(Z.Affixes_createItem(this._type, this._depth));
      },
      $isDrop: 1
    },
    _TagDrop: {
      "^": "Object;_tag,_depth",
      spawnDrop$1: function(addItem) {
        var t1, itemType;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        t1 = this._depth;
        itemType = $.$get$Items_types().tryChoose$2(t1, this._tag);
        if (itemType == null)
          return;
        addItem.call$1(Z.Affixes_createItem(itemType, t1));
      },
      $isDrop: 1
    },
    _PercentDrop: {
      "^": "Object;_chance,_drop",
      spawnDrop$1: function(addItem) {
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        if ($.$get$rng().range$1(100) >= this._chance)
          return;
        this._drop.spawnDrop$1(addItem);
      },
      $isDrop: 1
    },
    _AllOfDrop: {
      "^": "Object;_drops",
      spawnDrop$1: function(addItem) {
        var t1, t2, _i;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        for (t1 = this._drops, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].spawnDrop$1(addItem);
      },
      $isDrop: 1
    },
    _OneOfDrop: {
      "^": "Object;_drop",
      _OneOfDrop$1: function(drops) {
        this._drop.defineTags$1("drop");
        drops.forEach$1(0, new X._OneOfDrop_closure(this));
      },
      spawnDrop$1: function(addItem) {
        var drop;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        drop = this._drop.tryChoose$2(1, "drop");
        if (drop == null)
          return;
        drop.spawnDrop$1(addItem);
      },
      $isDrop: 1,
      static: {
        _OneOfDrop$: function(drops) {
          var t1 = P.String;
          t1 = new X._OneOfDrop(new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, L.Drop]), [L.Drop]));
          t1._OneOfDrop$1(drops);
          return t1;
        }
      }
    },
    _OneOfDrop_closure: {
      "^": "Closure:72;$this",
      call$2: function(drop, frequency) {
        var t1, t2;
        H.interceptedTypeCheck(drop, "$isDrop");
        H.doubleTypeCheck(frequency);
        t1 = this.$this._drop;
        H.assertSubtypeOfRuntimeType(drop, H.getTypeArgumentByIndex(t1, 0));
        t2 = t1._resources;
        t1.add$5(0, C.JSInt_methods.toString$0(t2.get$length(t2)), drop, 1, frequency, "drop");
      }
    },
    _RepeatDrop: {
      "^": "Object;_drops$_count,_drop",
      spawnDrop$1: function(addItem) {
        var t1, taper, t2, count, i;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        t1 = this._drops$_count;
        taper = t1 > 3 ? 4 : 5;
        if (t1 > 6)
          taper = 3;
        t2 = $.$get$rng();
        count = t2.triangleInt$2(t1, t1 / 2 | 0) + t2.taper$2(0, taper);
        for (t1 = this._drop, i = 0; i < count; ++i)
          t1.spawnDrop$1(addItem);
      },
      $isDrop: 1
    }
  }], ["", "package:hauberk/src/content/item/floor_drops.dart",, F, {
    "^": "",
    FloorDrops_initialize: function() {
      var t1, i, t2;
      Y.Themes_defineTags($.$get$_floorDrops(), "drop", F.FloorDrop);
      for (t1 = [L.Drop], i = 1; i <= 100; ++i) {
        F.floorDrop(i, new X._AllOfDrop(H.setRuntimeTypeInfo([new X._PercentDrop(60, X.parseDrop("Skull", i)), new X._PercentDrop(40, X.parseDrop("treasure", i)), new X._PercentDrop(30, X.parseDrop("weapon", i)), new X._PercentDrop(30, X.parseDrop("armor", i)), new X._PercentDrop(30, X.parseDrop("armor", i)), new X._PercentDrop(20, X.parseDrop("magic", i)), new X._PercentDrop(20, X.parseDrop("magic", i)), new X._PercentDrop(20, X.parseDrop("magic", i))], t1)), 2, C.SpawnLocation_2, null);
        F.floorDrop(i, new X._PercentDrop(30, X.parseDrop("magic", i)), 20, C.SpawnLocation_2, "laboratory");
        t2 = E.lerpDouble(i, 1, 100, 10, 1);
        F.floorDrop(i, X.parseDrop("food", i), t2, null, "food");
        t2 = E.lerpDouble(i, 1, 100, 5, 0.01);
        F.floorDrop(i, X.parseDrop("Rock", i), t2, C.SpawnLocation_3, null);
        F.floorDrop(i, X.parseDrop("treasure", i), 10, null, null);
        t2 = E.lerpDouble(i, 1, 100, 4, 0.1);
        F.floorDrop(i, X.parseDrop("light", i), t2, null, null);
      }
      F.floorDrop(1, X.parseDrop("item", 1), 50, C.SpawnLocation_0, null);
    },
    floorDrop: function(depth, drop, frequency, $location, theme) {
      var t1, t2, t3;
      if (theme == null)
        theme = "drop";
      if ($location == null)
        $location = C.SpawnLocation_0;
      t1 = $.$get$_floorDrops();
      t1.toString;
      t2 = H.assertSubtypeOfRuntimeType(new F.FloorDrop($location, drop), H.getTypeArgumentByIndex(t1, 0));
      t3 = t1._resources;
      t1.add$5(0, C.JSInt_methods.toString$0(t3.get$length(t3)), t2, depth, frequency, theme);
    },
    FloorDrop: {
      "^": "Object;location,drop"
    }
  }], ["", "package:hauberk/src/content/item/items.dart",, V, {}], ["", "package:hauberk/src/content/item/magic.dart",, G, {
    "^": "",
    potions: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      t1 = R.category(231, 10, null);
      t1.tag$1(0, "magic/potion/healing");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t2 = $.$get$Elements_cold();
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      R.item("Soothing Balm", 2, C.Color_255_122_105, 1, 10).heal$1(48);
      R.item("Mending Salve", 7, C.Color_204_35_57, 1, 30).heal$1(100);
      R.item("Healing Poultice", 12, C.Color_84_0_39, 1, 80).heal$2$curePoison(200, true);
      R.item("Potion[s] of Amelioration", 24, C.Color_56_16_125, 1, 220).heal$2$curePoison(400, true);
      R.item("Potion[s] of Rejuvenation", 65, C.Color_86_30_138, 0.5, 1000).heal$2$curePoison(1000, true);
      R.item("Antidote", 2, C.Color_22_117_38, 1, 20).heal$2$curePoison(0, true);
      t1 = R.category(234, 10, null);
      t1.tag$1(0, "magic/potion/resistance");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      t1 = R.item("Salve[s] of Heat Resistance", 5, C.Color_179_74_4, 0.5, 50);
      t3 = $.$get$Elements_fire();
      t1.resistSalve$1(t3);
      R.item("Salve[s] of Cold Resistance", 6, C.Color_64_163_229, 0.5, 55).resistSalve$1(t2);
      t1 = R.item("Salve[s] of Light Resistance", 7, C.Color_255_238_168, 0.5, 60);
      t4 = $.$get$Elements_light();
      t1.resistSalve$1(t4);
      t1 = R.item("Salve[s] of Wind Resistance", 8, C.Color_129_231_235, 0.5, 65);
      t5 = $.$get$Elements_air();
      t1.resistSalve$1(t5);
      t1 = R.item("Salve[s] of Lightning Resistance", 9, C.Color_189_106_235, 0.5, 70);
      t6 = $.$get$Elements_lightning();
      t1.resistSalve$1(t6);
      t1 = R.item("Salve[s] of Darkness Resistance", 10, C.Color_63_64_114, 0.5, 75);
      t7 = $.$get$Elements_dark();
      t1.resistSalve$1(t7);
      t1 = R.item("Salve[s] of Earth Resistance", 13, C.Color_142_82_55, 0.5, 80);
      t8 = $.$get$Elements_earth();
      t1.resistSalve$1(t8);
      t1 = R.item("Salve[s] of Water Resistance", 16, C.Color_26_46_150, 0.5, 85);
      t9 = $.$get$Elements_water();
      t1.resistSalve$1(t9);
      t1 = R.item("Salve[s] of Acid Resistance", 19, C.Color_189_144_108, 0.5, 90);
      t10 = $.$get$Elements_acid();
      t1.resistSalve$1(t10);
      t1 = R.item("Salve[s] of Poison Resistance", 23, C.Color_131_158_13, 0.5, 95);
      t11 = $.$get$Elements_poison();
      t1.resistSalve$1(t11);
      t1 = R.item("Salve[s] of Death Resistance", 30, C.Color_86_30_138, 0.5, 100);
      t12 = $.$get$Elements_spirit();
      t1.resistSalve$1(t12);
      t1 = R.category(235, 10, null);
      t1.tag$1(0, "magic/potion/speed");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      t1 = R.item("Potion[s] of Quickness", 3, C.Color_131_158_13, 0.3, 25);
      t1.toString;
      t13 = {func: 1, ret: V.Action};
      t1._use = H.functionTypeCheck(new G.potions_closure(), t13);
      t1 = R.item("Potion[s] of Alacrity", 18, C.Color_22_117_38, 0.3, 60);
      t1.toString;
      t1._use = H.functionTypeCheck(new G.potions_closure0(), t13);
      t1 = R.item("Potion[s] of Speed", 34, C.Color_0_64_39, 0.25, 150);
      t1.toString;
      t1._use = H.functionTypeCheck(new G.potions_closure1(), t13);
      t13 = R.category(232, 10, null);
      t13.tag$1(0, "magic/potion/bottled");
      t13.toss$3$breakage$damage$range(100, 1, 8);
      t13._destroyChance.$indexSet(0, t2, 15);
      t13._fuel = null;
      R.item("Bottled Wind", 4, C.Color_64_163_229, 0.5, 100).flow$5$fly(t5, "the wind", "blasts", 20, true);
      R.item("Bottled Ice", 7, C.Color_21_87_194, 0.5, 120).ball$4(t2, "the cold", "freezes", 30);
      R.item("Bottled Fire", 11, C.Color_204_35_57, 0.5, 140).flow$5$fly(t3, "the fire", "burns", 44, true);
      R.item("Bottled Ocean", 12, C.Color_26_46_150, 0.5, 160).flow$4(t9, "the water", "drowns", 52);
      R.item("Bottled Earth", 13, C.Color_142_82_55, 0.5, 180).ball$4(t8, "the dirt", "crushes", 58);
      R.item("Bottled Lightning", 16, C.Color_189_106_235, 0.5, 200).ball$4(t6, "the lightning", "shocks", 68);
      R.item("Bottled Acid", 18, C.Color_131_158_13, 0.5, 220).flow$4(t10, "the acid", "corrodes", 72);
      R.item("Bottled Poison", 22, C.Color_0_64_39, 0.5, 240).flow$5$fly(t11, "the poison", "infects", 90, true);
      R.item("Bottled Shadow", 28, C.Color_38_38_56, 0.5, 260).ball$4(t7, "the darkness", "torments", 120);
      R.item("Bottled Radiance", 34, C.Color_255_238_168, 0.5, 280).ball$4(t4, "light", "sears", 140);
      R.item("Bottled Spirit", 40, C.Color_63_64_114, 0.5, 300).flow$5$fly(t12, "the spirit", "haunts", 160, true);
    },
    scrolls: function() {
      var t1, t2, t3;
      t1 = R.category(226, 20, null);
      t1.tag$1(0, "magic/scroll/teleportation");
      t1.toss$3$breakage$damage$range(75, 1, 3);
      t2 = $.$get$Elements_fire();
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = 5;
      t1 = R.item("Scroll[s] of Sidestepping", 2, C.Color_189_106_235, 0.5, 16);
      t1.toString;
      t3 = {func: 1, ret: V.Action};
      t1._use = H.functionTypeCheck(new G.scrolls_closure(), t3);
      t1 = R.item("Scroll[s] of Phasing", 6, C.Color_86_30_138, 0.3, 28);
      t1.toString;
      t1._use = H.functionTypeCheck(new G.scrolls_closure0(), t3);
      t1 = R.item("Scroll[s] of Teleportation", 15, C.Color_56_16_125, 0.3, 52);
      t1.toString;
      t1._use = H.functionTypeCheck(new G.scrolls_closure1(), t3);
      t1 = R.item("Scroll[s] of Disappearing", 26, C.Color_26_46_150, 0.3, 74);
      t1.toString;
      t1._use = H.functionTypeCheck(new G.scrolls_closure2(), t3);
      t3 = R.category(228, 20, null);
      t3.tag$1(0, "magic/scroll/detection");
      t3.toss$3$breakage$damage$range(75, 1, 3);
      t3._destroyChance.$indexSet(0, t2, 20);
      t3._fuel = 5;
      t3 = [T.DetectType];
      R.item("Scroll[s] of Find Nearby Escape", 1, C.Color_255_238_168, 0.5, 12).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0], t3), 20);
      R.item("Scroll[s] of Find Nearby Items", 2, C.Color_222_156_33, 0.5, 24).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_1], t3), 20);
      R.item("Scroll[s] of Detect Nearby", 3, C.Color_131_158_13, 0.25, 36).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t3), 20);
      R.item("Scroll[s] of Locate Escape", 5, C.Color_189_144_108, 1, 28).detection$1(H.setRuntimeTypeInfo([C.DetectType_0], t3));
      R.item("Scroll[s] of Item Detection", 20, C.Color_179_74_4, 0.5, 64).detection$1(H.setRuntimeTypeInfo([C.DetectType_1], t3));
      R.item("Scroll[s] of Detection", 30, C.Color_122_44_24, 0.25, 124).detection$1(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t3));
      t3 = R.category(224, 20, null);
      t3.tag$1(0, "magic/scroll/mapping");
      t3.toss$3$breakage$damage$range(75, 1, 3);
      t3._destroyChance.$indexSet(0, t2, 15);
      t3._fuel = 5;
      R.item("Adventurer's Map", 10, C.Color_0_64_39, 0.25, 70).mapping$1(16);
      R.item("Explorer's Map", 30, C.Color_22_117_38, 0.25, 160).mapping$1(32);
      R.item("Cartographer's Map", 50, C.Color_129_217_117, 0.25, 240).mapping$1(64);
      R.item("Wizard's Map", 70, C.Color_9_95_112, 0.25, 360).mapping$2$illuminate(200, true);
    },
    potions_closure: {
      "^": "Closure:17;",
      call$0: [function() {
        return new E.HasteAction(20, 1);
      }, null, null, 0, 0, null, "call"]
    },
    potions_closure0: {
      "^": "Closure:17;",
      call$0: [function() {
        return new E.HasteAction(30, 2);
      }, null, null, 0, 0, null, "call"]
    },
    potions_closure1: {
      "^": "Closure:17;",
      call$0: [function() {
        return new E.HasteAction(40, 3);
      }, null, null, 0, 0, null, "call"]
    },
    scrolls_closure: {
      "^": "Closure:10;",
      call$0: [function() {
        return new S.TeleportAction(6);
      }, null, null, 0, 0, null, "call"]
    },
    scrolls_closure0: {
      "^": "Closure:10;",
      call$0: [function() {
        return new S.TeleportAction(12);
      }, null, null, 0, 0, null, "call"]
    },
    scrolls_closure1: {
      "^": "Closure:10;",
      call$0: [function() {
        return new S.TeleportAction(24);
      }, null, null, 0, 0, null, "call"]
    },
    scrolls_closure2: {
      "^": "Closure:10;",
      call$0: [function() {
        return new S.TeleportAction(48);
      }, null, null, 0, 0, null, "call"]
    }
  }], ["", "package:hauberk/src/content/item/shops.dart",, R, {
    "^": "",
    shop: function($name, itemTypes) {
      var t1, drops;
      t1 = P.double;
      drops = P.LinkedHashMap_LinkedHashMap$_empty(L.Drop, t1);
      H.assertSubtype(itemTypes, "$isMap", [P.String, t1], "$asMap").forEach$1(0, new R.shop_closure(drops));
      $.$get$Shops_all().$indexSet(0, $name, new O.Shop(X._OneOfDrop$(drops), $name));
    },
    shop_closure: {
      "^": "Closure:75;drops",
      call$2: function($name, frequency) {
        H.stringTypeCheck($name);
        H.doubleTypeCheck(frequency);
        this.drops.$indexSet(0, X.parseDrop($name, 1), frequency);
      }
    }
  }], ["", "package:hauberk/src/content/monster/builder.dart",, R, {
    "^": "",
    family: function(character, dodge, flags, frequency, meander, speed, tracking) {
      var t1;
      R.finishBreed();
      t1 = new R._FamilyBuilder(frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [P.String]), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [B.BreedGroup]));
      $._family = t1;
      t1._character = character;
      t1._builder0$_meander = meander;
      t1._builder0$_speed = speed;
      t1._dodge = dodge;
      t1._tracking = tracking;
      t1._flags = flags;
      return t1;
    },
    finishBreed: function() {
      var t1, tags, t2, flags, t3, dodge, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, names, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, breed;
      if ($._builder == null)
        return;
      t1 = P.String;
      tags = H.setRuntimeTypeInfo(["monster"], [t1]);
      C.JSArray_methods.addAll$1(tags, $._builder._builder0$_places);
      C.JSArray_methods.addAll$1(tags, $.$get$_family()._builder0$_places);
      if ($._builder._builder0$_places.length === 0 && $.$get$_family()._builder0$_places.length === 0)
        C.JSArray_methods.add$1(tags, "room");
      t2 = $._builder;
      t2.toString;
      flags = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
      t3 = $.$get$_family()._flags;
      if (t3 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t3.split(" "), [t1]));
      t3 = t2._flags;
      if (t3 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t3.split(" "), [t1]));
      dodge = t2._dodge;
      if (dodge == null)
        dodge = $.$get$_family()._dodge;
      if (flags.contains$1(0, "immobile"))
        dodge = 0;
      t1 = t2._builder0$_name;
      t3 = t2._pronoun;
      if (t3 == null)
        t3 = C.Pronoun_it_it_its;
      t4 = t2._appearance;
      t5 = t2._attacks;
      t6 = t2._moves;
      t7 = t2._builder0$_drops;
      t8 = t2._location;
      if (t8 == null)
        t8 = $.$get$_family()._location;
      if (t8 == null)
        t8 = C.SpawnLocation_0;
      t9 = $.$get$_family();
      t10 = t9._motility;
      t11 = t2._motility;
      t10 = t10._bitMask;
      t11 = t11._bitMask;
      t12 = t2._builder0$_depth;
      t13 = t2._builder0$_health;
      t14 = t2._tracking;
      if (t14 == null)
        t14 = 0;
      t15 = t9._tracking;
      if (t15 == null)
        t15 = 10;
      t16 = t2._vision;
      if (t16 == null)
        t16 = t9._vision;
      t17 = t2._hearing;
      if (t17 == null)
        t17 = t9._hearing;
      t18 = t2._builder0$_meander;
      if (t18 == null)
        t18 = t9._builder0$_meander;
      if (t18 == null)
        t18 = 0;
      t19 = t2._builder0$_speed;
      if (t19 == null)
        t19 = 0;
      t20 = t9._builder0$_speed;
      if (t20 == null)
        t20 = 0;
      t21 = t9._emanationLevel;
      if (t21 == null)
        t21 = t2._emanationLevel;
      t22 = t2._countMin;
      if (t22 == null)
        t22 = t9._countMin;
      if (t22 == null)
        t22 = 1;
      t23 = t2._countMax;
      if (t23 == null)
        t23 = t9._countMax;
      if (t23 == null)
        t23 = 1;
      t24 = t2._stain;
      t9 = t24 == null ? t9._stain : t24;
      names = flags.toSet$0(0);
      t24 = names.remove$1(0, "berzerk");
      t25 = names.remove$1(0, "cowardly");
      t26 = names.remove$1(0, "fearless");
      t27 = names.remove$1(0, "immobile");
      t28 = names.remove$1(0, "protective");
      t29 = names.remove$1(0, "unique");
      if (names._collection$_length !== 0)
        H.throwExpression(P.ArgumentError$('Unknown flags "' + names.join$1(0, ", ") + '"'));
      t30 = t2._description;
      t31 = H.setRuntimeTypeInfo([], [U.Defense]);
      t32 = H.setRuntimeTypeInfo([], [B.Minion]);
      t33 = H.setRuntimeTypeInfo([], [B.BreedGroup]);
      if (t16 == null)
        t16 = 8;
      if (t17 == null)
        t17 = 10;
      t34 = dodge == null ? 20 : dodge;
      if (t21 == null)
        t21 = 0;
      breed = new B.Breed(t3, t4, t12, t5, t6, t13, t14 + t15, t16, t17, t18, t19 + t20, new X._AllOfDrop(t7), t8, new Q.Motility(t10 | t11), new B.BreedFlags(t24, t25, t26, t27, t28, t29), t34, t21, t31, t22, t23, t32, t1, t9, t33, t30);
      C.JSArray_methods.addAll$1(t31, $.$get$_family()._defenses);
      C.JSArray_methods.addAll$1(t31, t2._defenses);
      C.JSArray_methods.addAll$1(t33, $.$get$_family()._groups);
      C.JSArray_methods.addAll$1(t33, t2._groups);
      $.$get$_minionNames().$indexSet(0, breed, t2._minions);
      t2 = $.$get$Monsters_breeds();
      t1 = O.Log__categorize(t1, false, true);
      t3 = $._builder._builder0$_frequency;
      if (t3 == null)
        t3 = $.$get$_family()._builder0$_frequency;
      if (t3 == null)
        t3 = 1;
      t2.add$5(0, t1, breed, t12, t3, C.JSArray_methods.join$1(tags, " "));
      $._builder = null;
    },
    breed: function($name, depth, color, health, dodge, frequency, meander, speed) {
      var t1;
      R.finishBreed();
      t1 = new R._BreedBuilder($name, depth, L.Glyph$($.$get$_family()._character, color, null), health, H.setRuntimeTypeInfo([], [U.Attack]), H.setRuntimeTypeInfo([], [O.Move]), H.setRuntimeTypeInfo([], [L.Drop]), H.setRuntimeTypeInfo([], [R._NamedMinion]), frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [P.String]), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [B.BreedGroup]));
      $._builder = t1;
      t1._builder0$_speed = speed;
      t1._builder0$_meander = meander;
      return t1;
    },
    linkMinions: function() {
      $.$get$_minionNames().forEach$1(0, new R.linkMinions_closure());
    },
    closure: {
      "^": "Closure:28;",
      call$1: function(group) {
        return J.get$name$x(group);
      }
    },
    linkMinions_closure: {
      "^": "Closure:77;",
      call$2: function(breed, minions) {
        H.interceptedTypeCheck(breed, "$isBreed");
        H.assertSubtype(minions, "$isList", [R._NamedMinion], "$asList");
        C.JSArray_methods.addAll$1(breed.minions, J.map$1$1$ax(minions, new R.linkMinions__closure(), B.Minion));
      }
    },
    linkMinions__closure: {
      "^": "Closure:78;",
      call$1: [function(named) {
        H.interceptedTypeCheck(named, "$is_NamedMinion");
        return new B.Minion($.$get$Monsters_breeds().find$1(0, named.breed), named.countMin, named.countMax);
      }, null, null, 4, 0, null, 34, "call"]
    },
    _BaseBuilder0: {
      "^": "Object;",
      placeIn$3: function(place1, place2, place3) {
        var t1 = this._builder0$_places;
        C.JSArray_methods.add$1(t1, place1);
        if (place2 != null)
          C.JSArray_methods.add$1(t1, place2);
      },
      placeIn$1: function(place1) {
        return this.placeIn$3(place1, null, null);
      },
      placeIn$2: function(place1, place2) {
        return this.placeIn$3(place1, place2, null);
      },
      count$2: [function(minOrMax, max) {
        if (max == null) {
          this._countMin = 1;
          this._countMax = minOrMax;
        } else {
          this._countMin = minOrMax;
          this._countMax = max;
        }
      }, function(minOrMax) {
        return this.count$2(minOrMax, null);
      }, "count$1", "call$2", "call$1", "get$count", 4, 2, 79],
      groups$1: function(names) {
        var t1, t2, t3, _i, $name;
        for (t1 = names.split(" "), t2 = t1.length, t3 = this._groups, _i = 0; _i < t2; ++_i) {
          $name = t1[_i];
          C.JSArray_methods.add$1(t3, $.$get$breedGroups().$index(0, $name));
        }
      }
    },
    _FamilyBuilder: {
      "^": "_BaseBuilder0;0_character,_builder0$_frequency,0_tracking,_motility,0_location,_builder0$_places,0_builder0$_speed,0_builder0$_meander,0_dodge,_defenses,_groups,0_flags,0_countMin,0_countMax,0_stain,0_emanationLevel,0_vision,0_hearing",
      static: {
        _FamilyBuilder$: function(frequency) {
          return new R._FamilyBuilder(frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [P.String]), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [B.BreedGroup]));
        }
      }
    },
    _BreedBuilder: {
      "^": "_BaseBuilder0;_builder0$_name,_builder0$_depth,_appearance,_builder0$_health,_attacks,_moves,_builder0$_drops,_minions,0_pronoun,0_description,_builder0$_frequency,0_tracking,_motility,0_location,_builder0$_places,0_builder0$_speed,0_builder0$_meander,0_dodge,_defenses,_groups,0_flags,0_countMin,0_countMax,0_stain,0_emanationLevel,0_vision,0_hearing",
      minion$3: function($name, minOrMax, max) {
        if (minOrMax == null) {
          minOrMax = 1;
          max = 1;
        } else if (max == null) {
          max = minOrMax;
          minOrMax = 1;
        }
        C.JSArray_methods.add$1(this._minions, new R._NamedMinion($name, minOrMax, max));
      },
      minion$1: function($name) {
        return this.minion$3($name, null, null);
      },
      drop$4$count$depthOffset$percent: function($name, count, depthOffset, percent) {
        var drop = new X._PercentDrop(percent, X.parseDrop($name, this._builder0$_depth + depthOffset));
        if (count > 1)
          drop = new X._RepeatDrop(count, drop);
        C.JSArray_methods.add$1(this._builder0$_drops, drop);
      },
      drop$2$percent: function($name, percent) {
        return this.drop$4$count$depthOffset$percent($name, 1, 0, percent);
      },
      drop$2$count: function($name, count) {
        return this.drop$4$count$depthOffset$percent($name, count, 0, 100);
      },
      drop$3$count$depthOffset: function($name, count, depthOffset) {
        return this.drop$4$count$depthOffset$percent($name, count, depthOffset, 100);
      },
      drop$3$count$percent: function($name, count, percent) {
        return this.drop$4$count$depthOffset$percent($name, count, 0, percent);
      },
      drop$3$depthOffset$percent: function($name, depthOffset, percent) {
        return this.drop$4$count$depthOffset$percent($name, 1, depthOffset, percent);
      },
      drop$1: function($name) {
        return this.drop$4$count$depthOffset$percent($name, 1, 0, 100);
      },
      _bolt$6$damage$range$rate: function(noun, verb, element, damage, range, rate) {
        C.JSArray_methods.add$1(this._moves, new O.BoltMove(U.Attack$(noun != null ? new O.Noun(noun) : null, verb, damage, range, element), rate));
      }
    },
    _NamedMinion: {
      "^": "Object;breed<,countMin<,countMax<"
    }
  }], ["", "package:hauberk/src/content/monster/monsters.dart",, D, {}], ["", "package:hauberk/src/content/move/bolt.dart",, O, {
    "^": "",
    BoltMove: {
      "^": "RangedMove;attack,rate",
      get$experience: function() {
        var t1 = this.attack;
        return t1.damage * t1.element.experience * (1 + t1.range / 20);
      },
      shouldUse$1: function(monster) {
        var chance, target, toTarget;
        if ((monster.blindness._turnsRemaining > 0 || monster.dazzle._turnsRemaining > 0) && $.$get$rng().float$1(0, 1) < monster.get$sightReliance()) {
          chance = C.JSNumber_methods.toInt$0(E.lerpDouble(monster.get$sightReliance(), 0, 1, 0, 90));
          if ($.$get$rng().range$1(100) < chance)
            return false;
        }
        target = monster.game.hero._pos;
        toTarget = target.$sub(0, monster._pos);
        if (toTarget.$gt(0, this.attack.range)) {
          E.Debug_monsterLog(monster, "bolt move too far");
          return false;
        }
        if (toTarget.$lt(0, 1.5)) {
          E.Debug_monsterLog(monster, "bolt move too close");
          return false;
        }
        if (!monster.canTarget$1(target)) {
          E.Debug_monsterLog(monster, "bolt move can't target");
          return false;
        }
        E.Debug_monsterLog(monster, "bolt move OK");
        return true;
      },
      onGetAction$1: function(monster) {
        var t1 = monster.game.hero._pos;
        return new O.BoltAction(new U.Hit(this.attack, 0, 1, 1, 0, $.$get$Element_none(), 1), false, null, t1);
      },
      toString$0: function(_) {
        return "Bolt " + this.attack.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/cone.dart",, Y, {
    "^": "",
    ConeMove: {
      "^": "Move;attack,rate",
      get$experience: function() {
        var t1 = this.attack;
        return t1.damage * 3 * t1.element.experience * (1 + t1.range / 10);
      },
      shouldUse$1: function(monster) {
        var chance, target;
        if ((monster.blindness._turnsRemaining > 0 || monster.dazzle._turnsRemaining > 0) && $.$get$rng().float$1(0, 1) < monster.get$sightReliance()) {
          chance = C.JSNumber_methods.toInt$0(E.lerpDouble(monster.get$sightReliance(), 0, 1, 0, 70));
          if ($.$get$rng().range$1(100) < chance)
            return false;
        }
        target = monster.game.hero._pos;
        if (target.$sub(0, monster._pos).$gt(0, this.attack.range)) {
          E.Debug_monsterLog(monster, "cone move too far");
          return false;
        }
        if (!monster.canView$1(target)) {
          E.Debug_monsterLog(monster, "cone move can't target");
          return false;
        }
        E.Debug_monsterLog(monster, "cone move OK");
        return true;
      },
      onGetAction$1: function(monster) {
        var t1, t2, t3;
        t1 = monster._pos;
        t2 = monster.game.hero._pos;
        t3 = new G.RayAction(new U.Hit(this.attack, 0, 1, 1, 0, $.$get$Element_none(), 1), t1, t2, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
        t3.RayActionBase$3(t1, t2, 0.125);
        return t3;
      },
      toString$0: function(_) {
        return "Cone " + this.attack.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/haste.dart",, X, {
    "^": "",
    HasteMove: {
      "^": "Move;_duration,_speed,rate",
      get$experience: function() {
        return this._duration * this._speed;
      },
      shouldUse$1: function(monster) {
        return monster.haste._turnsRemaining <= 0;
      },
      onGetAction$1: function(monster) {
        return new E.HasteAction(this._duration, this._speed);
      },
      toString$0: function(_) {
        return "Haste " + this._speed + " for " + this._duration + " turns rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/heal.dart",, O, {
    "^": "",
    HealMove: {
      "^": "Move;_amount,rate",
      get$experience: function() {
        return this._amount;
      },
      shouldUse$1: function(monster) {
        var t1, t2;
        t1 = monster._health;
        t2 = monster.breed.maxHealth;
        if (typeof t1 !== "number")
          return t1.$div();
        return t1 / t2 < 0.25 || t2 - t1 >= this._amount;
      },
      onGetAction$1: function(monster) {
        return new O.HealAction(this._amount, false);
      },
      toString$0: function(_) {
        return "Heal " + this._amount + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/howl.dart",, U, {
    "^": "",
    HowlMove: {
      "^": "Move;_howl$_range,rate",
      get$experience: function() {
        return this._howl$_range * 0.5;
      },
      shouldUse$1: function(monster) {
        var t1, t2, t3, _i, actor;
        t1 = monster.game;
        t2 = t1._stage;
        t3 = monster._pos;
        t3 = t2.tiles.$index(0, t3);
        if (!(t3.illumination > 0 && !t3._isOccluded))
          return false;
        for (t1 = t1._stage._actors, t2 = t1.length, t3 = this._howl$_range, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          actor = t1[_i];
          if (actor == null ? monster == null : actor === monster)
            continue;
          if (actor instanceof B.Monster && actor._monster$_state instanceof M.AsleepState && actor._pos.$sub(0, monster._pos).$le(0, t3))
            return true;
        }
        return false;
      },
      onGetAction$1: function(monster) {
        return new U.HowlAction(this._howl$_range);
      },
      toString$0: function(_) {
        return "Howl " + this._howl$_range;
      }
    }
  }], ["", "package:hauberk/src/content/move/missive.dart",, R, {
    "^": "",
    MissiveMove: {
      "^": "Move;_missive,rate",
      get$experience: function() {
        return 0;
      },
      shouldUse$1: function(monster) {
        var target = monster.game.hero._pos;
        if (target.$sub(0, monster._pos).get$kingLength() <= 1)
          return false;
        return monster.canView$1(target);
      },
      onGetAction$1: function(monster) {
        return new R.MissiveAction(monster.game.hero, this._missive);
      },
      toString$0: function(_) {
        return this._missive.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/spawn.dart",, L, {
    "^": "",
    SpawnMove: {
      "^": "Move;_preferStraight,rate",
      get$experience: function() {
        return 6;
      },
      shouldUse$1: function(monster) {
        var t1, t2, t3, _i, dir, t4, t5;
        t1 = monster.game;
        t2 = t1._stage;
        t3 = monster._pos;
        t3 = t2.tiles.$index(0, t3);
        if (!(t3.illumination > 0 && !t3._isOccluded))
          return false;
        for (_i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          t2 = monster._pos.$add(0, dir);
          if (monster.canOccupy$1(t2)) {
            t3 = t1._stage._actorsByTile;
            t4 = t3._elements;
            t3 = t3.bounds.size.x;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t5 = t2.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = t2.y * t3 + t5;
            if (t5 < 0 || t5 >= t4.length)
              return H.ioore(t4, t5);
            t5 = t4[t5] == null;
            t3 = t5;
          } else
            t3 = false;
          if (t3) {
            t3 = t1._stage.tiles;
            t4 = t3._elements;
            t3 = t3.bounds.size.x;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t5 = t2.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = t2.y * t3 + t5;
            if (t5 < 0 || t5 >= t4.length)
              return H.ioore(t4, t5);
            t5 = t4[t5].substance === 0;
            t2 = t5;
          } else
            t2 = false;
          if (t2)
            return true;
        }
        return false;
      },
      onGetAction$1: function(monster) {
        var t1, dirs, _i, dir, t2, t3, t4, t5;
        t1 = [Z.Direction];
        dirs = H.setRuntimeTypeInfo([], t1);
        if (this._preferStraight)
          for (_i = 0; _i < 8; ++_i) {
            dir = C.List_slV[_i];
            t2 = monster._pos.$add(0, dir);
            if (monster.canOccupy$1(t2)) {
              t3 = monster.game._stage._actorsByTile;
              t4 = t3._elements;
              t3 = t3.bounds.size.x;
              if (typeof t3 !== "number")
                return H.iae(t3);
              t5 = t2.x;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = t2.y * t3 + t5;
              if (t5 < 0 || t5 >= t4.length)
                return H.ioore(t4, t5);
              t5 = t4[t5] == null;
              t3 = t5;
            } else
              t3 = false;
            if (t3) {
              t3 = monster.game._stage.tiles;
              t4 = t3._elements;
              t3 = t3.bounds.size.x;
              if (typeof t3 !== "number")
                return H.iae(t3);
              t5 = t2.x;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = t2.y * t3 + t5;
              if (t5 < 0 || t5 >= t4.length)
                return H.ioore(t4, t5);
              t5 = t4[t5].substance === 0;
              t2 = t5;
            } else
              t2 = false;
            if (!t2)
              continue;
            t2 = new L.SpawnMove_onGetAction_checkNeighbor(monster, dir);
            if (t2.call$1(dir.get$rotate180()))
              C.JSArray_methods.addAll$1(dirs, H.setRuntimeTypeInfo([dir, dir, dir, dir, dir], t1));
            if (t2.call$1(dir.get$rotate180().get$rotateLeft45()))
              C.JSArray_methods.add$1(dirs, dir);
            if (t2.call$1(dir.get$rotate180().get$rotateRight45()))
              C.JSArray_methods.add$1(dirs, dir);
          }
        if (dirs.length === 0)
          for (_i = 0; _i < 8; ++_i) {
            dir = C.List_slV[_i];
            t1 = monster._pos.$add(0, dir);
            if (monster.canOccupy$1(t1)) {
              t2 = monster.game._stage._actorsByTile;
              t3 = t2._elements;
              t2 = t2.bounds.size.x;
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = t1.x;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = t1.y * t2 + t4;
              if (t4 < 0 || t4 >= t3.length)
                return H.ioore(t3, t4);
              t4 = t3[t4] == null;
              t2 = t4;
            } else
              t2 = false;
            if (t2) {
              t2 = monster.game._stage.tiles;
              t3 = t2._elements;
              t2 = t2.bounds.size.x;
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = t1.x;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = t1.y * t2 + t4;
              if (t4 < 0 || t4 >= t3.length)
                return H.ioore(t3, t4);
              t4 = t3[t4].substance === 0;
              t1 = t4;
            } else
              t1 = false;
            if (!t1)
              continue;
            C.JSArray_methods.add$1(dirs, dir);
          }
        t1 = monster._pos;
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(dirs, "$isList", [P.Object], "$asList");
        t2 = t2.range$1(dirs.length);
        if (t2 < 0 || t2 >= dirs.length)
          return H.ioore(dirs, t2);
        return new L.SpawnAction(t1.$add(0, dirs[t2]), monster.breed);
      },
      toString$0: function(_) {
        return "Spawn rate: " + this.rate;
      },
      static: {
        SpawnMove$: function(rate, preferStraight) {
          return new L.SpawnMove(preferStraight == null ? false : preferStraight, rate);
        }
      }
    },
    SpawnMove_onGetAction_checkNeighbor: {
      "^": "Closure:1;monster,dir",
      call$1: function(neighbor) {
        var t1, t2, t3;
        t1 = this.monster;
        t2 = t1.game._stage;
        t3 = t1._pos.$add(0, this.dir);
        t3 = t2._actorsByTile.$index(0, t3);
        return t3 != null && !!t3.$isMonster && t3.breed === t1.breed;
      }
    }
  }], ["", "package:hauberk/src/content/move/teleport.dart",, S, {
    "^": "",
    TeleportMove: {
      "^": "Move;_range,rate",
      get$experience: function() {
        return this._range * 0.7;
      },
      shouldUse$1: function(monster) {
        var distance;
        if (monster._monster$_state instanceof M.AfraidState)
          return true;
        distance = monster.game.hero._pos.$sub(0, monster._pos).get$kingLength();
        if (monster.wantsToMelee && distance <= 1)
          return false;
        return true;
      },
      onGetAction$1: function(monster) {
        return new S.TeleportAction(this._range);
      },
      toString$0: function(_) {
        return "Teleport " + this._range;
      }
    }
  }], ["", "package:hauberk/src/content/old/recipes.dart",, S, {
    "^": "",
    recipe: function(drop, ingredientNames) {
      var t1, t2, ingredients, t3, resource, produces;
      t1 = P.String;
      t2 = P.int;
      H.assertSubtype(ingredientNames, "$isMap", [t1, t2], "$asMap");
      ingredients = P.LinkedHashMap_LinkedHashMap$_empty(L.ItemType, t2);
      for (t2 = ingredientNames.get$keys(ingredientNames), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t3 = t2.get$current();
        resource = $.$get$Items_types()._resources.$index(0, t3);
        if (resource == null)
          H.throwExpression(P.ArgumentError$('Unknown resource "' + H.S(t3) + '".'));
        ingredients.$indexSet(0, resource.object, ingredientNames.$index(0, t3));
      }
      produces = H.setRuntimeTypeInfo(["Produces: " + drop], [t1]);
      drop = X.parseDrop(drop, 1);
      C.JSArray_methods.add$1($.$get$Recipes_all(), new G.Recipe(ingredients, drop, produces));
    }
  }], ["", "package:hauberk/src/content/races.dart",, B, {
    "^": "",
    Races__race: function($name, agility, description, fortitude, intellect, strength, will) {
      return new N.Race($name, description, P.LinkedHashMap_LinkedHashMap$_literal([C.Stat_Strength, strength, C.Stat_Agility, agility, C.Stat_Fortitude, fortitude, C.Stat_Intellect, intellect, C.Stat_Will, will], D.Stat, P.int));
    }
  }], ["", "package:hauberk/src/content/skill/discipline/archery.dart",, X, {
    "^": "",
    Archery: {
      "^": "_Archery_MasteryDiscipline_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Archery";
      },
      get$description: function() {
        return "Kill your foe without risking harm to yourself by unleashing a volley of arrows from far away.";
      },
      get$weaponType: function() {
        return "bow";
      },
      levelDescription$1: function(level) {
        return "Firing an arrow costs " + C.JSNumber_methods.round$0(E.lerpDouble(level, 1, 20, 300, 1)) + " focus.";
      },
      getRange$1: function(_, game) {
        return game.hero.createRangedHit$0().get$range();
      },
      getTargetAction$3: function(game, level, target) {
        var hit = game.hero.createRangedHit$0();
        return new V.FocusAction(C.JSNumber_methods.round$0(E.lerpDouble(level, 1, 20, 300, 1)), new O.BoltAction(hit, true, null, target));
      }
    },
    _Archery_MasteryDiscipline_TargetSkill: {
      "^": "MasteryDiscipline+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/skill/discipline/axe.dart",, D, {
    "^": "",
    AxeMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Axe Mastery";
      },
      get$useName: function() {
        return "Axe Sweep";
      },
      get$description: function() {
        return "Axes are not just for woodcutting. In the hands of a skilled user, they can cut down a swath of nearby foes as well.";
      },
      get$weaponType: function() {
        return "axe";
      },
      levelDescription$1: function(level) {
        var damage = C.JSNumber_methods.toInt$0(E.lerpDouble(level, 1, 10, 0.2, 0.8) * 100);
        return this.super$MasteryDiscipline$levelDescription(level) + (" Slash attacks inflict " + damage + "% of the damage of a regular attack.");
      },
      getDirectionAction$3: function(game, level, dir) {
        return new D.SlashAction(dir, 0, E.lerpDouble(level, 1, 10, 0.2, 0.8));
      },
      $isDirectionSkill: 1
    },
    SlashAction: {
      "^": "MasteryAction;_axe$_dir,_axe$_step,damageScale,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var dir, t1;
        switch (C.JSInt_methods._tdivFast$1(this._axe$_step, 5)) {
          case 0:
            dir = this._axe$_dir.get$rotateLeft45();
            break;
          case 1:
            dir = this._axe$_dir;
            break;
          case 2:
            dir = this._axe$_dir.get$rotateRight45();
            break;
          default:
            dir = null;
        }
        t1 = C.JSInt_methods.$mod(this._axe$_step, 2);
        if (t1 === 0)
          this.addEvent$3$dir$pos(C.EventType_slash, dir, this._action$_actor._pos.$add(0, dir));
        else if (t1 === 1)
          this.attack$1(this._action$_actor._pos.$add(0, dir));
        return ++this._axe$_step === 15 ? C.ActionResult_null_true_true : C.ActionResult_null_true_false;
      },
      toString$0: function(_) {
        return H.S(this._action$_actor) + " slashes " + this._axe$_dir.toString$0(0);
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/battle_hardening.dart",, M, {
    "^": "",
    BattleHardening: {
      "^": "Discipline;_sortOrder",
      get$maxLevel: function() {
        return 40;
      },
      get$description: function() {
        return "Years of taking hits have turned your skin as hard as cured leather.";
      },
      get$name: function(_) {
        return "Battle Hardening";
      },
      takeDamage$2: function(hero, damage) {
        hero.discoverSkill$1(this);
        hero.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(10 * damage / hero.fortitude.get$maxHealth()));
        hero.refreshSkill$1(this);
      },
      modifyArmor$2: function(hero, level) {
        return level;
      },
      levelDescription$1: function(level) {
        return "Increases armor by " + level + ".";
      },
      baseTrainingNeeded$1: function(level) {
        return C.JSNumber_methods.ceil$0(60 * Math.pow(1.5, level));
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/club.dart",, A, {
    "^": "",
    ClubMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Club Mastery";
      },
      get$useName: function() {
        return "Club Bash";
      },
      get$description: function() {
        return "Bludgeons may not be the most sophisticated of weapons, but what they lack in refinement, they make up for in brute force.";
      },
      get$weaponType: function() {
        return "club";
      },
      levelDescription$1: function(level) {
        return this.super$MasteryDiscipline$levelDescription(level) + " Bashes the enemy away.";
      },
      getDirectionAction$3: function(game, level, dir) {
        return new A.BashAction(dir, 0, 0, E.lerpDouble(level, 1, 10, 0.2, 0.8));
      },
      $isDirectionSkill: 1
    },
    BashAction: {
      "^": "MasteryAction;_club$_dir,_club$_step,_damage,damageScale,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, t2, t3, dest, chance;
        t1 = this._club$_step;
        if (t1 === 0) {
          t1 = this.attack$1(this._action$_actor._pos.$add(0, this._club$_dir));
          this._damage = t1;
          if (t1 == null)
            return C.ActionResult_null_true_true;
        } else if (t1 === 1) {
          t1 = this._action$_game._stage;
          t2 = this._club$_dir;
          t3 = this._action$_actor._pos.$add(0, t2);
          t3 = t1._actorsByTile.$index(0, t3);
          if (t3 == null)
            return C.ActionResult_null_true_true;
          dest = this._action$_actor._pos.$add(0, t2).$add(0, t2);
          t1 = this._damage;
          if (typeof t1 !== "number")
            return H.iae(t1);
          chance = H.intTypeCheck(C.JSInt_methods.clamp$2(C.JSInt_methods.$tdiv(300 * t1, t3.get$maxHealth()), 5, 100));
          if (t3.canEnter$1(dest) && $.$get$rng().range$1(100) < chance) {
            t3.set$pos(dest);
            t3.energy.energy = 0;
            this.log$2("{1} is knocked back!", t3);
            this.addEvent$3$dir$pos(C.EventType_knockBack, t2, this._action$_actor._pos.$add(0, t2));
          }
        } else
          this.addEvent$1(C.EventType_pause);
        return ++this._club$_step > 10 ? C.ActionResult_null_true_true : C.ActionResult_null_true_false;
      },
      toString$0: function(_) {
        return H.S(this._action$_actor) + " bashes " + this._club$_dir.toString$0(0);
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/mastery.dart",, S, {
    "^": "",
    MasteryDiscipline: {
      "^": "Discipline;",
      get$maxLevel: function() {
        return 20;
      },
      modifyAttack$4: function(hero, monster, hit, level) {
        if (!this._hasWeapon$1(hero))
          return;
        hit._combat$_damageScale *= E.lerpDouble(level, 1, 20, 1.05, 2);
      },
      levelDescription$1: ["super$MasteryDiscipline$levelDescription", function(level) {
        return "Melee attacks inflict " + C.JSNumber_methods.toInt$0((E.lerpDouble(level, 1, 20, 1.05, 2) - 1) * 100) + "% more damage when using a " + this.get$weaponType() + ".";
      }],
      unusableReason$1: function(game) {
        if (this._hasWeapon$1(game.hero))
          return;
        return "No " + this.get$weaponType() + " equipped.";
      },
      _hasWeapon$1: function(hero) {
        var weapon = hero.equipment.find$1(0, "weapon");
        if (weapon == null)
          return false;
        return weapon.type.weaponType === this.get$weaponType();
      },
      killMonster$3: function(hero, action, monster) {
        var weapon;
        if (!(action instanceof S.AttackAction))
          return;
        weapon = hero.equipment.find$1(0, "weapon");
        if (weapon == null)
          return;
        if (weapon.type.weaponType !== this.get$weaponType())
          return;
        hero.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(monster.breed.get$experience() / 1000));
        hero.refreshSkill$1(this);
      },
      baseTrainingNeeded$1: function(level) {
        return 100 * level * level * level;
      },
      $isUsableSkill: 1
    },
    MasteryAction: {
      "^": "Action;",
      attack$1: function(pos) {
        var t1, hit;
        t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
        if (t1 == null)
          return;
        hit = this._action$_actor.createMeleeHit$1(t1);
        hit._combat$_damageScale *= this.damageScale;
        return hit.perform$3(this, this._action$_actor, t1);
      },
      get$noise: function() {
        return 1;
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/slay.dart",, A, {
    "^": "",
    SlayDiscipline: {
      "^": "Discipline;_group,_sortOrder",
      get$maxLevel: function() {
        return 20;
      },
      get$description: function() {
        return "TODO: Implement description.";
      },
      get$discoverMessage: function() {
        return "{1} are eager to learn to slay " + this._group.displayName.toLowerCase() + ".";
      },
      get$name: function(_) {
        return "Slay " + this._group.displayName;
      },
      killMonster$3: function(hero, action, monster) {
        var t1 = monster.breed;
        if (!C.JSArray_methods.contains$1(t1.groups, this._group))
          return;
        hero.skills.earnPoints$2(this, C.JSDouble_methods.ceil$0(t1.get$experience() / 1000));
        hero.refreshSkill$1(this);
      },
      modifyAttack$4: function(hero, monster, hit, level) {
        if (monster == null)
          return;
        if (!C.JSArray_methods.contains$1(monster.breed.groups, this._group))
          return;
        hit._combat$_damageScale *= E.lerpDouble(level, 1, 20, 1.05, 2);
      },
      levelDescription$1: function(level) {
        return "Melee attacks inflict " + C.JSNumber_methods.toInt$0((E.lerpDouble(level, 1, 20, 1.05, 2) - 1) * 100) + "% more damage against " + this._group.displayName.toLowerCase() + ".";
      },
      baseTrainingNeeded$1: function(level) {
        return 100 * level * level * level;
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/spear.dart",, Z, {
    "^": "",
    SpearMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Spear Mastery";
      },
      get$useName: function() {
        return "Spear Attack";
      },
      get$description: function() {
        return "Your diligent study of spears and polearms lets you attack at a distance when wielding one.";
      },
      get$weaponType: function() {
        return "spear";
      },
      levelDescription$1: function(level) {
        var damage = C.JSNumber_methods.toInt$0(E.lerpDouble(level, 1, 10, 0.3, 1) * 100);
        return this.super$MasteryDiscipline$levelDescription(level) + (" Distance spear attacks inflict " + damage + "% of the damage of a regular attack.");
      },
      getDirectionAction$3: function(game, level, dir) {
        var t1, isPolearm;
        t1 = game.hero.equipment.find$1(0, "weapon").type.quantifiableName;
        isPolearm = O.Log__categorize(t1, false, true) === "Lance" || O.Log__categorize(t1, false, true) === "Partisan";
        return new Z.SpearAction(dir, 0, isPolearm, E.lerpDouble(level, 1, 10, 0.3, 1));
      },
      $isDirectionSkill: 1
    },
    SpearAction: {
      "^": "MasteryAction;_dir,_step,_isPolearm,damageScale,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, pos, t2;
        t1 = this._dir;
        pos = this._action$_actor._pos.$add(0, t1.$mul(0, C.JSInt_methods._tdivFast$1(this._step, 2) + 1));
        if (this._isPolearm)
          pos = pos.$add(0, t1);
        t2 = C.JSInt_methods.$mod(this._step, 2);
        if (t2 === 0)
          this.addEvent$3$dir$pos(C.EventType_stab, t1, pos);
        else if (t2 === 1)
          this.attack$1(pos);
        return ++this._step === 4 ? C.ActionResult_null_true_true : C.ActionResult_null_true_false;
      },
      toString$0: function(_) {
        return H.S(this._action$_actor) + " spears " + this._dir.toString$0(0);
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/sword.dart",, G, {
    "^": "",
    Swordfighting: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Swordfighting";
      },
      get$description: function() {
        return "The most elegant tool for the most refined of martial arts.";
      },
      get$weaponType: function() {
        return "sword";
      },
      levelDescription$1: function(level) {
        return this.super$MasteryDiscipline$levelDescription(level) + (" Parrying increases dodge by " + C.JSNumber_methods.round$0(E.lerpDouble(level, 1, 20, 1, 10)) + ".");
      },
      getDefense$2: function(hero, level) {
        return new U.Defense(C.JSNumber_methods.round$0(E.lerpDouble(level, 1, 20, 1, 10)), "{1} parr[y|ies] {2}.");
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/whip.dart",, O, {
    "^": "",
    WhipMastery: {
      "^": "_WhipMastery_MasteryDiscipline_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Whip Mastery";
      },
      get$useName: function() {
        return "Whip Crack";
      },
      get$description: function() {
        return "Whips and flails are difficult to use well, but deadly even at a distance when mastered.";
      },
      get$weaponType: function() {
        return "whip";
      },
      levelDescription$1: function(level) {
        var damage = C.JSNumber_methods.toInt$0(E.lerpDouble(level, 1, 10, 0.3, 1) * 100);
        return this.super$MasteryDiscipline$levelDescription(level) + (" Ranged whip attacks inflict " + damage + "% of the damage of a regular attack.");
      },
      getRange$1: function(_, game) {
        return 3;
      },
      getTargetAction$3: function(game, level, target) {
        var t1, hit;
        t1 = game._stage._actorsByTile.$index(0, target);
        hit = game.hero.createMeleeHit$1(t1);
        hit._combat$_damageScale *= E.lerpDouble(level, 1, 10, 0.3, 1);
        return new O.BoltAction(hit, true, 3, target);
      }
    },
    _WhipMastery_MasteryDiscipline_TargetSkill: {
      "^": "MasteryDiscipline+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/skill/skills.dart",, Q, {
    "^": "",
    Skills_find: [function($name) {
      H.stringTypeCheck($name);
      return $.$get$Skills__byName().$index(0, $name);
    }, "call$1", "skills_Skills_find$closure", 4, 0, 135, 16],
    Skills__generateSkills: function() {
      var t1, t2, skills, t3, t4, t5, t6, t7, slay, t8, t9, t10;
      t1 = $.Skill__nextSortOrder;
      $.Skill__nextSortOrder = t1 + 1;
      t2 = [M.Skill];
      skills = H.setRuntimeTypeInfo([new M.BattleHardening(t1)], t2);
      t1 = $.Skill__nextSortOrder;
      t3 = t1 + 1;
      $.Skill__nextSortOrder = t3;
      t4 = t3 + 1;
      $.Skill__nextSortOrder = t4;
      t5 = t4 + 1;
      $.Skill__nextSortOrder = t5;
      t6 = t5 + 1;
      $.Skill__nextSortOrder = t6;
      t7 = t6 + 1;
      $.Skill__nextSortOrder = t7;
      $.Skill__nextSortOrder = t7 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new X.Archery(t1), new D.AxeMastery(t3), new A.ClubMastery(t4), new Z.SpearMastery(t5), new G.Swordfighting(t6), new O.WhipMastery(t7)], t2));
      for (t1 = $.$get$breedGroups(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t3 = t1.get$current();
        t4 = $.Skill__nextSortOrder;
        $.Skill__nextSortOrder = t4 + 1;
        slay = new A.SlayDiscipline(t3, t4);
        t3.slaySkill = slay;
        C.JSArray_methods.add$1(skills, slay);
      }
      t1 = $.Skill__nextSortOrder;
      t3 = t1 + 1;
      $.Skill__nextSortOrder = t3;
      t4 = t3 + 1;
      $.Skill__nextSortOrder = t4;
      t5 = t4 + 1;
      $.Skill__nextSortOrder = t5;
      t6 = t5 + 1;
      $.Skill__nextSortOrder = t6;
      t7 = t6 + 1;
      $.Skill__nextSortOrder = t7;
      t8 = t7 + 1;
      $.Skill__nextSortOrder = t8;
      t9 = t8 + 1;
      $.Skill__nextSortOrder = t9;
      t10 = t9 + 1;
      $.Skill__nextSortOrder = t10;
      $.Skill__nextSortOrder = t10 + 1;
      C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new D.SenseItems(t1), new K.Flee(t3), new K.Escape(t4), new K.Disappear(t5), new L.Icicle(t6), new L.BrilliantBeam(t7), new L.Windstorm(t8), new L.FireBarrier(t9), new L.TidalWave(t10)], t2));
      return skills;
    },
    Skills_closure: {
      "^": "Closure:28;",
      call$1: function(skill) {
        return J.get$name$x(skill);
      }
    }
  }], ["", "package:hauberk/src/content/skill/spell/conjuring.dart",, K, {
    "^": "",
    Flee: {
      "^": "Spell;_sortOrder",
      get$description: function() {
        return "Teleports the hero a short distance away.";
      },
      get$name: function(_) {
        return "Flee";
      },
      get$baseComplexity: function() {
        return 10;
      },
      get$baseFocusCost: function() {
        return 6;
      },
      get$range: function() {
        return 8;
      },
      onGetAction$1: function(game) {
        return new S.TeleportAction(8);
      },
      $isActionSkill: 1
    },
    Escape: {
      "^": "Spell;_sortOrder",
      get$description: function() {
        return "Teleports the hero away.";
      },
      get$name: function(_) {
        return "Escape";
      },
      get$baseComplexity: function() {
        return 15;
      },
      get$baseFocusCost: function() {
        return 14;
      },
      get$range: function() {
        return 16;
      },
      onGetAction$1: function(game) {
        return new S.TeleportAction(16);
      },
      $isActionSkill: 1
    },
    Disappear: {
      "^": "Spell;_sortOrder",
      get$description: function() {
        return "Moves the hero across the dungeon.";
      },
      get$name: function(_) {
        return "Disappear";
      },
      get$baseComplexity: function() {
        return 30;
      },
      get$baseFocusCost: function() {
        return 40;
      },
      get$range: function() {
        return 100;
      },
      onGetAction$1: function(game) {
        return new S.TeleportAction(100);
      },
      $isActionSkill: 1
    }
  }], ["", "package:hauberk/src/content/skill/spell/divination.dart",, D, {
    "^": "",
    SenseItems: {
      "^": "Spell;_sortOrder",
      get$description: function() {
        return "Detect nearby items.";
      },
      get$name: function(_) {
        return "Sense Items";
      },
      get$baseComplexity: function() {
        return 17;
      },
      get$baseFocusCost: function() {
        return 18;
      },
      get$range: function() {
        return 20;
      },
      onGetAction$1: function(game) {
        var t1 = H.setRuntimeTypeInfo([C.DetectType_1], [T.DetectType]);
        return new T.DetectAction(P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0)), 20);
      },
      $isActionSkill: 1
    }
  }], ["", "package:hauberk/src/content/skill/spell/sorcery.dart",, L, {
    "^": "",
    Icicle: {
      "^": "_Icicle_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Icicle";
      },
      get$description: function() {
        return "Launches a spear-like icicle.";
      },
      get$baseComplexity: function() {
        return 10;
      },
      get$baseFocusCost: function() {
        return 8;
      },
      get$damage: function() {
        return 8;
      },
      get$range: function() {
        return 8;
      },
      onGetTargetAction$2: function(game, target) {
        return new O.BoltAction(new U.Hit(U.Attack$(new O.Noun("the icicle"), "pierce", 8, 8, $.$get$Elements_cold()), 0, 1, 1, 0, $.$get$Element_none(), 1), false, null, target);
      }
    },
    BrilliantBeam: {
      "^": "_BrilliantBeam_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Brilliant Beam";
      },
      get$description: function() {
        return "Emits a blinding beam of radiance.";
      },
      get$baseComplexity: function() {
        return 14;
      },
      get$baseFocusCost: function() {
        return 20;
      },
      get$damage: function() {
        return 10;
      },
      get$range: function() {
        return 12;
      },
      onGetTargetAction$2: function(game, target) {
        var attack, t1, t2;
        attack = U.Attack$(new O.Noun("the light"), "sear", 10, 12, $.$get$Elements_light());
        t1 = game.hero._pos;
        t2 = new G.RayAction(new U.Hit(attack, 0, 1, 1, 0, $.$get$Element_none(), 1), t1, target, P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 1, H.setRuntimeTypeInfo([], [P.double]));
        t2.RayActionBase$3(t1, target, 0.125);
        return t2;
      }
    },
    Windstorm: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Windstorm";
      },
      get$description: function() {
        return "Summons a blast of air, spreading out from the sorceror.";
      },
      get$baseComplexity: function() {
        return 18;
      },
      get$baseFocusCost: function() {
        return 26;
      },
      get$damage: function() {
        return 10;
      },
      get$range: function() {
        return 6;
      },
      onGetAction$1: function(game) {
        var attack = U.Attack$(new O.Noun("the wind"), "blast", 10, 6, $.$get$Elements_air());
        return N.FlowAction$(game.hero._pos, new U.Hit(attack, 0, 1, 1, 0, $.$get$Element_none(), 1), $.$get$Motility_flyAndWalk(), null);
      },
      $isActionSkill: 1
    },
    FireBarrier: {
      "^": "_FireBarrier_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Fire Barrier";
      },
      get$description: function() {
        return "Creates a wall of fire.";
      },
      get$baseComplexity: function() {
        return 30;
      },
      get$baseFocusCost: function() {
        return 60;
      },
      get$damage: function() {
        return 10;
      },
      get$range: function() {
        return 8;
      },
      onGetTargetAction$2: function(game, target) {
        var attack, t1, t2, offset, v, $length;
        attack = U.Attack$(new O.Noun("the fire"), "burn", 10, 8, $.$get$Elements_fire());
        t1 = game.hero._pos;
        t2 = $.$get$Element_none();
        offset = t1.$sub(0, target);
        v = offset.x;
        v.toString;
        $length = Math.sqrt(offset.get$lengthSquared());
        if (typeof v !== "number")
          return v.$div();
        return new R.BarrierAction(target, -offset.y / $length, v / $length, new U.Hit(attack, 0, 1, 1, 0, t2, 1), P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec), 0, true, true);
      }
    },
    TidalWave: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Tidal Wave";
      },
      get$description: function() {
        return "Summons a giant tidal wave.";
      },
      get$baseComplexity: function() {
        return 40;
      },
      get$baseFocusCost: function() {
        return 200;
      },
      get$damage: function() {
        return 50;
      },
      get$range: function() {
        return 15;
      },
      onGetAction$1: function(game) {
        var attack, t1, t2, t3, t4;
        attack = U.Attack$(new O.Noun("the wave"), "inundate", 50, 15, $.$get$Elements_water());
        t1 = game.hero._pos;
        t2 = $.$get$Element_none();
        t3 = $.$get$Motility_walk();
        t4 = $.$get$Motility_door();
        return N.FlowAction$(t1, new U.Hit(attack, 0, 1, 1, 0, t2, 1), new Q.Motility(t3._bitMask | t4._bitMask | $.$get$Motility_swim()._bitMask), 2);
      },
      $isActionSkill: 1
    },
    _BrilliantBeam_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    },
    _FireBarrier_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    },
    _Icicle_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/themes.dart",, Y, {
    "^": "",
    Themes_defineTags: function(resources, root, $T) {
      H.assertSubtype(resources, "$isResourceSet", [$T], "$asResourceSet");
      root = root == null ? "" : root + "/";
      resources.defineTags$1(root + "nature/aquatic");
      resources.defineTags$1(root + "passage");
      resources.defineTags$1(root + "room/storage/closet");
      resources.defineTags$1(root + "room/storage/storeroom");
      resources.defineTags$1(root + "room/storage/treasure-room");
      resources.defineTags$1(root + "room/great-hall");
      resources.defineTags$1(root + "room/hall");
      resources.defineTags$1(root + "room/food/kitchen");
      resources.defineTags$1(root + "room/food/larder");
      resources.defineTags$1(root + "room/food/pantry");
      resources.defineTags$1(root + "room/chamber");
      resources.defineTags$1(root + "room/chamber/boss-chamber");
      resources.defineTags$1(root + "room/laboratory");
      resources.defineTags$1(root + "room/workshop");
    }
  }], ["", "package:hauberk/src/content/tiles.dart",, Z, {
    "^": "",
    _closeDoor: [function(pos) {
      return new B.CloseDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_closedDoor());
    }, "call$1", "tiles___closeDoor$closure", 4, 0, 29, 0],
    _openDoor: [function(pos) {
      return new B.OpenDoorAction(H.interceptedTypeCheck(pos, "$isVec"), $.$get$Tiles_openDoor());
    }, "call$1", "tiles___openDoor$closure", 4, 0, 29, 0],
    Tiles_ignition: function(tile) {
      var t1 = $.$get$Tiles__ignition().$index(0, tile);
      return t1 == null ? 0 : t1;
    },
    Tiles_fuel: function(tile) {
      var t1 = $.$get$Tiles__fuel().$index(0, tile);
      return t1 == null ? 0 : t1;
    },
    Tiles_burnResult: function(tile) {
      var t1 = $.$get$Tiles__burnTypes();
      if (t1.containsKey$1(0, tile))
        return t1.$index(0, tile);
      return H.setRuntimeTypeInfo([$.$get$Tiles_burntFloor(), $.$get$Tiles_burntFloor2()], [Q.TileType]);
    },
    tile: function($name, char, fore, $back) {
      var charCode;
      if ($back == null)
        $back = C.Color_19_17_28;
      charCode = C.JSString_methods._codeUnitAt$1(char, 0);
      return new Z.TileBuilder($name, L.Glyph$fromCharCode(charCode, fore, $back), false, 0);
    },
    Tiles_closure0: {
      "^": "Closure:80;",
      call$1: [function(pos) {
        return new Q.OpenChestAction(H.interceptedTypeCheck(pos, "$isVec"));
      }, null, null, 4, 0, null, 0, "call"]
    },
    Tiles_closure: {
      "^": "Closure:81;",
      call$1: [function(pos) {
        return new Q.OpenBarrelAction(H.interceptedTypeCheck(pos, "$isVec"));
      }, null, null, 4, 0, null, 0, "call"]
    },
    TileBuilder: {
      "^": "Object;name>,glyph,0_onClose,0_onOpen,_isExit,_tiles$_emanationLevel",
      emanate$1: function(level) {
        this._tiles$_emanationLevel = level;
        return this;
      },
      onOpen$1: function(onOpen) {
        this._onOpen = H.functionTypeCheck(onOpen, {func: 1, ret: V.Action, args: [L.Vec]});
        return this;
      },
      obstacle$0: function() {
        return this._tiles$_motility$1($.$get$Motility_fly());
      },
      open$0: function(_) {
        return this._tiles$_motility$1($.$get$Motility_flyAndWalk());
      },
      solid$0: function() {
        return this._tiles$_motility$1($.$get$Motility_none());
      },
      _tiles$_motility$1: function(motility) {
        var t1, t2, t3, t4;
        t1 = F.Lighting_emanationForLevel(this._tiles$_emanationLevel);
        t2 = this._isExit;
        t3 = this._onClose;
        t4 = this._onOpen;
        return new Q.TileType(this.name, t2, t1, this.glyph, motility, t3, t4);
      }
    }
  }], ["", "package:hauberk/src/debug.dart",, E, {
    "^": "",
    Debug_monsterLog: function(monster, message) {
      return;
    },
    Debug_monsterStat: function(monster, stat, value, reason) {
      return;
    },
    Debug_monsterReason: function(monster, stat, reason) {
      return;
    },
    _MonsterLog: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/action/action.dart",, V, {
    "^": "",
    Action: {
      "^": "Object;",
      get$isImmediate: function() {
        return true;
      },
      _bind$4: function(actor, pos, game, consumesEnergy) {
        this._action$_actor = actor;
        this._action$_pos = pos == null ? actor._pos : pos;
        this._action$_game = game;
        this._consumesEnergy = consumesEnergy == null ? true : consumesEnergy;
      },
      addAction$2: function(action, actor) {
        var t1;
        H.interceptedTypeCheck(action, "$isAction");
        t1 = actor == null ? this._action$_actor : actor;
        action._bind$4(t1, this._action$_pos, this._action$_game, false);
        t1 = this._action$_game;
        t1.toString;
        if (action.get$isImmediate())
          C.JSArray_methods.add$1(t1._reactions, action);
        else {
          t1 = t1._actions;
          t1._add$1(H.assertSubtypeOfRuntimeType(action, H.getTypeArgumentByIndex(t1, 0)));
        }
      },
      addAction$1: function(action) {
        return this.addAction$2(action, null);
      },
      addEvent$6$actor$dir$element$other$pos: function(type, actor, dir, element, other, pos) {
        C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(type, actor, element, other, pos, dir));
      },
      addEvent$3$actor$other: function(type, actor, other) {
        return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, other, null);
      },
      addEvent$2$actor: function(type, actor) {
        return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, null, null);
      },
      addEvent$3$actor$pos: function(type, actor, pos) {
        return this.addEvent$6$actor$dir$element$other$pos(type, actor, null, null, null, pos);
      },
      addEvent$3$element$pos: function(type, element, pos) {
        return this.addEvent$6$actor$dir$element$other$pos(type, null, null, element, null, pos);
      },
      addEvent$2$pos: function(type, pos) {
        return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, null, pos);
      },
      addEvent$3$dir$pos: function(type, dir, pos) {
        return this.addEvent$6$actor$dir$element$other$pos(type, null, dir, null, null, pos);
      },
      addEvent$1: function(type) {
        return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, null, null);
      },
      addEvent$3$other$pos: function(type, other, pos) {
        return this.addEvent$6$actor$dir$element$other$pos(type, null, null, null, other, pos);
      },
      get$noise: function() {
        return 0.25;
      },
      error$4: [function(_, message, noun1, noun2, noun3) {
        var t1, t2;
        t1 = this._action$_game._stage;
        t2 = this._action$_pos;
        t2 = t1.tiles.$index(0, t2);
        if (!(t2.illumination > 0 && !t2._isOccluded))
          return;
        this._action$_game.log.add$5(0, C.LogType_error, message, noun1, noun2, noun3);
      }, function($receiver, message, noun1) {
        return this.error$4($receiver, message, noun1, null, null);
      }, "error$2", function($receiver, message) {
        return this.error$4($receiver, message, null, null, null);
      }, "error$1", function($receiver, message, noun1, noun2) {
        return this.error$4($receiver, message, noun1, noun2, null);
      }, "error$3", "call$4", "call$2", "call$1", "call$3", "get$error", 5, 6, 18],
      log$4: function(message, noun1, noun2, noun3) {
        var t1, t2;
        t1 = this._action$_game._stage;
        t2 = this._action$_pos;
        t2 = t1.tiles.$index(0, t2);
        if (!(t2.illumination > 0 && !t2._isOccluded))
          return;
        this._action$_game.log.add$5(0, C.LogType_message, message, noun1, noun2, noun3);
      },
      log$2: function(message, noun1) {
        return this.log$4(message, noun1, null, null);
      },
      log$1: function(message) {
        return this.log$4(message, null, null, null);
      },
      log$3: function(message, noun1, noun2) {
        return this.log$4(message, noun1, noun2, null);
      },
      succeed$4: function(message, noun1, noun2, noun3) {
        if (message != null)
          this.log$4(message, noun1, noun2, noun3);
        return C.ActionResult_null_true_true;
      },
      succeed$0: function() {
        return this.succeed$4(null, null, null, null);
      },
      succeed$2: function(message, noun1) {
        return this.succeed$4(message, noun1, null, null);
      },
      succeed$3: function(message, noun1, noun2) {
        return this.succeed$4(message, noun1, noun2, null);
      },
      fail$4: function(message, noun1, noun2, noun3) {
        this.error$4(0, message, noun1, noun2, noun3);
        return C.ActionResult_null_false_true;
      },
      fail$2: function(message, noun1) {
        return this.fail$4(message, noun1, null, null);
      },
      fail$1: function(message) {
        return this.fail$4(message, null, null, null);
      },
      fail$3: function(message, noun1, noun2) {
        return this.fail$4(message, noun1, noun2, null);
      },
      alternate$1: function(action) {
        var t1, t2;
        H.interceptedTypeCheck(action, "$isAction");
        t1 = this._action$_actor;
        t2 = this._consumesEnergy;
        action.toString;
        action._bind$4(t1, null, t1.game, t2);
        return new V.ActionResult(action, false, true);
      }
    },
    ActionResult: {
      "^": "Object;alternative,succeeded,done"
    },
    FocusAction: {
      "^": "Action;_action$_focus,_action,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3, t4;
        t1 = H.interceptedTypeCast(this._action$_actor, "$isHero");
        t2 = t1._focus;
        t3 = this._action$_focus;
        if (t2 < t3)
          return this.fail$1("You don't have enough focus to cast the spell.");
        t4 = t1.intellect;
        t4 = t4.modify$1(t4._value);
        H.checkNum(t4);
        t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 - t3, 0, C.JSNumber_methods.ceil$0(Math.pow(t4, 1.3) * 2)));
        return this.alternate$1(this._action);
      }
    }
  }], ["", "package:hauberk/src/engine/action/attack.dart",, S, {
    "^": "",
    AttackAction: {
      "^": "Action;defender,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1 = this.defender;
        this._action$_actor.createMeleeHit$1(t1).perform$3(this, this._action$_actor, t1);
        return C.ActionResult_null_true_true;
      },
      get$noise: function() {
        return 1;
      },
      toString$0: function(_) {
        return H.S(this._action$_actor) + " attacks " + H.S(this.defender);
      }
    }
  }], ["", "package:hauberk/src/engine/action/condition.dart",, E, {
    "^": "",
    ConditionAction: {
      "^": "Action;",
      getIntensity$0: function() {
        return 1;
      },
      onIntensify$0: function() {
      },
      onPerform$0: ["super$ConditionAction$onPerform", function() {
        var intensity, duration, t1, oldDuration;
        intensity = this.getIntensity$0();
        duration = this.getDuration$0();
        if (this.get$condition()._turnsRemaining <= 0) {
          t1 = this.get$condition();
          t1._turnsRemaining = duration;
          t1._intensity = intensity;
          this.onActivate$0(0);
          return C.ActionResult_null_true_true;
        }
        if (this.get$condition()._intensity >= intensity) {
          duration = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$tdiv(duration * intensity, this.get$condition()._intensity), 2);
          if (duration === 0)
            return this.succeed$0();
          this.get$condition()._turnsRemaining += duration;
          this.onExtend$0();
          return C.ActionResult_null_true_true;
        }
        oldDuration = C.JSInt_methods.$tdiv(this.get$condition()._turnsRemaining * this.get$condition()._intensity, intensity);
        t1 = this.get$condition();
        t1._turnsRemaining = oldDuration + C.JSInt_methods._tdivFast$1(duration, 2);
        t1._intensity = intensity;
        this.onIntensify$0();
        return C.ActionResult_null_true_true;
      }]
    }
  }], ["", "package:hauberk/src/engine/action/item.dart",, R, {
    "^": "",
    ItemAction: {
      "^": "Action;",
      removeItem$0: function(_) {
        var t1;
        switch (this.location) {
          case C.ItemLocation_46y:
            this._action$_game._stage.removeItem$2(0, this.item, this._action$_actor._pos);
            break;
          case C.ItemLocation_wMy:
            t1 = this.item;
            C.JSArray_methods.remove$1(H.interceptedTypeCast(this._action$_actor, "$isHero").inventory._inventory$_items, t1);
            if (t1.type.emanationLevel > 0)
              this._action$_game._stage._lighting._actorLightDirty = true;
            break;
          case C.ItemLocation_A8D:
            t1 = this.item;
            H.interceptedTypeCast(this._action$_actor, "$isHero").equipment.remove$1(0, t1);
            if (t1.type.emanationLevel > 0)
              this._action$_game._stage._lighting._actorLightDirty = true;
            break;
          default:
            throw H.wrapException(P.StateError$("Invalid location."));
        }
      },
      countChanged$0: function() {
        switch (this.location) {
          case C.ItemLocation_46y:
            break;
          case C.ItemLocation_wMy:
            H.interceptedTypeCast(this._action$_actor, "$isHero").inventory.countChanged$0();
            break;
          case C.ItemLocation_A8D:
            H.interceptedTypeCast(this._action$_actor, "$isHero").equipment;
            break;
          default:
            throw H.wrapException(P.StateError$("Invalid location."));
        }
      }
    },
    PickUpAction: {
      "^": "Action;item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, result, t2, t3;
        t1 = this.item;
        result = H.interceptedTypeCast(this._action$_actor, "$isHero").inventory.tryAdd$1(t1);
        t2 = result.added;
        if (t2 === 0)
          return this.fail$3("{1} [don't|doesn't] have room for {2}.", this._action$_actor, t1);
        this.log$3("{1} pick[s] up {2}.", this._action$_actor, t1.clone$1(0, t2));
        if (t1.type.emanationLevel > 0)
          this._action$_game._stage._lighting._actorLightDirty = true;
        t2 = result.remaining;
        t3 = this._action$_actor;
        if (t2 === 0)
          this._action$_game._stage.removeItem$2(0, t1, t3._pos);
        else
          this.log$3("{1} [don't|doesn't] have room for {2}.", t3, t1.clone$1(0, t2));
        H.interceptedTypeCast(this._action$_actor, "$isHero").gainItemSkills$1(t1);
        H.interceptedTypeCast(this._action$_actor, "$isHero").refreshProperties$0();
        return C.ActionResult_null_true_true;
      }
    },
    DropAction: {
      "^": "ItemAction;_item$_count,location,item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, dropped, t2;
        t1 = this._item$_count;
        dropped = this.item;
        t2 = dropped._count;
        if (t1 == null ? t2 == null : t1 === t2)
          this.removeItem$0(0);
        else {
          dropped = dropped.splitStack$1(t1);
          this.countChanged$0();
        }
        t1 = this._action$_actor;
        if (this.location === C.ItemLocation_A8D) {
          this.log$3("{1} take[s] off and drop[s] {2}.", t1, dropped);
          H.interceptedTypeCast(this._action$_actor, "$isHero").refreshProperties$0();
        } else
          this.log$3("{1} drop[s] {2}.", t1, dropped);
        this._action$_game._stage.addItem$2(dropped, this._action$_actor._pos);
        return C.ActionResult_null_true_true;
      }
    },
    EquipAction: {
      "^": "ItemAction;location,item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, unequipped, result, t2;
        t1 = this.location;
        if (t1 === C.ItemLocation_A8D)
          return this.alternate$1(new R.UnequipAction(t1, this.item));
        t1 = this.item;
        if (!H.interceptedTypeCast(this._action$_actor, "$isHero").equipment.canEquip$1(t1))
          return this.fail$3("{1} cannot equip {2}.", this._action$_actor, t1);
        this.removeItem$0(0);
        unequipped = H.interceptedTypeCast(this._action$_actor, "$isHero").equipment.equip$1(t1);
        if (unequipped != null) {
          result = H.interceptedTypeCast(this._action$_actor, "$isHero").inventory.tryAdd$2$wasUnequipped(unequipped, true);
          t2 = this._action$_actor;
          if (result.remaining === 0)
            this.log$3("{1} unequip[s] {2}.", t2, unequipped);
          else {
            this._action$_game._stage.addItem$2(unequipped, t2._pos);
            this.log$3("{1} [don't|doesn't] have room for {2} and {2 he} drops to the ground.", this._action$_actor, unequipped);
          }
        }
        this.log$3("{1} equip[s] {2}.", this._action$_actor, t1);
        H.interceptedTypeCast(this._action$_actor, "$isHero").refreshProperties$0();
        return C.ActionResult_null_true_true;
      }
    },
    UnequipAction: {
      "^": "ItemAction;location,item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, result, t2;
        this.removeItem$0(0);
        t1 = this.item;
        result = H.interceptedTypeCast(this._action$_actor, "$isHero").inventory.tryAdd$2$wasUnequipped(t1, true);
        t2 = this._action$_actor;
        if (result.remaining === 0)
          this.log$3("{1} unequip[s] {2}.", t2, t1);
        else {
          this._action$_game._stage.addItem$2(t1, t2._pos);
          this.log$3("{1} [don't|doesn't] have room for {2} and {2 he} drops to the ground.", this._action$_actor, t1);
        }
        H.interceptedTypeCast(this._action$_actor, "$isHero").refreshProperties$0();
        return C.ActionResult_null_true_true;
      }
    },
    UseAction: {
      "^": "ItemAction;location,item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3;
        t1 = this.item;
        t2 = t1.type;
        if (t2.equipSlot != null)
          return this.alternate$1(new R.EquipAction(this.location, t1));
        t2 = t2.use;
        if (t2 == null)
          return this.fail$2("{1} can't be used.", t1);
        t3 = t1._count;
        if (typeof t3 !== "number")
          return t3.$sub();
        t1._count = t3 - 1;
        t2 = t2.call$0();
        if (t1._count === 0)
          this.removeItem$0(0);
        else
          this.countChanged$0();
        return this.alternate$1(t2);
      }
    },
    DestroyActionMixin: {
      "^": "Object;",
      _destroy$4: function(element, items, isHeld, removeItem) {
        var t1, t2, fuel, _i, item, t3, chance, destroyedCount, i, t4, t5, t6;
        H.assertSubtype(items, "$isIterable", [R.Item], "$asIterable");
        H.functionTypeCheck(removeItem, {func: 1, ret: -1, args: [R.Item]});
        for (t1 = items.toList$0(0), t2 = t1.length, fuel = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          item = t1[_i];
          t3 = J.getInterceptor$x(item);
          chance = t3.get$type(item).destroyChance.$index(0, element);
          if (chance == null)
            chance = 0;
          if (isHeld)
            chance = Math.min(30, C.JSInt_methods._tdivFast$1(chance, 2));
          if (chance === 0)
            continue;
          destroyedCount = 0;
          i = 0;
          while (true) {
            t4 = item.get$_count();
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(i < t4))
              break;
            t4 = $.$get$rng();
            if (t4._random.nextInt$1(100) < chance)
              ++destroyedCount;
            ++i;
          }
          if (destroyedCount === item.get$_count()) {
            this.log$2("{1} " + element.destroyMessage + "!", item);
            removeItem.call$1(item);
          } else if (destroyedCount > 0) {
            t4 = item.get$_count();
            if (typeof t4 !== "number")
              return t4.$sub();
            item.set$_count(t4 - destroyedCount);
            t4 = t3.get$type(item);
            t5 = item.get$prefix();
            t6 = item.get$suffix();
            this.log$2("{1} " + element.destroyMessage + "!", new R.Item(t4, t5, t6, destroyedCount));
          }
          fuel += t3.get$type(item).fuel * destroyedCount;
        }
        return fuel;
      },
      destroyFloorItems$2: function(pos, element) {
        return this._destroy$4(element, this._action$_game._stage.itemsAt$1(pos), false, new R.DestroyActionMixin_destroyFloorItems_closure(this, pos));
      },
      destroyHeldItems$1: function(element) {
        var t1, t2, fuel;
        t1 = {};
        t2 = this._action$_actor;
        if (!(t2 instanceof G.Hero))
          return 0;
        if (t2.resistance$1(element) > 0)
          return 0;
        fuel = this._destroy$4(element, H.interceptedTypeCast(this._action$_actor, "$isHero").inventory, true, new R.DestroyActionMixin_destroyHeldItems_closure(this));
        t1.anyEquipmentDestroyed = false;
        t2 = this._destroy$4(element, H.interceptedTypeCast(this._action$_actor, "$isHero").equipment, true, new R.DestroyActionMixin_destroyHeldItems_closure0(t1, this));
        if (t1.anyEquipmentDestroyed)
          H.interceptedTypeCast(this._action$_actor, "$isHero").refreshProperties$0();
        return fuel + t2;
      }
    },
    DestroyActionMixin_destroyFloorItems_closure: {
      "^": "Closure:11;$this,pos",
      call$1: function(item) {
        this.$this._action$_game._stage.removeItem$2(0, item, this.pos);
      }
    },
    DestroyActionMixin_destroyHeldItems_closure: {
      "^": "Closure:11;$this",
      call$1: function(item) {
        C.JSArray_methods.remove$1(H.interceptedTypeCast(this.$this._action$_actor, "$isHero").inventory._inventory$_items, item);
      }
    },
    DestroyActionMixin_destroyHeldItems_closure0: {
      "^": "Closure:11;_box_0,$this",
      call$1: function(item) {
        H.interceptedTypeCast(this.$this._action$_actor, "$isHero").equipment.remove$1(0, item);
        this._box_0.anyEquipmentDestroyed = true;
      }
    }
  }], ["", "package:hauberk/src/engine/action/los.dart",, F, {
    "^": "",
    LosAction: {
      "^": "Action;",
      get$isImmediate: function() {
        return false;
      },
      onPerform$0: function() {
        var t1, pos, t2;
        if (this._los == null) {
          t1 = G._LineIterator$(this._action$_actor._pos, this._los$_target);
          this._los = t1;
          t1.moveNext$0();
          this._lastPos = this._action$_actor._pos;
        }
        pos = this._los._line$_current;
        t1 = this._action$_game._stage.tiles.$index(0, pos);
        t1.toString;
        t2 = $.$get$Motility_fly();
        if ((t1.type.motility._bitMask & t2._bitMask) === 0 || pos.$sub(0, this._action$_actor._pos).$gt(0, this.get$range())) {
          this.onEnd$1(this._lastPos);
          return this.succeed$0();
        }
        this.onStep$1(pos);
        t1 = this._action$_game._stage._actorsByTile.$index(0, pos);
        if (t1 != null && t1 !== this._action$_actor)
          if (this.onHitActor$2(pos, t1))
            return C.ActionResult_null_true_true;
        if (J.$eq$(pos, this._los$_target))
          if (this.onTarget$1(pos))
            return C.ActionResult_null_true_true;
        this._lastPos = pos;
        this._los.moveNext$0();
        return C.ActionResult_null_true_false;
      },
      onEnd$1: function(pos) {
      },
      onTarget$1: function(pos) {
        return false;
      }
    }
  }], ["", "package:hauberk/src/engine/action/toss.dart",, B, {
    "^": "",
    TossAction: {
      "^": "ItemAction;_toss$_hit,_toss$_target,location,item,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var tossed = this.item;
        if (tossed.type.toss == null)
          return this.fail$2("{1} can't be thrown.", tossed);
        if (tossed._count === 1)
          this.removeItem$0(0);
        else {
          tossed = tossed.splitStack$1(1);
          this.countChanged$0();
        }
        return this.alternate$1(new B.TossLosAction(tossed, this._toss$_hit, false, this._toss$_target));
      }
    },
    TossLosAction: {
      "^": "LosAction;_toss$_item,_toss$_hit,_missed,_los$_target,0_lastPos,0_los,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      get$range: function() {
        return this._toss$_hit.get$range();
      },
      onStep$1: function(pos) {
        this.addEvent$3$other$pos(C.EventType_toss, this._toss$_item, pos);
      },
      onHitActor$2: function(pos, target) {
        if (this._toss$_hit.perform$3(this, this._action$_actor, target) == null) {
          this._missed = true;
          return false;
        }
        this._endThrow$1(pos);
        return true;
      },
      onEnd$1: function(pos) {
        this._endThrow$1(pos);
      },
      onTarget$1: function(pos) {
        if (this._missed)
          return false;
        this._endThrow$1(pos);
        return true;
      },
      _endThrow$1: function(pos) {
        var t1, t2, t3;
        t1 = this._toss$_item;
        t2 = t1.type.toss;
        t3 = t2.use;
        if (t3 != null) {
          this.addAction$1(t3.call$1(pos));
          return;
        }
        t3 = $.$get$rng();
        t2 = t2.breakage;
        if (t3.range$1(100) < t2) {
          this.log$2("{1} breaks!", t1);
          return;
        }
        this._action$_game._stage.addItem$2(t1, pos);
      }
    }
  }], ["", "package:hauberk/src/engine/action/walk.dart",, B, {
    "^": "",
    WalkAction: {
      "^": "Action;dir,_isRunning,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, pos, t2, tile, t3, _i, item, t4, min, max, value, t5, neighbor;
        t1 = this.dir;
        if (t1 === C.Direction_0_0)
          return this.alternate$1(new B.RestAction());
        pos = this._action$_actor._pos.$add(0, t1);
        t2 = this._action$_game._stage._actorsByTile.$index(0, pos);
        if (t2 != null && t2 !== this._action$_actor)
          return this.alternate$1(new S.AttackAction(t2));
        tile = this._action$_game._stage.tiles.$index(0, pos).type;
        t2 = tile.onOpen;
        if (t2 != null)
          return this.alternate$1(t2.call$1(pos));
        if (!this._action$_actor.canOccupy$1(pos)) {
          if (this._action$_actor instanceof G.Hero)
            this._action$_game._stage.exploreAt$3$force(pos.x, pos.y, true);
          return this.fail$2("{1} hit[s] the " + tile.name + ".", this._action$_actor);
        }
        this._action$_actor.set$pos(pos);
        if (this._action$_actor instanceof G.Hero) {
          for (t2 = this._action$_game._stage.itemsAt$1(pos), t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableMixin", 0)), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            item = t2[_i];
            t4 = H.interceptedTypeCast(this._action$_actor, "$isHero");
            if (!(t4._behavior instanceof X.ActionBehavior))
              t4._behavior = null;
            if (J.get$type$x(item).isTreasure) {
              min = C.JSNumber_methods.ceil$0(item.get$price() * 0.5);
              max = C.JSNumber_methods.ceil$0(item.get$price() * 1.5);
              t4 = $.$get$rng();
              value = t4._random.nextInt$1(max - min) + min;
              t4 = H.interceptedTypeCast(this._action$_actor, "$isHero");
              t5 = t4.gold;
              if (typeof t5 !== "number")
                return t5.$add();
              t4.gold = t5 + value;
              this.log$3("{1} pick[s] up {2} worth " + value + " gold.", H.interceptedTypeCast(this._action$_actor, "$isHero"), item);
              this._action$_game._stage.removeItem$2(0, item, pos);
              t5 = this._action$_actor;
              t4 = t5._pos;
              C.JSArray_methods.add$1(this._action$_game._events, new D.Event0(C.EventType_gold, t5, null, item, t4, null));
            } else
              this.log$3("{1} [are|is] standing on {2}.", this._action$_actor, item);
          }
          if (this._isRunning)
            for (t1 = [t1.get$rotateLeft45(), t1, t1.get$rotateRight45()], t2 = [R.Item], _i = 0; _i < 3; ++_i) {
              neighbor = pos.$add(0, t1[_i]);
              t3 = H.interceptedTypeCast(this._action$_actor, "$isHero").game._stage._itemsByTile.$index(0, neighbor);
              if (t3 == null)
                t3 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t2), null);
              t3 = t3._inventory$_items;
              t3 = new J.ArrayIterator(t3, t3.length, 0, [H.getTypeArgumentByIndex(t3, 0)]);
              for (; t3.moveNext$0();) {
                t4 = t3.__interceptors$_current;
                t5 = H.interceptedTypeCast(this._action$_actor, "$isHero");
                if (!(t5._behavior instanceof X.ActionBehavior))
                  t5._behavior = null;
                t5.game.log.add$5(0, C.LogType_message, "{1} [are|is] are next to {2}.", t5, t4, null);
              }
            }
          t1 = H.interceptedTypeCast(this._action$_actor, "$isHero");
          t2 = t1._focus;
          t3 = t1.intellect;
          t3 = t3.modify$1(t3._value);
          H.checkNum(t3);
          t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 2, 0, C.JSNumber_methods.ceil$0(Math.pow(t3, 1.3) * 2)));
        }
        return this.succeed$0();
      },
      toString$0: function(_) {
        return H.S(this._action$_actor) + " walks " + H.S(this.dir);
      }
    },
    OpenDoorAction: {
      "^": "Action;pos<,openDoor,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        this._action$_game._stage.tiles.$index(0, this.pos).type = this.openDoor;
        this._action$_game._stage.tileOpacityChanged$0();
        return this.succeed$2("{1} open[s] the door.", this._action$_actor);
      }
    },
    CloseDoorAction: {
      "^": "Action;doorPos,closedDoor,0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2;
        t1 = this.doorPos;
        t2 = this._action$_game._stage._actorsByTile.$index(0, t1);
        if (t2 != null)
          return this.fail$2("{1} [are|is] in the way!", t2);
        this._action$_game._stage.tiles.$index(0, t1).type = this.closedDoor;
        this._action$_game._stage.tileOpacityChanged$0();
        return this.succeed$2("{1} close[s] the door.", this._action$_actor);
      }
    },
    RestAction: {
      "^": "Action;0_action$_actor,0_action$_pos,0_action$_game,0_consumesEnergy",
      onPerform$0: function() {
        var t1, t2, t3;
        t1 = this._action$_actor;
        if (t1 instanceof G.Hero) {
          if (t1._stomach > 0 && t1.poison._turnsRemaining <= 0) {
            t2 = t1._health;
            if (typeof t2 !== "number")
              return t2.$add();
            t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 1, 0, t1.get$maxHealth()));
          }
          t1 = H.interceptedTypeCast(this._action$_actor, "$isHero");
          t2 = t1._focus;
          t3 = t1.intellect;
          t3 = t3.modify$1(t3._value);
          H.checkNum(t3);
          t1._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 10, 0, C.JSNumber_methods.ceil$0(Math.pow(t3, 1.3) * 2)));
        } else {
          t2 = t1.game._stage;
          t1 = t1._pos;
          t1 = t2.tiles.$index(0, t1);
          if (!(t1.illumination > 0 && !t1._isOccluded)) {
            t1 = this._action$_actor;
            t2 = t1._health;
            if (typeof t2 !== "number")
              return t2.$add();
            t1._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t2 + 1, 0, t1.get$maxHealth()));
          }
        }
        return this.succeed$0();
      },
      get$noise: function() {
        return 0.05;
      }
    }
  }], ["", "package:hauberk/src/engine/core/actor.dart",, S, {
    "^": "",
    Actor: {
      "^": "Object;",
      get$conditions: function() {
        var t1, t2;
        t1 = H.setRuntimeTypeInfo([this.haste, this.cold, this.poison, this.blindness, this.dazzle], [E.Condition]);
        t2 = this.resistances;
        C.JSArray_methods.addAll$1(t1, t2.get$values(t2));
        return t1;
      },
      get$pos: function() {
        return this._pos;
      },
      set$pos: function(value) {
        H.interceptedTypeCheck(value, "$isVec");
        if (!J.$eq$(value, this._pos)) {
          this.changePosition$2(this._pos, value);
          this._pos = value;
        }
      },
      get$x: function(_) {
        return this._pos.x;
      },
      get$y: function(_) {
        return this._pos.y;
      },
      Actor$3: function(game, x, y) {
        var t1, t2, _i, element;
        for (this.game.content, t1 = $.$get$Elements_all(), t2 = this.resistances, _i = 0; _i < 12; ++_i) {
          element = t1[_i];
          t2.$indexSet(0, element, new E.ResistCondition(element, 0, 0));
        }
        C.JSArray_methods.forEach$1(this.get$conditions(), new S.Actor_closure(this));
      },
      get$pronoun: function() {
        return C.Pronoun_it_it_its;
      },
      get$needsInput: function() {
        return false;
      },
      get$defenses: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 1, $async$currentError, dodge;
          return function $async$get$defenses($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  dodge = $async$self.get$baseDodge();
                  if ($async$self.blindness._turnsRemaining > 0 || $async$self.dazzle._turnsRemaining > 0)
                    dodge = C.JSInt_methods._tdivFast$1(dodge, 2);
                  $async$goto = dodge !== 0 ? 2 : 3;
                  break;
                case 2:
                  // then
                  $async$goto = 4;
                  return new U.Defense(dodge, "{1} dodge[s] {2}.");
                case 4:
                  // after yield
                case 3:
                  // join
                  $async$goto = 5;
                  return P._IterationMarker_yieldStar($async$self.onGetDefenses$0());
                case 5:
                  // after yield
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, U.Defense);
      },
      changePosition$2: ["super$Actor$changePosition", function(from, to) {
        var t1, t2, actor;
        t1 = this.game;
        t2 = t1._stage._actorsByTile;
        actor = t2.$index(0, from);
        t2.$indexSet(0, from, null);
        t2.$indexSet(0, to, actor);
        if (this.get$emanationLevel() > 0)
          t1._stage._lighting._actorLightDirty = true;
      }],
      createMeleeHit$1: function(defender) {
        var hit = this.onCreateMeleeHit$1(defender);
        this.modifyHit$2(hit, C.HitType_0);
        return hit;
      },
      modifyHit$2: function(hit, type) {
        if (this.blindness._turnsRemaining > 0 || this.dazzle._turnsRemaining > 0)
          switch (type) {
            case C.HitType_0:
              hit._strikeScale *= 0.5;
              break;
            case C.HitType_1:
              hit._strikeScale *= 0.3;
              break;
            case C.HitType_2:
              hit._strikeScale *= 0.2;
              break;
          }
        this.onModifyHit$2(hit, type);
      },
      onModifyHit$2: function(hit, type) {
      },
      resistance$1: function(element) {
        var result, resistance;
        result = this.onGetResistance$1(element);
        resistance = this.resistances.$index(0, element);
        return resistance._turnsRemaining > 0 ? result + resistance._intensity : result;
      },
      takeDamage$4: function(action, damage, attackNoun, attacker) {
        var t1 = this._health;
        if (typeof t1 !== "number")
          return t1.$sub();
        this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - damage, 0, this.get$maxHealth()));
        this.onTakeDamage$3(action, attacker, damage);
        t1 = this._health;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0)
          return false;
        action.addEvent$2$actor(C.EventType_die, this);
        action.log$3("{1} kill[s] {2}.", attackNoun, this);
        if (attacker != null)
          attacker.onKilled$2(action, this);
        this.onDied$1(attackNoun);
        return true;
      },
      takeDamage$3: function(action, damage, attackNoun) {
        return this.takeDamage$4(action, damage, attackNoun, null);
      },
      onGiveDamage$3: function(action, defender, damage) {
      },
      onKilled$2: function(action, defender) {
      },
      onFinishTurn$1: function(action) {
      },
      canOccupy$1: function(pos) {
        var t1, t2, t3, t4;
        t1 = pos.x;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 0)
          return false;
        t2 = this.game._stage.tiles;
        t3 = t2.bounds.size;
        t4 = t3.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t1 >= t4)
          return false;
        t1 = pos.y;
        if (t1 < 0)
          return false;
        if (t1 >= t3.y)
          return false;
        t1 = t2.$index(0, pos);
        t2 = this.get$motility();
        return (t1.type.motility._bitMask & t2._bitMask) !== 0;
      },
      canEnter$1: function(pos) {
        return this.canOccupy$1(pos) && this.game._stage._actorsByTile.$index(0, pos) == null;
      },
      willEnter$1: function(pos) {
        return this.canEnter$1(pos) && this.game._stage.tiles.$index(0, pos).substance === 0;
      },
      finishTurn$1: function(action) {
        var t1;
        this.energy.energy -= 240;
        C.JSArray_methods.forEach$1(this.get$conditions(), new S.Actor_finishTurn_closure(action));
        t1 = this._health;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0)
          this.onFinishTurn$1(action);
      },
      log$4: function(message, noun1, noun2, noun3) {
        var t1, t2, t3;
        t1 = this.game;
        t2 = t1._stage;
        t3 = this._pos;
        t3 = t2.tiles.$index(0, t3);
        if (!(t3.illumination > 0 && !t3._isOccluded))
          return;
        t1.log.add$5(0, C.LogType_message, message, noun1, noun2, noun3);
      },
      log$2: function(message, noun1) {
        return this.log$4(message, noun1, null, null);
      },
      log$1: function(message) {
        return this.log$4(message, null, null, null);
      },
      log$3: function(message, noun1, noun2) {
        return this.log$4(message, noun1, noun2, null);
      },
      toString$0: function(_) {
        return this.get$nounText();
      },
      $isNoun: 1
    },
    Actor_closure: {
      "^": "Closure:34;$this",
      call$1: function(condition) {
        H.interceptedTypeCheck(condition, "$isCondition")._condition0$_actor = this.$this;
        return;
      }
    },
    Actor_finishTurn_closure: {
      "^": "Closure:34;action",
      call$1: function(condition) {
        var t1;
        H.interceptedTypeCheck(condition, "$isCondition");
        t1 = condition._turnsRemaining;
        if (t1 > 0) {
          --t1;
          condition._turnsRemaining = t1;
          if (t1 > 0)
            condition.onUpdate$1(this.action);
          else {
            condition.onDeactivate$0();
            condition._intensity = 0;
          }
        }
        return;
      }
    }
  }], ["", "package:hauberk/src/engine/core/combat.dart",, U, {
    "^": "",
    getArmorMultiplier: function(armor) {
      return 1 / (1 + Math.max(0, armor) / 40);
    },
    Attack: {
      "^": "Object;noun,verb,damage,range,element",
      createHit$0: function() {
        return new U.Hit(this, 0, 1, 1, 0, $.$get$Element_none(), 1);
      },
      toString$0: function(_) {
        var result, t1, t2;
        result = C.JSInt_methods.toString$0(this.damage);
        t1 = this.element;
        t2 = $.$get$Element_none();
        if (t1 == null ? t2 != null : t1 !== t2)
          result = H.S(t1) + " " + result;
        t1 = this.range;
        return t1 > 0 ? result + ("@" + t1) : result;
      },
      static: {
        Attack$: function(noun, verb, damage, range, element) {
          var t1 = range == null ? 0 : range;
          return new U.Attack(noun, verb, damage, t1, element == null ? $.$get$Element_none() : element);
        }
      }
    },
    HitType: {
      "^": "Object;index,_combat$_name",
      toString$0: function(_) {
        return this._combat$_name;
      }
    },
    Hit: {
      "^": "Object;_attack,_strikeBonus,_strikeScale,_combat$_damageScale,_combat$_damageBonus,_brand,_rangeScale",
      get$range: function() {
        var t1 = this._attack.range;
        if (t1 === 0)
          return 0;
        return Math.max(1, C.JSNumber_methods.round$0(t1 * this._rangeScale));
      },
      get$element: function() {
        var t1, t2;
        t1 = this._brand;
        t2 = $.$get$Element_none();
        if (t1 == null ? t2 != null : t1 !== t2)
          return t1;
        return this._attack.element;
      },
      get$averageDamage: function() {
        return this._attack.damage * this._combat$_damageScale + this._combat$_damageBonus;
      },
      get$damageString: function() {
        return C.JSDouble_methods.toString$0(C.JSNumber_methods.toInt$0(this.get$averageDamage() * 100) / 100);
      },
      perform$4$canMiss: function(action, attacker, defender, canMiss) {
        var t1, attackNoun, t2, strike, t3, defenses, _i, defense, armor, resistance, damageCents, damage, sideEffect;
        H.interceptedTypeCheck(action, "$isAction");
        if (canMiss == null)
          canMiss = true;
        t1 = this._attack;
        attackNoun = t1.noun;
        if (attackNoun == null)
          attackNoun = attacker;
        if (canMiss) {
          t2 = $.$get$rng();
          strike = t2.inclusive$2(1, 100) * this._strikeScale + this._strikeBonus;
          t3 = defender.get$defenses();
          defenses = P.List_List$from(t3, true, H.getTypeArgumentByIndex(t3, 0));
          C.JSArray_methods.shuffle$1(H.assertSubtype(defenses, "$isList", [U.Defense], "$asList"), t2._random);
          for (t2 = defenses.length, _i = 0; _i < defenses.length; defenses.length === t2 || (0, H.throwConcurrentModificationError)(defenses), ++_i) {
            defense = defenses[_i];
            strike -= defense.get$amount();
            if (strike < 0) {
              action.log$3(J.get$message$x(defense), defender, attackNoun);
              return;
            }
          }
        }
        armor = defender.get$armor();
        resistance = defender.resistance$1(this.get$element());
        damageCents = C.JSNumber_methods.toInt$0((t1.damage * this._combat$_damageScale + this._combat$_damageBonus) * (1 / (1 + resistance)) * 100);
        damage = C.JSDouble_methods.round$0($.$get$rng().triangleInt$2(damageCents, C.JSInt_methods._tdivFast$1(damageCents, 2)) * U.getArmorMultiplier(armor) / 100);
        if (damage === 0) {
          action.log$3("{1} do[es] no damage to {2}.", attackNoun, defender);
          return 0;
        }
        if (attacker != null)
          attacker.onGiveDamage$3(action, defender, damage);
        if (defender.takeDamage$4(action, damage, attackNoun, attacker))
          return damage;
        if (resistance <= 0) {
          sideEffect = this.get$element().attackAction.call$1(damage);
          if (sideEffect != null)
            action.addAction$2(sideEffect, defender);
        }
        action.addEvent$3$actor$other(C.EventType_hit, defender, damage);
        action.log$3("{1} " + H.S(t1.verb) + " {2}.", attackNoun, defender);
        return damage;
      },
      perform$3: function(action, attacker, defender) {
        return this.perform$4$canMiss(action, attacker, defender, null);
      }
    },
    Defense: {
      "^": "Object;amount<,message>"
    }
  }], ["", "package:hauberk/src/engine/core/condition.dart",, E, {
    "^": "",
    Condition: {
      "^": "Object;",
      onUpdate$1: function(action) {
      }
    },
    HasteCondition: {
      "^": "Condition;0_condition0$_actor,_turnsRemaining,_intensity",
      onDeactivate$0: function() {
        var t1 = this._condition0$_actor;
        t1.log$2("{1} slow[s] back down.", t1);
      }
    },
    ColdCondition: {
      "^": "Condition;0_condition0$_actor,_turnsRemaining,_intensity",
      onDeactivate$0: function() {
        var t1 = this._condition0$_actor;
        t1.log$2("{1} warm[s] back up.", t1);
      }
    },
    PoisonCondition: {
      "^": "Condition;0_condition0$_actor,_turnsRemaining,_intensity",
      onUpdate$1: function(action) {
        var t1;
        if (!this._condition0$_actor.takeDamage$3(action, this._intensity, new O.Noun("the poison"))) {
          t1 = this._condition0$_actor;
          t1.log$2("{1} [are|is] hurt by poison!", t1);
        }
      },
      onDeactivate$0: function() {
        var t1 = this._condition0$_actor;
        t1.log$2("{1} [are|is] no longer poisoned.", t1);
      }
    },
    BlindnessCondition: {
      "^": "Condition;0_condition0$_actor,_turnsRemaining,_intensity",
      onDeactivate$0: function() {
        var t1, t2, t3;
        t1 = this._condition0$_actor;
        t1.log$2("{1} can see clearly again.", t1);
        t1 = this._condition0$_actor;
        t2 = t1.game;
        t3 = t2.hero;
        if (t1 == null ? t3 == null : t1 === t3)
          t2._stage._lighting._visibilityDirty = true;
      }
    },
    ResistCondition: {
      "^": "Condition;_condition0$_element,0_condition0$_actor,_turnsRemaining,_intensity",
      onDeactivate$0: function() {
        this._condition0$_actor.log$2("{1} feel[s] susceptible to " + H.S(this._condition0$_element) + ".", this._condition0$_actor);
      }
    }
  }], ["", "package:hauberk/src/engine/core/element.dart",, G, {
    "^": "",
    Element: {
      "^": "Object;name>,abbreviation,destroyMessage,emanates,experience,attackAction,floorAction",
      toString$0: function(_) {
        return this.name;
      },
      static: {
        Element$: function($name, abbreviation, experience, attack, destroyMessage, emanates, floor) {
          var t1, t2, t3;
          t1 = emanates == null ? false : emanates;
          t2 = destroyMessage == null ? "" : destroyMessage;
          t3 = attack == null ? new G.Element_closure() : attack;
          return new G.Element($name, abbreviation, t2, t1, experience, t3, floor == null ? new G.Element_closure0() : floor);
        }
      }
    },
    Element_closure: {
      "^": "Closure:6;",
      call$1: [function(_) {
        H.intTypeCheck(_);
        return;
      }, null, null, 4, 0, null, 1, "call"]
    },
    Element_closure0: {
      "^": "Closure:85;",
      call$4: [function(_, __, ___, ____) {
        H.interceptedTypeCheck(_, "$isVec");
        H.interceptedTypeCheck(__, "$isHit");
        H.numTypeCheck(___);
        H.intTypeCheck(____);
        return;
      }, null, null, 16, 0, null, 1, 36, 37, 38, "call"]
    }
  }], ["", "package:hauberk/src/engine/core/energy.dart",, Y, {
    "^": "",
    Energy: {
      "^": "Object;energy"
    }
  }], ["", "package:hauberk/src/engine/core/game.dart",, D, {
    "^": "",
    Game: {
      "^": "Object;content,_game$_save,log,_actions,_reactions,_events,_substanceEnergy,_substanceUpdateOrder,0_substanceIndex,depth<,0_stage,0hero",
      generate$0: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
          return function $async$generate$0($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = {};
                  t1.heroPos = null;
                  t2 = $async$self._game$_save;
                  t3 = t2._lore;
                  t4 = $async$self._stage;
                  t5 = H.functionTypeCheck(new D.Game_generate_closure(t1), {func: 1, args: [L.Vec]});
                  t6 = H.setRuntimeTypeInfo([], [Q.Biome]);
                  t7 = D.Place;
                  t8 = H.setRuntimeTypeInfo([], [t7]);
                  t9 = P.LinkedHashSet_LinkedHashSet(null, null, null, B.Breed);
                  t10 = t4.tiles.bounds.size;
                  $async$goto = 2;
                  return P._IterationMarker_yieldStar(new Q.Dungeon(t3, t4, $async$self.depth, t6, t8, M.Array2D$(t10.x, t10.y, null, t7), t9).generate$1(t5));
                case 2:
                  // after yield
                  t2 = G.Hero$($async$self, t1.heroPos, t2);
                  $async$self.hero = t2;
                  $async$self._stage.addActor$1(t2);
                  $async$goto = 3;
                  return "Calculating visibility";
                case 3:
                  // after yield
                  $async$self._stage._lighting.refresh$0();
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, P.String);
      },
      update$0: function(_) {
        var t1, t2, t3, t4, t5, madeProgress, t6, t7, action, result, action0, actor, speed;
        for (t1 = this._actions, t2 = this._substanceEnergy, t3 = this._events, t4 = this._reactions, t5 = H.getTypeArgumentByIndex(t1, 0), madeProgress = false; true;) {
          for (; !t1.get$isEmpty(t1); madeProgress = true) {
            t6 = t1._head;
            if (t6 === t1._tail)
              H.throwExpression(H.IterableElementError_noElement());
            t7 = t1._table;
            if (t6 >= t7.length)
              return H.ioore(t7, t6);
            action = t7[t6];
            result = action.onPerform$0();
            for (; action0 = result.alternative, action0 != null; action = action0) {
              t1.removeFirst$0();
              H.assertSubtypeOfRuntimeType(action0, t5);
              t6 = t1._head;
              t7 = t1._table;
              t6 = (t6 - 1 & t7.length - 1) >>> 0;
              t1._head = t6;
              C.JSArray_methods.$indexSet(t7, t6, action0);
              if (t1._head === t1._tail)
                t1._grow$0();
              ++t1._modificationCount;
              result = action0.onPerform$0();
            }
            for (; t6 = t4.length, t6 !== 0;) {
              if (0 >= t6)
                return H.ioore(t4, -1);
              t4.pop().onPerform$0();
            }
            this._stage._lighting.refresh$0();
            if (result.done) {
              t1.removeFirst$0();
              if (result.succeeded && action._consumesEnergy) {
                action._action$_actor.finishTurn$1(action);
                t6 = this._stage;
                t6._currentActorIndex = C.JSInt_methods.$mod(t6._currentActorIndex + 1, t6._actors.length);
              }
              t6 = action._action$_actor;
              t7 = this.hero;
              if (t6 == null ? t7 == null : t6 === t7) {
                t1 = H.setRuntimeTypeInfo([], [D.Event0]);
                C.JSArray_methods.addAll$1(t1, t3);
                C.JSArray_methods.set$length(t3, 0);
                return new D.GameResult(t1, true);
              }
            }
            if (t3.length !== 0) {
              t1 = H.setRuntimeTypeInfo([], [D.Event0]);
              C.JSArray_methods.addAll$1(t1, t3);
              C.JSArray_methods.set$length(t3, 0);
              return new D.GameResult(t1, true);
            }
          }
          if (this._substanceIndex != null)
            this._updateSubstances$0();
          for (; t1._head === t1._tail;) {
            t6 = this._stage;
            t7 = t6._actors;
            t6 = t6._currentActorIndex;
            if (t6 < 0 || t6 >= t7.length)
              return H.ioore(t7, t6);
            actor = t7[t6];
            t6 = actor.energy;
            if (t6.energy >= 240 && actor.get$needsInput()) {
              t1 = H.setRuntimeTypeInfo([], [D.Event0]);
              C.JSArray_methods.addAll$1(t1, t3);
              C.JSArray_methods.set$length(t3, 0);
              return new D.GameResult(t1, madeProgress);
            }
            if (t6.energy < 240) {
              speed = actor.get$baseSpeed() + actor.haste._intensity - actor.cold._intensity;
              t7 = t6.energy;
              if (speed < 0 || speed >= 13)
                return H.ioore(C.List_mC8, speed);
              t7 += C.List_mC8[speed];
              t6.energy = t7;
              t7 = t7 >= 240;
              t6 = t7;
            } else
              t6 = true;
            if (t6) {
              if (actor.get$needsInput()) {
                t1 = H.setRuntimeTypeInfo([], [D.Event0]);
                C.JSArray_methods.addAll$1(t1, t3);
                C.JSArray_methods.set$length(t3, 0);
                return new D.GameResult(t1, madeProgress);
              }
              action = actor.onGetAction$0();
              if (action != null)
                action._bind$4(actor, null, actor.game, null);
              t1._add$1(H.assertSubtypeOfRuntimeType(action, t5));
            } else {
              t6 = this._stage;
              t6._currentActorIndex = C.JSInt_methods.$mod(t6._currentActorIndex + 1, t6._actors.length);
            }
            t6 = this.hero;
            if (actor == null ? t6 == null : actor === t6) {
              t6 = t2.energy += 60;
              if (t6 >= 240) {
                t2.energy = t6 - 240;
                this._substanceIndex = 0;
                this._updateSubstances$0();
              }
            }
          }
        }
      },
      _updateSubstances$0: function() {
        var t1, t2, t3, t4, pos, action;
        t1 = this._substanceUpdateOrder;
        t2 = this.content;
        while (true) {
          t3 = this._substanceIndex;
          t4 = t1.length;
          if (typeof t3 !== "number")
            return t3.$lt();
          if (!(t3 < t4))
            break;
          pos = t1[t3];
          action = t2.updateSubstance$2(this._stage, pos);
          t3 = this._substanceIndex;
          if (typeof t3 !== "number")
            return t3.$add();
          this._substanceIndex = t3 + 1;
          if (action != null) {
            action._bind$4(null, pos, this, false);
            t1 = this._actions;
            t1._add$1(H.assertSubtypeOfRuntimeType(action, H.getTypeArgumentByIndex(t1, 0)));
            return;
          }
        }
        this._substanceIndex = null;
      }
    },
    Game_generate_closure: {
      "^": "Closure:8;_box_0",
      call$1: function(pos) {
        this._box_0.heroPos = pos;
      }
    },
    GameResult: {
      "^": "Object;events,madeProgress"
    },
    Event0: {
      "^": "Object;type>,actor,element,other,pos<,dir"
    },
    EventType: {
      "^": "Object;_game$_name",
      toString$0: function(_) {
        return this._game$_name;
      }
    }
  }], ["", "package:hauberk/src/engine/core/lerp.dart",, E, {
    "^": "",
    lerpDouble: function(value, min, max, outMin, outMax) {
      if (typeof value !== "number")
        return value.$le();
      if (value <= min)
        return outMin;
      if (value >= max)
        return outMax;
      return outMin + (value - min) / (max - min) * (outMax - outMin);
    }
  }], ["", "package:hauberk/src/engine/core/log.dart",, O, {
    "^": "",
    Log: {
      "^": "Object;messages",
      message$4: [function(_, message, noun1, noun2, noun3) {
        this.add$5(0, C.LogType_message, message, noun1, noun2, noun3);
      }, function($receiver, message, noun1) {
        return this.message$4($receiver, message, noun1, null, null);
      }, "message$2", function($receiver, message) {
        return this.message$4($receiver, message, null, null, null);
      }, "message$1", function($receiver, message, noun1, noun2) {
        return this.message$4($receiver, message, noun1, noun2, null);
      }, "message$3", "call$4", "call$2", "call$1", "call$3", "get$message", 5, 6, 18],
      error$4: [function(_, message, noun1, noun2, noun3) {
        this.add$5(0, C.LogType_error, message, noun1, noun2, noun3);
      }, function($receiver, message, noun1) {
        return this.error$4($receiver, message, noun1, null, null);
      }, "error$2", function($receiver, message) {
        return this.error$4($receiver, message, null, null, null);
      }, "error$1", function($receiver, message, noun1, noun2) {
        return this.error$4($receiver, message, noun1, noun2, null);
      }, "error$3", "call$4", "call$2", "call$1", "call$3", "get$error", 5, 6, 18],
      add$5: function(_, type, message, noun1, noun2, noun3) {
        var t1, last;
        message = this._format$4(message, noun1, noun2, noun3);
        t1 = this.messages;
        if (t1.get$length(t1) > 0) {
          last = t1.get$last(t1);
          if (last.text === message) {
            ++last.count;
            return;
          }
        }
        t1._add$1(H.assertSubtypeOfRuntimeType(new O.Message(type, message, 1), H.getTypeArgumentByIndex(t1, 0)));
        if (t1.get$length(t1) > 6)
          t1.removeFirst$0();
      },
      _format$4: function(text, noun1, noun2, noun3) {
        var nouns, result, i, noun, t1, t2;
        nouns = [noun1, noun2, noun3];
        for (result = text, i = 1; i <= 3; ++i) {
          noun = nouns[i - 1];
          if (noun != null) {
            t1 = "{" + i + "}";
            t2 = noun.get$nounText();
            result = H.stringReplaceAllUnchecked(result, t1, t2);
            t1 = "{" + i + " he}";
            t2 = noun.get$pronoun();
            result = H.stringReplaceAllUnchecked(result, t1, t2.subjective);
            t1 = "{" + i + " him}";
            t2 = noun.get$pronoun();
            result = H.stringReplaceAllUnchecked(result, t1, t2.objective);
            t1 = "{" + i + " his}";
            t2 = noun.get$pronoun();
            result = H.stringReplaceAllUnchecked(result, t1, t2.possessive);
          }
        }
        if (noun1 != null)
          result = O.Log_conjugate(result, noun1.get$pronoun());
        if (0 >= result.length)
          return H.ioore(result, 0);
        return result[0].toUpperCase() + C.JSString_methods.substring$1(result, 1);
      },
      static: {
        Log_conjugate: function(text, pronoun) {
          return O.Log__categorize(text, false, pronoun === C.Pronoun_you_you_your || pronoun === C.Pronoun_they_them_their);
        },
        Log_wordWrap: function(width, text) {
          var lines, t1, start, wordBreak, i;
          lines = H.setRuntimeTypeInfo([], [P.String]);
          for (t1 = text.length, start = 0, wordBreak = null, i = 0; i < t1; ++i) {
            if (text[i] === " ")
              wordBreak = i + 1;
            if (i - start >= width) {
              if (wordBreak == null)
                wordBreak = i;
              C.JSArray_methods.add$1(lines, C.JSString_methods.trim$0(C.JSString_methods.substring$2(text, start, wordBreak)));
              start = wordBreak;
              while (true) {
                if (!(start < t1 && text[start] === " "))
                  break;
                ++start;
              }
            }
          }
          C.JSArray_methods.add$1(lines, C.JSString_methods.trim$0(C.JSString_methods.substring$2(text, start, t1)));
          return lines;
        },
        Log__categorize: function(text, force, isFirst) {
          var optionalSuffix, irregular, match, t1, t2, before, after;
          optionalSuffix = P.RegExp_RegExp("\\[(\\w+?)\\]", true, false);
          irregular = P.RegExp_RegExp("\\[([^|]+)\\|([^\\]]+)\\]", true, false);
          if (force && !isFirst && !J.contains$1$asx(text, "["))
            return H.S(text) + "s";
          for (; true;) {
            match = optionalSuffix.firstMatch$1(text);
            if (match == null)
              break;
            t1 = match._match;
            t2 = t1.index;
            before = J.substring$2$s(text, 0, t2);
            after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
            if (isFirst)
              text = before + after;
            else {
              if (1 >= t1.length)
                return H.ioore(t1, 1);
              text = before + H.S(t1[1]) + after;
            }
          }
          for (; true;) {
            match = irregular.firstMatch$1(text);
            if (match == null)
              break;
            t1 = match._match;
            t2 = t1.index;
            before = J.substring$2$s(text, 0, t2);
            after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
            t2 = t1.length;
            if (isFirst) {
              if (1 >= t2)
                return H.ioore(t1, 1);
              text = before + H.S(t1[1]) + after;
            } else {
              if (2 >= t2)
                return H.ioore(t1, 2);
              text = before + H.S(t1[2]) + after;
            }
          }
          return text;
        }
      }
    },
    Noun: {
      "^": "Object;nounText<",
      get$pronoun: function() {
        return C.Pronoun_it_it_its;
      },
      toString$0: function(_) {
        return this.nounText;
      }
    },
    Pronoun: {
      "^": "Object;subjective,objective,possessive"
    },
    LogType: {
      "^": "Object;_log$_name",
      toString$0: function(_) {
        return this._log$_name;
      },
      static: {
        "^": "LogType_message<,LogType_error<"
      }
    },
    Message: {
      "^": "Object;type>,text>,count<"
    }
  }], ["", "package:hauberk/src/engine/core/resource.dart",, Y, {
    "^": "",
    ResourceSet: {
      "^": "Object;_tags,_resources,_queries,$ti",
      get$all: function() {
        var t1, t2, t3;
        t1 = this._resources;
        t1 = t1.get$values(t1);
        t2 = H.getTypeArgumentByIndex(this, 0);
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        return H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_all_closure(this), {func: 1, ret: t2, args: [t3]}), t3, t2);
      },
      add$5: function(_, $name, object, depth, frequency, tagNames) {
        var t1, t2, t3, t4, _i, tagName, tag;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(object, t1);
        t2 = this._resources;
        if (t2.containsKey$1(0, $name))
          throw H.wrapException(P.ArgumentError$('Already have a resource named "' + H.S($name) + '".'));
        t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, [Y._Tag, t1]);
        t2.$indexSet(0, $name, new Y._Resource(object, depth, frequency, t1, this.$ti));
        if (tagNames != null && tagNames !== "")
          for (t2 = tagNames.split(" "), t3 = t2.length, t4 = this._tags, _i = 0; _i < t3; ++_i) {
            tagName = t2[_i];
            tag = t4.$index(0, tagName);
            if (tag == null)
              throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S(tagName) + '".'));
            t1.add$1(0, tag);
          }
      },
      defineTags$1: function(paths) {
        var t1, t2, t3, t4, _i, t5, t6, $parent, _i0, $name, tag;
        for (t1 = paths.split(" "), t2 = t1.length, t3 = this._tags, t4 = this.$ti, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          for (t5 = J.split$1$s(t1[_i], "/"), t6 = t5.length, $parent = null, _i0 = 0; _i0 < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i0, $parent = tag) {
            $name = t5[_i0];
            tag = t3.$index(0, $name);
            if (tag == null) {
              tag = new Y._Tag($name, $parent, t4);
              t3.$indexSet(0, $name, tag);
            }
          }
      },
      find$1: function(_, $name) {
        var resource = this._resources.$index(0, $name);
        if (resource == null)
          throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
        return resource.object;
      },
      tryFind$1: function($name) {
        var resource = this._resources.$index(0, $name);
        if (resource == null)
          return;
        return resource.object;
      },
      getTags$1: function($name) {
        var resource, t1, t2, t3;
        resource = this._resources.$index(0, $name);
        if (resource == null)
          throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
        t1 = resource._tags;
        t2 = P.String;
        t3 = H.getRuntimeTypeArgument(t1, "SetMixin", 0);
        return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_getTags_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
      },
      tryChoose$2: function(depth, tagName) {
        var goalTag = this._tags.$index(0, tagName);
        return this._runQuery$3(goalTag.name, depth, new Y.ResourceSet_tryChoose_closure(this, goalTag));
      },
      tryChooseMatching$2: function(depth, tags) {
        var t1, t2, tagObjects, tagNames;
        H.assertSubtype(tags, "$isIterable", [P.String], "$asIterable");
        t1 = [Y._Tag, H.getTypeArgumentByIndex(this, 0)];
        t2 = H.getRuntimeTypeArgument(tags, "Iterable", 0);
        tagObjects = H.MappedIterable_MappedIterable(tags, H.functionTypeCheck(new Y.ResourceSet_tryChooseMatching_closure(this), {func: 1, ret: t1, args: [t2]}), t2, t1);
        tagNames = P.List_List$from(tags, true, t2);
        C.JSArray_methods.sort$0(tagNames);
        return this._runQuery$3(C.JSArray_methods.join$1(tagNames, "|") + " (match)", depth, new Y.ResourceSet_tryChooseMatching_closure0(this, tagObjects));
      },
      _runQuery$3: function($name, depth, scale) {
        var t1, key, t2, query, resources, chances, totalChance, t3, chance, t4, t5, relative, deviation;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(scale, {func: 1, ret: P.double, args: [[Y._Resource, t1]]});
        key = new Y._QueryKey($name, depth);
        t2 = this._queries;
        query = t2.$index(0, key);
        if (query == null) {
          resources = H.setRuntimeTypeInfo([], [[Y._Resource, t1]]);
          chances = H.setRuntimeTypeInfo([], [P.double]);
          for (t1 = this._resources, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), totalChance = 0; t1.moveNext$0();) {
            t3 = t1.get$current();
            chance = scale.call$1(t3);
            if (chance === 0)
              continue;
            t4 = t3.frequency;
            t5 = t3.depth;
            if (typeof t5 !== "number")
              return t5.$sub();
            if (typeof depth !== "number")
              return H.iae(depth);
            relative = t5 - depth;
            deviation = relative <= 0 ? 1 + depth * 0.2 : 0.7 + depth * 0.1;
            t5 = Math.exp(-0.5 * relative * relative / (deviation * deviation));
            if (typeof t4 !== "number")
              return t4.$mul();
            if (typeof chance !== "number")
              return chance.$mul();
            totalChance += Math.max(1e-7, chance * (t4 * t5));
            C.JSArray_methods.add$1(resources, t3);
            C.JSArray_methods.add$1(chances, totalChance);
          }
          query = new Y._ResourceQuery(depth, resources, chances, totalChance, this.$ti);
          t2.$indexSet(0, key, query);
        }
        return query.choose$0();
      },
      static: {
        ResourceSet$: function($T) {
          var t1 = P.String;
          return new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, $T]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, $T]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, $T]), [$T]);
        }
      }
    },
    ResourceSet_all_closure: {
      "^": "Closure;$this",
      call$1: [function(resource) {
        return H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource").object;
      }, null, null, 4, 0, null, 39, "call"],
      $signature: function() {
        var t1 = H.getTypeArgumentByIndex(this.$this, 0);
        return {func: 1, ret: t1, args: [[Y._Resource, t1]]};
      }
    },
    ResourceSet_getTags_closure: {
      "^": "Closure;$this",
      call$1: [function(tag) {
        return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").name;
      }, null, null, 4, 0, null, 40, "call"],
      $signature: function() {
        return {func: 1, ret: P.String, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChoose_closure: {
      "^": "Closure;$this,goalTag",
      call$1: function(resource) {
        var tag, scale, t1, t2;
        H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
        tag = this.goalTag;
        for (scale = 1; tag != null;) {
          for (t1 = resource._tags, t2 = new P._LinkedHashSetIterator(t1, t1._collection$_modifications, [H.getTypeArgumentByIndex(t1, 0)]), t2._collection$_cell = t1._collection$_first; t2.moveNext$0();)
            if (t2._collection$_current.contains$1(0, tag))
              return scale;
          tag = tag.parent;
          scale /= 10;
        }
        return 0;
      },
      $signature: function() {
        return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChooseMatching_closure: {
      "^": "Closure;$this",
      call$1: [function($name) {
        var tag;
        H.stringTypeCheck($name);
        tag = this.$this._tags.$index(0, $name);
        if (tag == null)
          throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S($name) + '".'));
        return tag;
      }, null, null, 4, 0, null, 16, "call"],
      $signature: function() {
        return {func: 1, ret: [Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)], args: [P.String]};
      }
    },
    ResourceSet_tryChooseMatching_closure0: {
      "^": "Closure;$this,tagObjects",
      call$1: function(resource) {
        var t1, t2, t3;
        t1 = this.$this;
        for (t2 = H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(t1, 0)], "$as_Resource")._tags, t3 = new P._LinkedHashSetIterator(t2, t2._collection$_modifications, [H.getTypeArgumentByIndex(t2, 0)]), t3._collection$_cell = t2._collection$_first, t2 = this.tagObjects; t3.moveNext$0();)
          if (t2.any$1(0, new Y.ResourceSet_tryChooseMatching__closure(t1, t3._collection$_current)))
            return 1;
        return 0;
      },
      $signature: function() {
        return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChooseMatching__closure: {
      "^": "Closure;$this,resourceTag",
      call$1: function(tag) {
        return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.resourceTag);
      },
      $signature: function() {
        return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    _Resource: {
      "^": "Object;object,depth<,frequency,_tags,$ti"
    },
    _Tag: {
      "^": "Object;name>,parent,$ti",
      contains$1: function(_, tag) {
        var thisTag;
        H.assertSubtype(tag, "$is_Tag", this.$ti, "$as_Tag");
        for (thisTag = this; thisTag != null; thisTag = thisTag.parent)
          if (tag === thisTag)
            return true;
        return false;
      }
    },
    _QueryKey: {
      "^": "Object;name>,depth<",
      get$hashCode: function(_) {
        return (J.get$hashCode$(this.name) ^ J.get$hashCode$(this.depth)) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        t1 = this.name;
        t2 = J.get$name$x(other);
        if (t1 == null ? t2 == null : t1 === t2) {
          t1 = this.depth;
          t2 = other.get$depth();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        return t1;
      },
      toString$0: function(_) {
        return H.S(this.name) + " (" + H.S(this.depth) + ")";
      }
    },
    _ResourceQuery: {
      "^": "Object;depth<,resources,chances,totalChance,$ti",
      choose$0: function() {
        var t1, t, t2, last, t3, t4, first, middle, t5;
        t1 = this.resources;
        if (t1.length === 0)
          return;
        t = $.$get$rng().float$1(0, this.totalChance);
        t2 = t1.length;
        last = t2 - 1;
        for (t3 = this.chances, t4 = t3.length, first = 0; true;) {
          middle = C.JSInt_methods._tdivFast$1(first + last, 2);
          if (middle > 0) {
            t5 = middle - 1;
            if (t5 >= t4)
              return H.ioore(t3, t5);
            t5 = t < t3[t5];
          } else
            t5 = false;
          if (t5)
            last = middle - 1;
          else {
            if (middle < 0 || middle >= t4)
              return H.ioore(t3, middle);
            if (t < t3[middle]) {
              if (middle >= t2)
                return H.ioore(t1, middle);
              return t1[middle].object;
            } else
              first = middle + 1;
          }
        }
      }
    }
  }], ["", "package:hauberk/src/engine/hero/behavior.dart",, X, {
    "^": "",
    Behavior: {
      "^": "Object;"
    },
    ActionBehavior: {
      "^": "Behavior;action",
      canPerform$1: function(hero) {
        return true;
      },
      getAction$1: function(hero) {
        H.interceptedTypeCheck(hero, "$isHero")._behavior = null;
        return this.action;
      }
    },
    RestBehavior: {
      "^": "Behavior;",
      canPerform$1: function(hero) {
        if (hero._health === hero.fortitude.get$maxHealth())
          return false;
        if (hero._stomach === 0) {
          hero.game.log.add$5(0, C.LogType_message, "You must eat before you can rest.", null, null, null);
          return false;
        }
        return true;
      },
      getAction$1: function(hero) {
        H.interceptedTypeCheck(hero, "$isHero");
        return new B.RestAction();
      }
    },
    RunBehavior: {
      "^": "Behavior;firstStep,0openLeft,0openRight,direction",
      canPerform$1: function(hero) {
        var t1, t2, dirs, openDirs, nextLeft, nextRight;
        if (this.firstStep)
          return true;
        t1 = this.openLeft;
        if (t1 == null) {
          t1 = this.direction.get$rotateLeft45();
          t2 = this.direction;
          dirs = H.setRuntimeTypeInfo([t1, t2, t2.get$rotateRight45()], [Z.Direction]);
          if (C.JSArray_methods.contains$1(C.List_aAW, this.direction)) {
            C.JSArray_methods.add$1(dirs, this.direction.get$rotateLeft90());
            C.JSArray_methods.add$1(dirs, this.direction.get$rotateRight90());
          }
          t1 = H.getTypeArgumentByIndex(dirs, 0);
          openDirs = new H.WhereIterable(dirs, H.functionTypeCheck(new X.RunBehavior_canPerform_closure(this, hero), {func: 1, ret: P.bool, args: [t1]}), [t1]);
          if (!openDirs.get$iterator(openDirs).moveNext$0())
            return false;
          if (openDirs.get$length(openDirs) === 1) {
            this.openLeft = false;
            this.openRight = false;
            this.direction = openDirs.get$first(openDirs);
          } else {
            this.openLeft = this._isOpen$2(hero, this.direction.get$rotateLeft90());
            this.openRight = this._isOpen$2(hero, this.direction.get$rotateRight90());
          }
        } else if (!t1 && !this.openRight) {
          if (!this._runInPassage$1(hero))
            return false;
        } else {
          nextLeft = this._isOpen$2(hero, this.direction.get$rotateLeft45());
          nextRight = this._isOpen$2(hero, this.direction.get$rotateRight45());
          if (!(this.openLeft === nextLeft && this.openRight === nextRight))
            return false;
        }
        return this._shouldKeepRunning$1(hero);
      },
      getAction$1: function(hero) {
        H.interceptedTypeCheck(hero, "$isHero");
        this.firstStep = false;
        return new B.WalkAction(this.direction, true);
      },
      _runInPassage$1: function(hero) {
        var t1, t2, t3, openDirs;
        t1 = this.direction.get$rotateLeft90();
        t2 = this.direction.get$rotateLeft45();
        t3 = this.direction;
        t3 = H.setRuntimeTypeInfo([t1, t2, t3, t3.get$rotateRight45(), this.direction.get$rotateRight90()], [Z.Direction]);
        t2 = H.getTypeArgumentByIndex(t3, 0);
        openDirs = P.LinkedHashSet_LinkedHashSet$from(new H.WhereIterable(t3, H.functionTypeCheck(new X.RunBehavior__runInPassage_closure(this, hero), {func: 1, ret: P.bool, args: [t2]}), [t2]), t2);
        t1 = openDirs._collection$_length;
        if (t1 === 1) {
          this.direction = openDirs.get$first(openDirs);
          return true;
        }
        if (t1 !== 2)
          return false;
        if (!openDirs.contains$1(0, this.direction))
          return false;
        if (!openDirs.contains$1(0, this.direction.get$rotateLeft45()) && !openDirs.contains$1(0, this.direction.get$rotateRight45()))
          return false;
        t1 = hero.game._stage;
        t2 = hero._pos.$add(0, this.direction.$mul(0, 2));
        t2 = t1.tiles.$index(0, t2).type;
        t2.toString;
        t1 = $.$get$Motility_doorAndWalk();
        if ((t2.motility._bitMask & t1._bitMask) !== 0)
          return false;
        return true;
      },
      _shouldKeepRunning$1: function(hero) {
        var pos, stage, t1, t2;
        pos = hero._pos.$add(0, this.direction);
        stage = hero.game._stage;
        if (!hero.canEnter$1(pos))
          return false;
        t1 = stage.tiles;
        if (J.$eq$(t1.$index(0, pos).type.motility, $.$get$Motility_door()))
          return false;
        t2 = stage._actorsByTile;
        if (t2.$index(0, pos) != null)
          return false;
        if (t2.$index(0, pos.$add(0, this.direction.get$rotateLeft90())) != null)
          return false;
        if (t2.$index(0, pos.$add(0, this.direction.get$rotateLeft45())) != null)
          return false;
        if (t2.$index(0, pos.$add(0, this.direction)) != null)
          return false;
        if (t2.$index(0, pos.$add(0, this.direction.get$rotateRight45())) != null)
          return false;
        if (t2.$index(0, pos.$add(0, this.direction.get$rotateRight90())) != null)
          return false;
        if (t1.$index(0, pos).substance > 0)
          return false;
        return true;
      },
      _isOpen$2: function(hero, dir) {
        var t1, t2;
        t1 = hero.game._stage;
        t2 = hero._pos.$add(0, dir);
        t2 = t1.tiles.$index(0, t2).type;
        t2.toString;
        t1 = $.$get$Motility_doorAndWalk();
        return (t2.motility._bitMask & t1._bitMask) !== 0;
      }
    },
    RunBehavior_canPerform_closure: {
      "^": "Closure:1;$this,hero",
      call$1: function(dir) {
        return this.$this._isOpen$2(this.hero, H.interceptedTypeCheck(dir, "$isDirection"));
      }
    },
    RunBehavior__runInPassage_closure: {
      "^": "Closure:1;$this,hero",
      call$1: function(dir) {
        return this.$this._isOpen$2(this.hero, H.interceptedTypeCheck(dir, "$isDirection"));
      }
    }
  }], ["", "package:hauberk/src/engine/hero/hero.dart",, G, {
    "^": "",
    experienceLevel: function(experience) {
      var level, t1;
      for (level = 1; level <= 50; ++level) {
        t1 = G.experienceLevelCost(level);
        if (typeof experience !== "number")
          return experience.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (experience < t1)
          return level - 1;
      }
      return 50;
    },
    experienceLevelCost: function(level) {
      if (typeof level !== "number")
        return level.$gt();
      if (level > 50)
        return;
      return C.JSNumber_methods.toInt$0(Math.pow(level - 1, 3)) * 1000;
    },
    HeroSave: {
      "^": "Object;name>,race,heroClass,inventory,equipment,home,crucible,shops,experience,skills,gold,maxDepth,_lore"
    },
    Hero: {
      "^": "Actor;name>,race,heroClass,inventory,equipment,experience,strength,agility,fortitude,intellect,will,_hero$_heftScale,skills,gold,lore,_seenMonsters,0_behavior,_stomach,_focus,_lastNoise,_level,game,energy,haste,cold,poison,blindness,dazzle,resistances,_pos,0_health",
      get$nounText: function() {
        return "you";
      },
      get$pronoun: function() {
        return C.Pronoun_you_you_your;
      },
      get$maxHealth: function() {
        return this.fortitude.get$maxHealth();
      },
      get$motility: function() {
        return $.$get$Motility_doorAndWalk();
      },
      get$emanationLevel: function() {
        var t1, level;
        for (t1 = this.inventory._inventory$_items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), level = 0; t1.moveNext$0();)
          level = Math.max(level, t1.__interceptors$_current.type.emanationLevel);
        return level;
      },
      Hero$3: function(game, pos, save) {
        var t1;
        this.strength._hero = this;
        this.agility._hero = this;
        t1 = this.fortitude;
        t1._hero = this;
        this.intellect._hero = this;
        this.will._hero = this;
        this.energy.energy = 240;
        this.refreshProperties$0();
        this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t1.get$maxHealth(), 0, this.get$maxHealth()));
        for (t1 = this.inventory._inventory$_items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          this.gainItemSkills$1(t1.__interceptors$_current);
      },
      get$appearance: function(_) {
        return "hero";
      },
      get$needsInput: function() {
        var t1 = this._behavior;
        if (t1 != null && !t1.canPerform$1(this))
          this._behavior = null;
        return this._behavior == null;
      },
      get$armor: function() {
        var t1, t2, total, t3, t4, t5;
        for (t1 = this.equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, total = 0; t1.moveNext$0();) {
          t3 = t2.get$current();
          total += t3.type.armor + t3.get$armorModifier();
        }
        for (t1 = this.skills, t2 = t1.get$acquired(), t3 = J.get$iterator$ax(t2._iterable), t2 = new H.WhereIterator(t3, t2._f, [H.getTypeArgumentByIndex(t2, 0)]), t1 = t1._levels; t2.moveNext$0();) {
          t4 = t3.get$current();
          t5 = t1.$index(0, t4);
          total += t4.modifyArmor$2(this, t5 == null ? 0 : t5);
        }
        return total;
      },
      get$weight: function() {
        var t1, t2, total;
        for (t1 = this.equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, total = 0; t1.moveNext$0();)
          total += t2.get$current().get$weight();
        return total;
      },
      equipmentResistance$1: function(element) {
        var t1, t2, resistance;
        for (t1 = this.equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator, resistance = 0; t1.moveNext$0();)
          resistance += t2.get$current().resistance$1(element);
        return resistance;
      },
      gainItemSkills$1: function(item) {
        var t1, t2, t3, t4, t5, t6, _i, skill, t7, level;
        for (t1 = item.type.skills, t2 = t1.length, t3 = this.heroClass, t4 = this.skills, t5 = this.game, t6 = t4._points, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          skill = t1[_i];
          t3.toString;
          H.interceptedTypeCheck(skill, "$isSkill");
          t7 = t3._proficiency.$index(0, skill);
          if ((t7 == null ? 1 : t7) !== 0 && t4.discover$1(skill)) {
            skill.toString;
            t7 = t6.$index(0, skill);
            level = skill.onCalculateLevel$2(this, t7 == null ? 0 : t7);
            if (t4.gain$2(skill, level))
              t5.log.add$5(0, C.LogType_gain, skill.gainMessage$1(level), this, null, null);
            else
              t5.log.add$5(0, C.LogType_gain, skill.get$discoverMessage(), this, null, null);
          }
        }
      },
      get$baseSpeed: function() {
        return 6;
      },
      get$baseDodge: function() {
        return 20 + this.agility.get$dodgeBonus();
      },
      onGetDefenses$0: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, t3, t4, t5, defense;
          return function $async$onGetDefenses$0($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = $async$self.skills, t2 = t1.get$acquired(), t3 = J.get$iterator$ax(t2._iterable), t2 = new H.WhereIterator(t3, t2._f, [H.getTypeArgumentByIndex(t2, 0)]), t1 = t1._levels;
                case 2:
                  // for condition
                  if (!t2.moveNext$0()) {
                    // goto after for
                    $async$goto = 3;
                    break;
                  }
                  t4 = t3.get$current();
                  t5 = t1.$index(0, t4);
                  defense = t4.getDefense$2($async$self, t5 == null ? 0 : t5);
                  $async$goto = defense != null ? 4 : 5;
                  break;
                case 4:
                  // then
                  $async$goto = 6;
                  return defense;
                case 6:
                  // after yield
                case 5:
                  // join
                  // goto for condition
                  $async$goto = 2;
                  break;
                case 3:
                  // after for
                  // implicit return
                  return P._IterationMarker_endOfIteration();
                case 1:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
          };
        }, U.Defense);
      },
      onGetAction$0: function() {
        return this._behavior.getAction$1(this);
      },
      onCreateMeleeHit$1: function(defender) {
        var weapon, t1, hit, t2, t3, t4, t5;
        weapon = this.equipment.find$1(0, "weapon");
        if (weapon != null && weapon.type.attack.range <= 0) {
          t1 = weapon.type.attack;
          t1.toString;
          hit = new U.Hit(t1, 0, 1, 1, 0, $.$get$Element_none(), 1);
          t1 = this._hero$_heftScale;
          t1 = t1.modify$1(t1._value);
          if (typeof t1 !== "number")
            return H.iae(t1);
          hit._combat$_damageScale = t1;
        } else
          hit = new U.Hit(U.Attack$(this, "punch[es]", 3, null, null), 0, 1, 1, 0, $.$get$Element_none(), 1);
        hit._strikeBonus += this.agility.get$strikeBonus();
        for (t1 = this.skills, t2 = t1.get$acquired(), t3 = J.get$iterator$ax(t2._iterable), t2 = new H.WhereIterator(t3, t2._f, [H.getTypeArgumentByIndex(t2, 0)]), t1 = t1._levels; t2.moveNext$0();) {
          t4 = t3.get$current();
          H.interceptedTypeCast(defender, "$isMonster");
          t5 = t1.$index(0, t4);
          t4.modifyAttack$4(this, defender, hit, t5 == null ? 0 : t5);
        }
        return hit;
      },
      createRangedHit$0: function() {
        var t1, hit;
        t1 = this.equipment.find$1(0, "weapon").type.attack;
        t1.toString;
        hit = new U.Hit(t1, 0, 1, 1, 0, $.$get$Element_none(), 1);
        t1 = this._hero$_heftScale;
        t1 = t1.modify$1(t1._value);
        if (typeof t1 !== "number")
          return H.iae(t1);
        hit._combat$_damageScale = t1;
        this.modifyHit$2(hit, C.HitType_1);
        return hit;
      },
      onModifyHit$2: function(hit, type) {
        var t1, t2, t3, t4;
        switch (type) {
          case C.HitType_0:
            break;
          case C.HitType_1:
            break;
          case C.HitType_2:
            hit._rangeScale *= this.strength.get$tossRangeScale();
            break;
        }
        for (t1 = this.equipment, t1 = t1.get$iterator(t1), t2 = t1._iterator; t1.moveNext$0();) {
          t3 = t2.get$current();
          hit._strikeBonus += t3.get$strikeBonus();
          hit._combat$_damageScale *= t3.get$damageScale();
          hit._combat$_damageBonus += t3.get$damageBonus();
          t3 = t3.get$element();
          t4 = $.$get$Element_none();
          if (t3 == null ? t4 != null : t3 !== t4)
            hit._brand = t3;
        }
      },
      onGetResistance$1: function(element) {
        return this.equipmentResistance$1(element);
      },
      onTakeDamage$3: function(action, attacker, damage) {
        var t1, t2, t3, _i;
        t1 = this._focus;
        t2 = this.intellect;
        t3 = t2.modify$1(t2._value);
        H.checkNum(t3);
        t3 = C.JSInt_methods.$tdiv(C.JSNumber_methods.ceil$0(Math.pow(t3, 1.3) * 2) * damage * 2, this.fortitude.get$maxHealth());
        t2 = t2.modify$1(t2._value);
        H.checkNum(t2);
        this._focus = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - t3, 0, C.JSNumber_methods.ceil$0(Math.pow(t2, 1.3) * 2)));
        for (this.game.content, t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].takeDamage$2(this, damage);
      },
      onKilled$2: function(action, defender) {
        var t1, t2, t3, _i;
        H.interceptedTypeCast(defender, "$isMonster");
        if (!this._seenMonsters.contains$1(0, defender))
          return;
        t1 = defender.breed;
        this.lore.slay$1(t1);
        for (t2 = this.skills.get$discovered(), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t2[_i].killMonster$3(this, action, defender);
        t2 = this.experience;
        t1 = t1.get$experience();
        if (typeof t2 !== "number")
          return t2.$add();
        this.experience = t2 + t1;
        this.refreshProperties$0();
      },
      onDied$1: function(attackNoun) {
        this.game.log.add$5(0, C.LogType_message, "you were slain by {1}.", attackNoun, null, null);
      },
      onFinishTurn$1: function(action) {
        var t1;
        this._lastNoise = action.get$noise();
        t1 = this._stomach;
        if (t1 > 0) {
          t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(t1 - 1, 0, 400));
          this._stomach = t1;
          if (t1 === 0)
            this.game.log.add$5(0, C.LogType_message, "You are getting hungry.", null, null, null);
        }
      },
      changePosition$2: function(from, to) {
        this.super$Actor$changePosition(from, to);
        this.game._stage._lighting._visibilityDirty = true;
      },
      rest$0: function() {
        if (this.poison._turnsRemaining > 0) {
          this.game.log.add$5(0, C.LogType_error, "You cannot rest while poison courses through your veins!", null, null, null);
          return false;
        }
        if (this._health === this.fortitude.get$maxHealth()) {
          this.game.log.add$5(0, C.LogType_message, "You are fully rested.", null, null, null);
          return false;
        }
        if (this._stomach === 0) {
          this.game.log.add$5(0, C.LogType_error, "You are too hungry to rest.", null, null, null);
          return false;
        }
        this._behavior = new X.RestBehavior();
        return true;
      },
      seeMonster$1: function(monster) {
        var t1, t2, t3, _i, group, t4;
        if (this._seenMonsters.add$1(0, monster)) {
          t1 = this.lore;
          t2 = monster.breed;
          t1.see$1(t2);
          if (t1.seen$1(t2) === 1)
            for (t1 = t2.groups, t2 = t1.length, t3 = this.heroClass, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
              group = t1[_i];
              if (group.get$slaySkill() == null)
                continue;
              t4 = group.get$slaySkill();
              t4 = t3._proficiency.$index(0, t4);
              if ((t4 == null ? 1 : t4) === 0)
                continue;
              this.discoverSkill$1(group.get$slaySkill());
            }
        }
      },
      refreshProperties$0: function() {
        var level, t1, t2, heft;
        level = G.experienceLevel(this.experience);
        this._level.update$2(0, level, new G.Hero_refreshProperties_closure(this, level));
        t1 = this.strength;
        t1.refresh$0();
        this.agility.refresh$0();
        this.fortitude.refresh$0();
        this.intellect.refresh$0();
        this.will.refresh$0();
        t2 = this.equipment.find$1(0, "weapon");
        t2 = t2 == null ? null : t2.get$heft();
        heft = t1.heftScale$1(t2 == null ? 0 : t2);
        this._hero$_heftScale.update$2(0, heft, new G.Hero_refreshProperties_closure0(this, heft));
        C.JSArray_methods.forEach$1(this.skills.get$discovered(), this.get$refreshSkill());
      },
      discoverSkill$1: function(skill) {
        if (!this.skills.discover$1(skill))
          return;
        this.game.log.add$5(0, C.LogType_gain, skill.get$discoverMessage(), this, null, null);
      },
      refreshSkill$1: [function(skill) {
        var t1, level;
        H.interceptedTypeCheck(skill, "$isSkill");
        skill.toString;
        t1 = this.skills;
        level = skill.onCalculateLevel$2(this, t1.points$1(0, skill));
        if (t1.gain$2(skill, level))
          this.game.log.add$5(0, C.LogType_gain, skill.gainMessage$1(level), this, null, null);
      }, "call$1", "get$refreshSkill", 4, 0, 86],
      static: {
        Hero$: function(game, pos, save) {
          var t1, t2, t3, t4, t5, t6, t7, t8, t9;
          t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, B.Monster);
          t2 = save.inventory.clone$0(0);
          t3 = save.equipment.clone$0(0);
          t4 = save.experience;
          t5 = save.skills.clone$0(0);
          t6 = save.gold;
          t7 = save._lore.clone$0(0);
          t8 = pos.x;
          t9 = pos.y;
          t1 = new G.Hero(save.name, save.race, save.heroClass, t2, t3, t4, new D.Strength(), new D.Agility(), new D.Fortitude(), new D.Intellect(), new D.Will(), new D.Property([P.double]), t5, t6, t7, t1, 200, 400, 0, new D.Property([P.int]), game, new Y.Energy(0), new E.HasteCondition(0, 0), new E.ColdCondition(0, 0), new E.PoisonCondition(0, 0), new E.BlindnessCondition(0, 0), new E.BlindnessCondition(0, 0), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, E.ResistCondition), new L.Vec(t8, t9));
          t1.Actor$3(game, t8, t9);
          t1.Hero$3(game, pos, save);
          return t1;
        }
      }
    },
    Hero_refreshProperties_closure: {
      "^": "Closure:6;$this,level",
      call$1: function(previous) {
        H.intTypeCheck(previous);
        this.$this.game.log.add$5(0, C.LogType_gain, "You have reached level " + this.level + ".", null, null, null);
      }
    },
    Hero_refreshProperties_closure0: {
      "^": "Closure:87;$this,heft",
      call$1: function(previous) {
        var t1 = this.heft;
        if (t1 < 1 && previous >= 1)
          this.$this.game.log.add$5(0, C.LogType_error, "You are too weak to effectively wield your weapon.", null, null, null);
        else if (t1 >= 1 && previous < 1)
          this.$this.game.log.add$5(0, C.LogType_message, "You feel comfortable wielding your weapon.", null, null, null);
      }
    }
  }], ["", "package:hauberk/src/engine/hero/hero_class.dart",, T, {
    "^": "",
    HeroClass: {
      "^": "Object;name>,description,_proficiency,startingItems",
      proficiency$1: function(skill) {
        var t1 = this._proficiency.$index(0, skill);
        return t1 == null ? 1 : t1;
      }
    }
  }], ["", "package:hauberk/src/engine/hero/lore.dart",, V, {
    "^": "",
    Lore: {
      "^": "Object;_seen,_slain",
      see$1: function(breed) {
        var t1 = this._seen;
        t1.putIfAbsent$2(0, breed, new V.Lore_see_closure());
        t1.$indexSet(0, breed, J.$add$ansx(t1.$index(0, breed), 1));
      },
      slay$1: function(breed) {
        var t1 = this._slain;
        t1.putIfAbsent$2(0, breed, new V.Lore_slay_closure());
        t1.$indexSet(0, breed, J.$add$ansx(t1.$index(0, breed), 1));
      },
      seen$1: function(breed) {
        var t1 = this._seen.$index(0, breed);
        return t1 == null ? 0 : t1;
      },
      slain$1: function(breed) {
        var t1 = this._slain.$index(0, breed);
        return t1 == null ? 0 : t1;
      },
      clone$0: function(_) {
        var t1, t2;
        t1 = B.Breed;
        t2 = P.int;
        return new V.Lore(P.LinkedHashMap_LinkedHashMap$from(this._seen, t1, t2), P.LinkedHashMap_LinkedHashMap$from(this._slain, t1, t2));
      }
    },
    Lore_see_closure: {
      "^": "Closure:15;",
      call$0: function() {
        return 0;
      }
    },
    Lore_slay_closure: {
      "^": "Closure:15;",
      call$0: function() {
        return 0;
      }
    }
  }], ["", "package:hauberk/src/engine/hero/race.dart",, N, {
    "^": "",
    Race: {
      "^": "Object;name>,description,stats",
      rollStats$0: function() {
        var rolled, t1, t2, t3, base, t4, value, t5;
        rolled = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
        for (t1 = this.stats, t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          base = t1.$index(0, t3);
          t4 = $.$get$rng();
          t4 = t4._random.nextInt$1(4);
          if (typeof base !== "number")
            return base.$add();
          value = base + t4;
          t4 = (base / 2 | 0) + 30;
          while (true) {
            if (value < 50) {
              t5 = $.$get$rng();
              t5 = t5._random.nextInt$1(100) < t4;
            } else
              t5 = false;
            if (!t5)
              break;
            ++value;
          }
          rolled.$indexSet(0, t3, value);
        }
        return N.RaceStats$(this, rolled, $.$get$rng().range$1(100000));
      }
    },
    RaceStats: {
      "^": "Object;_race,_max,seed,_stats",
      RaceStats$3: function(_race, _max, seed) {
        var t1, t2, min, current, t3, t4, totalMin, totalMax, t5, t6, random, previous, level, lerp, points, gained, point, worstStats, worstError, t7, ideal, t8, error, max, stat;
        t1 = D.Stat;
        t2 = P.int;
        min = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        current = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        for (t3 = this._max, t4 = t3.get$keys(t3), t4 = t4.get$iterator(t4), totalMin = 0, totalMax = 0; t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = t3.$index(0, t5);
          if (typeof t6 !== "number")
            return t6.$tdiv();
          min.$indexSet(0, t5, 10 + C.JSInt_methods._tdivFast$1(t6, 15));
          t6 = min.$index(0, t5);
          if (typeof t6 !== "number")
            return H.iae(t6);
          totalMin += t6;
          t6 = t3.$index(0, t5);
          if (typeof t6 !== "number")
            return H.iae(t6);
          totalMax += t6;
          current.$indexSet(0, t5, 0);
        }
        random = new N.Rng();
        t4 = P._Random$(this.seed);
        random._random = t4;
        for (t4 = this._stats, t5 = [t1], previous = 0, level = 0; level < 50; ++level, previous = points) {
          lerp = new N.RaceStats_lerp(level);
          points = J.toInt$0$n(lerp.call$2(totalMin, totalMax));
          gained = points - previous;
          for (point = 0; point < gained; ++point) {
            worstStats = H.setRuntimeTypeInfo([], t5);
            for (t6 = t3.get$keys(t3), t6 = t6.get$iterator(t6), worstError = -100; t6.moveNext$0();) {
              t7 = t6.get$current();
              ideal = lerp.call$2(min.$index(0, t7), t3.$index(0, t7));
              t8 = current.$index(0, t7);
              if (typeof ideal !== "number")
                return ideal.$sub();
              if (typeof t8 !== "number")
                return H.iae(t8);
              error = ideal - t8;
              if (error > worstError) {
                worstStats = H.setRuntimeTypeInfo([t7], t5);
                worstError = error;
              } else if (error === worstError)
                C.JSArray_methods.add$1(worstStats, t7);
            }
            H.assertSubtype(worstStats, "$isList", t5, "$asList");
            max = worstStats.length;
            t6 = random._random.nextInt$1(max - 0);
            if (t6 < 0 || t6 >= worstStats.length)
              return H.ioore(worstStats, t6);
            stat = worstStats[t6];
            current.$indexSet(0, stat, J.$add$ansx(current.$index(0, stat), 1));
          }
          C.JSArray_methods.add$1(t4, P.LinkedHashMap_LinkedHashMap$from(current, t1, t2));
        }
      },
      get$name: function(_) {
        return this._race.name;
      },
      static: {
        RaceStats$: function(_race, _max, seed) {
          var t1 = new N.RaceStats(_race, _max, seed, H.setRuntimeTypeInfo([], [[P.Map, D.Stat, P.int]]));
          t1.RaceStats$3(_race, _max, seed);
          return t1;
        }
      }
    },
    RaceStats_lerp: {
      "^": "Closure:88;level",
      call$2: function(from, to) {
        var t = this.level / 49;
        if (typeof from !== "number")
          return H.iae(from);
        if (typeof to !== "number")
          return H.iae(to);
        return (1 - t) * from + t * to;
      }
    }
  }], ["", "package:hauberk/src/engine/hero/skill.dart",, M, {
    "^": "",
    Skill: {
      "^": "Object;",
      get$useName: function() {
        return this.get$name(this);
      },
      takeDamage$2: function(hero, damage) {
      },
      killMonster$3: function(hero, action, monster) {
      },
      modifyAttack$4: function(hero, monster, hit, level) {
      },
      modifyArmor$2: function(hero, level) {
        return 0;
      },
      getDefense$2: function(hero, level) {
        return;
      },
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._sortOrder, H.interceptedTypeCheck(other, "$isSkill")._sortOrder);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [M.Skill];
      }
    },
    UsableSkill: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [M.Skill];
      },
      $isSkill: 1
    },
    TargetSkill: {
      "^": "Object;"
    },
    Discipline: {
      "^": "Skill;",
      gainMessage$1: function(level) {
        return "You have reached level " + level + " in " + this.get$name(this) + ".";
      },
      get$discoverMessage: function() {
        return "{1} can begin training in " + this.get$name(this) + ".";
      },
      onCalculateLevel$2: function(hero, points) {
        var training, level, t1;
        training = hero.skills.points$1(0, this);
        for (level = 1; level <= this.get$maxLevel(); ++level) {
          t1 = this.trainingNeeded$2(hero.heroClass, level);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (training < t1)
            return level - 1;
        }
        return this.get$maxLevel();
      },
      percentUntilNext$1: function(hero) {
        var t1, level, points, current, next;
        t1 = hero.skills;
        level = this.onCalculateLevel$2(hero, t1.points$1(0, this));
        if (level === this.get$maxLevel())
          return;
        points = t1.points$1(0, this);
        t1 = hero.heroClass;
        current = this.trainingNeeded$2(t1, level);
        next = this.trainingNeeded$2(t1, level + 1);
        if (typeof current !== "number")
          return H.iae(current);
        if (typeof next !== "number")
          return next.$sub();
        return C.JSInt_methods.$tdiv(100 * (points - current), next - current);
      },
      trainingNeeded$2: function(heroClass, level) {
        var profiency = heroClass.proficiency$1(this);
        if (profiency === 0)
          return;
        return C.JSDouble_methods.ceil$0(this.baseTrainingNeeded$1(level) / profiency);
      }
    },
    Spell: {
      "^": "Skill;",
      gainMessage$1: function(level) {
        return "{1} have learned the spell " + this.get$name(this) + ".";
      },
      get$discoverMessage: function() {
        return "{1} are not wise enough to cast " + this.get$name(this) + ".";
      },
      get$maxLevel: function() {
        return 1;
      },
      get$damage: function() {
        return;
      },
      get$range: function() {
        return;
      },
      onCalculateLevel$2: function(hero, points) {
        var t1, t2;
        t1 = hero.heroClass;
        if (t1.proficiency$1(this) === 0)
          return 0;
        t2 = hero.intellect;
        t2 = t2.modify$1(t2._value);
        t1 = this.complexity$1(t1);
        if (typeof t2 !== "number")
          return t2.$ge();
        return t2 >= t1 ? 1 : 0;
      },
      focusCost$1: function(hero) {
        return C.JSDouble_methods.round$0(this.get$baseFocusCost() / hero.heroClass.proficiency$1(this));
      },
      complexity$1: function(heroClass) {
        return C.JSDouble_methods.round$0((this.get$baseComplexity() - 9) / heroClass.proficiency$1(this)) + 9;
      },
      unusableReason$1: function(game) {
        return;
      },
      getRange$1: function(_, game) {
        return this.get$range();
      },
      getTargetAction$3: function(game, level, target) {
        var action = this.onGetTargetAction$2(game, target);
        return new V.FocusAction(this.focusCost$1(game.hero), action);
      },
      onGetTargetAction$2: function(game, target) {
        return;
      },
      getAction$2: function(game, level) {
        var action = this.onGetAction$1(game);
        return new V.FocusAction(this.focusCost$1(game.hero), action);
      },
      onGetAction$1: function(game) {
        return;
      },
      $isUsableSkill: 1
    },
    SkillSet: {
      "^": "Object;_levels,_points",
      get$discovered: function() {
        var t1 = this._levels;
        t1 = t1.get$keys(t1);
        t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.sort$0(t1);
        return t1;
      },
      get$acquired: function() {
        var t1, t2;
        t1 = this._levels;
        t1 = t1.get$keys(t1);
        t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        return new H.WhereIterable(t1, H.functionTypeCheck(new M.SkillSet_acquired_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      },
      level$1: function(skill) {
        var t1 = this._levels.$index(0, skill);
        return t1 == null ? 0 : t1;
      },
      points$1: function(_, skill) {
        var t1 = this._points.$index(0, skill);
        return t1 == null ? 0 : t1;
      },
      earnPoints$2: function(skill, points) {
        this._points.$indexSet(0, skill, points + this.points$1(0, skill));
      },
      discover$1: function(skill) {
        var t1 = this._levels;
        if (t1.containsKey$1(0, skill))
          return false;
        t1.$indexSet(0, skill, 0);
        return true;
      },
      gain$2: function(skill, level) {
        var t1;
        level = Math.min(level, skill.get$maxLevel());
        t1 = this._levels;
        if (J.$eq$(t1.$index(0, skill), level))
          return false;
        if (level === 0 && !t1.containsKey$1(0, skill))
          return false;
        t1.$indexSet(0, skill, level);
        return true;
      },
      isAcquired$1: function(skill) {
        var t1;
        H.interceptedTypeCheck(skill, "$isSkill");
        t1 = this._levels;
        return t1.containsKey$1(0, skill) && J.$gt$n(t1.$index(0, skill), 0);
      },
      clone$0: function(_) {
        var t1, t2;
        t1 = M.Skill;
        t2 = P.int;
        return new M.SkillSet(P.LinkedHashMap_LinkedHashMap$from(this._levels, t1, t2), P.LinkedHashMap_LinkedHashMap$from(this._points, t1, t2));
      }
    },
    SkillSet_acquired_closure: {
      "^": "Closure:89;$this",
      call$1: function(skill) {
        return J.$gt$n(this.$this._levels.$index(0, H.interceptedTypeCheck(skill, "$isSkill")), 0);
      }
    }
  }], ["", "package:hauberk/src/engine/hero/stat.dart",, D, {
    "^": "",
    Property: {
      "^": "Object;0_value,$ti",
      modify$1: function(base) {
        return H.assertSubtypeOfRuntimeType(base, H.getRuntimeTypeArgument(this, "Property", 0));
      },
      update$2: function(_, value, onChange) {
        var t1 = H.getRuntimeTypeArgument(this, "Property", 0);
        H.assertSubtypeOfRuntimeType(value, t1);
        H.functionTypeCheck(onChange, {func: 1, args: [t1]});
        t1 = this._value;
        if (t1 === value)
          return;
        this._value = value;
        if (t1 != null)
          onChange.call$1(t1);
      }
    },
    Stat: {
      "^": "Object;name>"
    },
    StatBase: {
      "^": "Property;",
      get$name: function(_) {
        return this.get$_stat().name;
      },
      refresh$0: function() {
        var t1, t2, t3;
        t1 = this._hero.race;
        t2 = this.get$_stat();
        t3 = this._hero._level;
        t3 = t3.modify$1(t3._value);
        t1 = t1._stats;
        if (typeof t3 !== "number")
          return t3.$sub();
        --t3;
        if (t3 < 0 || t3 >= t1.length)
          return H.ioore(t1, t3);
        t2 = H.intTypeCheck(J.clamp$2$n(t1[t3].$index(0, t2), 1, 60));
        this.update$2(0, t2, new D.StatBase_refresh_closure(this, t2));
      },
      $asProperty: function() {
        return [P.int];
      }
    },
    StatBase_refresh_closure: {
      "^": "Closure:6;$this,newValue",
      call$1: function(previous) {
        var gain, t1, t2;
        gain = this.newValue - H.intTypeCheck(previous);
        t1 = this.$this;
        t2 = t1._hero;
        if (gain > 0)
          t2.game.log.add$5(0, C.LogType_gain, "You feel " + t1.get$_gainAdjective() + "! Your " + t1.get$_stat().name + " increased by " + H.S(gain) + ".", null, null, null);
        else
          t2.game.log.add$5(0, C.LogType_error, "You feel " + t1.get$_loseAdjective() + "! Your " + t1.get$_stat().name + " decreased by " + H.S(-gain) + ".", null, null, null);
      }
    },
    Strength: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Strength;
      },
      get$_gainAdjective: function() {
        return "mighty";
      },
      get$_loseAdjective: function() {
        return "weak";
      },
      modify$1: function(base) {
        var t1;
        H.intTypeCheck(base);
        t1 = this._hero;
        if (t1 == null)
          return base;
        t1 = t1.get$weight();
        if (typeof base !== "number")
          return base.$sub();
        return H.intTypeCheck(C.JSInt_methods.clamp$2(base - t1, 1, 60));
      },
      get$tossRangeScale: function() {
        var t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 20)
          return E.lerpDouble(this.modify$1(this._value), 1, 20, 0.1, 1);
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 30)
          return E.lerpDouble(this.modify$1(this._value), 20, 30, 1, 1.5);
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 40)
          return E.lerpDouble(this.modify$1(this._value), 30, 40, 1.5, 1.8);
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 50)
          return E.lerpDouble(this.modify$1(this._value), 40, 50, 1.8, 2);
        return E.lerpDouble(this.modify$1(this._value), 50, 60, 2, 2.1);
      },
      heftScale$1: function(heft) {
        var t1, relative;
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$sub();
        relative = C.JSInt_methods.clamp$2(t1 - heft, -20, 50);
        if (relative < -10)
          return E.lerpDouble(relative, -20, -10, 0.05, 0.3);
        if (relative < 0)
          return E.lerpDouble(relative, -10, -1, 0.3, 0.8);
        if (relative < 30)
          return E.lerpDouble(relative, 0, 30, 1, 2);
        return E.lerpDouble(relative, 30, 50, 2, 3);
      }
    },
    Agility: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Agility;
      },
      get$_gainAdjective: function() {
        return "dextrous";
      },
      get$_loseAdjective: function() {
        return "clumsy";
      },
      get$dodgeBonus: function() {
        var t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 10)
          return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 1, 10, -50, 0));
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 30)
          return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 10, 30, 0, 30));
        return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 30, 60, 30, 60));
      },
      get$strikeBonus: function() {
        var t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 10)
          return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 1, 10, -30, 0));
        t1 = this.modify$1(this._value);
        if (typeof t1 !== "number")
          return t1.$le();
        if (t1 <= 30)
          return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 10, 30, 0, 20));
        return C.JSNumber_methods.round$0(E.lerpDouble(this.modify$1(this._value), 30, 60, 20, 50));
      }
    },
    Fortitude: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Fortitude;
      },
      get$_gainAdjective: function() {
        return "tough";
      },
      get$_loseAdjective: function() {
        return "sickly";
      },
      get$maxHealth: function() {
        var t1, t2;
        t1 = this.modify$1(this._value);
        H.checkNum(t1);
        t1 = Math.pow(t1, 1.4);
        t2 = this.modify$1(this._value);
        if (typeof t2 !== "number")
          return H.iae(t2);
        return C.JSNumber_methods.toInt$0(t1 + 1.23 * t2 + 18);
      }
    },
    Intellect: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Intellect;
      },
      get$_gainAdjective: function() {
        return "smart";
      },
      get$_loseAdjective: function() {
        return "stupid";
      }
    },
    Will: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Will;
      },
      get$_gainAdjective: function() {
        return "invincible";
      },
      get$_loseAdjective: function() {
        return "foolish";
      }
    }
  }], ["", "package:hauberk/src/engine/items/equipment.dart",, E, {
    "^": "",
    Equipment: {
      "^": "_Equipment_IterableBase_ItemCollection;slotTypes<,slots<",
      get$location: function(_) {
        return C.ItemLocation_A8D;
      },
      get$length: function(_) {
        return C.JSArray_methods.fold$1$2(this.slots, 0, new E.Equipment_length_closure(), P.int);
      },
      $index: function(_, index) {
        var t1, i, t2;
        H.intTypeCheck(index);
        for (t1 = this.slots, i = 0; i < 9; ++i) {
          t2 = t1[i];
          if (t2 != null) {
            if (index === 0)
              return t2;
            --index;
          }
        }
        throw H.wrapException("unreachable");
      },
      clone$0: function(_) {
        var equipment, t1, t2, i, t3, t4, t5;
        equipment = E.Equipment$();
        for (t1 = this.slots, t2 = equipment.slots, i = 0; i < 9; ++i) {
          t3 = t1[i];
          if (t3 != null) {
            t4 = t3.type;
            t5 = t3._count;
            C.JSArray_methods.$indexSet(t2, i, new R.Item(t4, t3.prefix, t3.suffix, t5));
          }
        }
        return equipment;
      },
      find$1: function(_, slotType) {
        var t1, i;
        for (t1 = this.slotTypes, i = 0; i < 9; ++i)
          if (t1[i] === slotType)
            return this.slots[i];
        throw H.wrapException('Unknown equipment slot type "' + H.S(slotType) + '".');
      },
      canEquip$1: function(item) {
        return C.JSArray_methods.any$1(this.slotTypes, new E.Equipment_canEquip_closure(item));
      },
      countChanged$0: function() {
      },
      equip$1: function(item) {
        var t1, i, unequipped;
        for (t1 = this.slotTypes, i = 0; i < 9; ++i)
          if (t1[i] === item.type.equipSlot) {
            t1 = this.slots;
            unequipped = t1[i];
            C.JSArray_methods.$indexSet(t1, i, item);
            return unequipped;
          }
        throw H.wrapException("unreachable");
      },
      remove$1: function(_, item) {
        var t1, i, t2;
        for (t1 = this.slots, i = 0; i < 9; ++i) {
          t2 = t1[i];
          if (t2 == null ? item == null : t2 === item) {
            C.JSArray_methods.$indexSet(t1, i, null);
            break;
          }
        }
      },
      get$iterator: function(_) {
        var t1, t2, t3;
        t1 = this.slots;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.functionTypeCheck(new E.Equipment_iterator_closure(), {func: 1, ret: P.bool, args: [t2]});
        return new H.WhereIterator(C.JSArray_methods.get$iterator(t1), t3, [t2]);
      },
      $asIterable: function() {
        return [R.Item];
      },
      static: {
        Equipment$: function() {
          var t1 = new Array(9);
          t1.fixed$length = Array;
          return new E.Equipment(C.List_tBY, H.setRuntimeTypeInfo(t1, [R.Item]));
        }
      }
    },
    Equipment_length_closure: {
      "^": "Closure:136;",
      call$2: function(count, item) {
        var t1;
        H.intTypeCheck(count);
        t1 = H.interceptedTypeCheck(item, "$isItem") == null ? 0 : 1;
        if (typeof count !== "number")
          return count.$add();
        return count + t1;
      }
    },
    Equipment_canEquip_closure: {
      "^": "Closure:22;item",
      call$1: function(slot) {
        var t1;
        H.stringTypeCheck(slot);
        t1 = this.item.type.equipSlot;
        return t1 == null ? slot == null : t1 === slot;
      }
    },
    Equipment_iterator_closure: {
      "^": "Closure:20;",
      call$1: function(item) {
        return H.interceptedTypeCheck(item, "$isItem") != null;
      }
    },
    _Equipment_IterableBase_ItemCollection: {
      "^": "IterableBase+ItemCollection;"
    }
  }], ["", "package:hauberk/src/engine/items/inventory.dart",, O, {
    "^": "",
    ItemLocation: {
      "^": "Object;name>,emptyDescription"
    },
    ItemCollection: {
      "^": "Object;",
      get$name: function(_) {
        return this.get$location(this).name;
      },
      get$slotTypes: function() {
        return C.List_empty;
      },
      get$slots: function() {
        return this;
      }
    },
    Inventory: {
      "^": "_Inventory_IterableMixin_ItemCollection;location>,_inventory$_items,_capacity,0_lastUnequipped",
      get$length: function(_) {
        return this._inventory$_items.length;
      },
      $index: function(_, index) {
        var t1;
        H.intTypeCheck(index);
        t1 = this._inventory$_items;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      clone$0: function(_) {
        var t1, t2, t3;
        t1 = this._inventory$_items;
        t2 = R.Item;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        return O.Inventory$(this.location, this._capacity, new H.MappedListIterable(t1, H.functionTypeCheck(new O.Inventory_clone_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]));
      },
      remove$1: function(_, item) {
        C.JSArray_methods.remove$1(this._inventory$_items, item);
      },
      canAdd$1: function(item) {
        var t1, remaining, t2, _i, existing, t3, t4;
        t1 = this._capacity;
        if (t1 == null || this._inventory$_items.length < t1 - 1)
          return true;
        remaining = item._count;
        for (t1 = this._inventory$_items, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          existing = t1[_i];
          if (existing.canStack$1(item)) {
            t3 = J.get$type$x(existing).maxStack;
            t4 = existing.get$_count();
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (typeof remaining !== "number")
              return remaining.$sub();
            remaining -= t3 - t4;
            if (remaining <= 0)
              return true;
          }
        }
        return false;
      },
      tryAdd$2$wasUnequipped: [function(item, wasUnequipped) {
        var adding, t1, t2, t3, _i, t4;
        adding = item._count;
        for (t1 = this._inventory$_items, t2 = t1.length, t3 = adding, _i = 0; t4 = t1.length, _i < t4; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t1[_i].stack$1(item);
          t3 = item._count;
          if (t3 === 0)
            return new O.AddItemResult(adding, 0);
        }
        t2 = this._capacity;
        if (t2 != null && t4 >= t2) {
          if (typeof adding !== "number")
            return adding.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          return new O.AddItemResult(adding - t3, t3);
        }
        C.JSArray_methods.add$1(t1, item);
        C.JSArray_methods.sort$0(t1);
        if (wasUnequipped)
          this._lastUnequipped = item;
        return new O.AddItemResult(adding, 0);
      }, function(item) {
        return this.tryAdd$2$wasUnequipped(item, false);
      }, "tryAdd$1", "call$2$wasUnequipped", "call$1", "get$tryAdd", 4, 3, 92],
      countChanged$0: function() {
        var t1, items, _i;
        t1 = this._inventory$_items;
        items = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
        C.JSArray_methods.set$length(t1, 0);
        for (t1 = items.length, _i = 0; _i < items.length; items.length === t1 || (0, H.throwConcurrentModificationError)(items), ++_i)
          this.tryAdd$1(items[_i]);
      },
      get$iterator: function(_) {
        var t1 = this._inventory$_items;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asIterableMixin: function() {
        return [R.Item];
      },
      $asIterable: function() {
        return [R.Item];
      },
      static: {
        Inventory$: function($location, _capacity, items) {
          var t1 = H.setRuntimeTypeInfo([], [R.Item]);
          if (items != null)
            C.JSArray_methods.addAll$1(t1, items);
          return new O.Inventory($location, t1, _capacity);
        }
      }
    },
    Inventory_clone_closure: {
      "^": "Closure:93;",
      call$1: [function(item) {
        return H.interceptedTypeCheck(item, "$isItem").clone$0(0);
      }, null, null, 4, 0, null, 41, "call"]
    },
    AddItemResult: {
      "^": "Object;added,remaining"
    },
    _Inventory_IterableMixin_ItemCollection: {
      "^": "IterableMixin+ItemCollection;"
    }
  }], ["", "package:hauberk/src/engine/items/item.dart",, R, {
    "^": "",
    Item: {
      "^": "Object;type>,prefix<,suffix<,_count@",
      get$appearance: function(_) {
        return this.type.appearance;
      },
      get$element: function() {
        var result, t1, result0, t2;
        result = $.$get$Element_none();
        t1 = this.type.attack;
        result0 = t1 != null ? t1.element : result;
        t1 = this.prefix;
        if (t1 != null) {
          t2 = t1.brand;
          t2 = t2 == null ? result != null : t2 !== result;
        } else
          t2 = false;
        if (t2)
          result0 = t1.brand;
        t1 = this.suffix;
        if (t1 != null) {
          t2 = t1.brand;
          t2 = t2 == null ? result != null : t2 !== result;
        } else
          t2 = false;
        return t2 ? t1.brand : result0;
      },
      get$strikeBonus: function() {
        var t1, result;
        t1 = this.prefix;
        result = t1 != null ? t1.strikeBonus : 0;
        t1 = this.suffix;
        return t1 != null ? result + t1.strikeBonus : result;
      },
      get$damageScale: function() {
        var t1, result;
        t1 = this.prefix;
        result = t1 != null ? t1.damageScale : 1;
        t1 = this.suffix;
        return t1 != null ? result * t1.damageScale : result;
      },
      get$damageBonus: function() {
        var t1, result;
        t1 = this.prefix;
        result = t1 != null ? t1.damageBonus : 0;
        t1 = this.suffix;
        return t1 != null ? result + t1.damageBonus : result;
      },
      get$armorModifier: function() {
        var t1, result;
        t1 = this.prefix;
        result = t1 != null ? t1.armor : 0;
        t1 = this.suffix;
        return t1 != null ? result + t1.armor : result;
      },
      get$nounText: function() {
        var $name, t1, t2, text, quantity;
        $name = this.type.quantifiableName;
        t1 = this.prefix;
        if (t1 != null)
          $name = t1.name + " " + H.S($name);
        t1 = this.suffix;
        if (t1 != null)
          $name = H.S($name) + " " + t1.name;
        t1 = this._count;
        t2 = t1 === 1;
        if (t2)
          if (J.getInterceptor$s($name).startsWith$1($name, "(a) ")) {
            text = C.JSString_methods.substring$1($name, 4);
            quantity = "a";
          } else {
            if (0 >= $name.length)
              return H.ioore($name, 0);
            quantity = C.JSString_methods.contains$1("aeiouAEIOU", $name[0]) ? "an" : "a";
            text = $name;
          }
        else {
          quantity = J.toString$0$(t1);
          text = $name;
        }
        return quantity + " " + H.S(O.Log__categorize(text, true, t2));
      },
      get$pronoun: function() {
        return C.Pronoun_it_it_its;
      },
      get$price: function() {
        var price, t1, t2, t3, t4, t5;
        price = this.type.price;
        price.toString;
        t1 = this.prefix;
        t2 = t1 != null;
        if (t2) {
          t3 = t1.priceScale;
          if (typeof price !== "number")
            return price.$mul();
          price *= t3;
        }
        t3 = this.suffix;
        t4 = t3 != null;
        if (t4) {
          t5 = t3.priceScale;
          if (typeof price !== "number")
            return price.$mul();
          price *= t5;
        }
        if (t2) {
          t1 = t1.priceBonus;
          if (typeof price !== "number")
            return price.$add();
          price += t1;
        }
        if (t4) {
          t1 = t3.priceBonus;
          if (typeof price !== "number")
            return price.$add();
          price += t1;
        }
        return J.ceil$0$n(price);
      },
      get$weight: function() {
        var result, t1;
        result = this.type.weight;
        t1 = this.prefix;
        if (t1 != null)
          result += t1.weightBonus;
        t1 = this.suffix;
        if (t1 != null)
          result += t1.weightBonus;
        return Math.max(0, result);
      },
      get$heft: function() {
        var result, t1;
        result = this.type.heft;
        t1 = this.prefix;
        if (t1 != null)
          result *= t1.heftScale;
        t1 = this.suffix;
        return C.JSNumber_methods.round$0(t1 != null ? result * t1.heftScale : result);
      },
      get$count: function() {
        return this._count;
      },
      resistance$1: function(element) {
        var t1, resistance;
        t1 = this.prefix;
        if (t1 != null) {
          t1 = t1.resistance$1(element);
          if (typeof t1 !== "number")
            return H.iae(t1);
          resistance = t1;
        } else
          resistance = 0;
        t1 = this.suffix;
        if (t1 != null) {
          t1 = t1.resistance$1(element);
          if (typeof t1 !== "number")
            return H.iae(t1);
          resistance += t1;
        }
        return resistance;
      },
      compareTo$1: function(_, other) {
        var t1, t2;
        H.interceptedTypeCheck(other, "$isItem");
        t1 = this.type.sortIndex;
        t2 = other.type.sortIndex;
        if (t1 !== t2)
          return C.JSInt_methods.compareTo$1(t1, t2);
        t1 = this._count;
        t2 = other._count;
        if (t1 == null ? t2 != null : t1 !== t2)
          return J.compareTo$1$ns(t2, t1);
        return 0;
      },
      clone$1: function(_, count) {
        var t1 = count == null ? this._count : count;
        return new R.Item(this.type, this.prefix, this.suffix, t1);
      },
      clone$0: function($receiver) {
        return this.clone$1($receiver, null);
      },
      canStack$1: function(item) {
        var t1, t2;
        t1 = this.type;
        t2 = item.type;
        if (t1 == null ? t2 != null : t1 !== t2)
          return false;
        if (this.prefix != null || item.prefix != null)
          return false;
        if (this.suffix != null || item.suffix != null)
          return false;
        return true;
      },
      stack$1: function(item) {
        var t1, t2, total;
        if (!this.canStack$1(item))
          return;
        t1 = this._count;
        t2 = item._count;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        total = t1 + t2;
        t1 = this.type.maxStack;
        if (total <= t1) {
          this._count = total;
          item._count = 0;
        } else {
          this._count = t1;
          item._count = total - t1;
        }
      },
      splitStack$1: function(count) {
        var t1 = this._count;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof count !== "number")
          return H.iae(count);
        this._count = t1 - count;
        return this.clone$1(0, count);
      },
      toString$0: function(_) {
        return this.get$nounText();
      },
      $isComparable: 1,
      $asComparable: function() {
        return [R.Item];
      },
      $isNoun: 1
    }
  }], ["", "package:hauberk/src/engine/items/item_type.dart",, L, {
    "^": "",
    Drop: {
      "^": "Object;"
    },
    Toss: {
      "^": "Object;breakage,attack,use"
    },
    ItemType: {
      "^": "Object;quantifiableName,appearance>,depth<,sortIndex,equipSlot,weaponType,use,attack,toss,armor,price<,weight,heft,emanationLevel,isTreasure,maxStack,destroyChance,fuel,skills",
      get$name: function(_) {
        return O.Log__categorize(this.quantifiableName, false, true);
      },
      toString$0: function(_) {
        return O.Log__categorize(this.quantifiableName, false, true);
      }
    },
    Affix: {
      "^": "Object;name>,heftScale,weightBonus,strikeBonus,damageScale,damageBonus,brand,armor,_resists,priceBonus,priceScale",
      resistance$1: function(element) {
        var t1 = this._resists;
        if (!t1.containsKey$1(0, element))
          return 0;
        return t1.$index(0, element);
      },
      resist$2: [function(element, power) {
        this._resists.$indexSet(0, H.interceptedTypeCheck(element, "$isElement"), H.intTypeCheck(power));
      }, "call$2", "get$resist", 8, 0, 94],
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:hauberk/src/engine/items/recipe.dart",, G, {
    "^": "",
    Recipe: {
      "^": "Object;ingredients,result,produces"
    }
  }], ["", "package:hauberk/src/engine/items/shop.dart",, O, {
    "^": "",
    Shop: {
      "^": "Object;_shop$_drop,name>",
      create$0: function() {
        var inventory, i;
        inventory = O.Inventory$(new O.ItemLocation(this.name, "All sold out!"), 26, null);
        for (i = 0; i < 10; ++i)
          this.update$1(0, inventory);
        return inventory;
      },
      update$1: function(_, inventory) {
        var t1, i, t2, t3, t4, max, item;
        for (t1 = this._shop$_drop, i = 0; i < 5; ++i) {
          t2 = inventory._inventory$_items;
          t3 = t2.length;
          t4 = $.$get$rng();
          if (t4.float$0(0) < t3 / 13) {
            max = t2.length;
            t3 = t4._random.nextInt$1(max - 0);
            if (t3 < 0 || t3 >= t2.length)
              return H.ioore(t2, t3);
            item = t2[t3];
            C.JSArray_methods.removeAt$1(t2, t3);
            t2 = inventory._lastUnequipped;
            if (t2 == null ? item == null : t2 === item)
              inventory._lastUnequipped = null;
          }
          t1.spawnDrop$1(new O.Shop_update_closure(inventory));
        }
      }
    },
    Shop_update_closure: {
      "^": "Closure:95;inventory",
      call$1: function(item) {
        return this.inventory.tryAdd$1(item);
      }
    }
  }], ["", "package:hauberk/src/engine/monster/breed.dart",, B, {
    "^": "",
    BreedGroup: {
      "^": "Object;displayName,name>,0slaySkill<",
      static: {
        BreedGroup$: function(displayName, $name) {
          return new B.BreedGroup(displayName, $name);
        }
      }
    },
    Breed: {
      "^": "Object;pronoun,appearance>,depth<,attacks,moves,maxHealth,tracking,vision,hearing,meander,speed,drop,location,motility,flags,dodge,emanationLevel,defenses,countMin<,countMax<,minions,_breed$_name,stain,groups,description",
      get$name: function(_) {
        return O.Log__categorize(this._breed$_name, false, true);
      },
      get$experience: function() {
        var totalDodge, t1, t2, _i, t3, attackTotal, attack, t4, moveTotal, moveRateTotal, move, t5, scale;
        totalDodge = this.dodge;
        for (t1 = this.defenses, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          totalDodge += t1[_i].get$amount();
        t1 = 6 + this.speed;
        if (t1 < 0 || t1 >= 13)
          return H.ioore(C.List_mC8, t1);
        t1 = C.List_mC8[t1];
        for (t2 = this.attacks, t3 = t2.length, attackTotal = 0, _i = 0; _i < t3; ++_i) {
          attack = t2[_i];
          attackTotal += attack.damage * attack.element.experience;
        }
        for (t2 = this.moves, t4 = t2.length, moveTotal = 0, moveRateTotal = 0, _i = 0; _i < t2.length; t2.length === t4 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          move = t2[_i];
          t5 = move.rate;
          moveTotal += move.get$experience() / t5;
          moveRateTotal += 1 / t5;
        }
        t2 = this.flags;
        scale = t2.berzerk ? 1.1 : 1;
        if (t2.cowardly)
          scale *= 0.9;
        if (t2.fearless)
          scale *= 1.05;
        if (t2.immobile)
          scale *= 0.7;
        if (t2.protective)
          scale *= 1.1;
        return C.JSDouble_methods.ceil$0(this.maxHealth * (1 + totalDodge / 100) * t1 * (attackTotal / t3 * (1 - moveRateTotal) + moveTotal) * scale * E.lerpDouble(this.meander, 0, 100, 1, 0.8) / 40);
      },
      spawn$3: function(game, pos, $parent) {
        var generation = $parent != null ? $parent.generation + 1 : 1;
        return B.Monster$(game, this, pos.x, pos.y, generation);
      },
      spawn$2: function(game, pos) {
        return this.spawn$3(game, pos, null);
      },
      spawnAll$0: function() {
        var breeds, count, i, t1, t2, _i, minion, t3, max, max0;
        breeds = H.setRuntimeTypeInfo([], [B.Breed]);
        count = $.$get$rng().inclusive$2(this.countMin, this.countMax);
        for (i = 0; i < count; ++i)
          C.JSArray_methods.add$1(breeds, this);
        for (t1 = this.minions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          minion = t1[_i];
          t3 = $.$get$rng();
          max = minion.get$countMin();
          max0 = minion.get$countMax();
          count = t3._random.nextInt$1(max0 + 1 - max) + max;
          for (i = 0; i < count; ++i)
            C.JSArray_methods.add$1(breeds, minion.get$breed());
        }
        return breeds;
      },
      toString$0: function(_) {
        return O.Log__categorize(this._breed$_name, false, true);
      }
    },
    SpawnLocation: {
      "^": "Object;index,_breed$_name",
      toString$0: function(_) {
        return this._breed$_name;
      }
    },
    Minion: {
      "^": "Object;breed<,countMin<,countMax<"
    },
    BreedFlags: {
      "^": "Object;berzerk,cowardly,fearless,immobile,protective,unique",
      toString$0: function(_) {
        var names = [];
        if (this.berzerk)
          names.push("berzerk");
        if (this.cowardly)
          names.push("cowardly");
        if (this.fearless)
          names.push("fearless");
        if (this.immobile)
          names.push("immobile");
        if (this.protective)
          names.push("protective");
        if (this.unique)
          names.push("unique");
        return C.JSArray_methods.join$1(names, " ");
      }
    }
  }], ["", "package:hauberk/src/engine/monster/monster.dart",, B, {
    "^": "",
    Monster: {
      "^": "Actor;breed<,generation,0_monster$_state,_recharges,wantsToMelee,_alertness,_fear,0_frightenThreshold,game,energy,haste,cold,poison,blindness,dazzle,resistances,_pos,0_health",
      get$motility: function() {
        return this.breed.motility;
      },
      get$appearance: function(_) {
        return this.breed.appearance;
      },
      get$nounText: function() {
        return "the " + H.S(O.Log__categorize(this.breed._breed$_name, false, true));
      },
      get$pronoun: function() {
        return this.breed.pronoun;
      },
      get$maxHealth: function() {
        return this.breed.maxHealth;
      },
      get$armor: function() {
        return 0;
      },
      get$emanationLevel: function() {
        return this.breed.emanationLevel;
      },
      get$sightReliance: function() {
        var t1, t2, senses;
        t1 = this.breed;
        t2 = t1.vision;
        senses = t2 + t1.hearing;
        if (senses === 0)
          return 0;
        return t2 / senses;
      },
      Monster$5: function(game, breed, x, y, generation) {
        var t1, t2, t3, _i;
        t1 = this.breed;
        this._health = H.intTypeCheck(C.JSInt_methods.clamp$2(t1.maxHealth, 0, this.get$maxHealth()));
        t2 = new M.AsleepState();
        this._monster$_state = t2;
        t2._monster = this;
        t2 = $.$get$rng().range$2(60, 200);
        this._frightenThreshold = t2;
        if (t1.flags.cowardly)
          this._frightenThreshold = t2 * 0.7;
        for (t1 = t1.moves, t2 = t1.length, t3 = this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t3.$indexSet(0, t1[_i], 0);
      },
      canView$1: function(target) {
        var t1, t2, step, t3, t4, t5, t6;
        for (t1 = G._LineIterator$(this._pos, target), t2 = this.game; t1.moveNext$0(), true;) {
          step = t1._line$_current;
          if (J.$eq$(step, target))
            return true;
          t3 = t2._stage.tiles;
          t4 = t3._elements;
          t5 = step.y;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t6 = step.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t6 = t5 * t3 + t6;
          if (t6 < 0 || t6 >= t4.length)
            return H.ioore(t4, t6);
          t6 = t4[t6];
          t6.toString;
          t4 = $.$get$Motility_fly();
          if ((t6.type.motility._bitMask & t4._bitMask) === 0)
            return false;
        }
        throw H.wrapException("unreachable");
      },
      canTarget$1: function(target) {
        var t1, t2, step, t3, t4, t5, t6, t7;
        for (t1 = G._LineIterator$(this._pos, target), t2 = this.game; t1.moveNext$0(), true;) {
          step = t1._line$_current;
          if (J.$eq$(step, target))
            return true;
          t3 = t2._stage;
          t4 = t3._actorsByTile;
          t5 = t4._elements;
          t6 = step.y;
          t4 = t4.bounds.size.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t7 = step.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t4 = t6 * t4 + t7;
          if (t4 < 0 || t4 >= t5.length)
            return H.ioore(t5, t4);
          if (t5[t4] != null)
            return false;
          t3 = t3.tiles;
          t4 = t3._elements;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t7 = t6 * t3 + t7;
          if (t7 < 0 || t7 >= t4.length)
            return H.ioore(t4, t7);
          t7 = t4[t7];
          t7.toString;
          t4 = $.$get$Motility_fly();
          if ((t7.type.motility._bitMask & t4._bitMask) === 0)
            return false;
        }
        throw H.wrapException("unreachable");
      },
      get$baseSpeed: function() {
        return 6 + this.breed.speed;
      },
      get$baseDodge: function() {
        return this.breed.dodge;
      },
      onGetDefenses$0: function() {
        return this.breed.defenses;
      },
      onGetAction$0: function() {
        var t1, t2, t3, t4, _i, move, t5, awareness, fearDecay, notice;
        for (t1 = this.breed, t2 = t1.moves, t3 = t2.length, t4 = this._recharges, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          move = t2[_i];
          t5 = t4.$index(0, move);
          if (typeof t5 !== "number")
            return t5.$sub();
          t4.$indexSet(0, move, Math.max(0, t5 - 1));
        }
        awareness = 0 + this._seeHero$0() + this._hearHero$0();
        t2 = this._alertness * 0.75 + awareness * 0.2;
        this._alertness = t2;
        this._alertness = C.JSNumber_methods.clamp$2(t2, 0, 1);
        t2 = this.game;
        fearDecay = 5 + this._pos.$sub(0, t2.hero._pos).get$kingLength();
        t3 = t2._stage;
        t4 = this._pos;
        t4 = t3.tiles.$index(0, t4);
        if (!(t4.illumination > 0 && !t4._isOccluded))
          fearDecay = 5 + fearDecay * 2;
        t3 = this._health;
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._modifyFear$1(-(2 + fearDecay * t3 / t1.maxHealth));
        this._fear = C.JSNumber_methods.clamp$2(this._fear, 0, this._frightenThreshold);
        notice = Math.max(awareness, this._alertness);
        E.Debug_monsterStat(this, "aware", awareness, null);
        E.Debug_monsterStat(this, "alert", this._alertness, null);
        E.Debug_monsterStat(this, "notice", notice, null);
        t1 = this._fear;
        t3 = this._frightenThreshold;
        if (typeof t3 !== "number")
          return H.iae(t3);
        E.Debug_monsterStat(this, "fear", t1 / t3, null);
        t1 = J.getInterceptor$(this._monster$_state);
        if (!!t1.$isAsleepState) {
          t1 = this._fear;
          t3 = this._frightenThreshold;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 > t3) {
            this.log$2("{1} is afraid!", this);
            C.JSArray_methods.add$1(t2._events, new D.Event0(C.EventType_frighten, this, null, null, null, null));
            this._resetCharges$0();
            t1 = new M.AfraidState();
            this._monster$_state = t1;
            t1._monster = this;
          } else {
            t1 = $.$get$rng();
            t3 = this._awakenPercent$1(notice);
            if (t1.range$1(100) < t3) {
              t1 = t2._stage;
              t3 = this._pos;
              t3 = t1.tiles.$index(0, t3);
              if (t3.illumination > 0 && !t3._isOccluded)
                this.log$2("{1} wakes up!", this);
              else
                this.log$1("Something stirs in the darkness.");
              C.JSArray_methods.add$1(t2._events, new D.Event0(C.EventType_awaken, this, null, null, null, null));
              this._alertness = 1;
              this._resetCharges$0();
              t1 = new M.AwakeState();
              this._monster$_state = t1;
              t1._monster = this;
            }
          }
        } else if (!!t1.$isAwakeState) {
          t1 = this._fear;
          t3 = this._frightenThreshold;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 > t3) {
            this.log$2("{1} is afraid!", this);
            C.JSArray_methods.add$1(t2._events, new D.Event0(C.EventType_frighten, this, null, null, null, null));
            t1 = new M.AfraidState();
            this._monster$_state = t1;
            t1._monster = this;
          } else if (notice < 0.01) {
            t1 = t2._stage;
            t2 = this._pos;
            t2 = t1.tiles.$index(0, t2);
            if (t2.illumination > 0 && !t2._isOccluded)
              this.log$2("{1} falls asleep!", this);
            this._alertness = 0;
            t1 = new M.AsleepState();
            this._monster$_state = t1;
            t1._monster = this;
          }
        } else if (!!t1.$isAfraidState)
          if (this._fear <= 0) {
            this.log$2("{1} grows courageous!", this);
            t1 = new M.AwakeState();
            this._monster$_state = t1;
            t1._monster = this;
          }
        return this._monster$_state.getAction$0();
      },
      _awakenPercent$1: function(notice) {
        var normal;
        if (notice < 0.1)
          return 0;
        if (notice > 0.8)
          return 100;
        normal = E.lerpDouble(notice, 0.1, 0.8, 0, 1);
        return C.JSNumber_methods.round$0(E.lerpDouble(normal * normal * normal, 0, 1, 5, 100));
      },
      _seeHero$0: function() {
        var t1, t2, heroPos, illumination, distance;
        t1 = this.breed.vision;
        if (t1 === 0) {
          E.Debug_monsterStat(this, "see", 0, "sightless");
          return 0;
        }
        t2 = this.game;
        heroPos = t2.hero._pos;
        if (!this.canView$1(heroPos)) {
          E.Debug_monsterStat(this, "see", 0, "out of sight");
          return 0;
        }
        illumination = t2._stage.tiles.$index(0, heroPos).illumination / 255;
        if (illumination === 0) {
          E.Debug_monsterStat(this, "see", 0, "hero in dark");
          return 0;
        }
        distance = heroPos.$sub(0, this._pos).get$kingLength();
        if (distance >= t1) {
          E.Debug_monsterStat(this, "see", 0, "too far");
          return 0;
        }
        t1 = illumination * ((t1 - distance) / t1);
        E.Debug_monsterStat(this, "see", t1, null);
        return t1;
      },
      _hearHero$0: function() {
        var t1, t2, t3, t4, volume;
        t1 = this.breed.hearing;
        if (t1 === 0) {
          E.Debug_monsterStat(this, "hear", 0, "deaf");
          return 0;
        }
        t2 = this.game;
        t3 = t2._stage;
        t4 = this._pos;
        t3 = t3._sound;
        t4 = t3._volume$1(t3._heroAuditoryDistance$1(t4));
        t2 = t2.hero._lastNoise;
        volume = t4 * t2 * t1 / 10;
        E.Debug_monsterStat(this, "hear", volume, "noise " + H.S(t2) + ", volume " + H.S(volume));
        return volume;
      },
      _modifyFear$1: function(offset) {
        var t1 = this._health;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 <= 0)
          return;
        t1 = this.breed.flags;
        if (t1.fearless)
          return;
        if (t1.immobile)
          return;
        this._fear = Math.max(0, this._fear + offset);
      },
      hear$1: function(volume) {
        var t1 = this._alertness + volume * this.breed.hearing;
        this._alertness = t1;
        this._alertness = C.JSNumber_methods.clamp$2(t1, 0, 1);
      },
      onCreateMeleeHit$1: function(defender) {
        var t1, t2;
        t1 = $.$get$rng();
        t1.toString;
        t2 = H.assertSubtype(this.breed.attacks, "$isList", [U.Attack], "$asList");
        t1 = t1.range$1(t2.length);
        if (t1 < 0 || t1 >= t2.length)
          return H.ioore(t2, t1);
        return t2[t1].createHit$0();
      },
      onGetResistance$1: function(element) {
        return 0;
      },
      onGiveDamage$3: function(action, defender, damage) {
        var t1, fear;
        t1 = this.game;
        fear = 100 * damage / t1.hero.fortitude.get$maxHealth();
        this._modifyFear$1(-fear);
        E.Debug_monsterReason(this, "fear", "hit for " + damage + "/" + t1.hero.fortitude.get$maxHealth() + " decrease by " + H.S(fear));
        this._updateWitnesses$1(new B.Monster_onGiveDamage_closure(action, damage));
      },
      _viewHeroDamage$2: function(action, damage) {
        var t1, fear;
        if (this._monster$_state instanceof M.AsleepState)
          return;
        t1 = this.breed.maxHealth;
        fear = 50 * damage / t1;
        this._modifyFear$1(-fear);
        E.Debug_monsterReason(this, "fear", "witness " + damage + "/" + t1 + " decrease by " + H.S(fear));
      },
      onTakeDamage$3: function(action, attacker, damage) {
        var t1, t2, fear;
        this._alertness = 1;
        t1 = this.breed;
        t2 = t1.maxHealth;
        fear = 100 * damage / t2;
        if (t1.flags.berzerk)
          fear *= -3;
        this._modifyFear$1(fear);
        E.Debug_monsterReason(this, "fear", "hit for " + damage + "/" + t2 + " increases by " + H.S(fear));
        this._updateWitnesses$1(new B.Monster_onTakeDamage_closure(this, action, damage));
      },
      _viewMonsterDamage$3: function(action, monster, damage) {
        var t1, t2, fear, t3;
        if (this._monster$_state instanceof M.AsleepState)
          return;
        t1 = this.breed;
        t2 = t1.maxHealth;
        fear = 50 * damage / t2;
        t3 = t1.flags;
        if (t3.protective && monster.breed === t1)
          fear *= -2;
        else if (t3.berzerk)
          fear *= -1;
        this._modifyFear$1(fear);
        E.Debug_monsterReason(this, "fear", "witness " + damage + "/" + t2 + " increase by " + H.S(fear));
      },
      onDied$1: function(attackNoun) {
        var t1, t2, items, _i, index, t3;
        t1 = this.game;
        t2 = this.breed;
        items = t1._stage.placeDrops$3(this._pos, t2.motility, t2.drop);
        for (t2 = items.length, _i = 0; _i < items.length; items.length === t2 || (0, H.throwConcurrentModificationError)(items), ++_i)
          this.log$3("{1} drop[s] {2}.", this, items[_i]);
        t1 = t1._stage;
        t2 = t1._actors;
        index = C.JSArray_methods.indexOf$1(t2, this);
        t3 = t1._currentActorIndex;
        if (t3 > index)
          t1._currentActorIndex = t3 - 1;
        C.JSArray_methods.removeAt$1(t2, index);
        if (t1._currentActorIndex >= t2.length)
          t1._currentActorIndex = 0;
        t1._actorsByTile.$indexSet(0, this._pos, null);
      },
      changePosition$2: function(from, to) {
        var t1, t2;
        this.super$Actor$changePosition(from, to);
        t1 = this.game;
        t2 = t1._stage.tiles.$index(0, from);
        if (!(t2.illumination > 0 && !t2._isOccluded)) {
          t2 = t1._stage.tiles.$index(0, to);
          t2 = t2.illumination > 0 && !t2._isOccluded;
        } else
          t2 = true;
        if (t2) {
          t2 = t1.hero;
          if (!(t2._behavior instanceof X.ActionBehavior))
            t2._behavior = null;
        }
        t2 = t1._stage.tiles.$index(0, from);
        if (!(t2.illumination > 0 && !t2._isOccluded)) {
          t2 = t1._stage.tiles.$index(0, to);
          t2 = t2.illumination > 0 && !t2._isOccluded;
        } else
          t2 = false;
        if (t2)
          t1.hero.seeMonster$1(this);
      },
      _updateWitnesses$1: function(callback) {
        var t1, t2, _i, other, t3, t4;
        H.functionTypeCheck(callback, {func: 1, args: [B.Monster]});
        for (t1 = this.game._stage._actors, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          other = t1[_i];
          if (other === this)
            continue;
          if (!(other instanceof B.Monster))
            continue;
          t3 = other._pos.$sub(0, this._pos);
          t4 = t3.x;
          if (typeof t4 !== "number")
            return t4.abs$0();
          if (Math.max(Math.abs(t4), Math.abs(t3.y)) > 20)
            continue;
          if (other.canView$1(this._pos))
            callback.call$1(other);
        }
      },
      _resetCharges$0: function() {
        var t1, t2, t3, _i, move;
        for (t1 = this.breed.moves, t2 = t1.length, t3 = this._recharges, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          move = t1[_i];
          t3.$indexSet(0, move, $.$get$rng().float$1(0, move.rate / 2));
        }
      },
      static: {
        Monster$: function(game, breed, x, y, generation) {
          var t1 = new B.Monster(breed, generation, P.LinkedHashMap_LinkedHashMap$_empty(O.Move, P.num), true, 0, 0, game, new Y.Energy(0), new E.HasteCondition(0, 0), new E.ColdCondition(0, 0), new E.PoisonCondition(0, 0), new E.BlindnessCondition(0, 0), new E.BlindnessCondition(0, 0), P.LinkedHashMap_LinkedHashMap$_empty(G.Element, E.ResistCondition), new L.Vec(x, y));
          t1.Actor$3(game, x, y);
          t1.Monster$5(game, breed, x, y, generation);
          return t1;
        }
      }
    },
    Monster_onGiveDamage_closure: {
      "^": "Closure:30;action,damage",
      call$1: function(witness) {
        witness._viewHeroDamage$2(this.action, this.damage);
      }
    },
    Monster_onTakeDamage_closure: {
      "^": "Closure:30;$this,action,damage",
      call$1: function(witness) {
        witness._viewMonsterDamage$3(this.action, this.$this, this.damage);
      }
    }
  }], ["", "package:hauberk/src/engine/monster/monster_pathfinder.dart",, K, {
    "^": "",
    MonsterPathfinder: {
      "^": "Pathfinder;_monster_pathfinder$_monster,0_nearest,stage,start,end",
      processStep$1: function(path) {
        var t1;
        if (this._nearest != null) {
          t1 = this.end;
          t1 = this.heuristic$2(path.pos, t1) < this.heuristic$2(this._nearest.pos, t1);
        } else
          t1 = true;
        if (t1)
          this._nearest = path;
        if (path.length >= this._monster_pathfinder$_monster.breed.tracking)
          return this._nearest.startDirection;
        return;
      },
      heuristic$2: function(pos, end) {
        var t1, t2, diagonal;
        t1 = end.$sub(0, pos);
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.abs$0();
        t2 = Math.abs(t2);
        t1 = Math.abs(t1.y);
        diagonal = Math.min(t2, t1);
        return (Math.max(t2, t1) - diagonal) * 10 + diagonal * 11;
      },
      stepCost$2: function(pos, tile) {
        var firstStep, t1, t2;
        if (tile.substance !== 0)
          return;
        firstStep = pos.$sub(0, this.start).get$kingLength() === 1;
        if (this.stage._actorsByTile.$index(0, pos) != null) {
          if (firstStep)
            return;
          return 60;
        }
        t1 = tile.type.motility;
        t2 = $.$get$Motility_door();
        if (J.$eq$(t1, t2))
          if ((this._monster_pathfinder$_monster.breed.motility._bitMask & t2._bitMask) !== 0)
            return 20;
          else if (firstStep)
            return;
          else
            return 80;
        t1 = this._monster_pathfinder$_monster.breed;
        if ((tile.type.motility._bitMask & t1.motility._bitMask) !== 0)
          return 10;
        return;
      },
      reachedGoal$1: function(path) {
        return path.startDirection;
      },
      unreachableGoal$0: function() {
        var t1 = this._nearest;
        if (t1 == null)
          return;
        return t1.startDirection;
      },
      $asPathfinder: function() {
        return [Z.Direction];
      }
    }
  }], ["", "package:hauberk/src/engine/monster/monster_states.dart",, M, {
    "^": "",
    MonsterState: {
      "^": "Object;",
      get$breed: function() {
        return this._monster.breed;
      },
      get$pos: function() {
        return this._monster._pos;
      },
      _meander$1: function(dir) {
        var t1, meander, dirs, i, t2;
        t1 = this._monster;
        meander = t1.breed.meander;
        if (t1.blindness._turnsRemaining > 0 || t1.dazzle._turnsRemaining > 0)
          meander += C.JSNumber_methods.toInt$0(t1.get$sightReliance() * 50);
        else if (t1._pos.$add(0, dir).$eq(0, this._monster.game.hero._pos))
          meander = meander / 4 | 0;
        meander = Math.min(meander, 90);
        if (!($.$get$rng().range$1(100) < meander))
          return dir;
        if (dir === C.Direction_0_0)
          dirs = C.List_slV;
        else {
          dirs = H.setRuntimeTypeInfo([], [Z.Direction]);
          for (i = 0; i < 3; ++i) {
            C.JSArray_methods.add$1(dirs, dir.get$rotateLeft45());
            C.JSArray_methods.add$1(dirs, dir.get$rotateRight45());
          }
          for (i = 0; i < 2; ++i) {
            C.JSArray_methods.add$1(dirs, dir.get$rotateLeft90());
            C.JSArray_methods.add$1(dirs, dir.get$rotateRight90());
          }
          C.JSArray_methods.add$1(dirs, dir.get$rotateLeft90().get$rotateLeft45());
          C.JSArray_methods.add$1(dirs, dir.get$rotateRight90().get$rotateRight45());
        }
        t1 = H.getTypeArgumentByIndex(dirs, 0);
        dirs = P.List_List$from(new H.WhereIterable(dirs, H.functionTypeCheck(new M.MonsterState__meander_closure(this), {func: 1, ret: P.bool, args: [t1]}), [t1]), true, t1);
        t1 = dirs.length;
        if (t1 === 0)
          return dir;
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(dirs, "$isList", [Z.Direction], "$asList");
        t1 = t2.range$1(t1);
        if (t1 < 0 || t1 >= dirs.length)
          return H.ioore(dirs, t1);
        return dirs[t1];
      }
    },
    MonsterState__meander_closure: {
      "^": "Closure:1;$this",
      call$1: function(dir) {
        var t1, here, t2;
        H.interceptedTypeCheck(dir, "$isDirection");
        t1 = this.$this;
        here = t1._monster._pos.$add(0, dir);
        t2 = t1._monster;
        if (!(t2.canOccupy$1(here) && t2.game._stage.tiles.$index(0, here).substance === 0))
          return false;
        t2 = t1._monster.game._stage._actorsByTile.$index(0, here);
        return t2 == null || t2 === t1._monster.game.hero;
      }
    },
    AsleepState: {
      "^": "MonsterState;0_monster",
      getAction$0: function() {
        return new B.RestAction();
      }
    },
    AwakeState: {
      "^": "MonsterState;0_monster",
      getAction$0: function() {
        var $escape, t1, t2, moves, toHero, _i, dir, t3, t4, rangedDamage, rangedAttacks, move, meleeDamage, meleeAttacks, caution, meleeDir;
        $escape = this._escapeSubstance$0();
        if ($escape !== C.Direction_0_0)
          return new B.WalkAction($escape, false);
        t1 = this._monster.breed.moves;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        moves = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new M.AwakeState_getAction_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
        t1 = moves.length;
        if (t1 !== 0) {
          t2 = $.$get$rng();
          t2.toString;
          H.assertSubtype(moves, "$isList", [O.Move], "$asList");
          t1 = t2.range$1(t1);
          if (t1 < 0 || t1 >= moves.length)
            return H.ioore(moves, t1);
          return moves[t1].getAction$1(this._monster);
        }
        t1 = this._monster;
        t2 = t1.breed;
        if (t2.flags.immobile) {
          toHero = t1.game.hero._pos.$sub(0, t1._pos);
          if (toHero.get$kingLength() !== 1)
            return new B.RestAction();
          for (_i = 0; _i < 8; ++_i) {
            dir = C.List_slV[_i];
            if (toHero.$eq(0, dir))
              return new B.WalkAction(dir, false);
          }
          throw H.wrapException("unreachable");
        }
        t1.wantsToMelee = true;
        for (t3 = t2.moves, t4 = t3.length, rangedDamage = 0, rangedAttacks = 0, _i = 0; _i < t4; ++_i) {
          move = t3[_i];
          if (!move.$isRangedMove)
            continue;
          rangedDamage += move.attack.damage / move.rate;
          ++rangedAttacks;
        }
        if (rangedAttacks !== 0) {
          for (t3 = t2.attacks, t4 = t3.length, meleeDamage = 0, meleeAttacks = 0, _i = 0; _i < t4; ++_i) {
            meleeDamage += t3[_i].damage;
            ++meleeAttacks;
          }
          if (meleeAttacks > 0)
            meleeDamage /= meleeAttacks;
          rangedDamage /= rangedAttacks;
          t3 = t1._fear;
          t4 = t1._health;
          if (typeof t4 !== "number")
            return t4.$div();
          caution = 100 * rangedDamage / (rangedDamage + meleeDamage) + t3 + 100 * (1 - t4 / t2.maxHealth);
          t1 = t1._pos.$sub(0, t1.game.hero._pos).$le(0, 1);
          t2 = this._monster;
          if (t1)
            t2.wantsToMelee = caution < 60;
          else
            t2.wantsToMelee = caution < 30;
        }
        meleeDir = this._findMeleePath$0();
        rangedAttacks > 0;
        this._monster.wantsToMelee;
        return new B.WalkAction(this._meander$1(meleeDir == null ? C.Direction_0_0 : meleeDir), false);
      },
      _escapeSubstance$0: function() {
        var t1, t2;
        t1 = this._monster;
        t2 = t1.game._stage;
        t1 = t1._pos;
        if (t2.tiles.$index(0, t1).substance === 0)
          return C.Direction_0_0;
        t1 = this._monster;
        return N.MotilityFlow$(t1.game._stage, t1._pos, t1.breed.motility, null, true, null).directionToBestWhere$1(new M.AwakeState__escapeSubstance_closure(this));
      },
      _findMeleePath$0: function() {
        var losDir, t1, t2;
        losDir = this._findLosWalkPath$0();
        if (losDir != null)
          return losDir;
        t1 = this._monster;
        t2 = t1.game._stage;
        return new K.MonsterPathfinder(t1, t2, t1._pos, t2.game.hero._pos).search$0(0);
      },
      _findLosWalkPath$0: function() {
        var t1, first, $length, pos, t2, t3, t4, t5, t6, t7, step;
        for (t1 = this._monster, t1 = G._LineIterator$(t1._pos, t1.game.hero._pos), first = null, $length = 1; t1.moveNext$0(), true;) {
          pos = t1._line$_current;
          if (first == null)
            first = pos;
          t2 = this._monster;
          t3 = t2.game._stage.tiles;
          t4 = t3._elements;
          t5 = pos.y;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t6 = pos.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t3 = t5 * t3 + t6;
          if (t3 < 0 || t3 >= t4.length)
            return H.ioore(t4, t3);
          if (t4[t3].substance > 0)
            return;
          if (!t2.canOccupy$1(pos))
            return;
          t2 = this._monster;
          t3 = t2.game;
          t4 = t3._stage._actorsByTile;
          t7 = t4._elements;
          t4 = t4.bounds.size.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t6 = t5 * t4 + t6;
          if (t6 < 0 || t6 >= t7.length)
            return H.ioore(t7, t6);
          t6 = t7[t6];
          if (t6 != null && !t6.$isHero)
            return;
          ++$length;
          if ($length >= t2.breed.tracking)
            return;
          if (J.$eq$(pos, t3.hero._pos))
            break;
        }
        step = first.$sub(0, this._monster._pos);
        t1 = step.y;
        if (t1 === -1) {
          t1 = step.x;
          if (t1 === -1)
            return C.Direction_m1_m1;
          else if (t1 === 0)
            return C.Direction_0_m1;
          else
            return C.Direction_1_m1;
        } else if (t1 === 0)
          if (step.x === -1)
            return C.Direction_m1_0;
          else
            return C.Direction_1_0;
        else {
          t1 = step.x;
          if (t1 === -1)
            return C.Direction_m1_1;
          else if (t1 === 0)
            return C.Direction_0_1;
          else
            return C.Direction_1_1;
        }
      }
    },
    AwakeState_getAction_closure: {
      "^": "Closure:97;$this",
      call$1: function(move) {
        var t1;
        H.interceptedTypeCheck(move, "$isMove");
        t1 = this.$this;
        return t1._monster._recharges.$index(0, move) === 0 && move.shouldUse$1(t1._monster);
      }
    },
    AwakeState__escapeSubstance_closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        return this.$this._monster.game._stage.tiles.$index(0, pos).substance === 0;
      }
    },
    AfraidState: {
      "^": "MonsterState;0_monster",
      getAction$0: function() {
        var t1, t2, t3, dir, farther, state;
        t1 = this._monster;
        t2 = t1.game._stage;
        t1 = t1._pos;
        if (t2.tiles.$index(0, t1)._isOccluded)
          return new B.RestAction();
        t1 = this._monster;
        t2 = t1.game._stage;
        t3 = t1._pos;
        t1 = t1.breed;
        dir = N.MotilityFlow$(t2, t3, t1.motility, null, true, t1.tracking).directionToBestWhere$1(new M.AfraidState_getAction_closure(this));
        if (dir !== C.Direction_0_0) {
          E.Debug_monsterLog(this._monster, "fleeing " + H.S(dir) + " out of sight");
          return new B.WalkAction(this._meander$1(dir), false);
        }
        t1 = this._monster;
        t2 = H.getTypeArgumentByIndex(C.List_slV, 0);
        farther = new H.WhereIterable(C.List_slV, H.functionTypeCheck(new M.AfraidState_getAction_closure0(this, t1._pos.$sub(0, t1.game.hero._pos).get$kingLength()), {func: 1, ret: P.bool, args: [t2]}), [t2]);
        if (!farther.get$isEmpty(farther)) {
          t1 = $.$get$rng();
          t2 = P.List_List$from(farther, true, t2);
          t1.toString;
          H.assertSubtype(t2, "$isList", [Z.Direction], "$asList");
          t1 = t1.range$1(t2.length);
          if (t1 < 0 || t1 >= t2.length)
            return H.ioore(t2, t1);
          dir = t2[t1];
          E.Debug_monsterLog(this._monster, "fleeing " + H.S(dir) + " away from hero");
          return new B.WalkAction(this._meander$1(dir), false);
        }
        state = new M.AwakeState();
        t1 = this._monster;
        t1._monster$_state = state;
        state._monster = t1;
        return state.getAction$0();
      }
    },
    AfraidState_getAction_closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        return this.$this._monster.game._stage.tiles.$index(0, pos)._isOccluded;
      }
    },
    AfraidState_getAction_closure0: {
      "^": "Closure:1;$this,heroDistance",
      call$1: function(dir) {
        var t1, here;
        H.interceptedTypeCheck(dir, "$isDirection");
        t1 = this.$this;
        here = t1._monster._pos.$add(0, dir);
        if (!t1._monster.willEnter$1(here))
          return false;
        return here.$sub(0, t1._monster.game.hero._pos).get$kingLength() > this.heroDistance;
      }
    }
  }], ["", "package:hauberk/src/engine/monster/move.dart",, O, {
    "^": "",
    Move: {
      "^": "Object;",
      shouldUse$1: function(monster) {
        return true;
      },
      getAction$1: function(monster) {
        var t1, t2, t3;
        t1 = monster._recharges;
        t2 = t1.$index(0, this);
        t3 = this.rate;
        t3 = $.$get$rng().float$2(0, t3, t3 * 1.3);
        if (typeof t2 !== "number")
          return t2.$add();
        t1.$indexSet(0, this, t2 + t3);
        return this.onGetAction$1(monster);
      }
    },
    RangedMove: {
      "^": "Move;"
    }
  }], ["", "package:hauberk/src/engine/stage/bucket_queue.dart",, B, {
    "^": "",
    BucketQueue: {
      "^": "Object;_buckets,_bucket,$ti",
      add$2: function(_, value, cost) {
        var t1, t2, t3, bucket;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(value, t1);
        this._bucket = Math.min(this._bucket, cost);
        t2 = this._buckets;
        t3 = cost + 1;
        if (t2.length <= t3)
          C.JSArray_methods.set$length(t2, t3);
        if (cost < 0 || cost >= t2.length)
          return H.ioore(t2, cost);
        bucket = t2[cost];
        if (bucket == null) {
          bucket = P.ListQueue$(null, t1);
          C.JSArray_methods.$indexSet(t2, cost, bucket);
        }
        bucket._add$1(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(bucket, 0)));
      },
      removeNext$0: function() {
        var t1, t2, t3, t4;
        t1 = this._buckets;
        while (true) {
          t2 = this._bucket;
          t3 = t1.length;
          if (t2 < t3) {
            if (t2 < 0)
              return H.ioore(t1, t2);
            t4 = t1[t2];
            t4 = t4 == null || t4._head === t4._tail;
          } else
            t4 = false;
          if (!t4)
            break;
          this._bucket = t2 + 1;
        }
        if (t2 >= t3)
          return;
        if (t2 < 0)
          return H.ioore(t1, t2);
        return t1[t2].removeFirst$0();
      }
    }
  }], ["", "package:hauberk/src/engine/stage/flow.dart",, N, {
    "^": "",
    Flow: {
      "^": "Object;",
      Flow$3$maxDistance: function(stage, _start, maxDistance) {
        var t1, t2, width, height, t3, t4, left, $top, t5, right, bottom, start;
        t1 = this._maxDistance;
        t2 = this.stage;
        if (t1 == null) {
          this._offset = new L.Vec(1, 1);
          t1 = t2.tiles.bounds.size;
          t2 = t1.x;
          if (typeof t2 !== "number")
            return t2.$sub();
          width = t2 - 2;
          height = t1.y - 2;
        } else {
          t3 = this._flow$_start;
          t4 = t3.x;
          if (typeof t4 !== "number")
            return t4.$sub();
          left = Math.max(1, t4 - t1);
          t3 = t3.y;
          $top = Math.max(1, t3 - t1);
          t2 = t2.tiles.bounds.size;
          t5 = t2.x;
          if (typeof t5 !== "number")
            return t5.$sub();
          right = Math.min(t5 - 1, t4 + t1 + 1);
          bottom = Math.min(t2.y - 1, t3 + t1 + 1);
          this._offset = new L.Vec(left, $top);
          width = right - left;
          height = bottom - $top;
        }
        this._costs = M.Array2D$(width, height, -2, P.int);
        start = this._flow$_start.$sub(0, this._offset);
        this._open.add$2(0, start, 0);
        this._costs.$indexSet(0, start, 0);
      },
      get$reachable: function() {
        var $async$self = this;
        return P._makeSyncStarIterable(function() {
          var $async$goto = 0, $async$handler = 2, $async$currentError, t1, i;
          return function $async$get$reachable($async$errorCode, $async$result) {
            if ($async$errorCode === 1) {
              $async$currentError = $async$result;
              $async$goto = $async$handler;
            }
            while (true)
              $async$outer:
                switch ($async$goto) {
                  case 0:
                    // Function start
                    t1 = $async$self._found, i = 0;
                  case 3:
                    // for condition
                    // trivial condition
                    for (; i >= t1.length;)
                      if (!$async$self._processNext$0()) {
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                    $async$goto = 6;
                    return t1[i].$add(0, $async$self._offset);
                  case 6:
                    // after yield
                  case 4:
                    // for update
                    ++i;
                    // goto for condition
                    $async$goto = 3;
                    break;
                  case 5:
                    // after for
                  case 1:
                    // return
                    return P._IterationMarker_endOfIteration();
                  case 2:
                    // rethrow
                    return P._IterationMarker_uncaughtError($async$currentError);
                }
          };
        }, L.Vec);
      },
      bestWhere$1: function(predicate) {
        var results, t1, t2;
        results = this._findAllBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
        t1 = results.length;
        if (t1 === 0)
          return;
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(results, "$isList", [L.Vec], "$asList");
        t1 = t2.range$1(t1);
        if (t1 < 0 || t1 >= results.length)
          return H.ioore(results, t1);
        return results[t1].$add(0, this._offset);
      },
      costAt$1: function(pos) {
        var t1, t2, t3, t4, distance;
        pos = H.interceptedTypeCheck(pos, "$isVec").$sub(0, this._offset);
        if (!this._costs.bounds.contains$1(0, pos))
          return;
        t1 = pos.y;
        t2 = pos.x;
        while (true) {
          t3 = this._costs;
          t4 = t3._elements;
          t3 = t3.bounds.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = t1 * t3 + t2;
          if (t3 < 0 || t3 >= t4.length)
            return H.ioore(t4, t3);
          if (!(J.$eq$(t4[t3], -2) && this._processNext$0()))
            break;
        }
        distance = this._costs.$index(0, pos);
        if (distance === -2 || distance === -1)
          return;
        return distance;
      },
      directionToBestWhere$1: function(predicate) {
        var directions, t1, t2;
        directions = this.directionsToBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
        t1 = directions.length;
        if (t1 === 0)
          return C.Direction_0_0;
        t2 = $.$get$rng();
        t2.toString;
        H.assertSubtype(directions, "$isList", [Z.Direction], "$asList");
        t1 = t2.range$1(t1);
        if (t1 < 0 || t1 >= directions.length)
          return H.ioore(directions, t1);
        return directions[t1];
      },
      directionsToBestWhere$1: function(predicate) {
        var goals = this._findAllBestWhere$1(H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]}));
        return this._directionsTo$1(goals);
      },
      _findAllBestWhere$1: function(predicate) {
        var goals, t1, lowestCost, i, pos, t2, t3, t4, cost;
        H.functionTypeCheck(predicate, {func: 1, ret: P.bool, args: [L.Vec]});
        goals = H.setRuntimeTypeInfo([], [L.Vec]);
        for (t1 = this._found, lowestCost = null, i = 0; true; ++i) {
          for (; i >= t1.length;)
            if (!this._processNext$0())
              return goals;
          pos = t1[i];
          if (!predicate.call$1(pos.$add(0, this._offset)))
            continue;
          t2 = this._costs;
          t3 = t2._elements;
          t2 = t2.bounds.size.x;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = pos.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = pos.y * t2 + t4;
          if (t4 < 0 || t4 >= t3.length)
            return H.ioore(t3, t4);
          cost = t3[t4];
          if (lowestCost == null || cost === lowestCost)
            C.JSArray_methods.add$1(goals, pos);
          else
            break;
          lowestCost = cost;
        }
        return goals;
      },
      _directionsTo$1: function(goals) {
        var t1, walked, directions;
        t1 = L.Vec;
        H.assertSubtype(goals, "$isList", [t1], "$asList");
        walked = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
        directions = P.LinkedHashSet_LinkedHashSet(null, null, null, Z.Direction);
        C.JSArray_methods.forEach$1(goals, new N.Flow__directionsTo_walkBack(this, walked, directions));
        return directions.toList$0(0);
      },
      _processNext$0: function() {
        var start, t1;
        start = this._open.removeNext$0();
        if (start == null)
          return false;
        t1 = new N.Flow__processNext_processNeighbor(this, start, this._costs.$index(0, start));
        t1.call$2(C.Direction_0_m1, false);
        t1.call$2(C.Direction_0_1, false);
        t1.call$2(C.Direction_1_0, false);
        t1.call$2(C.Direction_m1_0, false);
        t1.call$2(C.Direction_m1_m1, true);
        t1.call$2(C.Direction_1_m1, true);
        t1.call$2(C.Direction_m1_1, true);
        t1.call$2(C.Direction_1_1, true);
        return true;
      }
    },
    Flow__directionsTo_walkBack: {
      "^": "Closure:8;$this,walked,directions",
      call$1: function(pos) {
        var t1, t2, t3, _i, dir, here, t4, t5, t6, t7, t8, t9;
        H.interceptedTypeCheck(pos, "$isVec");
        t1 = this.walked;
        if (t1.contains$1(0, pos))
          return;
        t1.add$1(0, pos);
        for (t1 = this.$this, t2 = t1._flow$_start, t3 = this.directions, _i = 0; _i < 8; ++_i) {
          dir = C.List_slV[_i];
          here = pos.$add(0, dir);
          if (!t1._costs.bounds.contains$1(0, here))
            continue;
          if (here.$eq(0, t2.$sub(0, t1._offset)))
            t3.add$1(0, dir.get$rotate180());
          else {
            t4 = t1._costs;
            t5 = t4._elements;
            t6 = here.y;
            t4 = t4.bounds.size.x;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t7 = here.x;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t4 = t6 * t4 + t7;
            if (t4 < 0 || t4 >= t5.length)
              return H.ioore(t5, t4);
            if (J.$ge$n(t5[t4], 0)) {
              t4 = t1._costs;
              t5 = t4._elements;
              t4 = t4.bounds.size.x;
              if (typeof t4 !== "number")
                return H.iae(t4);
              t7 = t6 * t4 + t7;
              t6 = t5.length;
              if (t7 < 0 || t7 >= t6)
                return H.ioore(t5, t7);
              t7 = t5[t7];
              t8 = pos.y;
              t9 = pos.x;
              if (typeof t9 !== "number")
                return H.iae(t9);
              t9 = t8 * t4 + t9;
              if (t9 < 0 || t9 >= t6)
                return H.ioore(t5, t9);
              t9 = J.$lt$n(t7, t5[t9]);
              t4 = t9;
            } else
              t4 = false;
            if (t4)
              this.call$1(here);
          }
        }
      }
    },
    Flow__processNext_processNeighbor: {
      "^": "Closure:98;$this,start,parentCost",
      call$2: function(dir, isDiagonal) {
        var here, t1, t2, t3, relative, total;
        here = this.start.$add(0, dir);
        t1 = this.$this;
        if (!t1._costs.bounds.contains$1(0, here))
          return;
        if (!J.$eq$(t1._costs.$index(0, here), -2))
          return;
        t2 = here.$add(0, t1._offset);
        t2 = t1.stage.tiles.$index(0, t2);
        t3 = this.parentCost;
        relative = t1.tileCost$4(t3, here.$add(0, t1._offset), t2, isDiagonal);
        t2 = t1._costs;
        if (relative == null)
          t2.$indexSet(0, here, -1);
        else {
          if (typeof t3 !== "number")
            return t3.$add();
          total = t3 + relative;
          t2.$indexSet(0, here, total);
          C.JSArray_methods.add$1(t1._found, here);
          t1._open.add$2(0, here, total);
        }
      }
    },
    MotilityFlow: {
      "^": "Flow;_flow$_motility,_avoidActors,_avoidSubstances,stage,_flow$_start,_maxDistance,0_costs,0_offset,_open,_found",
      tileCost$4: function(parentCost, pos, tile, isDiagonal) {
        var t1;
        if ((tile.type.motility._bitMask & this._flow$_motility._bitMask) === 0)
          return;
        if (this._avoidSubstances && tile.substance > 0)
          return;
        if (this._avoidActors && this.stage._actorsByTile.$index(0, pos) != null)
          return;
        t1 = this._maxDistance;
        if (t1 != null) {
          if (typeof parentCost !== "number")
            return parentCost.$ge();
          t1 = parentCost >= t1;
        } else
          t1 = false;
        if (t1)
          return;
        return 1;
      },
      static: {
        MotilityFlow$: function(stage, start, _motility, avoidActors, avoidSubstances, maxDistance) {
          var t1, t2, t3;
          t1 = avoidActors == null ? true : avoidActors;
          t2 = avoidSubstances == null ? false : avoidSubstances;
          t3 = L.Vec;
          t3 = new N.MotilityFlow(_motility, t1, t2, stage, start, maxDistance, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), 0, [t3]), H.setRuntimeTypeInfo([], [t3]));
          t3.Flow$3$maxDistance(stage, start, maxDistance);
          return t3;
        }
      }
    }
  }], ["", "package:hauberk/src/engine/stage/fov.dart",, B, {
    "^": "",
    Fov: {
      "^": "Object;_fov$_stage,0_shadows",
      refresh$1: function(pos) {
        var t1, octant;
        t1 = this._fov$_stage;
        if (t1.game.hero.blindness._turnsRemaining > 0) {
          this._hideAll$0();
          return;
        }
        for (octant = 0; octant < 8; ++octant)
          this._refreshOctant$2(pos, octant);
        t1.setOcclusion$2(pos, false);
      },
      _hideAll$0: function() {
        var t1, t2;
        for (t1 = this._fov$_stage, t2 = X.RectIterator$(t1.tiles.bounds); t2.moveNext$0();)
          t1.setOcclusion$2(new L.Vec(t2._rect$_x, t2._rect$_y), true);
        t1.setOcclusion$2(t1.game.hero._pos, false);
      },
      _refreshOctant$2: function(start, octant) {
        var t1, rowInc, colInc, t2, bounds, t3, t4, t5, t6, fullShadow, row, pos, t7, row0, col, projection, t8, t9;
        t1 = $.$get$Fov__octantCoordinates();
        if (octant >= 8)
          return H.ioore(t1, octant);
        t1 = t1[octant];
        rowInc = t1[0];
        colInc = t1[1];
        this._shadows = H.setRuntimeTypeInfo([], [B._Shadow]);
        t1 = this._fov$_stage;
        t2 = t1.tiles;
        bounds = t2.bounds;
        t2 = t2._elements;
        t3 = bounds.size.x;
        t4 = t2.length;
        t5 = rowInc.x;
        if (typeof t5 !== "number")
          return t5.$mul();
        t6 = rowInc.y;
        fullShadow = false;
        row = 1;
        for (; true; row = row0) {
          pos = start.$add(0, new L.Vec(t5 * row, t6 * row));
          if (!bounds.contains$1(0, pos))
            break;
          for (t7 = row + 2, row0 = row + 1, col = 0; col <= row; ++col) {
            if (fullShadow)
              t1.setOcclusion$2(pos, true);
            else {
              projection = new B._Shadow(col / t7, (col + 1) / row0);
              t1.setOcclusion$2(pos, this._isInShadow$1(projection));
              if (typeof t3 !== "number")
                return H.iae(t3);
              t8 = pos.x;
              if (typeof t8 !== "number")
                return H.iae(t8);
              t8 = pos.y * t3 + t8;
              if (t8 < 0 || t8 >= t4)
                return H.ioore(t2, t8);
              t8 = t2[t8];
              t8.toString;
              t9 = $.$get$Motility_fly();
              fullShadow = (t8.type.motility._bitMask & t9._bitMask) === 0 && this._addShadow$1(projection);
            }
            pos = pos.$add(0, colInc);
            if (!bounds.contains$1(0, pos))
              break;
          }
        }
      },
      _isInShadow$1: function(projection) {
        var t1, t2, t3, t4, _i, shadow;
        for (t1 = this._shadows, t2 = t1.length, t3 = projection.start, t4 = projection.end, _i = 0; _i < t2; ++_i) {
          shadow = t1[_i];
          if (shadow.start <= t3 && shadow.end >= t4)
            return true;
        }
        return false;
      },
      _addShadow$1: function(shadow) {
        var t1, t2, t3, index, t4, t5, overlapsPrev;
        for (t1 = this._shadows, t2 = t1.length, t3 = shadow.start, index = 0; t4 = index < t2, t4; ++index)
          if (t1[index].start > t3)
            break;
        if (index > 0) {
          t5 = index - 1;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          overlapsPrev = t1[t5].end > t3;
        } else
          overlapsPrev = false;
        if (t4 && t1[index].start < shadow.end)
          if (overlapsPrev) {
            t3 = index - 1;
            if (t3 < 0 || t3 >= t2)
              return H.ioore(t1, t3);
            t3 = t1[t3];
            t4 = t3.end;
            if (index >= t2)
              return H.ioore(t1, index);
            t3.end = Math.max(t4, t1[index].end);
            t1 = this._shadows;
            (t1 && C.JSArray_methods).removeAt$1(t1, index);
          } else {
            if (index >= t2)
              return H.ioore(t1, index);
            t1 = t1[index];
            t1.start = Math.min(t1.start, t3);
          }
        else if (overlapsPrev) {
          t3 = index - 1;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          t3.end = Math.max(t3.end, shadow.end);
        } else {
          t1.toString;
          H.assertSubtypeOfRuntimeType(shadow, H.getTypeArgumentByIndex(t1, 0));
          if (typeof t1 !== "object" || t1 === null || !!t1.fixed$length)
            H.throwExpression(P.UnsupportedError$("insert"));
          if (index > t2)
            H.throwExpression(P.RangeError$value(index, null, null));
          t1.splice(index, 0, shadow);
        }
        t1 = this._shadows;
        t2 = t1.length;
        if (t2 === 1) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          t1 = t1[0];
          t1 = t1.start === 0 && t1.end === 1;
        } else
          t1 = false;
        return t1;
      }
    },
    _Shadow: {
      "^": "Object;start,end",
      toString$0: function(_) {
        return "(" + H.S(this.start) + "-" + H.S(this.end) + ")";
      }
    }
  }], ["", "package:hauberk/src/engine/stage/lighting.dart",, F, {
    "^": "",
    Lighting: {
      "^": "Object;_lighting$_stage,_floorLight,_actorLight,_fov,_lighting$_queue,_floorLightDirty,_actorLightDirty,_visibilityDirty",
      refresh$0: function() {
        if (this._floorLightDirty)
          this._lightFloor$0();
        if (this._actorLightDirty)
          this._lightActors$0();
        if (this._visibilityDirty)
          this._fov.refresh$1(this._lighting$_stage.game.hero._pos);
        if (this._floorLightDirty || this._actorLightDirty || this._visibilityDirty) {
          this._mergeLayers$0();
          this._lightWalls$0();
          this._updateExplored$0();
        }
        this._floorLightDirty = false;
        this._actorLightDirty = false;
        this._visibilityDirty = false;
      },
      _lightFloor$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, y, t12, x, pos, t13, emanation, t14, t15;
        t1 = this._lighting$_queue;
        C.JSArray_methods.set$length(t1._buckets, 0);
        for (t2 = this._lighting$_stage, t3 = t2.tiles, t4 = t3.bounds.size, t5 = t4.y, t4 = t4.x, t6 = this._floorLight, t7 = H.getTypeArgumentByIndex(t6, 0), t8 = t6._elements, t9 = t6.bounds.size.x, t2 = t2._itemsByTile, t3 = t3._elements, t10 = t3.length, t11 = [R.Item], y = 0; y < t5; ++y) {
          if (typeof t4 !== "number")
            return H.iae(t4);
          t12 = y * t4;
          x = 0;
          for (; x < t4; ++x) {
            pos = new L.Vec(x, y);
            t13 = t12 + x;
            if (t13 < 0 || t13 >= t10)
              return H.ioore(t3, t13);
            t13 = t3[t13];
            emanation = H.intTypeCheck(C.JSInt_methods.clamp$2(t13.type.emanation + t13._appliedEmanation, 0, 192));
            t14 = t2.$index(0, pos);
            if (t14 == null)
              t14 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t11), null);
            t14 = t14._inventory$_items;
            t14 = new J.ArrayIterator(t14, t14.length, 0, [H.getTypeArgumentByIndex(t14, 0)]);
            for (; t14.moveNext$0();) {
              t15 = t14.__interceptors$_current.type.emanationLevel;
              if (t15 === 0)
                continue;
              emanation += F.Lighting_emanationForLevel(t15);
            }
            if (t13.element.emanates && t13.substance > 0)
              emanation += F.Lighting_emanationForLevel(7);
            if (emanation > 0) {
              emanation = Math.min(emanation, 192);
              H.assertSubtypeOfRuntimeType(emanation, t7);
              if (typeof t9 !== "number")
                return H.iae(t9);
              C.JSArray_methods.$indexSet(t8, y * t9 + x, emanation);
              t1.add$2(0, pos, 255 - emanation);
            } else {
              H.assertSubtypeOfRuntimeType(0, t7);
              if (typeof t9 !== "number")
                return H.iae(t9);
              C.JSArray_methods.$indexSet(t8, y * t9 + x, 0);
            }
          }
        }
        this._process$1(t6);
      },
      _lightActors$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, _i, actor, emanation, t8, t9;
        t1 = this._actorLight;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = t1._elements;
        C.JSArray_methods.fillRange$3(t3, 0, t3.length, H.assertSubtypeOfRuntimeType(0, t2));
        t4 = this._lighting$_queue;
        C.JSArray_methods.set$length(t4._buckets, 0);
        for (t5 = this._lighting$_stage._actors, t6 = t5.length, t7 = t1.bounds.size.x, _i = 0; _i < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i) {
          actor = t5[_i];
          emanation = F.Lighting_emanationForLevel(actor.get$emanationLevel());
          if (emanation > 0) {
            t8 = actor._pos;
            H.assertSubtypeOfRuntimeType(emanation, t2);
            t9 = t8.y;
            if (typeof t7 !== "number")
              return H.iae(t7);
            t8 = t8.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            C.JSArray_methods.$indexSet(t3, t9 * t7 + t8, emanation);
            t4.add$2(0, actor._pos, 255 - emanation);
          }
        }
        this._process$1(t1);
      },
      _mergeLayers$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, y, x, t11, t12, t13;
        for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = this._floorLight, t5 = t4._elements, t4 = t4.bounds.size.x, t6 = t5.length, t7 = this._actorLight, t8 = t7._elements, t7 = t7.bounds.size.x, t9 = t8.length, t1 = t1._elements, t10 = t1.length, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = 0;
          for (; x < t2; ++x) {
            t11 = y * t2 + x;
            if (t11 < 0 || t11 >= t10)
              return H.ioore(t1, t11);
            t11 = t1[t11];
            t11.toString;
            t12 = $.$get$Motility_fly();
            if ((t11.type.motility._bitMask & t12._bitMask) === 0)
              continue;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t12 = y * t4 + x;
            if (t12 < 0 || t12 >= t6)
              return H.ioore(t5, t12);
            t12 = t5[t12];
            if (typeof t7 !== "number")
              return H.iae(t7);
            t13 = y * t7 + x;
            if (t13 < 0 || t13 >= t9)
              return H.ioore(t8, t13);
            t11.illumination = H.intTypeCheck(J.clamp$2$n(J.$add$ansx(t12, t8[t13]), 0, 255));
          }
        }
      },
      _lightWalls$0: function() {
        var t1, t2, t3, t4, y, x, _box_0, t5, t6, checkNeighbor, _i;
        for (t1 = this._lighting$_stage.tiles, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t1 = t1._elements, t4 = t1.length, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = 0;
          for (; x < t2; ++x) {
            _box_0 = {};
            t5 = y * t2 + x;
            if (t5 < 0 || t5 >= t4)
              return H.ioore(t1, t5);
            t5 = t1[t5];
            t5.toString;
            t6 = $.$get$Motility_fly();
            if ((t5.type.motility._bitMask & t6._bitMask) !== 0)
              continue;
            _box_0.illumination = 0;
            _box_0.openNeighbor = false;
            checkNeighbor = new F.Lighting__lightWalls_checkNeighbor(_box_0, this, x, y);
            for (_i = 0; _i < 4; ++_i)
              checkNeighbor.call$1(C.List_aAW[_i]);
            if (!_box_0.openNeighbor)
              for (_i = 0; _i < 4; ++_i)
                checkNeighbor.call$1(C.List_izR[_i]);
            t5.illumination = _box_0.illumination;
          }
        }
      },
      _updateExplored$0: function() {
        var t1, t2, t3, y, x;
        for (t1 = this._lighting$_stage, t2 = t1.tiles.bounds.size, t3 = t2.y, t2 = t2.x, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = 0;
          for (; x < t2; ++x)
            t1.exploreAt$2(x, y);
        }
        t2 = t1.game.hero._pos;
        t1.exploreAt$3$force(t2.x, t2.y, true);
      },
      _process$1: function(tiles) {
        var t1, t2, t3, t4, pos, t5, t6;
        H.assertSubtype(tiles, "$isArray2D", [P.int], "$asArray2D");
        for (t1 = tiles._elements, t2 = tiles.bounds.size.x, t3 = t1.length, t4 = this._lighting$_queue; true;) {
          pos = t4.removeNext$0();
          if (pos == null)
            break;
          t5 = pos.y;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t6 = pos.x;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t6 = t5 * t2 + t6;
          if (t6 < 0 || t6 >= t3)
            return H.ioore(t1, t6);
          t6 = new F.Lighting__process_checkNeighbor(this, pos, t1[t6], tiles);
          t6.call$2(C.Direction_0_m1, 42);
          t6.call$2(C.Direction_0_1, 42);
          t6.call$2(C.Direction_1_0, 42);
          t6.call$2(C.Direction_m1_0, 42);
          t5 = $.$get$Lighting__diagonalAttenuate();
          t6.call$2(C.Direction_1_m1, t5);
          t6.call$2(C.Direction_1_1, t5);
          t6.call$2(C.Direction_m1_m1, t5);
          t6.call$2(C.Direction_m1_1, t5);
        }
      },
      static: {
        Lighting_emanationForLevel: function(level) {
          switch (level) {
            case 1:
              return 40;
            case 2:
              return 56;
            case 3:
              return 72;
            case 4:
              return 96;
            case 5:
              return 120;
            case 6:
              return 160;
            case 7:
              return 200;
            case 8:
              return 240;
            default:
              if (level <= 0)
                return 0;
              return 255;
          }
        }
      }
    },
    Lighting__lightWalls_checkNeighbor: {
      "^": "Closure:8;_box_0,$this,x,y",
      call$1: function(offset) {
        var t1, neighborX, neighborY, t2, t3;
        t1 = offset.x;
        if (typeof t1 !== "number")
          return H.iae(t1);
        neighborX = this.x + t1;
        neighborY = this.y + offset.y;
        if (neighborX < 0)
          return;
        t1 = this.$this._lighting$_stage.tiles;
        t2 = t1.bounds.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (neighborX >= t3)
          return;
        if (neighborY < 0)
          return;
        if (neighborY >= t2.y)
          return;
        t1 = t1.$get$2(neighborX, neighborY);
        if (t1._isOccluded)
          return;
        t1.toString;
        t2 = $.$get$Motility_fly();
        if ((t1.type.motility._bitMask & t2._bitMask) === 0)
          return;
        t2 = this._box_0;
        t2.openNeighbor = true;
        t2.illumination = Math.max(t2.illumination, t1.illumination);
      }
    },
    Lighting__process_checkNeighbor: {
      "^": "Closure:99;$this,pos,parentLight,tiles",
      call$2: function(dir, attenuation) {
        var neighborPos, t1, t2, t3, illumination;
        neighborPos = this.pos.$add(0, dir);
        t1 = this.$this;
        t2 = t1._lighting$_stage.tiles;
        if (!t2.bounds.contains$1(0, neighborPos))
          return;
        t2 = t2.$index(0, neighborPos);
        t2.toString;
        t3 = $.$get$Motility_fly();
        if ((t2.type.motility._bitMask & t3._bitMask) === 0)
          return;
        t2 = this.parentLight;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof attenuation !== "number")
          return H.iae(attenuation);
        illumination = t2 - attenuation;
        t2 = this.tiles;
        if (J.$ge$n(t2.$index(0, neighborPos), illumination))
          return;
        t2.$indexSet(0, neighborPos, illumination);
        if (illumination <= 42)
          return;
        t1._lighting$_queue.add$2(0, neighborPos, 255 - illumination);
      }
    }
  }], ["", "package:hauberk/src/engine/stage/pathfinder.dart",, Y, {
    "^": "",
    Path: {
      "^": "Object;startDirection,pos<,length>,cost",
      toString$0: function(_) {
        return H.S(this.startDirection) + " pos:" + H.S(this.pos) + " cost:" + this.cost;
      }
    },
    Pathfinder: {
      "^": "Object;$ti",
      search$0: function(_) {
        var paths, explored, t1, t2, path, result, t3, t4, t5, t6, t7, _i, dir, neighbor, t8, t9, t10, cost;
        paths = new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, Y.Path]]), 0, [Y.Path]);
        explored = P.LinkedHashSet_LinkedHashSet(null, null, null, L.Vec);
        t1 = this.start;
        t2 = this.end;
        paths.add$2(0, new Y.Path(C.Direction_0_0, t1, 0, 0), this.heuristic$2(t1, t2));
        for (; true;) {
          path = paths.removeNext$0();
          if (path == null)
            break;
          t1 = path.pos;
          if (J.$eq$(t1, t2))
            return this.reachedGoal$1(path);
          if (!explored.add$1(0, t1))
            continue;
          result = this.processStep$1(path);
          if (result != null)
            return result;
          for (t3 = path.length + 1, t4 = path.cost, t5 = path.startDirection, t6 = t5 === C.Direction_0_0, t7 = this.stage, _i = 0; _i < 8; ++_i) {
            dir = C.List_slV[_i];
            neighbor = t1.$add(0, dir);
            if (explored.contains$1(0, neighbor))
              continue;
            t8 = t7.tiles;
            t9 = t8._elements;
            t8 = t8.bounds.size.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            t10 = neighbor.x;
            if (typeof t10 !== "number")
              return H.iae(t10);
            t10 = neighbor.y * t8 + t10;
            if (t10 < 0 || t10 >= t9.length)
              return H.ioore(t9, t10);
            cost = this.stepCost$2(neighbor, t9[t10]);
            if (cost == null)
              continue;
            t8 = t6 ? dir : t5;
            t9 = t4 + cost;
            paths.add$2(0, new Y.Path(t8, neighbor, t3, t9), t9 + this.heuristic$2(neighbor, t2));
          }
        }
        return this.unreachableGoal$0();
      },
      heuristic$2: function(pos, end) {
        return end.$sub(0, pos).get$kingLength();
      }
    }
  }], ["", "package:hauberk/src/engine/stage/sound.dart",, Z, {
    "^": "",
    _tileCost: function(tile) {
      var t1;
      if (J.$eq$(tile.type.motility, $.$get$Motility_door()))
        return 8;
      tile.toString;
      t1 = $.$get$Motility_fly();
      if ((tile.type.motility._bitMask & t1._bitMask) === 0)
        return 10;
      return 1;
    },
    Sound: {
      "^": "Object;_sound$_stage,0_flow",
      volumeBetween$2: function(from, to) {
        if (to.$sub(0, from).get$kingLength() > 16)
          return 0;
        return this._volume$1(new Z._SoundPathfinder(this._sound$_stage, from, to).search$0(0));
      },
      _heroAuditoryDistance$1: function(pos) {
        var t1;
        if (this._sound$_stage.game.hero._pos.$sub(0, pos).get$kingLength() > 16)
          return 16;
        this._refresh$0();
        t1 = this._flow.costAt$1(pos);
        return t1 == null ? 16 : t1;
      },
      _volume$1: function(auditoryDistance) {
        var volume;
        if (typeof auditoryDistance !== "number")
          return H.iae(auditoryDistance);
        volume = (16 - auditoryDistance) / 16;
        return volume * volume;
      },
      _refresh$0: function() {
        var t1, t2, t3;
        t1 = this._flow;
        if (t1 != null && J.$eq$(this._sound$_stage.game.hero._pos, t1._flow$_start))
          return;
        t1 = this._sound$_stage;
        t2 = t1.game.hero._pos;
        t3 = L.Vec;
        t3 = new Z._SoundFlow(t1, t2, null, new B.BucketQueue(H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]), 0, [t3]), H.setRuntimeTypeInfo([], [t3]));
        t3.Flow$3$maxDistance(t1, t2, null);
        this._flow = t3;
      }
    },
    _SoundFlow: {
      "^": "Flow;stage,_flow$_start,_maxDistance,0_costs,0_offset,_open,_found",
      tileCost$4: function(parentCost, pos, tile, isDiagonal) {
        var t1, t2, t3;
        if (typeof parentCost !== "number")
          return parentCost.$ge();
        if (parentCost >= 16)
          return;
        t1 = pos.x;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < 1)
          return;
        t2 = this.stage.tiles.bounds.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (t1 >= t3 - 1)
          return;
        t1 = pos.y;
        if (t1 < 1)
          return;
        if (t1 >= t2.y - 1)
          return;
        return Z._tileCost(tile);
      }
    },
    _SoundPathfinder: {
      "^": "Pathfinder;stage,start,end",
      processStep$1: function(path) {
        if (path.cost > 16)
          return 16;
        return;
      },
      stepCost$2: function(pos, tile) {
        return Z._tileCost(tile);
      },
      reachedGoal$1: function(path) {
        return path.cost;
      },
      unreachableGoal$0: function() {
        return 16;
      },
      $asPathfinder: function() {
        return [P.int];
      }
    }
  }], ["", "package:hauberk/src/engine/stage/stage.dart",, L, {
    "^": "",
    Stage: {
      "^": "Object;game,_actors,0_lighting,0_sound,_currentActorIndex,tiles,_itemsByTile,_actorsByTile",
      get$width: function(_) {
        return this.tiles.bounds.size.x;
      },
      get$height: function(_) {
        return this.tiles.bounds.size.y;
      },
      $index: function(_, pos) {
        return this.tiles.$index(0, H.interceptedTypeCheck(pos, "$isVec"));
      },
      addActor$1: function(actor) {
        C.JSArray_methods.add$1(this._actors, actor);
        this._actorsByTile.$indexSet(0, actor._pos, actor);
      },
      placeDrops$3: function(pos, motility, drop) {
        var items = H.setRuntimeTypeInfo([], [R.Item]);
        drop.spawnDrop$1(new L.Stage_placeDrops_closure(this, items, N.MotilityFlow$(this, pos, motility, false, null, null), pos));
        return items;
      },
      addItem$2: function(item, pos) {
        this._itemsByTile.putIfAbsent$2(0, pos, new L.Stage_addItem_closure()).tryAdd$1(item);
        if (item.type.emanationLevel > 0)
          this._lighting._floorLightDirty = true;
      },
      itemsAt$1: function(pos) {
        var t1 = this._itemsByTile.$index(0, pos);
        return t1 == null ? O.Inventory$(C.ItemLocation_46y, null, null) : t1;
      },
      removeItem$2: function(_, item, pos) {
        var t1, t2;
        t1 = this._itemsByTile;
        t2 = t1.$index(0, pos)._inventory$_items;
        C.JSArray_methods.remove$1(t2, item);
        if (item.type.emanationLevel > 0)
          this._lighting._floorLightDirty = true;
        if (!new J.ArrayIterator(t2, t2.length, 0, [H.getTypeArgumentByIndex(t2, 0)]).moveNext$0())
          t1.remove$1(0, pos);
      },
      forEachItem$1: function(callback) {
        this._itemsByTile.forEach$1(0, new L.Stage_forEachItem_closure(H.functionTypeCheck(callback, {func: 1, args: [R.Item, L.Vec]})));
      },
      tileOpacityChanged$0: function() {
        var t1 = this._lighting;
        t1._floorLightDirty = true;
        t1._actorLightDirty = true;
        t1._visibilityDirty = true;
        this._sound._flow = null;
      },
      exploreAt$3$force: function(x, y, force) {
        var tile, t1;
        tile = this.tiles.$get$2(x, y);
        if (tile.updateExplored$1$force(force))
          if (tile.illumination > 0 && !tile._isOccluded) {
            t1 = this._actorsByTile.$index(0, new L.Vec(x, y));
            if (t1 != null && !!t1.$isMonster)
              this.game.hero.seeMonster$1(t1);
          }
      },
      exploreAt$2: function(x, y) {
        return this.exploreAt$3$force(x, y, null);
      },
      setOcclusion$2: function(pos, isOccluded) {
        var tile, t1;
        tile = this.tiles.$index(0, pos);
        tile._isOccluded = isOccluded;
        if (!isOccluded) {
          t1 = this._actorsByTile.$index(0, pos);
          if (t1 != null && !!t1.$isMonster && tile.illumination > 0 && !tile._isOccluded)
            this.game.hero.seeMonster$1(t1);
        }
      },
      findOpenTile$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, pos;
        for (t1 = this._actorsByTile, t2 = t1._elements, t1 = t1.bounds.size.x, t3 = t2.length, t4 = this.tiles, t5 = t4._elements, t4 = t4.bounds, t6 = t4.size, t7 = t6.x, t8 = t5.length, t4 = t4.pos, t9 = t4.x; true;) {
          t10 = $.$get$rng();
          t10.toString;
          if (typeof t9 !== "number")
            return t9.$add();
          if (typeof t7 !== "number")
            return H.iae(t7);
          t11 = t9 + t7;
          t12 = Math.min(t9, t11);
          t11 = Math.max(t9, t11);
          t11 = t10._random.nextInt$1(t11 - t12) + t12;
          t12 = t4.y;
          t13 = t12 + t6.y;
          t14 = Math.min(t12, t13);
          t13 = Math.max(t12, t13);
          t10 = t10._random.nextInt$1(t13 - t14) + t14;
          pos = new L.Vec(t11, t10);
          t12 = t10 * t7 + t11;
          if (t12 < 0 || t12 >= t8)
            return H.ioore(t5, t12);
          t12 = t5[t12].type;
          t12.toString;
          t13 = $.$get$Motility_walk();
          if ((t12.motility._bitMask & t13._bitMask) === 0)
            continue;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t10 = t10 * t1 + t11;
          if (t10 < 0 || t10 >= t3)
            return H.ioore(t2, t10);
          if (t2[t10] != null)
            continue;
          return pos;
        }
      },
      static: {
        Stage$: function(width, height, game) {
          var t1, t2, t3, t4;
          t1 = S.Actor;
          t2 = H.setRuntimeTypeInfo([], [t1]);
          t3 = L.Vec;
          t4 = Q.Tile;
          t4 = new M.Array2D(P.List_List$filled(width * height, null, false, t4), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [t4]);
          t4.generate$1(new L.Stage_closure());
          t1 = new L.Stage(game, t2, 0, t4, P.LinkedHashMap_LinkedHashMap$_empty(t3, O.Inventory), M.Array2D$(width, height, null, t1));
          t4 = H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]);
          t2 = P.int;
          t1._lighting = new F.Lighting(t1, M.Array2D$(width, height, 0, t2), M.Array2D$(width, height, 0, t2), new B.Fov(t1), new B.BucketQueue(t4, 0, [t3]), true, true, true);
          t1._sound = new Z.Sound(t1);
          return t1;
        }
      }
    },
    Stage_closure: {
      "^": "Closure:100;",
      call$0: function() {
        return new Q.Tile(false, 0, 0, false, $.$get$Element_none(), 0);
      }
    },
    Stage_placeDrops_closure: {
      "^": "Closure:11;$this,items,flow,pos",
      call$1: function(item) {
        var t1, t2, itemPos, allowed, t3;
        C.JSArray_methods.add$1(this.items, item);
        t1 = this.flow;
        t2 = this.$this;
        itemPos = t1.bestWhere$1(new L.Stage_placeDrops__closure(t2));
        if (itemPos == null) {
          t1 = t1.get$reachable();
          t1.toString;
          t1 = H.TakeIterable_TakeIterable(t1, 10, H.getRuntimeTypeArgument(t1, "Iterable", 0));
          allowed = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
          t1 = allowed.length;
          if (t1 !== 0) {
            t3 = $.$get$rng();
            t3.toString;
            H.assertSubtype(allowed, "$isList", [L.Vec], "$asList");
            t1 = t3.range$1(t1);
            if (t1 < 0 || t1 >= allowed.length)
              return H.ioore(allowed, t1);
            itemPos = allowed[t1];
          } else
            itemPos = this.pos;
        }
        t2.addItem$2(item, itemPos);
      }
    },
    Stage_placeDrops__closure: {
      "^": "Closure:3;$this",
      call$1: function(pos) {
        var t1;
        if ($.$get$rng().range$1(5) === 0)
          return true;
        t1 = this.$this;
        return t1._actorsByTile.$index(0, pos) == null && !t1._itemsByTile.containsKey$1(0, pos);
      }
    },
    Stage_addItem_closure: {
      "^": "Closure:101;",
      call$0: function() {
        return O.Inventory$(C.ItemLocation_46y, null, null);
      }
    },
    Stage_forEachItem_closure: {
      "^": "Closure:102;callback",
      call$2: function(pos, inventory) {
        var t1, t2;
        H.interceptedTypeCheck(pos, "$isVec");
        for (t1 = H.interceptedTypeCheck(inventory, "$isInventory")._inventory$_items, t1 = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]), t2 = this.callback; t1.moveNext$0();)
          t2.call$2(t1.__interceptors$_current, pos);
      }
    }
  }], ["", "package:hauberk/src/engine/stage/tile.dart",, Q, {
    "^": "",
    Motility: {
      "^": "Object;_bitMask",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof Q.Motility)
          return this._bitMask === other._bitMask;
        return false;
      },
      $or: function(_, other) {
        return new Q.Motility(this._bitMask | other._bitMask);
      },
      toString$0: function(_) {
        return C.JSInt_methods.toString$0(this._bitMask);
      },
      static: {
        Motility$_: function(_bitMask) {
          return new Q.Motility(_bitMask);
        }
      }
    },
    TileType: {
      "^": "Object;name>,isExit,emanation,appearance>,motility,onClose,onOpen"
    },
    Tile: {
      "^": "Object;0type>,_isOccluded,illumination,_appliedEmanation,_isExplored,element,substance",
      addEmanation$1: function(offset) {
        this._appliedEmanation = H.intTypeCheck(C.JSInt_methods.clamp$2(this._appliedEmanation + offset, 0, 192));
      },
      updateExplored$1$force: function(force) {
        var t1;
        if (!(force == null ? false : force))
          t1 = this.illumination > 0 && !this._isOccluded;
        else
          t1 = true;
        if (t1 && !this._isExplored) {
          this._isExplored = true;
          return true;
        }
        return false;
      }
    }
  }], ["", "package:hauberk/src/hues.dart",, B, {
    "^": "",
    elementColor: function(element) {
      return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Element_none(), C.Color_132_126_135, $.$get$Elements_air(), C.Color_129_231_235, $.$get$Elements_earth(), C.Color_142_82_55, $.$get$Elements_fire(), C.Color_204_35_57, $.$get$Elements_water(), C.Color_26_46_150, $.$get$Elements_acid(), C.Color_131_158_13, $.$get$Elements_cold(), C.Color_64_163_229, $.$get$Elements_lightning(), C.Color_189_106_235, $.$get$Elements_poison(), C.Color_22_117_38, $.$get$Elements_dark(), C.Color_38_38_56, $.$get$Elements_light(), C.Color_255_238_168, $.$get$Elements_spirit(), C.Color_86_30_138], G.Element, L.Color).$index(0, element);
    }
  }], ["", "package:hauberk/src/ui/confirm_dialog.dart",, L, {
    "^": "",
    ConfirmDialog: {
      "^": "Screen;message>,result,0_ui",
      get$isTransparent: function() {
        return true;
      },
      handleInput$1: function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$1(null);
          return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 78:
            this._ui.pop$1(null);
            break;
          case 89:
            this._ui.pop$1(this.result);
            break;
        }
        return true;
      },
      update$0: function(_) {
        return false;
      },
      render$1: function(terminal) {
        terminal.writeAt$4(0, 0, this.message + " [Y]/[N]", C.Color_132_126_135);
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/direction_dialog.dart",, T, {
    "^": "",
    DirectionDialog: {
      "^": "Screen;",
      get$isTransparent: function() {
        return true;
      },
      handleInput$1: function(input) {
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_cancel:
            this._select$1(C.Direction_0_0);
            break;
          case C.Input_nw:
            this._select$1(C.Direction_m1_m1);
            break;
          case C.Input_n:
            this._select$1(C.Direction_0_m1);
            break;
          case C.Input_ne:
            this._select$1(C.Direction_1_m1);
            break;
          case C.Input_w:
            this._select$1(C.Direction_m1_0);
            break;
          case C.Input_e:
            this._select$1(C.Direction_1_0);
            break;
          case C.Input_sw:
            this._select$1(C.Direction_m1_1);
            break;
          case C.Input_s:
            this._select$1(C.Direction_0_1);
            break;
          case C.Input_se:
            this._select$1(C.Direction_1_1);
            break;
        }
        return true;
      },
      update$0: function(_) {
        var t1 = (this._animateOffset + 1) % 40;
        this._animateOffset = t1;
        if (C.JSInt_methods.$mod(t1, 5) === 0)
          this.dirty$0();
      },
      render$1: function(terminal) {
        var t1;
        terminal.writeAt$4(0, 0, this.get$question(), C.Color_132_126_135);
        t1 = new T.DirectionDialog_render_draw(this, terminal);
        t1.call$3(0, C.Direction_0_m1, "|");
        t1.call$3(1, C.Direction_1_m1, "/");
        t1.call$3(2, C.Direction_1_0, "-");
        t1.call$3(3, C.Direction_1_1, "\\");
        t1.call$3(4, C.Direction_0_1, "|");
        t1.call$3(5, C.Direction_m1_1, "/");
        t1.call$3(6, C.Direction_m1_0, "-");
        t1.call$3(7, C.Direction_m1_m1, "\\");
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[\u2195\u2194] " + this.get$helpText() + ", [Esc] Cancel", C.Color_38_38_56);
      },
      _select$1: function(dir) {
        var t1, t2;
        t1 = this.tryDirection$1(dir);
        t2 = this._ui;
        if (t1)
          t2.pop$1(dir);
        else
          t2.pop$1(C.Direction_0_0);
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    DirectionDialog_render_draw: {
      "^": "Closure;$this,terminal",
      call$3: function(frame, dir, char) {
        var t1, t2, t3, pos, glyph, items;
        t1 = this.$this;
        t2 = t1._gameScreen;
        t3 = t2.game;
        pos = t3.hero._pos.$add(0, dir);
        if (!t1.canTarget$1(t3._stage.tiles.$index(0, pos)))
          return;
        if (C.JSInt_methods._tdivFast$1(t1._animateOffset, 5) === frame)
          glyph = L.Glyph$(char, C.Color_222_156_33, C.Color_64_31_36);
        else {
          t1 = t3._stage._actorsByTile.$index(0, pos);
          if (t1 != null)
            glyph = H.interceptedTypeCast(t1.get$appearance(t1), "$isGlyph");
          else {
            items = t3._stage.itemsAt$1(pos);
            t1 = items._inventory$_items;
            if (new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]).moveNext$0())
              glyph = H.interceptedTypeCast(J.get$appearance$x(items.get$first(items)), "$isGlyph");
            else {
              t1 = t3._stage.tiles.$index(0, pos);
              if (t1._isExplored)
                t1.type.appearance;
              else
                L.Glyph$fromCharCode(32, null, null);
              glyph = t3._stage.tiles.$index(0, pos).type.appearance;
            }
          }
          glyph = L.Glyph$fromCharCode(glyph.char, C.Color_222_156_33, C.Color_64_31_36);
        }
        t2.drawStageGlyph$4(this.terminal, pos.x, pos.y, glyph);
      }
    },
    SkillDirectionDialog: {
      "^": "DirectionDialog;_onSelect,_gameScreen,_animateOffset,0_ui",
      get$question: function() {
        return "Which direction?";
      },
      get$helpText: function() {
        return "Choose direction";
      },
      canTarget$1: function(tile) {
        return true;
      },
      tryDirection$1: function(direction) {
        this._onSelect.call$1(direction);
        return true;
      }
    },
    CloseDialog: {
      "^": "DirectionDialog;_gameScreen,_animateOffset,0_ui",
      get$question: function() {
        return "Close what?";
      },
      get$helpText: function() {
        return "Choose direction";
      },
      canTarget$1: function(tile) {
        return tile.type.onClose != null;
      },
      tryDirection$1: function(direction) {
        var t1, pos, t2;
        t1 = this._gameScreen.game;
        pos = t1.hero._pos.$add(0, direction);
        t2 = t1._stage.tiles.$index(0, pos).type.onClose;
        if (t2 != null) {
          t1 = t1.hero;
          t2 = t2.call$1(pos);
          t1.toString;
          t1._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t2, "$isAction"));
          return true;
        } else {
          t1.log.add$5(0, C.LogType_error, "There is nothing to close there.", null, null, null);
          return false;
        }
      }
    },
    OpenDialog: {
      "^": "DirectionDialog;_gameScreen,_animateOffset,0_ui",
      get$question: function() {
        return "Open what?";
      },
      get$helpText: function() {
        return "Choose direction";
      },
      canTarget$1: function(tile) {
        return tile.type.onOpen != null;
      },
      tryDirection$1: function(direction) {
        var t1, pos, t2;
        t1 = this._gameScreen.game;
        pos = t1.hero._pos.$add(0, direction);
        t2 = t1._stage.tiles.$index(0, pos).type.onOpen;
        if (t2 != null) {
          t1 = t1.hero;
          t2 = t2.call$1(pos);
          t1.toString;
          t1._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t2, "$isAction"));
          return true;
        } else {
          t1.log.add$5(0, C.LogType_error, "There is nothing to open there.", null, null, null);
          return false;
        }
      }
    }
  }], ["", "package:hauberk/src/ui/draw.dart",, R, {
    "^": "",
    Draw_box: function(terminal, x, y, width, height, color) {
      var t1, bar, row, t2, $top, bottom;
      t1 = width - 2;
      bar = "\u2502" + C.JSString_methods.$mul(" ", t1) + "\u2502";
      for (row = y + 1, t2 = y + height - 1; row < t2; ++row)
        terminal.writeAt$4(x, row, bar, color);
      $top = "\u250c" + C.JSString_methods.$mul("\u2500", t1) + "\u2510";
      bottom = "\u2514" + C.JSString_methods.$mul("\u2500", t1) + "\u2518";
      terminal.writeAt$4(x, y, $top, color);
      terminal.writeAt$4(x, t2, bottom, color);
    },
    Draw_frame: function(terminal, x, y, width, height, color) {
      var t1, bar, row, t2, $top, bottom;
      if (color == null)
        color = C.Color_38_38_56;
      if (typeof width !== "number")
        return width.$sub();
      t1 = width - 2;
      bar = "\u2502" + C.JSString_methods.$mul(" ", t1) + "\u2502";
      for (row = y + 1, t2 = y + height - 1; row < t2; ++row)
        terminal.writeAt$4(x, row, bar, color);
      $top = "\u2552" + C.JSString_methods.$mul("\u2550", t1) + "\u2555";
      bottom = "\u2514" + C.JSString_methods.$mul("\u2500", t1) + "\u2518";
      terminal.writeAt$4(x, y, $top, color);
      terminal.writeAt$4(x, t2, bottom, color);
    },
    Draw_meter: function(terminal, x, y, width, value, max, fore, $back) {
      var t1, barWidth, i, char;
      t1 = width * 2;
      if (typeof value !== "number")
        return H.iae(value);
      barWidth = C.JSDouble_methods.round$0(t1 * value / max);
      if (barWidth === 0 && value > 0)
        barWidth = 1;
      if (barWidth === t1 && value < max)
        barWidth = t1 - 1;
      for (t1 = barWidth + 1, i = 0; i < width; ++i) {
        if (i < C.JSInt_methods._tdivFast$1(barWidth, 2))
          char = 9608;
        else
          char = i < C.JSInt_methods._tdivFast$1(t1, 2) ? 9612 : 32;
        terminal.drawGlyph$3(x + i, y, new L.Glyph(char, fore, $back));
      }
    }
  }], ["", "package:hauberk/src/ui/effect.dart",, K, {
    "^": "",
    addEffects: function(effects, $event) {
      var t1, t2, i, theta, radius, t3, numParticles, t4, line;
      H.assertSubtype(effects, "$isList", [K.Effect], "$asList");
      switch ($event.type) {
        case C.EventType_pause:
          break;
        case C.EventType_bolt:
        case C.EventType_cone:
          t1 = $event.pos;
          t2 = $event.element;
          C.JSArray_methods.add$1(effects, new K.ElementEffect(t1, $.$get$_elementSequences().$index(0, t2), 0));
          break;
        case C.EventType_toss:
          C.JSArray_methods.add$1(effects, new K.ItemEffect($event.pos, H.interceptedTypeCast($event.other, "$isItem"), 2));
          break;
        case C.EventType_hit:
          t1 = $event.actor;
          t2 = t1._health;
          if (typeof t2 !== "number")
            return H.iae(t2);
          C.JSArray_methods.add$1(effects, new K.HitEffect(t1, C.JSInt_methods.$tdiv(10 * t2, t1.get$maxHealth()), 0));
          break;
        case C.EventType_die:
          for (i = 0; i < 10; ++i) {
            t1 = $event.actor._pos;
            t1 = new K.ParticleEffect(t1.x, t1.y, C.Color_204_35_57);
            t2 = $.$get$rng();
            theta = t2._random.nextInt$1(628) / 100;
            radius = (t2._random.nextInt$1(10) + 30) / 100;
            t1.h = Math.cos(theta) * radius;
            t1.v = Math.sin(theta) * radius;
            t1.life = t2._random.nextInt$1(8) + 7;
            C.JSArray_methods.add$1(effects, t1);
          }
          break;
        case C.EventType_heal:
          t1 = $event.actor._pos;
          C.JSArray_methods.add$1(effects, new K.HealEffect(t1.x, t1.y, 0));
          break;
        case C.EventType_detect:
          C.JSArray_methods.add$1(effects, new K.DetectEffect($event.pos, 20));
          break;
        case C.EventType_map:
          t1 = $event.pos;
          t2 = $.$get$rng().range$2(10, 20);
          t1 = new K.MapEffect(t2, t1);
          t1.life = t2;
          C.JSArray_methods.add$1(effects, t1);
          break;
        case C.EventType_teleport:
          t1 = $event.actor;
          t2 = t1._pos;
          t3 = $event.pos;
          numParticles = t2.$sub(0, t3).get$kingLength() * 2;
          for (i = 0; i < numParticles; ++i) {
            t2 = new K.TeleportEffect(0, t1._pos);
            t2.x = t3.x;
            t2.y = t3.y;
            t4 = $.$get$rng();
            theta = t4._random.nextInt$1(628) / 100;
            radius = (t4._random.nextInt$1(70) + 10) / 100;
            t2.h = Math.cos(theta) * radius;
            t2.v = Math.sin(theta) * radius;
            C.JSArray_methods.add$1(effects, t2);
          }
          break;
        case C.EventType_spawn:
          C.JSArray_methods.add$1(effects, new K.FrameEffect($event.actor._pos, "*", C.Color_226_223_240, 4));
          break;
        case C.EventType_howl:
          C.JSArray_methods.add$1(effects, new K.HowlEffect($event.actor, 0));
          break;
        case C.EventType_awaken:
          C.JSArray_methods.add$1(effects, new K.BlinkEffect($event.actor, L.Glyph$("!", C.Color_226_223_240, null), 0));
          break;
        case C.EventType_frighten:
          C.JSArray_methods.add$1(effects, new K.BlinkEffect($event.actor, L.Glyph$("!", C.Color_222_156_33, null), 0));
          break;
        case C.EventType_wind:
          break;
        case C.EventType_knockBack:
          C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, "*", C.Color_255_238_168, 4));
          break;
        case C.EventType_slash:
        case C.EventType_stab:
          line = $.$get$_directionLines().$index(0, $event.dir);
          C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, line, C.Color_226_223_240, 4));
          break;
        case C.EventType_gold:
          t1 = $event.pos;
          t2 = H.interceptedTypeCast($event.other, "$isItem");
          C.JSArray_methods.add$1(effects, new K.TreasureEffect(t1.x, t1.y, t2, 8));
          break;
        case C.EventType_openBarrel:
          C.JSArray_methods.add$1(effects, new K.FrameEffect($event.pos, "*", C.Color_189_144_108, 4));
          break;
      }
    },
    _glyphs: function(chars, colors) {
      var results, t1, t2, t3, _i, color;
      H.assertSubtype(colors, "$isList", [L.Color], "$asList");
      results = H.setRuntimeTypeInfo([], [L.Glyph]);
      for (t1 = new H.CodeUnits(chars), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, [P.int]); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        for (t3 = colors.length, _i = 0; _i < colors.length; colors.length === t3 || (0, H.throwConcurrentModificationError)(colors), ++_i) {
          color = colors[_i];
          C.JSArray_methods.add$1(results, new L.Glyph(t2, color, C.Color_0_0_0));
        }
      }
      return results;
    },
    Effect: {
      "^": "Object;"
    },
    ElementEffect: {
      "^": "Object;_effect$_pos,_sequence,_age",
      update$1: function(_, game) {
        if ($.$get$rng().range$1(this._age + 2) === 0)
          ++this._age;
        return this._age < this._sequence.length;
      },
      render$2: function(game, drawGlyph) {
        var t1, t2, t3, t4, t5;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        t1 = this._effect$_pos;
        t2 = t1.x;
        t1 = t1.y;
        t3 = $.$get$rng();
        t4 = this._sequence;
        t5 = this._age;
        if (t5 >= t4.length)
          return H.ioore(t4, t5);
        t5 = t4[t5];
        t3.toString;
        H.assertSubtype(t5, "$isList", [L.Glyph], "$asList");
        t3 = t3.range$1(t5.length);
        if (t3 < 0 || t3 >= t5.length)
          return H.ioore(t5, t3);
        drawGlyph.call$3(t2, t1, t5[t3]);
      },
      $isEffect: 1
    },
    FrameEffect: {
      "^": "Object;pos<,char,color,life",
      update$1: function(_, game) {
        var t1 = game._stage.tiles.$index(0, this.pos);
        if (!(t1.illumination > 0 && !t1._isOccluded))
          return false;
        return --this.life >= 0;
      },
      render$2: function(game, drawGlyph) {
        var t1 = this.pos;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(t1.x, t1.y, L.Glyph$(this.char, this.color, null));
      },
      $isEffect: 1
    },
    ItemEffect: {
      "^": "Object;pos<,item,_life",
      update$1: function(_, game) {
        var t1 = game._stage.tiles.$index(0, this.pos);
        if (!(t1.illumination > 0 && !t1._isOccluded))
          return false;
        return --this._life >= 0;
      },
      render$2: function(game, drawGlyph) {
        var t1 = this.pos;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(t1.x, t1.y, this.item.type.appearance);
      },
      $isEffect: 1
    },
    HitEffect: {
      "^": "Object;actor,health,frame",
      update$1: function(_, game) {
        return this.frame++ < 23;
      },
      render$2: function(game, drawGlyph) {
        var t1, $back, t2, t3;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        t1 = C.JSInt_methods._tdivFast$1(this.frame, 6);
        if (t1 >= 4)
          return H.ioore(C.List_ukV, t1);
        $back = C.List_ukV[t1];
        t1 = this.actor._pos;
        t2 = t1.x;
        t1 = t1.y;
        t3 = this.health;
        if (t3 < 0 || t3 >= 10)
          return H.ioore(" 123456789", t3);
        drawGlyph.call$3(t2, t1, L.Glyph$(" 123456789"[t3], C.Color_0_0_0, $back));
      },
      $isEffect: 1
    },
    ParticleEffect: {
      "^": "Object;x>,y>,0h,0v,0life,color",
      update$1: function(_, game) {
        var t1, t2, pos;
        t1 = this.x;
        t2 = this.h;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = t1 + t2;
        this.x = t2;
        this.y = this.y + this.v;
        pos = new L.Vec(C.JSNumber_methods.toInt$0(t2), C.JSNumber_methods.toInt$0(this.y));
        if (!game._stage.tiles.bounds.contains$1(0, pos))
          return false;
        t1 = game._stage.tiles.$index(0, pos);
        t1.toString;
        t2 = $.$get$Motility_fly();
        if ((t1.type.motility._bitMask & t2._bitMask) === 0)
          return false;
        return this.life-- > 0;
      },
      render$2: function(game, drawGlyph) {
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(J.toInt$0$n(this.x), C.JSNumber_methods.toInt$0(this.y), L.Glyph$("*", this.color, null));
      },
      $isEffect: 1
    },
    TeleportEffect: {
      "^": "Object;0x>,0y>,0h,0v,age,target",
      update$1: function(_, game) {
        var t1, friction, t2, t3, pull, t4, t5, t6, t7;
        t1 = this.age;
        friction = 1 - t1 * 0.015;
        t2 = this.h *= friction;
        t3 = this.v *= friction;
        pull = t1 * 0.003;
        t4 = this.target;
        t5 = t4.x;
        t6 = this.x;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        t5 = t2 + (t5 - t6) * pull;
        this.h = t5;
        t2 = t4.y;
        t7 = this.y;
        t2 = t3 + (t2 - t7) * pull;
        this.v = t2;
        t5 = t6 + t5;
        this.x = t5;
        this.y = t7 + t2;
        this.age = t1 + 1;
        return new L.Vec(C.JSNumber_methods.toInt$0(t5), C.JSNumber_methods.toInt$0(this.y)).$sub(0, t4).$gt(0, 1);
      },
      render$2: function(game, drawGlyph) {
        var t1, t2, char, t3, t4;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        t1 = J.toInt$0$n(this.x);
        t2 = C.JSNumber_methods.toInt$0(this.y);
        if (!game._stage.tiles.bounds.contains$1(0, new L.Vec(t1, t2)))
          return;
        char = this._getChar$2(this.h, this.v);
        t3 = $.$get$rng();
        t4 = $.$get$TeleportEffect__colors();
        t3.toString;
        H.assertSubtype(t4, "$isList", [L.Color], "$asList");
        t3 = t3.range$1(4);
        if (t3 < 0 || t3 >= 4)
          return H.ioore(t4, t3);
        drawGlyph.call$3(t1, t2, L.Glyph$fromCharCode(char, t4[t3], null));
      },
      _getChar$2: function(x, y) {
        if (new L.Vec(C.JSNumber_methods.toInt$0(x * 10), C.JSNumber_methods.toInt$0(y * 10)).$lt(0, 5))
          return 8226;
        return C.JSString_methods.codeUnitAt$1("|\\\\--//||\\\\--//||", C.JSDouble_methods.floor$0(Math.atan2(x, y) / 6.283185307179586 * 16 + 8));
      },
      $isEffect: 1
    },
    HealEffect: {
      "^": "Object;x>,y>,frame",
      update$1: function(_, game) {
        return this.frame++ < 24;
      },
      render$2: function(game, drawGlyph) {
        var t1, t2, t3, $back;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        t1 = game._stage;
        t2 = this.x;
        t3 = this.y;
        if (t1.tiles.$get$2(t2, t3)._isOccluded)
          return;
        switch (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this.frame, 4), 4)) {
          case 0:
            $back = C.Color_19_17_28;
            break;
          case 1:
            $back = C.Color_9_95_112;
            break;
          case 2:
            $back = C.Color_64_163_229;
            break;
          case 3:
            $back = C.Color_129_231_235;
            break;
        }
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$sub();
        drawGlyph.call$3(t1 - 1, this.y, L.Glyph$("-", $back, null));
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$add();
        drawGlyph.call$3(t1 + 1, this.y, L.Glyph$("-", $back, null));
        drawGlyph.call$3(this.x, this.y - 1, L.Glyph$("|", $back, null));
        drawGlyph.call$3(this.x, this.y + 1, L.Glyph$("|", $back, null));
      },
      $isEffect: 1
    },
    DetectEffect: {
      "^": "Object;pos<,life",
      update$1: function(_, game) {
        return --this.life >= 0;
      },
      render$2: function(game, drawGlyph) {
        var radius, t1, glyph, t2, t3, pixel;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        radius = C.JSInt_methods._tdivFast$1(this.life, 4);
        t1 = $.$get$DetectEffect__colors();
        if (radius < 0 || radius >= 5)
          return H.ioore(t1, radius);
        glyph = L.Glyph$("*", t1[radius], null);
        t1 = Q._CircleIterator__CircleIterator(new Q.Circle(this.pos, radius), true);
        t2 = t1._boundsIterator;
        t3 = t1._circle.center;
        for (; t1.moveNext$0();) {
          pixel = new L.Vec(t2._rect$_x, t2._rect$_y).$add(0, t3);
          drawGlyph.call$3(pixel.x, pixel.y, glyph);
        }
      },
      $isEffect: 1
    },
    MapEffect: {
      "^": "Object;_maxLife,pos<,0life",
      update$1: function(_, game) {
        return --this.life >= 0;
      },
      render$2: function(game, drawGlyph) {
        var t1, glyph, t2;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        t1 = this.pos;
        glyph = game._stage.tiles.$index(0, t1).type.appearance;
        t2 = this._maxLife;
        glyph = L.Glyph$fromCharCode(glyph.char, glyph.fore.blend$2(C.Color_222_156_33, this.life / t2), glyph.back.blend$2(C.Color_142_82_55, this.life / t2));
        drawGlyph.call$3(t1.x, t1.y, glyph);
      },
      $isEffect: 1
    },
    TreasureEffect: {
      "^": "Object;_effect$_x,_effect$_y,_effect$_item,_life",
      update$1: function(_, game) {
        var t1 = this._life;
        if (C.JSInt_methods.$mod(t1, 2) === 0)
          if (--this._effect$_y < 0)
            return false;
        --t1;
        this._life = t1;
        return t1 >= 0;
      },
      render$2: function(game, drawGlyph) {
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]}).call$3(this._effect$_x, this._effect$_y, this._effect$_item.type.appearance);
      },
      $isEffect: 1
    },
    HowlEffect: {
      "^": "Object;_actor,_age",
      update$1: function(_, game) {
        return ++this._age < 24;
      },
      render$2: function(game, drawGlyph) {
        var pos, t1, t2, t3, t4, t5, t6, t7;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        pos = this._actor._pos;
        if (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this._age, 6), 2) === 0) {
          t1 = pos.x;
          t2 = pos.y;
          drawGlyph.call$3(t1, t2, $.$get$HowlEffect_bang());
          if (typeof t1 !== "number")
            return t1.$sub();
          drawGlyph.call$3(t1 - 1, t2, $.$get$HowlEffect_greater());
          drawGlyph.call$3(t1 + 1, t2, $.$get$HowlEffect_less());
        } else {
          t1 = pos.x;
          if (typeof t1 !== "number")
            return t1.$sub();
          t2 = t1 - 1;
          t3 = pos.y;
          t4 = t3 - 1;
          t5 = $.$get$HowlEffect_backslash();
          drawGlyph.call$3(t2, t4, t5);
          t6 = t3 + 1;
          t7 = $.$get$HowlEffect_slash();
          drawGlyph.call$3(t2, t6, t7);
          ++t1;
          drawGlyph.call$3(t1, t4, t7);
          drawGlyph.call$3(t1, t6, t5);
          t5 = $.$get$HowlEffect_dash();
          drawGlyph.call$3(t2, t3, t5);
          drawGlyph.call$3(t1, t3, t5);
        }
      },
      $isEffect: 1
    },
    BlinkEffect: {
      "^": "Object;_actor,_glyph,_age",
      update$1: function(_, game) {
        return ++this._age < 24;
      },
      render$2: function(game, drawGlyph) {
        var pos;
        H.functionTypeCheck(drawGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        pos = this._actor._pos;
        if (C.JSInt_methods.$mod(C.JSInt_methods._tdivFast$1(this._age, 6), 2) === 1)
          drawGlyph.call$3(pos.x, pos.y, this._glyph);
      },
      $isEffect: 1
    }
  }], ["", "package:hauberk/src/ui/forfeit_dialog.dart",, T, {
    "^": "",
    ForfeitDialog: {
      "^": "Screen;game,0_ui",
      get$isTransparent: function() {
        return true;
      },
      handleInput$1: function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$1(false);
          return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 78:
            this._ui.pop$1(false);
            break;
          case 89:
            this._ui.pop$1(true);
            break;
        }
        return true;
      },
      update$0: function(_) {
        return false;
      },
      render$1: function(terminal) {
        terminal.writeAt$3(0, 0, "Are you sure you want to forfeit the level? [Y]/[N]");
        terminal.writeAt$3(0, 1, "You will lose all items and experience gained on the level.");
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/game_over_screen.dart",, E, {
    "^": "",
    GameOverScreen: {
      "^": "Screen;log,0_ui",
      handleInput$1: function(input) {
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_cancel:
            this._ui.pop$0();
            break;
        }
        return true;
      },
      render$1: function(terminal) {
        var t1;
        terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
        t1 = this.log.messages;
        terminal.writeAt$3(0, 0, J.get$text$x(t1.get$last(t1)));
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[Esc] Return to quest menu", C.Color_38_38_56);
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/game_screen.dart",, R, {
    "^": "",
    GameScreen: {
      "^": "Screen;game,_game_screen$_save,_effects,_pause,_hasAnimatedTile,viewSize,0_cameraBounds,0_targetActor,0_game_screen$_target,0_lastSkill,0_ui",
      targetActor$1: [function(value) {
        var t1 = this._targetActor;
        if (t1 == null ? value != null : t1 !== value)
          this.dirty$0();
        this._targetActor = value;
        this._game_screen$_target = null;
      }, "call$1", "get$targetActor", 4, 0, 103],
      targetFloor$1: function(pos) {
        if (this._targetActor != null || !J.$eq$(this._game_screen$_target, pos))
          this.dirty$0();
        this._targetActor = null;
        this._game_screen$_target = pos;
      },
      get$currentTarget: function(_) {
        var t1, t2;
        if (this.get$currentTargetActor() != null)
          return this.get$currentTargetActor()._pos;
        t1 = this._game_screen$_target;
        if (t1 != null) {
          t1 = this.game._stage.tiles.$index(0, t1);
          if (t1._isExplored)
            if (!t1._isOccluded) {
              t1.toString;
              t2 = $.$get$Motility_fly();
              t2 = (t1.type.motility._bitMask & t2._bitMask) === 0;
              t1 = t2;
            } else
              t1 = true;
          else
            t1 = false;
          if (t1)
            this._game_screen$_target = null;
        }
        return this._game_screen$_target;
      },
      get$currentTargetActor: function() {
        var t1, t2;
        t1 = this._targetActor;
        if (t1 != null) {
          t2 = t1._health;
          if (typeof t2 !== "number")
            return t2.$gt();
          if (t2 > 0) {
            t2 = t1.game._stage;
            t1 = t1._pos;
            t1 = t2.tiles.$index(0, t1);
            t1 = !(t1.illumination > 0 && !t1._isOccluded);
          } else
            t1 = true;
          if (t1)
            this._targetActor = null;
        }
        t1 = this._targetActor;
        if (t1 != null)
          return t1;
        t1 = this._game_screen$_target;
        if (t1 != null)
          return this.game._stage._actorsByTile.$index(0, t1);
        return;
      },
      handleInput$1: function(input) {
        var t1, t2, t3, action, items;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_quit:
            t1 = this.game;
            t2 = t1._stage;
            t3 = t1.hero._pos;
            if (t2.tiles.$index(0, t3).type.isExit) {
              t2 = this._game_screen$_save;
              t3 = t1.hero;
              t2.inventory = t3.inventory;
              t2.equipment = t3.equipment;
              t2.experience = t3.experience;
              t2.gold = t3.gold;
              t2.skills = t3.skills.clone$0(0);
              t2._lore = t3.lore.clone$0(0);
              t2.maxDepth = Math.max(t2.maxDepth, t1.depth);
              t2.shops.forEach$1(0, new R.GameScreen_handleInput_closure());
              this._ui.pop$1(true);
            } else {
              t1.log.add$5(0, C.LogType_error, "You cannot exit from here.", null, null, null);
              this.dirty$0();
            }
            action = null;
            break;
          case C.Input_forfeit:
            this._ui.push$1(new T.ForfeitDialog(this.game));
            action = null;
            break;
          case C.Input_selectSkill:
            this._ui.push$1(Z.SelectSkillDialog$(this.game));
            action = null;
            break;
          case C.Input_editSkills:
            this._ui.push$1(R.SkillDialog_SkillDialog(this.game.hero));
            action = null;
            break;
          case C.Input_heroInfo:
            this._ui.push$1(M.HeroInfoDialog_HeroInfoDialog(this.game.hero));
            action = null;
            break;
          case C.Input_drop:
            this._ui.push$1(new D.ItemDialog(this, new D._DropItemCommand(), C.ItemLocation_wMy, false));
            action = null;
            break;
          case C.Input_use:
            this._ui.push$1(new D.ItemDialog(this, new D._UseItemCommand(), C.ItemLocation_wMy, false));
            action = null;
            break;
          case C.Input_toss:
            this._ui.push$1(new D.ItemDialog(this, new D._TossItemCommand(), C.ItemLocation_wMy, false));
            action = null;
            break;
          case C.Input_rest:
            if (!this.game.hero.rest$0())
              this.dirty$0();
            action = null;
            break;
          case C.Input_open:
            this.open$0(0);
            action = null;
            break;
          case C.Input_close:
            this.closeDoor$0();
            action = null;
            break;
          case C.Input_pickUp:
            t1 = this.game;
            items = t1._stage.itemsAt$1(t1.hero._pos);
            t2 = items._inventory$_items.length;
            if (t2 > 1)
              this._ui.push$1(new D.ItemDialog(this, new D._PickUpItemCommand(), C.ItemLocation_46y, false));
            else if (t2 === 1)
              t1.hero._behavior = new X.ActionBehavior(new R.PickUpAction(items.get$first(items)));
            else {
              t1.log.add$5(0, C.LogType_error, "There is nothing here.", null, null, null);
              this.dirty$0();
            }
            action = null;
            break;
          case C.Input_unequip:
            this._ui.push$1(new D.ItemDialog(this, new D._UseItemCommand(), C.ItemLocation_A8D, false));
            action = null;
            break;
          case C.Input_nw:
            action = new B.WalkAction(C.Direction_m1_m1, false);
            break;
          case C.Input_n:
            action = new B.WalkAction(C.Direction_0_m1, false);
            break;
          case C.Input_ne:
            action = new B.WalkAction(C.Direction_1_m1, false);
            break;
          case C.Input_w:
            action = new B.WalkAction(C.Direction_m1_0, false);
            break;
          case C.Input_ok:
            action = new B.WalkAction(C.Direction_0_0, false);
            break;
          case C.Input_e:
            action = new B.WalkAction(C.Direction_1_0, false);
            break;
          case C.Input_sw:
            action = new B.WalkAction(C.Direction_m1_1, false);
            break;
          case C.Input_s:
            action = new B.WalkAction(C.Direction_0_1, false);
            break;
          case C.Input_se:
            action = new B.WalkAction(C.Direction_1_1, false);
            break;
          case C.Input_runNW:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_m1_m1);
            action = null;
            break;
          case C.Input_runN:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_0_m1);
            action = null;
            break;
          case C.Input_runNE:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_1_m1);
            action = null;
            break;
          case C.Input_runW:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_m1_0);
            action = null;
            break;
          case C.Input_runE:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_1_0);
            action = null;
            break;
          case C.Input_runSW:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_m1_1);
            action = null;
            break;
          case C.Input_runS:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_0_1);
            action = null;
            break;
          case C.Input_runSE:
            this.game.hero._behavior = new X.RunBehavior(true, C.Direction_1_1);
            action = null;
            break;
          case C.Input_fireNW:
            this._fireTowards$1(C.Direction_m1_m1);
            action = null;
            break;
          case C.Input_fireN:
            this._fireTowards$1(C.Direction_0_m1);
            action = null;
            break;
          case C.Input_fireNE:
            this._fireTowards$1(C.Direction_1_m1);
            action = null;
            break;
          case C.Input_fireW:
            this._fireTowards$1(C.Direction_m1_0);
            action = null;
            break;
          case C.Input_fireE:
            this._fireTowards$1(C.Direction_1_0);
            action = null;
            break;
          case C.Input_fireSW:
            this._fireTowards$1(C.Direction_m1_1);
            action = null;
            break;
          case C.Input_fireS:
            this._fireTowards$1(C.Direction_0_1);
            action = null;
            break;
          case C.Input_fireSE:
            this._fireTowards$1(C.Direction_1_1);
            action = null;
            break;
          case C.Input_fire:
            t1 = this._lastSkill;
            t2 = J.getInterceptor$(t1);
            if (!!t2.$isTargetSkill)
              if (this.get$currentTarget(this) != null)
                this._fireAtTarget$1(H.interceptedTypeCast(this._lastSkill, "$isTargetSkill"));
              else
                this._ui.push$1(X.TargetDialog$(this, t1.getRange$1(0, this.game), new R.GameScreen_handleInput_closure0(this, t1)));
            else if (!!t2.$isDirectionSkill)
              this._ui.push$1(new T.SkillDirectionDialog(this.get$_fireTowards(), this, 0));
            else {
              t3 = this.game;
              if (!!t2.$isActionSkill) {
                t2 = t3.hero;
                t2._behavior = new X.ActionBehavior(t1.getAction$2(t3, t2.skills.level$1(t1)));
              } else {
                t3.log.add$5(0, C.LogType_error, "No skill selected.", null, null, null);
                this.dirty$0();
              }
            }
            action = null;
            break;
          case C.Input_swap:
            t1 = this.game;
            t2 = t1.hero.inventory._lastUnequipped;
            if (t2 == null) {
              t1.log.add$5(0, C.LogType_error, "You aren't holding an unequipped item to swap.", null, null, null);
              this.dirty$0();
              action = null;
            } else
              action = new R.EquipAction(C.ItemLocation_wMy, t2);
            break;
          case C.Input_wizard:
            this.game.log.add$5(0, C.LogType_cheat, "No cheating in non-debug builds. Cheater.", null, null, null);
            this.dirty$0();
            action = null;
            break;
          default:
            action = null;
        }
        if (action != null)
          this.game.hero._behavior = new X.ActionBehavior(action);
        return true;
      },
      open$0: function(_) {
        var openable, t1, _i, direction, pos, t2, t3, t4;
        openable = H.setRuntimeTypeInfo([], [L.Vec]);
        for (t1 = this.game, _i = 0; _i < 8; ++_i) {
          direction = C.List_slV[_i];
          pos = t1.hero._pos.$add(0, direction);
          t2 = t1._stage.tiles;
          t3 = t2._elements;
          t2 = t2.bounds.size.x;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = pos.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = pos.y * t2 + t4;
          if (t4 < 0 || t4 >= t3.length)
            return H.ioore(t3, t4);
          if (t3[t4].type.onOpen != null)
            C.JSArray_methods.add$1(openable, pos);
        }
        t2 = openable.length;
        if (t2 === 0) {
          t1.log.add$5(0, C.LogType_error, "You are not next to anything to open.", null, null, null);
          this.dirty$0();
        } else if (t2 === 1) {
          pos = C.JSArray_methods.get$first(openable);
          t2 = t1.hero;
          t1 = t1._stage.tiles.$index(0, pos).type.onOpen.call$1(pos);
          t2.toString;
          t2._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t1, "$isAction"));
        } else
          this._ui.push$1(new T.OpenDialog(this, 0));
      },
      closeDoor$0: function() {
        var closeable, t1, _i, direction, pos, t2, t3, t4;
        closeable = H.setRuntimeTypeInfo([], [L.Vec]);
        for (t1 = this.game, _i = 0; _i < 8; ++_i) {
          direction = C.List_slV[_i];
          pos = t1.hero._pos.$add(0, direction);
          t2 = t1._stage.tiles;
          t3 = t2._elements;
          t2 = t2.bounds.size.x;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = pos.x;
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = pos.y * t2 + t4;
          if (t4 < 0 || t4 >= t3.length)
            return H.ioore(t3, t4);
          if (t3[t4].type.onClose != null)
            C.JSArray_methods.add$1(closeable, pos);
        }
        t2 = closeable.length;
        if (t2 === 0) {
          t1.log.add$5(0, C.LogType_error, "You are not next to an open door.", null, null, null);
          this.dirty$0();
        } else if (t2 === 1) {
          pos = C.JSArray_methods.get$first(closeable);
          t2 = t1.hero;
          t1 = t1._stage.tiles.$index(0, pos).type.onClose.call$1(pos);
          t2.toString;
          t2._behavior = new X.ActionBehavior(H.interceptedTypeCheck(t1, "$isAction"));
        } else
          this._ui.push$1(new T.CloseDialog(this, 0));
      },
      _fireAtTarget$1: function(skill) {
        var t1, t2;
        t1 = this.game;
        if (J.$eq$(this.get$currentTarget(this), t1.hero._pos)) {
          skill.toString;
          t2 = true;
        } else
          t2 = false;
        if (t2) {
          t1.log.add$5(0, C.LogType_error, "You can't target yourself.", null, null, null);
          this.dirty$0();
          return;
        }
        this._lastSkill = skill;
        t2 = t1.hero;
        t2._behavior = new X.ActionBehavior(skill.getTargetAction$3(t1, t2.skills.level$1(skill), this.get$currentTarget(this)));
      },
      _fireTowards$1: [function(dir) {
        var t1, t2, t3, pos, previous, step, t4, t5, t6, t7, t8;
        if (dir === C.Direction_0_0)
          return;
        t1 = this._lastSkill;
        t2 = J.getInterceptor$(t1);
        if (!!t2.$isDirectionSkill) {
          t2 = this.game;
          t3 = t2.hero;
          t3._behavior = new X.ActionBehavior(t1.getDirectionAction$3(t2, t3.skills.level$1(t1), dir));
        } else if (!!t2.$isTargetSkill) {
          t2 = this.game;
          pos = t2.hero._pos.$add(0, dir);
          for (t3 = G._LineIterator$(t2.hero._pos, pos), previous = null; t3.moveNext$0(), true; previous = step) {
            step = t3._line$_current;
            t4 = t2._stage;
            t5 = t4._actorsByTile;
            t6 = t5._elements;
            t7 = step.y;
            t5 = t5.bounds.size.x;
            if (typeof t5 !== "number")
              return H.iae(t5);
            t8 = step.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            t5 = t7 * t5 + t8;
            if (t5 < 0 || t5 >= t6.length)
              return H.ioore(t6, t5);
            t5 = t6[t5];
            if (t5 != null) {
              if (this._targetActor !== t5)
                this.dirty$0();
              this._targetActor = t5;
              this._game_screen$_target = null;
              break;
            }
            t4 = t4.tiles;
            t5 = t4._elements;
            t4 = t4.bounds.size.x;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t8 = t7 * t4 + t8;
            if (t8 < 0 || t8 >= t5.length)
              return H.ioore(t5, t8);
            t8 = t5[t8];
            t8.toString;
            t5 = $.$get$Motility_fly();
            if ((t8.type.motility._bitMask & t5._bitMask) === 0) {
              if (this._targetActor != null || !J.$eq$(this._game_screen$_target, previous))
                this.dirty$0();
              this._targetActor = null;
              this._game_screen$_target = previous;
              break;
            }
            if (step.$sub(0, t2.hero._pos).$ge(0, t1.getRange$1(0, t2))) {
              if (this._targetActor != null || !J.$eq$(this._game_screen$_target, step))
                this.dirty$0();
              this._targetActor = null;
              this._game_screen$_target = step;
              break;
            }
          }
          t3 = this.get$currentTarget(this);
          t4 = t2.hero;
          if (t3 != null)
            t4._behavior = new X.ActionBehavior(t1.getTargetAction$3(t2, t4.skills.level$1(t1), this.get$currentTarget(this)));
          else {
            t1 = t2._stage;
            t4 = t4._pos.$add(0, dir);
            t2.log.add$5(0, C.LogType_error, "There is a " + t1.tiles.$index(0, t4).type.name + " in the way.", null, null, null);
            this.dirty$0();
          }
        } else {
          t3 = this.game.log;
          if (!!t2.$isActionSkill) {
            t3.add$5(0, C.LogType_error, t1.get$useName() + " does not take a direction.", null, null, null);
            this.dirty$0();
          } else {
            t3.add$5(0, C.LogType_error, "No skill selected.", null, null, null);
            this.dirty$0();
          }
        }
      }, "call$1", "get$_fireTowards", 4, 0, 104],
      activate$2: function(popped, result) {
        var t1, t2;
        t1 = this.game;
        if (!t1.hero.get$needsInput())
          this._pause = 10;
        t2 = J.getInterceptor$(popped);
        if (!!t2.$isForfeitDialog && H.boolTypeCast(result))
          this._ui.pop$1(false);
        else if (!!!t2.$isSkillDialog)
          if (!!t2.$isSelectSkillDialog && result != null) {
            t2 = J.getInterceptor$(result);
            if (!!t2.$isTargetSkill)
              this._ui.push$1(X.TargetDialog$(this, result.getRange$1(0, t1), new R.GameScreen_activate_closure(this, result)));
            else if (!!t2.$isDirectionSkill)
              this._ui.push$1(new T.SkillDirectionDialog(new R.GameScreen_activate_closure0(this, result), this, 0));
            else if (!!t2.$isActionSkill) {
              this._lastSkill = result;
              t2 = t1.hero;
              t2._behavior = new X.ActionBehavior(result.getAction$2(t1, t2.skills.level$1(result)));
            }
          }
      },
      update$0: function(_) {
        var t1, result, t2, t3, _i, $event;
        t1 = this._pause;
        if (t1 > 0) {
          this._pause = t1 - 1;
          return;
        }
        if (this._hasAnimatedTile)
          this.dirty$0();
        if (this._effects.length > 0)
          this.dirty$0();
        t1 = this.game;
        result = t1.update$0(0);
        t2 = t1.hero;
        t3 = t2._health;
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 <= 0) {
          this._ui.goTo$1(new E.GameOverScreen(t1.log));
          return;
        }
        if (t2.dazzle._turnsRemaining > 0)
          this.dirty$0();
        for (t1 = result.events, t2 = t1.length, _i = 0; t3 = t1.length, _i < t3; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          $event = t1[_i];
          K.addEffects(this._effects, $event);
        }
        if (result.madeProgress || t3 > 0)
          this.dirty$0();
        t1 = this._effects;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        this._effects = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new R.GameScreen_update_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
        this._positionCamera$0();
      },
      render$1: function(terminal) {
        var bar, t1, t2, y, hero, t3, heroColor, visibleMonsters;
        terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
        this._hasAnimatedTile = false;
        bar = L.Glyph$fromCharCode(9474, C.Color_38_38_56, null);
        for (t1 = terminal._display, t2 = t1._glyphs.bounds.size.y, y = 0; y < t2; ++y)
          t1.setGlyph$3(60, y, bar);
        hero = this.game.hero;
        t1 = hero._health;
        t2 = hero.fortitude;
        t3 = t2.get$maxHealth();
        if (typeof t1 !== "number")
          return t1.$lt();
        if (t1 < t3 / 4)
          heroColor = C.Color_204_35_57;
        else if (hero.poison._turnsRemaining > 0)
          heroColor = C.Color_22_117_38;
        else if (hero.cold._turnsRemaining > 0)
          heroColor = C.Color_64_163_229;
        else {
          t1 = hero._health;
          t2 = t2.get$maxHealth();
          if (typeof t1 !== "number")
            return t1.$lt();
          if (t1 < t2 / 2)
            heroColor = C.Color_255_122_105;
          else
            heroColor = hero._stomach === 0 ? C.Color_189_144_108 : C.Color_226_223_240;
        }
        visibleMonsters = H.setRuntimeTypeInfo([], [B.Monster]);
        t1 = this.viewSize;
        this._drawStage$3(new G.PortTerminal(new L.Vec(t1.x, t1.y), 0, 0, terminal, C.Color_255_255_255, C.Color_0_0_0), heroColor, visibleMonsters);
        this._drawLog$1(new G.PortTerminal(new L.Vec(60, 6), 0, 34, terminal, C.Color_255_255_255, C.Color_0_0_0));
        this._drawSidebar$3(new G.PortTerminal(new L.Vec(20, 40), 61, 0, terminal, C.Color_255_255_255, C.Color_0_0_0), heroColor, visibleMonsters);
      },
      drawStageGlyph$4: function(terminal, x, y, glyph) {
        var t1, t2;
        t1 = this._cameraBounds.pos;
        t2 = t1.x;
        if (typeof x !== "number")
          return x.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        terminal.drawGlyph$3(x - t2, y - t1.y, glyph);
      },
      _positionCamera$0: function() {
        var t1, t2, t3, t4, t5, cameraRange, camera, x, y;
        t1 = this.game;
        t2 = t1._stage.tiles.bounds.size;
        t3 = t2.x;
        t4 = this.viewSize;
        t5 = t4.x;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t4 = t4.y;
        cameraRange = new X.Rect(new L.Vec(0, 0), new L.Vec(Math.max(0, t3 - t5), Math.max(0, t2.y - t4)));
        camera = t1.hero._pos.$sub(0, new L.Vec(C.JSInt_methods._tdivFast$1(t5, 2), C.JSInt_methods._tdivFast$1(t4, 2)));
        x = C.JSNumber_methods.toInt$0(J.clamp$2$n(camera.x, cameraRange.get$left(cameraRange), cameraRange.get$right(cameraRange)));
        y = C.JSNumber_methods.toInt$0(C.JSInt_methods.clamp$2(camera.y, cameraRange.get$top(cameraRange), cameraRange.get$bottom(cameraRange)));
        t1 = t1._stage.tiles.bounds.size;
        this._cameraBounds = new X.Rect(new L.Vec(x, y), new L.Vec(Math.min(t5, H.checkNum(t1.x)), Math.min(t4, t1.y)));
      },
      _drawStage$3: function(terminal, heroColor, visibleMonsters) {
        var t1, hero, t2, t3, t4, t5, t6, t7, t8, t9, t10, pos, t11, t12, t13, tileGlyph, char, lightFore, lightBack, darkFore, darkBack, t14, it, itemGlyph, color, amount, actorGlyph, chance, max, light, fore, $back, glow, volume, _i;
        H.assertSubtype(visibleMonsters, "$isList", [B.Monster], "$asList");
        t1 = this.game;
        hero = t1.hero;
        for (t2 = this._cameraBounds, t2.toString, t2 = X.RectIterator$(t2), t3 = [R.Item], t4 = [[P.List, L.Color]], t5 = [P.int], t6 = this.get$targetActor(), t7 = J.getInterceptor$(t6), t8 = [L.Color]; t2.moveNext$0();) {
          t9 = t2._rect$_x;
          t10 = t2._rect$_y;
          pos = new L.Vec(t9, t10);
          t11 = t1._stage;
          t12 = t11.tiles;
          t13 = t12._elements;
          t12 = t12.bounds.size.x;
          if (typeof t12 !== "number")
            return H.iae(t12);
          if (typeof t9 !== "number")
            return H.iae(t9);
          t12 = t10 * t12 + t9;
          if (t12 < 0 || t12 >= t13.length)
            return H.ioore(t13, t12);
          t12 = t13[t12];
          t11 = t11._actorsByTile;
          t13 = t11._elements;
          t11 = t11.bounds.size.x;
          if (typeof t11 !== "number")
            return H.iae(t11);
          t11 = t10 * t11 + t9;
          if (t11 < 0 || t11 >= t13.length)
            return H.ioore(t13, t11);
          t11 = t13[t11];
          if (!t12._isExplored)
            t13 = $.Debug_showAllMonsters && t11 != null || $.Debug_showHeroVolume;
          else
            t13 = true;
          if (t13) {
            tileGlyph = t12.type.appearance;
            char = tileGlyph.char;
            lightFore = tileGlyph.fore;
            lightBack = tileGlyph.back;
            darkFore = lightFore.blend$2(C.Color_7_6_18, 0.8);
            darkBack = lightBack.blend$2(C.Color_7_6_18, 0.8);
            t13 = t1._stage._itemsByTile.$index(0, pos);
            if (t13 == null)
              t13 = new O.Inventory(C.ItemLocation_46y, H.setRuntimeTypeInfo([], t3), null);
            t13 = t13._inventory$_items;
            t14 = [H.getTypeArgumentByIndex(t13, 0)];
            if (new J.ArrayIterator(t13, t13.length, 0, t14).moveNext$0()) {
              it = new J.ArrayIterator(t13, t13.length, 0, t14);
              if (!it.moveNext$0())
                H.throwExpression(H.IterableElementError_noElement());
              itemGlyph = H.interceptedTypeCast(J.get$appearance$x(it.__interceptors$_current), "$isGlyph");
              char = itemGlyph.char;
              lightFore = itemGlyph.fore;
              darkFore = lightFore;
            }
            if (!(t12.illumination > 0 && !t12._isOccluded))
              if (!pos.$eq(0, t1.hero._pos))
                t11 = $.Debug_showAllMonsters && t11 != null;
              else
                t11 = true;
            else
              t11 = true;
            if (t11) {
              t11 = t12.substance;
              if (t11 !== 0) {
                t13 = t12.element;
                t14 = $.$get$Elements_fire();
                if (t13 == null ? t14 == null : t13 === t14) {
                  t11 = $.$get$rng();
                  t13 = $.$get$GameScreen__fireChars();
                  t11.toString;
                  H.assertSubtype(t13, "$isList", t5, "$asList");
                  t14 = t11._random.nextInt$1(2);
                  if (t14 < 0 || t14 >= 2)
                    return H.ioore(t13, t14);
                  char = t13[t14];
                  t14 = H.assertSubtype($.$get$GameScreen__fireColors(), "$isList", t4, "$asList");
                  t11 = t11._random.nextInt$1(4);
                  if (t11 < 0 || t11 >= 4)
                    return H.ioore(t14, t11);
                  color = t14[t11];
                  t11 = color.length;
                  if (0 >= t11)
                    return H.ioore(color, 0);
                  lightFore = color[0];
                  if (1 >= t11)
                    return H.ioore(color, 1);
                  lightBack = color[1];
                  this._hasAnimatedTile = true;
                } else {
                  t14 = $.$get$Elements_poison();
                  if (t13 == null ? t14 == null : t13 === t14) {
                    amount = 0.1 + t11 / 255 * 0.9;
                    lightBack = lightBack.blend$2(C.Color_131_158_13, amount);
                    darkBack = darkBack.blend$2(C.Color_131_158_13, amount);
                  }
                }
              }
              t11 = t1._stage._actorsByTile;
              t13 = t11._elements;
              t11 = t11.bounds.size.x;
              if (typeof t11 !== "number")
                return H.iae(t11);
              t11 = t10 * t11 + t9;
              if (t11 < 0 || t11 >= t13.length)
                return H.ioore(t13, t11);
              t11 = t13[t11];
              if (t11 != null) {
                actorGlyph = t11.get$appearance(t11);
                if (actorGlyph instanceof L.Glyph) {
                  char = actorGlyph.char;
                  lightFore = actorGlyph.fore;
                  darkFore = lightFore;
                } else {
                  darkFore = heroColor;
                  lightFore = darkFore;
                  char = 64;
                }
                if (t7.$eq(t6, t11)) {
                  darkBack = darkFore;
                  lightBack = lightFore;
                  lightFore = C.Color_19_17_28;
                  darkFore = C.Color_19_17_28;
                }
                if (!!t11.$isMonster)
                  C.JSArray_methods.add$1(visibleMonsters, t11);
              }
            }
            t11 = hero.dazzle._turnsRemaining;
            if (t11 > 0) {
              chance = Math.min(90, t11 * 8);
              t11 = $.$get$rng();
              if (t11._random.nextInt$1(100) < chance) {
                char = t11._random.nextInt$1(100) < chance ? char : 42;
                t11.toString;
                H.assertSubtype(C.List_QOW, "$isList", t8, "$asList");
                max = C.List_QOW.length;
                t11 = t11._random.nextInt$1(max - 0);
                if (t11 < 0 || t11 >= max)
                  return H.ioore(C.List_QOW, t11);
                lightFore = C.List_QOW[t11];
                darkFore = lightFore;
              }
            }
            t11 = t12.illumination;
            if (t11 > 0 && !t12._isOccluded) {
              light = C.JSDouble_methods.clamp$2(t11 / 192, 0, 1);
              fore = darkFore.blend$2(lightFore, light);
              $back = darkBack.blend$2(lightBack, light);
              t11 = t12.illumination;
              if (t11 > 192) {
                glow = (t11 - 192) / 63;
                fore = fore.add$2(0, C.Color_222_156_33, glow * 0.25);
                $back = $back.add$2(0, C.Color_222_156_33, glow * 0.1);
              }
            } else {
              $back = darkBack.blend$2(C.Color_0_0_0, 0.5);
              fore = darkFore;
            }
            if ($.Debug_showHeroVolume) {
              volume = (16 - t1._stage._sound._heroAuditoryDistance$1(pos)) / 16;
              volume *= volume;
              if (volume > 0)
                $back = $back.blend$2(C.Color_22_117_38, volume);
            }
            t11 = fore != null ? fore : C.Color_255_255_255;
            t12 = this._cameraBounds.pos;
            t13 = t12.x;
            if (typeof t13 !== "number")
              return H.iae(t13);
            terminal.drawGlyph$3(t9 - t13, t10 - t12.y, new L.Glyph(char, t11, $back));
          }
        }
        for (t2 = this._effects, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t2[_i].render$2(t1, new R.GameScreen__drawStage_closure(this, terminal));
      },
      _drawLog$1: function(terminal) {
        var t1, t2, y, t3, t4, t5, t6, color;
        for (t1 = this.game.log.messages, t2 = new P._ListQueueIterator(t1, t1._tail, t1._modificationCount, t1._head, [H.getTypeArgumentByIndex(t1, 0)]), y = 0; t2.moveNext$0();) {
          t3 = t2._collection$_current;
          t4 = t1._tail;
          t5 = t1._head;
          t6 = t1._table;
          switch (t3.type) {
            case C.LogType_message:
              color = C.Color_132_126_135;
              break;
            case C.LogType_error:
              color = C.Color_204_35_57;
              break;
            case C.LogType_quest:
              color = C.Color_86_30_138;
              break;
            case C.LogType_gain:
              color = C.Color_222_156_33;
              break;
            case C.LogType_help:
              color = C.Color_22_117_38;
              break;
            case C.LogType_cheat:
              color = C.Color_9_95_112;
              break;
            default:
              color = null;
          }
          if (y !== ((t4 - t5 & t6.length - 1) >>> 0) - 1)
            color = color.blend$2(C.Color_0_0_0, 0.5);
          t4 = t3.text;
          terminal.writeAt$4(0, y, t4, color);
          t3 = t3.count;
          if (t3 > 1)
            terminal.writeAt$4(t4.length, y, " (x" + t3 + ")", C.Color_38_38_56);
          ++y;
        }
      },
      _drawSidebar$3: function(terminal, heroColor, visibleMonsters) {
        var _box_0, t1, hero, t2, t3, t4, t5, t6, drawStat, i, y, monster, glyph, unseen, lastGlyph, lastGlyph0;
        _box_0 = {};
        H.assertSubtype(visibleMonsters, "$isList", [B.Monster], "$asList");
        t1 = this.game;
        hero = t1.hero;
        terminal.writeAt$4(0, 0, hero.name, C.Color_226_223_240);
        terminal.writeAt$4(0, 1, hero.race._race.name, C.Color_132_126_135);
        terminal.writeAt$4(0, 2, hero.heroClass.name, C.Color_132_126_135);
        t2 = hero._health;
        t3 = hero.fortitude;
        this._drawStat$7(terminal, 4, "Health", t2, C.Color_204_35_57, t3.get$maxHealth(), C.Color_84_0_39);
        terminal.writeAt$4(0, 5, "Food", C.Color_38_38_56);
        R.Draw_meter(terminal, 9, 5, 10, hero._stomach, 400, C.Color_142_82_55, C.Color_64_31_36);
        t2 = hero._level;
        this._drawStat$5(terminal, 6, "Level", t2.modify$1(t2._value), C.Color_21_87_194);
        t4 = t2.modify$1(t2._value);
        if (typeof t4 !== "number")
          return t4.$lt();
        if (t4 < 50) {
          t4 = hero.experience;
          t5 = G.experienceLevelCost(t2.modify$1(t2._value));
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t6 = t2.modify$1(t2._value);
          if (typeof t6 !== "number")
            return t6.$add();
          t6 = G.experienceLevelCost(t6 + 1);
          t2 = G.experienceLevelCost(t2.modify$1(t2._value));
          if (typeof t6 !== "number")
            return t6.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          terminal.writeAt$4(15, 6, "" + C.JSInt_methods.$tdiv(100 * (t4 - t5), t6 - t2) + "%", C.Color_26_46_150);
        }
        _box_0.x = 0;
        drawStat = new R.GameScreen__drawSidebar_drawStat(_box_0, terminal);
        drawStat.call$1(hero.strength);
        drawStat.call$1(hero.agility);
        drawStat.call$1(t3);
        t2 = hero.intellect;
        drawStat.call$1(t2);
        drawStat.call$1(hero.will);
        terminal.writeAt$4(0, 11, "Focus", C.Color_38_38_56);
        t3 = hero._focus;
        t2 = t2.modify$1(t2._value);
        H.checkNum(t2);
        R.Draw_meter(terminal, 9, 11, 10, t3, C.JSNumber_methods.ceil$0(Math.pow(t2, 1.3) * 2), C.Color_21_87_194, C.Color_26_46_150);
        this._drawStat$5(terminal, 13, "Armor", "" + C.JSNumber_methods.toInt$0(100 - U.getArmorMultiplier(hero.get$armor()) * 100) + "% ", C.Color_22_117_38);
        this._drawStat$5(terminal, 14, "Weapon", hero.createMeleeHit$1(null).get$damageString(), C.Color_129_231_235);
        terminal.writeAt$4(0, 16, "@", heroColor);
        terminal.writeAt$4(2, 16, this._game_screen$_save.name, C.Color_132_126_135);
        this._drawHealthBar$3(terminal, 17, hero);
        C.JSArray_methods.sort$1(visibleMonsters, new R.GameScreen__drawSidebar_closure(this));
        for (t2 = this.get$targetActor(), t3 = J.getInterceptor$(t2), i = 0; i < 10; ++i) {
          y = 18 + i * 2;
          t4 = visibleMonsters.length;
          if (i < t4) {
            if (i >= t4)
              return H.ioore(visibleMonsters, i);
            monster = visibleMonsters[i];
            t4 = monster.breed;
            glyph = t4.appearance;
            if (t3.$eq(t2, monster))
              glyph = new L.Glyph(glyph.char, glyph.back, glyph.fore);
            terminal.drawGlyph$3(0, y, glyph);
            t4 = O.Log__categorize(t4._breed$_name, false, true);
            terminal.writeAt$4(2, y, t4, t3.$eq(t2, monster) ? C.Color_222_156_33 : C.Color_132_126_135);
            this._drawHealthBar$3(terminal, y + 1, monster);
          }
        }
        terminal.writeAt$4(0, 38, "Unfound items:", C.Color_38_38_56);
        unseen = H.setRuntimeTypeInfo([], [R.Item]);
        t1._stage.forEachItem$1(new R.GameScreen__drawSidebar_closure0(this, unseen));
        C.JSArray_methods.sort$0(unseen);
        _box_0.x = 0;
        for (t1 = H.getTypeArgumentByIndex(unseen, 0), t2 = new H.ReversedListIterable(unseen, [t1]), t1 = new H.ListIterator(t2, t2.get$length(t2), 0, [t1]), t2 = terminal.size.x, lastGlyph = null; t1.moveNext$0();) {
          lastGlyph0 = t1.__internal$_current.type.appearance;
          if (!lastGlyph0.$eq(0, lastGlyph)) {
            terminal.drawGlyph$3(_box_0.x, 39, lastGlyph0);
            t3 = ++_box_0.x;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t3 >= t2)
              break;
            lastGlyph = lastGlyph0;
          }
        }
      },
      _drawStat$7: function(terminal, y, label, value, valueColor, max, maxColor) {
        var valueString;
        terminal.writeAt$4(0, y, label, C.Color_38_38_56);
        valueString = J.toString$0$(value);
        terminal.writeAt$4(10, y, valueString, valueColor);
        if (max != null)
          terminal.writeAt$4(10 + valueString.length, y, " / " + H.S(max), maxColor);
      },
      _drawStat$5: function(terminal, y, label, value, valueColor) {
        return this._drawStat$7(terminal, y, label, value, valueColor, null, null);
      },
      _drawHealthBar$3: function(terminal, y, actor) {
        var _box_0, drawCondition, t1, t2, _i, element;
        _box_0 = {};
        _box_0.x = 2;
        drawCondition = new R.GameScreen__drawHealthBar_drawCondition(_box_0, terminal, y);
        if (actor instanceof B.Monster && actor._monster$_state instanceof M.AfraidState)
          drawCondition.call$2("!", C.Color_189_144_108);
        t1 = actor.poison;
        if (t1._turnsRemaining > 0)
          switch (t1._intensity) {
            case 1:
              drawCondition.call$2("P", C.Color_0_64_39);
              break;
            case 2:
              drawCondition.call$2("P", C.Color_22_117_38);
              break;
            default:
              drawCondition.call$2("P", C.Color_129_217_117);
              break;
          }
        if (actor.cold._turnsRemaining > 0)
          drawCondition.call$2("C", C.Color_64_163_229);
        switch (actor.haste._intensity) {
          case 1:
            drawCondition.call$2("S", C.Color_142_82_55);
            break;
          case 2:
            drawCondition.call$2("S", C.Color_222_156_33);
            break;
          case 3:
            drawCondition.call$2("S", C.Color_255_238_168);
            break;
        }
        if (actor.blindness._turnsRemaining > 0)
          drawCondition.call$2("B", C.Color_38_38_56);
        if (actor.dazzle._turnsRemaining > 0)
          drawCondition.call$2("D", C.Color_189_106_235);
        for (t1 = $.$get$Elements_all(), t2 = actor.resistances, _i = 0; _i < 12; ++_i) {
          element = t1[_i];
          if (t2.$index(0, element)._turnsRemaining > 0)
            drawCondition.call$3($.$get$GameScreen__resistLetters().$index(0, element), C.Color_0_0_0, B.elementColor(element));
        }
        R.Draw_meter(terminal, 9, y, 10, actor._health, actor.get$maxHealth(), C.Color_204_35_57, C.Color_84_0_39);
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    GameScreen_handleInput_closure: {
      "^": "Closure:31;",
      call$2: function(shop, inventory) {
        H.interceptedTypeCheck(shop, "$isShop").update$1(0, H.interceptedTypeCheck(inventory, "$isInventory"));
      }
    },
    GameScreen_handleInput_closure0: {
      "^": "Closure:13;$this,targetSkill",
      call$1: function(_) {
        return this.$this._fireAtTarget$1(this.targetSkill);
      }
    },
    GameScreen_activate_closure: {
      "^": "Closure:13;$this,result",
      call$1: function(_) {
        return this.$this._fireAtTarget$1(this.result);
      }
    },
    GameScreen_activate_closure0: {
      "^": "Closure:39;$this,result",
      call$1: function(dir) {
        var t1 = this.$this;
        t1._lastSkill = this.result;
        t1._fireTowards$1(dir);
      }
    },
    GameScreen_update_closure: {
      "^": "Closure:106;$this",
      call$1: function(effect) {
        return H.interceptedTypeCheck(effect, "$isEffect").update$1(0, this.$this.game);
      }
    },
    GameScreen__drawStage_closure: {
      "^": "Closure:32;$this,terminal",
      call$3: function(x, y, glyph) {
        this.$this.drawStageGlyph$4(this.terminal, x, y, H.interceptedTypeCheck(glyph, "$isGlyph"));
      }
    },
    GameScreen__drawSidebar_drawStat: {
      "^": "Closure:108;_box_0,terminal",
      call$1: function(stat) {
        var t1, t2;
        t1 = this.terminal;
        t2 = this._box_0;
        t1.writeAt$4(t2.x, 8, C.JSString_methods.substring$2(stat.get$_stat().name, 0, 3), C.Color_38_38_56);
        t1.writeAt$4(t2.x, 9, C.JSString_methods.padLeft$1(J.toString$0$(stat.modify$1(stat._value)), 3), C.Color_132_126_135);
        t2.x += 4;
      }
    },
    GameScreen__drawSidebar_closure: {
      "^": "Closure:109;$this",
      call$2: function(a, b) {
        var t1;
        H.interceptedTypeCheck(a, "$isMonster");
        H.interceptedTypeCheck(b, "$isMonster");
        t1 = this.$this.game;
        return C.JSInt_methods.compareTo$1(a._pos.$sub(0, t1.hero._pos).get$lengthSquared(), b._pos.$sub(0, t1.hero._pos).get$lengthSquared());
      }
    },
    GameScreen__drawSidebar_closure0: {
      "^": "Closure:23;$this,unseen",
      call$2: function(item, pos) {
        if (!this.$this.game._stage.tiles.$index(0, pos)._isExplored)
          C.JSArray_methods.add$1(this.unseen, item);
      }
    },
    GameScreen__drawHealthBar_drawCondition: {
      "^": "Closure:110;_box_0,terminal,y",
      call$3: function(char, fore, $back) {
        var t1, t2;
        t1 = this._box_0;
        t2 = t1.x;
        if (t2 > 8)
          return;
        this.terminal.writeAt$5(t2, this.y, char, fore, $back);
        ++t1.x;
      },
      call$2: function(char, fore) {
        return this.call$3(char, fore, null);
      }
    }
  }], ["", "package:hauberk/src/ui/hero_equipment_dialog.dart",, M, {
    "^": "",
    HeroEquipmentDialog: {
      "^": "HeroInfoDialog;hero,0_nextScreen,0_ui",
      get$name: function(_) {
        return "Equipment";
      },
      render$1: function(terminal) {
        var writeLine, writeScale, writeBonus, element, t1, baseDamage, totalDamageScale, totalDamageBonus, totalStrikeBonus, totalArmor, totalArmorBonus, _i, slot, item, t2, t3;
        this.super$HeroInfoDialog$render(terminal);
        writeLine = new M.HeroEquipmentDialog_render_writeLine(terminal);
        writeScale = new M.HeroEquipmentDialog_render_writeScale(terminal);
        writeBonus = new M.HeroEquipmentDialog_render_writeBonus(terminal);
        terminal.writeAt$4(48, 0, "\u2550\u2550\u2550\u2550\u2550\u2550 Attack \u2550\u2550\u2550\u2550\u2550 \u2550\u2550 Defend \u2550\u2550", C.Color_38_38_56);
        terminal.writeAt$4(48, 1, "El Damage      Hit  Dodge Armor", C.Color_63_64_114);
        this.drawEquipmentTable$2(terminal, new M.HeroEquipmentDialog_render_closure(writeLine, terminal, writeScale, writeBonus));
        element = $.$get$Element_none();
        for (t1 = this.hero.equipment.slotTypes, baseDamage = 3, totalDamageScale = 1, totalDamageBonus = 0, totalStrikeBonus = 0, totalArmor = 0, totalArmorBonus = 0, _i = 0; _i < 9; ++_i) {
          slot = t1[_i];
          item = this.hero.equipment.find$1(0, slot);
          if (item == null)
            continue;
          t2 = item.type;
          t3 = t2.attack;
          if (t3 != null) {
            element = t3.element;
            baseDamage = t3.damage;
          }
          totalDamageScale *= item.get$damageScale();
          totalDamageBonus += item.get$damageBonus();
          totalStrikeBonus += item.get$strikeBonus();
          totalArmor += t2.armor;
          totalArmorBonus += item.get$armorModifier();
        }
        terminal.writeAt$4(41, 21, "Totals", C.Color_63_64_114);
        writeLine.call$2(2, C.Color_38_38_56);
        writeLine.call$2(20, C.Color_38_38_56);
        terminal.writeAt$4(48, 21, element.abbreviation, B.elementColor(element));
        terminal.writeAt$3(51, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(baseDamage), 2));
        writeScale.call$3(54, 21, totalDamageScale);
        writeBonus.call$3(59, 21, totalDamageBonus);
        writeBonus.call$3(64, 21, totalStrikeBonus);
        terminal.writeAt$4(74, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(totalArmor), 2), C.Color_226_223_240);
        writeBonus.call$3(77, 21, totalArmorBonus);
      }
    },
    HeroEquipmentDialog_render_writeLine: {
      "^": "Closure:21;terminal",
      call$2: function(y, color) {
        this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500\u2500", color);
      }
    },
    HeroEquipmentDialog_render_writeScale: {
      "^": "Closure;terminal",
      call$3: function(x, y, scale) {
        var string, t1;
        string = C.JSNumber_methods.toStringAsFixed$1(scale, 1);
        if (scale > 1) {
          t1 = this.terminal;
          t1.writeAt$4(x, y, "x", C.Color_0_64_39);
          t1.writeAt$4(x + 1, y, string, C.Color_22_117_38);
        } else if (scale < 1) {
          t1 = this.terminal;
          t1.writeAt$4(x, y, "x", C.Color_84_0_39);
          t1.writeAt$4(x + 1, y, string, C.Color_204_35_57);
        }
      }
    },
    HeroEquipmentDialog_render_writeBonus: {
      "^": "Closure;terminal",
      call$3: function(x, y, bonus) {
        var string, t1, t2;
        string = C.JSInt_methods.toString$0(Math.abs(bonus));
        if (bonus > 0) {
          t1 = this.terminal;
          t2 = string.length;
          t1.writeAt$4(x + 2 - t2, y, "+", C.Color_0_64_39);
          t1.writeAt$4(x + 3 - t2, y, string, C.Color_22_117_38);
        }
      }
    },
    HeroEquipmentDialog_render_closure: {
      "^": "Closure:33;writeLine,terminal,writeScale,writeBonus",
      call$2: function(item, y) {
        var t1, t2, t3, t4;
        this.writeLine.call$2(y - 1, C.Color_19_17_28);
        if (item == null)
          return;
        t1 = item.type;
        t2 = t1.attack;
        if (t2 != null) {
          t3 = this.terminal;
          t4 = t2.element;
          t3.writeAt$4(48, y, t4.abbreviation, B.elementColor(t4));
          t3.writeAt$4(51, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t2.damage), 2), C.Color_226_223_240);
        }
        this.writeScale.call$3(54, y, item.get$damageScale());
        t2 = this.writeBonus;
        t2.call$3(59, y, item.get$damageBonus());
        t2.call$3(64, y, item.get$strikeBonus());
        t1 = t1.armor;
        if (t1 !== 0)
          this.terminal.writeAt$4(74, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t1), 2), C.Color_226_223_240);
        t2.call$3(77, y, item.get$armorModifier());
      }
    }
  }], ["", "package:hauberk/src/ui/hero_info_dialog.dart",, M, {
    "^": "",
    HeroInfoDialog_HeroInfoDialog: function(hero) {
      var t1, screens, i, i0;
      t1 = new E.HeroLoreDialog(H.setRuntimeTypeInfo([], [B.Breed]), C._Sort_JQf, 0, 0, hero);
      t1._listBreeds$0();
      screens = [new M.HeroEquipmentDialog(hero), new Z.HeroResistancesDialog(hero), t1];
      for (i = 0; i < 3; i = i0) {
        i0 = i + 1;
        screens[i]._nextScreen = screens[i0 % 3];
      }
      return C.JSArray_methods.get$first(screens);
    },
    HeroInfoDialog: {
      "^": "Screen;",
      get$extraHelp: function() {
        return;
      },
      keyDown$3$alt$shift: ["super$HeroInfoDialog$keyDown", function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        if (keyCode === 9) {
          this._ui.goTo$1(this._nextScreen);
          return true;
        }
        return false;
      }],
      handleInput$1: ["super$HeroInfoDialog$handleInput", function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$0();
          return true;
        }
        return false;
      }],
      render$1: ["super$HeroInfoDialog$render", function(terminal) {
        var t1, helpText;
        terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
        t1 = this._nextScreen;
        helpText = "[Esc] Exit, [Tab] View " + t1.get$name(t1);
        if (this.get$extraHelp() != null)
          helpText += ", " + H.S(this.get$extraHelp());
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, helpText, C.Color_63_64_114);
      }],
      drawEquipmentTable$2: function(terminal, callback) {
        var t1, t2, y, _i, slot, item;
        H.functionTypeCheck(callback, {func: 1, ret: -1, args: [R.Item, P.int]});
        terminal.writeAt$4(2, 1, "Equipment", C.Color_222_156_33);
        for (t1 = this.hero.equipment.slotTypes, t2 = terminal._display, y = 3, _i = 0; _i < 9; ++_i) {
          slot = t1[_i];
          item = this.hero.equipment.find$1(0, slot);
          callback.call$2(item, y);
          if (item == null) {
            terminal.writeAt$4(2, y, "(" + slot + ")", C.Color_38_38_56);
            y += 2;
            continue;
          }
          t2.setGlyph$3(0, y, item.type.appearance);
          terminal.writeAt$4(2, y, item.get$nounText(), C.Color_226_223_240);
          y += 2;
        }
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/hero_lore_dialog.dart",, E, {
    "^": "",
    HeroLoreDialog: {
      "^": "HeroInfoDialog;_breeds,_sort,_selection,_scroll,hero,0_nextScreen,0_ui",
      get$name: function(_) {
        return "Monster Lore";
      },
      get$extraHelp: function() {
        return "[\u2195] Scroll, [S] " + this._sort.get$next().helpText;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        if (keyCode === 83) {
          this._sort = this._sort.get$next();
          this._listBreeds$0();
          this.dirty$0();
          return true;
        }
        return this.super$HeroInfoDialog$keyDown(keyCode, alt, shift);
      },
      handleInput$1: function(input) {
        H.interceptedTypeCheck(input, "$isInput");
        switch (input) {
          case C.Input_n:
            this._hero_lore_dialog$_select$1(-1);
            return true;
          case C.Input_s:
            this._hero_lore_dialog$_select$1(1);
            return true;
          case C.Input_runN:
            this._hero_lore_dialog$_select$1(-10);
            return true;
          case C.Input_runS:
            this._hero_lore_dialog$_select$1(10);
            return true;
        }
        return this.super$HeroInfoDialog$handleInput(input);
      },
      render$1: function(terminal) {
        var writeLine, t1, t2, i, y, index, t3, breed, fore, t4;
        this.super$HeroInfoDialog$render(terminal);
        writeLine = new E.HeroLoreDialog_render_writeLine(terminal);
        terminal.writeAt$4(2, 1, "Monsters", C.Color_222_156_33);
        terminal.writeAt$4(20, 1, C.JSString_methods.padLeft$1("(" + this._sort.description + ")", 42), C.Color_38_38_56);
        terminal.writeAt$4(63, 1, "Depth Seen Slain", C.Color_63_64_114);
        for (t1 = this._breeds, t2 = terminal._display, i = 0; i < 11; ++i) {
          y = i * 2 + 3;
          writeLine.call$2(y + 1, C.Color_19_17_28);
          index = this._scroll + i;
          t3 = t1.length;
          if (index >= t3)
            continue;
          if (index < 0)
            return H.ioore(t1, index);
          breed = t1[index];
          if (index === this._selection) {
            terminal.writeAt$4(1, y, "\u25ba", C.Color_222_156_33);
            fore = C.Color_222_156_33;
          } else
            fore = C.Color_132_126_135;
          t3 = this.hero.lore._seen.$index(0, breed);
          if (t3 == null)
            t3 = 0;
          t4 = this.hero.lore._slain.$index(0, breed);
          if (t4 == null)
            t4 = 0;
          if (t3 > 0) {
            t2.setGlyph$3(0, y, breed.appearance);
            terminal.writeAt$4(2, y, O.Log__categorize(breed._breed$_name, false, true), fore);
            terminal.writeAt$4(63, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(breed.depth), 5), fore);
            if (breed.flags.unique) {
              terminal.writeAt$4(69, y, C.JSString_methods.padLeft$1("Yes", 5), fore);
              terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1(t4 > 0 ? "Yes" : "No", 5), fore);
            } else {
              terminal.writeAt$4(69, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t3), 5), fore);
              terminal.writeAt$4(75, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t4), 5), fore);
            }
          } else
            terminal.writeAt$4(2, y, "(undiscovered " + (this._scroll + i + 1) + ")", C.Color_38_38_56);
        }
        writeLine.call$2(2, C.Color_38_38_56);
        t2 = this._selection;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        this._showMonster$2(terminal, t1[t2]);
      },
      _showMonster$2: function(terminal, breed) {
        var t1, t2, t3, y, _i, description;
        H.interceptedTypeCheck(breed, "$isBreed");
        t1 = terminal._display._glyphs.bounds.size;
        t2 = t1.x;
        t3 = new L.Vec(t2, 14);
        terminal = new G.PortTerminal(t3, 0, t1.y - 15, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 1, 80, 13, null);
        terminal.writeAt$4(1, 0, "\u250c\u2500\u2510", C.Color_38_38_56);
        terminal.writeAt$4(1, 1, "\u2561 \u255e", C.Color_38_38_56);
        terminal.writeAt$4(1, 2, "\u2514\u2500\u2518", C.Color_38_38_56);
        if (this.hero.lore.seen$1(breed) === 0) {
          terminal.writeAt$4(1, 3, "You have not seen this breed yet.", C.Color_38_38_56);
          return;
        }
        terminal.drawGlyph$3(2, 1, breed.appearance);
        terminal.writeAt$4(4, 1, O.Log__categorize(breed._breed$_name, false, true), C.Color_222_156_33);
        t1 = breed.description;
        if (t1 != null) {
          if (typeof t2 !== "number")
            return t2.$sub();
          t1 = O.Log_wordWrap(t2 - 2, t1);
          t2 = t1.length;
          y = 3;
          _i = 0;
          for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
            ++y;
          }
          ++y;
        } else
          y = 3;
        description = this._describeBreed$1(breed);
        t1 = t3.x;
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 = O.Log_wordWrap(t1 - 2, description);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
          ++y;
        }
      },
      _hero_lore_dialog$_select$1: function(offset) {
        var t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(this._selection + offset, 0, this._breeds.length - 1));
        this._selection = t1;
        this._scroll = H.intTypeCheck(C.JSInt_methods.clamp$2(this._scroll, t1 - 11 + 1, t1));
        this.dirty$0();
      },
      _describeBreed$1: function(breed) {
        var t1, sentences, pronoun, lore, t2, t3, noun;
        t1 = P.String;
        sentences = H.setRuntimeTypeInfo([], [t1]);
        pronoun = breed.pronoun.subjective;
        lore = this.hero.lore;
        t2 = breed.groups;
        if (t2.length !== 0) {
          t3 = H.getTypeArgumentByIndex(t2, 0);
          noun = new H.MappedListIterable(t2, H.functionTypeCheck(new E.HeroLoreDialog__describeBreed_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).join$1(0, " ");
        } else
          noun = "monster";
        if (breed.flags.unique)
          if (lore.slain$1(breed) > 0)
            C.JSArray_methods.add$1(sentences, "You have slain this unique " + noun + ".");
          else
            C.JSArray_methods.add$1(sentences, "You have seen but not slain this unique " + noun + ".");
        else
          C.JSArray_methods.add$1(sentences, "You have seen " + lore.seen$1(breed) + " and slain " + lore.slain$1(breed) + " of this " + noun + ".");
        C.JSArray_methods.add$1(sentences, pronoun + " is worth " + breed.get$experience() + " experience.");
        if (lore.slain$1(breed) > 0)
          C.JSArray_methods.add$1(sentences, pronoun + " has " + breed.maxHealth + " health.");
        t2 = H.getTypeArgumentByIndex(sentences, 0);
        return new H.MappedListIterable(sentences, H.functionTypeCheck(new E.HeroLoreDialog__describeBreed_closure0(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).join$1(0, " ");
      },
      _listBreeds$0: function() {
        var _box_0, t1, t2, t3, selectedBreed, compareDepth;
        _box_0 = {};
        t1 = this._breeds;
        t2 = t1.length;
        if (t2 !== 0) {
          t3 = this._selection;
          if (t3 < 0 || t3 >= t2)
            return H.ioore(t1, t3);
          selectedBreed = t1[t3];
        } else
          selectedBreed = null;
        C.JSArray_methods.set$length(t1, 0);
        t2 = this._sort;
        t3 = this.hero;
        if (t2 === C._Sort_gc6) {
          t3.game.content;
          t2 = $.$get$Monsters_breeds().get$all();
          t3 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
          C.JSArray_methods.addAll$1(t1, new H.WhereIterable(t2, H.functionTypeCheck(new E.HeroLoreDialog__listBreeds_closure(), {func: 1, ret: P.bool, args: [t3]}), [t3]));
        } else {
          t3.game.content;
          C.JSArray_methods.addAll$1(t1, $.$get$Monsters_breeds().get$all());
        }
        compareDepth = new E.HeroLoreDialog__listBreeds_compareDepth();
        t2 = [{func: 1, ret: P.int, args: [B.Breed, B.Breed]}];
        _box_0.comparisons = H.setRuntimeTypeInfo([], t2);
        switch (this._sort) {
          case C._Sort_JQf:
            _box_0.comparisons = H.setRuntimeTypeInfo([new E.HeroLoreDialog__listBreeds_compareGlyph(), compareDepth], t2);
            break;
          case C._Sort_0CF:
            break;
          case C._Sort_Qu1:
            _box_0.comparisons = H.setRuntimeTypeInfo([compareDepth], t2);
            break;
          case C._Sort_gc6:
            _box_0.comparisons = H.setRuntimeTypeInfo([compareDepth], t2);
            break;
        }
        C.JSArray_methods.sort$1(t1, new E.HeroLoreDialog__listBreeds_closure0(_box_0));
        this._selection = 0;
        if (selectedBreed != null) {
          t1 = C.JSArray_methods.indexOf$1(t1, selectedBreed);
          this._selection = t1;
          if (t1 === -1)
            this._selection = 0;
        }
        this._hero_lore_dialog$_select$1(0);
      }
    },
    HeroLoreDialog_render_writeLine: {
      "^": "Closure:21;terminal",
      call$2: function(y, color) {
        this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500\u2500", color);
      }
    },
    HeroLoreDialog__describeBreed_closure: {
      "^": "Closure:113;",
      call$1: [function(group) {
        return H.interceptedTypeCheck(group, "$isBreedGroup").name;
      }, null, null, 4, 0, null, 42, "call"]
    },
    HeroLoreDialog__describeBreed_closure0: {
      "^": "Closure:5;",
      call$1: [function(sentence) {
        H.stringTypeCheck(sentence);
        return J.getInterceptor$s(sentence).substring$2(sentence, 0, 1).toUpperCase() + C.JSString_methods.substring$1(sentence, 1);
      }, null, null, 4, 0, null, 43, "call"]
    },
    HeroLoreDialog__listBreeds_closure: {
      "^": "Closure:114;",
      call$1: function(breed) {
        return H.interceptedTypeCheck(breed, "$isBreed").flags.unique;
      }
    },
    HeroLoreDialog__listBreeds_compareGlyph: {
      "^": "Closure:16;",
      call$2: [function(a, b) {
        var aChar, bChar, t1;
        H.interceptedTypeCheck(a, "$isBreed");
        H.interceptedTypeCheck(b, "$isBreed");
        aChar = a.appearance.char;
        bChar = b.appearance.char;
        t1 = new E.HeroLoreDialog__listBreeds_compareGlyph_isUpper();
        if (t1.call$1(aChar) && !t1.call$1(bChar))
          return 1;
        if (!t1.call$1(aChar) && t1.call$1(bChar))
          return -1;
        return J.compareTo$1$ns(aChar, bChar);
      }, null, null, 8, 0, null, 17, 8, "call"]
    },
    HeroLoreDialog__listBreeds_compareGlyph_isUpper: {
      "^": "Closure:116;",
      call$1: function(c) {
        if (typeof c !== "number")
          return c.$ge();
        return c >= 65 && c <= 90;
      }
    },
    HeroLoreDialog__listBreeds_compareDepth: {
      "^": "Closure:16;",
      call$2: [function(a, b) {
        H.interceptedTypeCheck(a, "$isBreed");
        H.interceptedTypeCheck(b, "$isBreed");
        return C.JSInt_methods.compareTo$1(a.depth, b.depth);
      }, null, null, 8, 0, null, 17, 8, "call"]
    },
    HeroLoreDialog__listBreeds_closure0: {
      "^": "Closure:16;_box_0",
      call$2: function(a, b) {
        var t1, t2, _i, compare;
        H.interceptedTypeCheck(a, "$isBreed");
        H.interceptedTypeCheck(b, "$isBreed");
        for (t1 = this._box_0.comparisons, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          compare = t1[_i].call$2(a, b);
          if (compare !== 0)
            return compare;
        }
        return C.JSString_methods.compareTo$1(O.Log__categorize(a._breed$_name, false, true).toLowerCase(), O.Log__categorize(b._breed$_name, false, true).toLowerCase());
      }
    },
    _Sort: {
      "^": "Object;description,helpText",
      get$next: function() {
        return C.List_WtG[C.JSInt_methods.$mod(C.JSArray_methods.indexOf$1(C.List_WtG, this) + 1, 4)];
      },
      static: {
        "^": "_Sort_appearance<,_Sort_depth<,_Sort_name<"
      }
    }
  }], ["", "package:hauberk/src/ui/hero_resistances_dialog.dart",, Z, {
    "^": "",
    HeroResistancesDialog: {
      "^": "HeroInfoDialog;hero,0_nextScreen,0_ui",
      get$name: function(_) {
        return "Resistances";
      },
      render$1: function(terminal) {
        var writeLine, t1, i, _i, element, t2, x, resistance, color;
        this.super$HeroInfoDialog$render(terminal);
        writeLine = new Z.HeroResistancesDialog_render_writeLine(terminal);
        terminal.writeAt$4(48, 0, "\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 Resistances \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550", C.Color_38_38_56);
        this.drawEquipmentTable$2(terminal, new Z.HeroResistancesDialog_render_closure(this, writeLine, terminal));
        terminal.writeAt$4(41, 21, "Totals", C.Color_63_64_114);
        writeLine.call$2(2, C.Color_38_38_56);
        writeLine.call$2(20, C.Color_38_38_56);
        for (this.hero.game.content, t1 = $.$get$Elements_all(), i = 0, _i = 0; _i < 12; ++_i) {
          element = t1[_i];
          t2 = $.$get$Element_none();
          if (element == null ? t2 == null : element === t2)
            continue;
          x = 48 + i * 3;
          terminal.writeAt$4(x, 1, element.abbreviation, B.elementColor(element));
          resistance = this.hero.equipmentResistance$1(element);
          if (resistance > 0)
            color = C.Color_22_117_38;
          else
            color = resistance < 0 ? C.Color_204_35_57 : C.Color_38_38_56;
          terminal.writeAt$4(x, 21, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(resistance), 2), color);
          ++i;
        }
      }
    },
    HeroResistancesDialog_render_writeLine: {
      "^": "Closure:21;terminal",
      call$2: function(y, color) {
        this.terminal.writeAt$4(2, y, "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500 \u2500\u2500", color);
      }
    },
    HeroResistancesDialog_render_closure: {
      "^": "Closure:33;$this,writeLine,terminal",
      call$2: function(item, y) {
        var t1, t2, i, _i, element, t3, x, resistance, string;
        this.writeLine.call$2(y - 1, C.Color_19_17_28);
        if (item == null)
          return;
        for (this.$this.hero.game.content, t1 = $.$get$Elements_all(), t2 = this.terminal, i = 0, _i = 0; _i < 12; ++_i) {
          element = t1[_i];
          t3 = $.$get$Element_none();
          if (element == null ? t3 == null : element === t3)
            continue;
          x = 48 + i * 3;
          resistance = item.resistance$1(element);
          string = C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(resistance), 2);
          if (resistance > 0)
            t2.writeAt$4(x, y, string, C.Color_22_117_38);
          else if (resistance < 0)
            t2.writeAt$4(x, y, string, C.Color_204_35_57);
          ++i;
        }
      }
    }
  }], ["", "package:hauberk/src/ui/input.dart",, Y, {
    "^": "",
    Input: {
      "^": "Object;name>"
    }
  }], ["", "package:hauberk/src/ui/item_dialog.dart",, D, {
    "^": "",
    ItemDialog: {
      "^": "Screen;_item_dialog$_gameScreen,_command,_item_dialog$_location,0_selectedItem,0_item_dialog$_count,_item_dialog$_shiftDown,0_item_dialog$_inspected,0_ui",
      get$isTransparent: function() {
        return true;
      },
      handleInput$1: function(input) {
        var t1, t2;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_ok:
            t1 = this._selectedItem;
            if (t1 != null) {
              this._command.selectItem$4(this, t1, this._item_dialog$_count, this._item_dialog$_location);
              return true;
            }
            break;
          case C.Input_cancel:
            if (this._selectedItem != null) {
              this._selectedItem = null;
              this.dirty$0();
            } else
              this._ui.pop$0();
            return true;
          case C.Input_n:
            t1 = this._selectedItem;
            if (t1 != null) {
              t2 = this._item_dialog$_count;
              t1 = t1._count;
              if (typeof t2 !== "number")
                return t2.$lt();
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (t2 < t1) {
                this._item_dialog$_count = t2 + 1;
                this.dirty$0();
              }
              return true;
            }
            break;
          case C.Input_s:
            if (this._selectedItem != null) {
              t1 = this._item_dialog$_count;
              if (typeof t1 !== "number")
                return t1.$gt();
              if (t1 > 1) {
                this._item_dialog$_count = t1 - 1;
                this.dirty$0();
              }
              return true;
            }
            break;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, index, t2;
        if (keyCode === 16) {
          this._item_dialog$_shiftDown = true;
          this.dirty$0();
          return true;
        }
        if (alt)
          return false;
        if (this._selectedItem != null)
          return false;
        if (typeof keyCode !== "number")
          return keyCode.$ge();
        if (keyCode >= 65 && keyCode <= 90) {
          this._selectItem$1(keyCode - 65);
          return true;
        }
        if (!shift && keyCode === 9 && this._command.get$allowedLocations().length > 1) {
          t1 = this._command;
          index = C.JSArray_methods.indexOf$1(t1.get$allowedLocations(), this._item_dialog$_location);
          t2 = t1.get$allowedLocations();
          t1 = C.JSInt_methods.$mod(index + 1, t1.get$allowedLocations().length);
          if (t1 >= t2.length)
            return H.ioore(t2, t1);
          this._item_dialog$_location = t2[t1];
          this.dirty$0();
          return true;
        }
        return false;
      },
      keyUp$3$alt$shift: function(keyCode, alt, shift) {
        if (keyCode === 16) {
          this._item_dialog$_shiftDown = false;
          this.dirty$0();
          return true;
        }
        return false;
      },
      render$1: function(terminal) {
        var t1, query, select;
        terminal.fill$4(0, 0, 0, 40, 2);
        Y.drawItems(terminal, 0, this._getItems$0(), this.get$_item_dialog$_canSelect(), this._item_dialog$_shiftDown, null, this._item_dialog$_inspected, true);
        t1 = this._item_dialog$_inspected;
        if (t1 != null)
          Y.drawInspector(terminal, this._item_dialog$_gameScreen.game.hero, t1);
        if (this._selectedItem == null)
          if (this._item_dialog$_shiftDown)
            terminal.writeAt$4(1, 0, "Inspect which item?", C.Color_222_156_33);
          else
            terminal.writeAt$4(1, 0, this._command.query$1(this._item_dialog$_location), C.Color_222_156_33);
        else {
          query = this._command.queryCount$1(this._item_dialog$_location);
          terminal.writeAt$4(1, 0, query, C.Color_132_126_135);
          terminal.writeAt$4(query.length + 2, 0, J.toString$0$(this._item_dialog$_count), C.Color_222_156_33);
        }
        if (this._selectedItem == null)
          select = this._item_dialog$_shiftDown ? "[A-Z] Inspect item" : "[A-Z] Select item, [Shift] Inspect";
        else
          select = "[\u2195] Change quantity";
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, select + (this._command.get$allowedLocations().length > 1 ? ", [Tab] Switch view" : ""), C.Color_38_38_56);
      },
      _item_dialog$_canSelect$1: [function(item) {
        var t1;
        if (this._item_dialog$_shiftDown)
          return true;
        t1 = this._selectedItem;
        if (t1 != null)
          return item === t1;
        return this._command.canSelect$1(item);
      }, "call$1", "get$_item_dialog$_canSelect", 4, 0, 20],
      _selectItem$1: function(index) {
        var items, t1, t2, t3;
        items = J.toList$0$ax(this._getItems$0().get$slots());
        t1 = items.length;
        if (index >= t1)
          return;
        if (index < 0)
          return H.ioore(items, index);
        t1 = items[index];
        if (t1 == null)
          return;
        if (this._item_dialog$_shiftDown) {
          this._item_dialog$_inspected = t1;
          this.dirty$0();
        } else {
          t2 = this._command;
          if (!t2.canSelect$1(t1))
            return;
          if (index >= items.length)
            return H.ioore(items, index);
          t1 = J.$gt$n(items[index].get$count(), 1) && t2.get$needsCount();
          t3 = items.length;
          if (t1) {
            if (index >= t3)
              return H.ioore(items, index);
            t1 = items[index];
            this._selectedItem = t1;
            this._item_dialog$_count = t1._count;
            this.dirty$0();
          } else {
            if (index >= t3)
              return H.ioore(items, index);
            t2.selectItem$4(this, items[index], 1, this._item_dialog$_location);
          }
        }
      },
      _getItems$0: function() {
        switch (this._item_dialog$_location) {
          case C.ItemLocation_wMy:
            return this._item_dialog$_gameScreen.game.hero.inventory;
          case C.ItemLocation_A8D:
            return this._item_dialog$_gameScreen.game.hero.equipment;
          case C.ItemLocation_46y:
            var t1 = this._item_dialog$_gameScreen.game;
            return t1._stage.itemsAt$1(t1.hero._pos);
        }
        throw H.wrapException("unreachable");
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    _ItemCommand: {
      "^": "Object;",
      get$allowedLocations: function() {
        return C.List_GFv;
      },
      queryCount$1: function($location) {
        return;
      }
    },
    _DropItemCommand: {
      "^": "_ItemCommand;",
      get$allowedLocations: function() {
        return C.List_iDg;
      },
      get$needsCount: function() {
        return true;
      },
      query$1: function($location) {
        switch ($location) {
          case C.ItemLocation_wMy:
            return "Drop which item?";
          case C.ItemLocation_A8D:
            return "Unequip and drop which item?";
        }
        throw H.wrapException("unreachable");
      },
      queryCount$1: function($location) {
        return "Drop how many?";
      },
      canSelect$1: function(item) {
        H.interceptedTypeCheck(item, "$isItem");
        return true;
      },
      selectItem$4: function(dialog, item, count, $location) {
        H.interceptedTypeCheck(item, "$isItem");
        dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.DropAction(count, $location, item));
        dialog._ui.pop$0();
      }
    },
    _UseItemCommand: {
      "^": "_ItemCommand;",
      get$needsCount: function() {
        return false;
      },
      query$1: function($location) {
        switch ($location) {
          case C.ItemLocation_wMy:
            return "Use or equip which item?";
          case C.ItemLocation_A8D:
            return "Unequip which item?";
          case C.ItemLocation_46y:
            return "Pick up and use which item?";
        }
        throw H.wrapException("unreachable");
      },
      canSelect$1: function(item) {
        var t1 = H.interceptedTypeCheck(item, "$isItem").type;
        return t1.use != null || t1.equipSlot != null;
      },
      selectItem$4: function(dialog, item, count, $location) {
        H.interceptedTypeCheck(item, "$isItem");
        dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.UseAction($location, item));
        dialog._ui.pop$0();
      }
    },
    _TossItemCommand: {
      "^": "_ItemCommand;",
      get$needsCount: function() {
        return false;
      },
      query$1: function($location) {
        switch ($location) {
          case C.ItemLocation_wMy:
            return "Throw which item?";
          case C.ItemLocation_A8D:
            return "Unequip and throw which item?";
          case C.ItemLocation_46y:
            return "Pick up and throw which item?";
        }
        throw H.wrapException("unreachable");
      },
      canSelect$1: function(item) {
        return H.interceptedTypeCheck(item, "$isItem").type.toss != null;
      },
      selectItem$4: function(dialog, item, count, $location) {
        var hit, t1;
        H.interceptedTypeCheck(item, "$isItem");
        hit = new U.Hit(item.type.toss.attack, 0, 1, 1, 0, $.$get$Element_none(), 1);
        t1 = dialog._item_dialog$_gameScreen;
        t1.game.hero.modifyHit$2(hit, C.HitType_2);
        dialog._ui.goTo$1(X.TargetDialog$(t1, hit.get$range(), new D._TossItemCommand_selectItem_closure(dialog, $location, item, hit)));
      }
    },
    _TossItemCommand_selectItem_closure: {
      "^": "Closure:8;dialog,location,item,hit",
      call$1: function(target) {
        this.dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new B.TossAction(this.hit, target, this.location, this.item));
      }
    },
    _PickUpItemCommand: {
      "^": "_ItemCommand;",
      get$allowedLocations: function() {
        return C.List_5uo;
      },
      get$needsCount: function() {
        return true;
      },
      query$1: function($location) {
        return "Pick up which item?";
      },
      queryCount$1: function($location) {
        return "Pick up how many?";
      },
      canSelect$1: function(item) {
        H.interceptedTypeCheck(item, "$isItem");
        return true;
      },
      selectItem$4: function(dialog, item, count, $location) {
        H.interceptedTypeCheck(item, "$isItem");
        dialog._item_dialog$_gameScreen.game.hero._behavior = new X.ActionBehavior(new R.PickUpAction(item));
        dialog._ui.pop$0();
      }
    }
  }], ["", "package:hauberk/src/ui/item_screen.dart",, F, {
    "^": "",
    ItemScreen: {
      "^": "Screen;",
      get$_headerText: function() {
        return this._sink.get$headerText();
      },
      _canSelect$1: [function(item) {
        if (this._shiftDown)
          return true;
        return this.canSelect$1(item);
      }, "call$1", "get$_canSelect", 4, 0, 20],
      canSelect$1: function(item) {
        return;
      },
      handleInput$1: function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$0();
          return true;
        }
        return false;
      },
      keyDown$3$alt$shift: ["super$ItemScreen$keyDown", function(keyCode, alt, shift) {
        var index, t1, item, t2;
        if (keyCode === 16) {
          this._shiftDown = true;
          this.dirty$0();
          return true;
        }
        if (alt)
          return false;
        if (typeof keyCode !== "number")
          return keyCode.$ge();
        if (keyCode >= 65 && keyCode <= 90) {
          index = keyCode - 65;
          t1 = J.get$length$asx(this.get$_items().get$slots());
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (index >= t1)
            return false;
          item = J.elementAt$1$ax(this.get$_items().get$slots(), index);
          if (item == null)
            return false;
          if (this._shiftDown) {
            this._inspected = item;
            this.dirty$0();
          } else {
            if (this.canSelect$1(item) !== true)
              return false;
            t1 = item._count;
            if (typeof t1 !== "number")
              return t1.$gt();
            if (t1 > 1) {
              t1 = this._ui;
              t2 = new F._CountScreen(this, item, this._save, this._sink, false);
              t2._item_screen$_count = this._initialCount$1(item);
              t2._inspected = item;
              t1.push$1(t2);
              return true;
            }
            if (this._transfer$2(item, 1)) {
              this._ui.pop$0();
              return true;
            }
          }
        }
        return false;
      }],
      keyUp$3$alt$shift: function(keyCode, alt, shift) {
        if (keyCode === 16) {
          this._shiftDown = false;
          this.dirty$0();
          return true;
        }
        return false;
      },
      activate$2: function(popped, result) {
        H.assertSubtype(popped, "$isScreen", [Y.Input], "$asScreen");
        this._inspected = null;
        if (popped instanceof F._CountScreen && result != null) {
          this._transfer$2(popped.get$_item(popped), H.intTypeCheck(result));
          this._ui.pop$0();
        }
      },
      render$1: ["super$ItemScreen$render", function(terminal) {
        var heroGold, t1, t2, help;
        terminal.writeAt$4(0, 0, this._shiftDown ? "Inspect which item?" : this.get$_headerText(), C.Color_222_156_33);
        heroGold = Y.formatMoney(this._save.gold);
        terminal.writeAt$4(31, 0, "Gold:", C.Color_132_126_135);
        t1 = 45 - heroGold.length;
        terminal.writeAt$4(t1 - 1, 0, "$", C.Color_142_82_55);
        terminal.writeAt$4(t1, 0, heroGold, C.Color_222_156_33);
        t1 = this.get$_items();
        t2 = this.get$_itemPrice();
        Y.drawItems(terminal, 0, t1, this.get$_canSelect(), this._shiftDown, t2, this._inspected, null);
        t1 = this._inspected;
        if (t1 != null)
          Y.drawInspector(terminal, null, t1);
        help = this._shiftDown ? "[A-Z] Inspect item" : this.get$_helpText();
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, help, C.Color_38_38_56);
      }],
      _initialCount$1: function(item) {
        return item._count;
      },
      _maxCount$1: function(item) {
        return item._count;
      },
      _itemPrice$1: [function(item) {
        return;
      }, "call$1", "get$_itemPrice", 4, 0, 7],
      _transfer$2: function(item, count) {
        var to = this._sink.get$items();
        if (!to.canAdd$1(item)) {
          P.print("no enough room");
          return false;
        }
        if (count === item._count) {
          to.tryAdd$1(item);
          this.get$_items().remove$1(0, item);
        } else {
          to.tryAdd$1(item.splitStack$1(count));
          this.get$_items().countChanged$0();
        }
        this._afterTransfer$2(item, count);
        return true;
      },
      _afterTransfer$2: function(item, count) {
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    _HomeViewScreen: {
      "^": "ItemScreen;_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_items: function() {
        return this._save.home;
      },
      get$_headerText: function() {
        return "Welcome home!";
      },
      get$_helpText: function() {
        return "[G] Get item, [P] Put item, [Shift] Inspect item, [Esc] Leave";
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, $screen;
        if (this.super$ItemScreen$keyDown(keyCode, alt, shift))
          return true;
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 71:
            t1 = this._save;
            $screen = new F._HomeGetScreen(t1, new F._InventorySink(t1), false);
            $screen._inspected = this._inspected;
            this._ui.push$1($screen);
            return true;
          case 80:
            t1 = this._save;
            this._ui.push$1(new F._InventoryScreen(t1, new F._HomeSink(t1), false));
            return true;
        }
        return false;
      }
    },
    _HomeGetScreen: {
      "^": "ItemScreen;_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_headerText: function() {
        return "Get which item?";
      },
      get$_helpText: function() {
        return "[A-Z] Select item, [Shift] Inspect item, [Esc] Cancel";
      },
      get$_items: function() {
        return this._save.home;
      }
    },
    _HeroScreen: {
      "^": "ItemScreen;",
      get$_helpText: function() {
        return "[Tab] Switch to " + this.get$nextScreenName() + ", [A-Z] Select item, [Shift] Inspect item, [Esc] Cancel";
      },
      canSelect$1: function(item) {
        return true;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (this.super$ItemScreen$keyDown(keyCode, alt, shift))
          return true;
        if (shift || alt)
          return false;
        if (keyCode === 9) {
          this._ui.goTo$1(this.nextScreen$0());
          return true;
        }
        return false;
      }
    },
    _InventoryScreen: {
      "^": "_HeroScreen;_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_items: function() {
        return this._save.inventory;
      },
      get$nextScreenName: function() {
        return "equipment";
      },
      nextScreen$0: function() {
        return new F._EquipmentScreen(this._save, this._sink, false);
      }
    },
    _EquipmentScreen: {
      "^": "_HeroScreen;_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_items: function() {
        return this._save.equipment;
      },
      get$nextScreenName: function() {
        return "inventory";
      },
      nextScreen$0: function() {
        return new F._InventoryScreen(this._save, this._sink, false);
      }
    },
    _ShopViewScreen: {
      "^": "ItemScreen;_shop,_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_items: function() {
        return this._shop;
      },
      get$_headerText: function() {
        return "What can I interest you in?";
      },
      get$_helpText: function() {
        return "[B] Buy item, [S] Sell item, [Shift] Inspect item, [Esc] Leave";
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, $screen;
        if (this.super$ItemScreen$keyDown(keyCode, alt, shift))
          return true;
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 66:
            t1 = this._save;
            $screen = new F._ShopBuyScreen(this._shop, t1, new F._InventorySink(t1), false);
            $screen._inspected = this._inspected;
            this._ui.push$1($screen);
            break;
          case 83:
            this._ui.push$1(new F._InventorySellScreen(this._save, new F._ShopSink(this._shop), false));
            return true;
        }
        return false;
      },
      _itemPrice$1: [function(item) {
        return item.get$price();
      }, "call$1", "get$_itemPrice", 4, 0, 7]
    },
    _ShopBuyScreen: {
      "^": "ItemScreen;_shop,_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_headerText: function() {
        return "Buy which item?";
      },
      get$_helpText: function() {
        return "[A-Z] Select item, [Shift] Inspect item, [Esc] Cancel";
      },
      get$_items: function() {
        return this._shop;
      },
      canSelect$1: function(item) {
        var t1, t2;
        t1 = item.get$price();
        t2 = this._save.gold;
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 <= t2;
      },
      _initialCount$1: function(item) {
        return 1;
      },
      _maxCount$1: function(item) {
        var t1, t2, t3;
        t1 = item._count;
        t2 = this._save.gold;
        t3 = item.get$price();
        if (typeof t2 !== "number")
          return t2.$tdiv();
        t3 = C.JSInt_methods.$tdiv(t2, t3);
        return Math.min(H.checkNum(t1), t3);
      },
      _itemPrice$1: [function(item) {
        return item.get$price();
      }, "call$1", "get$_itemPrice", 4, 0, 7],
      _afterTransfer$2: function(item, count) {
        var t1, t2, t3;
        t1 = this._save;
        t2 = t1.gold;
        t3 = item.get$price();
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.gold = t2 - t3 * count;
      }
    },
    _SellMixin: {
      "^": "Object;",
      canSelect$1: function(item) {
        var t1 = this._itemPrice$1(item);
        if (typeof t1 !== "number")
          return t1.$gt();
        return t1 > 0;
      },
      _initialCount$1: function(item) {
        return 1;
      },
      _itemPrice$1: [function(item) {
        return C.JSNumber_methods.floor$0(item.get$price() * 0.75);
      }, "call$1", "get$_itemPrice", 4, 0, 7],
      _afterTransfer$2: function(item, count) {
        var t1, t2, t3;
        t1 = this._save;
        t2 = t1.gold;
        t3 = this._itemPrice$1(item);
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t2 !== "number")
          return t2.$add();
        t1.gold = t2 + t3 * count;
      }
    },
    _InventorySellScreen: {
      "^": "__InventorySellScreen__InventoryScreen__SellMixin;_save,_sink,_shiftDown,0_inspected,0_ui",
      nextScreen$0: function() {
        return new F._EquipmentSellScreen(this._save, this._sink, false);
      }
    },
    _EquipmentSellScreen: {
      "^": "__EquipmentSellScreen__EquipmentScreen__SellMixin;_save,_sink,_shiftDown,0_inspected,0_ui",
      nextScreen$0: function() {
        return new F._InventorySellScreen(this._save, this._sink, false);
      }
    },
    _CountScreen: {
      "^": "ItemScreen;_parent,_item>,0_item_screen$_count,_save,_sink,_shiftDown,0_inspected,0_ui",
      get$_items: function() {
        return this._parent.get$_items();
      },
      get$_headerText: function() {
        return "";
      },
      get$_helpText: function() {
        return "[OK] " + this._sink.get$verb() + ", [\u2195] Change quantity, [Esc] Cancel";
      },
      canSelect$1: function(item) {
        return item === this._item;
      },
      render$1: function(terminal) {
        var t1, x, itemText, price, priceString;
        this.super$ItemScreen$render(terminal);
        t1 = this._sink;
        terminal.writeAt$3(0, 0, t1.get$verb());
        x = t1.get$verb().length + 1;
        t1 = this._item;
        itemText = t1.clone$1(0, this._item_screen$_count).get$nounText();
        terminal.writeAt$4(x, 0, itemText, C.Color_222_156_33);
        x += itemText.length;
        price = this._parent._itemPrice$1(t1);
        if (price != null) {
          terminal.writeAt$3(x, 0, " for ");
          x += 5;
          t1 = this._item_screen$_count;
          if (typeof t1 !== "number")
            return H.iae(t1);
          priceString = Y.formatMoney(price * t1);
          terminal.writeAt$4(x, 0, priceString, C.Color_222_156_33);
          x += priceString.length;
          terminal.writeAt$3(x, 0, " gold");
          x += 5;
        }
        terminal.writeAt$3(x, 0, "?");
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (keyCode === 16)
          return false;
        return this.super$ItemScreen$keyDown(keyCode, alt, shift);
      },
      keyUp$3$alt$shift: function(keyCode, alt, shift) {
        return false;
      },
      handleInput$1: function(input) {
        var t1, t2;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_ok:
            this._ui.pop$1(this._item_screen$_count);
            return true;
          case C.Input_cancel:
            this._ui.pop$0();
            return true;
          case C.Input_n:
            t1 = this._item_screen$_count;
            t2 = this._parent._maxCount$1(this._item);
            if (typeof t1 !== "number")
              return t1.$lt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (t1 < t2) {
              t1 = this._item_screen$_count;
              if (typeof t1 !== "number")
                return t1.$add();
              this._item_screen$_count = t1 + 1;
              this.dirty$0();
            }
            return true;
          case C.Input_s:
            t1 = this._item_screen$_count;
            if (typeof t1 !== "number")
              return t1.$gt();
            if (t1 > 1) {
              this._item_screen$_count = t1 - 1;
              this.dirty$0();
            }
            return true;
          case C.Input_runN:
            this._item_screen$_count = this._parent._maxCount$1(this._item);
            this.dirty$0();
            return true;
          case C.Input_runS:
            this._item_screen$_count = 1;
            this.dirty$0();
            return true;
        }
        return false;
      },
      _itemPrice$1: [function(item) {
        return this._parent._itemPrice$1(item);
      }, "call$1", "get$_itemPrice", 4, 0, 7]
    },
    _ItemSink: {
      "^": "Object;",
      get$headerText: function() {
        return H.throwExpression("unreachable");
      }
    },
    _HomeSink: {
      "^": "_ItemSink;_save",
      get$headerText: function() {
        return "Put which item in your home?";
      },
      get$verb: function() {
        return "Put";
      },
      get$items: function() {
        return this._save.home;
      }
    },
    _InventorySink: {
      "^": "_ItemSink;_save",
      get$verb: function() {
        return "Get";
      },
      get$items: function() {
        return this._save.inventory;
      }
    },
    _ShopSink: {
      "^": "_ItemSink;_shop",
      get$headerText: function() {
        return "Sell which item?";
      },
      get$verb: function() {
        return "Sell";
      },
      get$items: function() {
        return this._shop;
      }
    },
    __EquipmentSellScreen__EquipmentScreen__SellMixin: {
      "^": "_EquipmentScreen+_SellMixin;"
    },
    __InventorySellScreen__InventoryScreen__SellMixin: {
      "^": "_InventoryScreen+_SellMixin;"
    }
  }], ["", "package:hauberk/src/ui/item_view.dart",, Y, {
    "^": "",
    drawItems: function(terminal, left, items, canSelect, capitals, getPrice, inspected, isDialog) {
      var _box_1, itemCount, boxHeight, letters, t1, t2, price, t3, t4, t5, i, letter, _box_0, y, canSelectItem, borderColor, letterColor, textColor, t6, t7, t8, t9;
      _box_1 = {};
      _box_1.terminal = terminal;
      H.functionTypeCheck(canSelect, {func: 1, ret: P.bool, args: [R.Item]});
      H.functionTypeCheck(getPrice, {func: 1, ret: P.int, args: [R.Item]});
      if (isDialog == null)
        isDialog = false;
      terminal = terminal.rect$4(0, left, 2, 46, terminal.get$height(terminal) - 2);
      _box_1.terminal = terminal;
      itemCount = J.get$length$asx(items.get$slots());
      boxHeight = isDialog ? Math.max(H.checkNum(itemCount), 1) + 3 : terminal.get$height(terminal) - 1;
      R.Draw_frame(terminal, 0, 0, terminal.get$width(terminal), boxHeight, null);
      terminal.writeAt$4(1, 0, items.get$location(items).name, C.Color_132_126_135);
      if (J.get$isEmpty$asx(items.get$slots())) {
        terminal.writeAt$4(1, 2, items.get$location(items).emptyDescription, C.Color_38_38_56);
        return;
      }
      letters = capitals ? "ABCDEFGHIJKLMNOPQRSTUVWXYZ" : "abcdefghijklmnopqrstuvwxyz";
      t1 = terminal.get$width(terminal);
      if (typeof t1 !== "number")
        return t1.$sub();
      _box_1.statRight = t1 - 1;
      t1 = getPrice != null;
      if (t1)
        for (t2 = items.get$iterator(items); t2.moveNext$0();) {
          price = getPrice.call$1(t2.get$current());
          if (price != null) {
            t3 = _box_1.statRight;
            t4 = _box_1.terminal;
            t4 = t4.get$width(t4);
            t5 = Y.formatMoney(price);
            if (typeof t4 !== "number")
              return t4.$sub();
            _box_1.statRight = Math.min(t3, t4 - t5.length - 3);
          }
        }
      for (t2 = J.get$iterator$ax(items.get$slots()), t3 = letters.length, i = 0, letter = 0; t2.moveNext$0();) {
        _box_0 = {};
        t4 = t2.get$current();
        y = i + 2;
        if (t4 == null) {
          t4 = _box_1.terminal;
          t5 = items.get$slotTypes();
          if (i >= t5.length)
            return H.ioore(t5, i);
          t4.writeAt$4(1, y, "    (" + t5[i] + ")", C.Color_38_38_56);
          ++letter;
          ++i;
          continue;
        }
        _box_0.enabled = true;
        canSelectItem = canSelect.call$1(t4);
        if (canSelectItem === true) {
          borderColor = C.Color_38_38_56;
          letterColor = C.Color_222_156_33;
          textColor = C.Color_226_223_240;
          t5 = true;
        } else if (canSelectItem === false) {
          _box_0.enabled = false;
          borderColor = C.Color_0_0_0;
          letterColor = C.Color_0_0_0;
          textColor = C.Color_38_38_56;
          t5 = false;
        } else {
          borderColor = C.Color_38_38_56;
          letterColor = C.Color_38_38_56;
          textColor = C.Color_226_223_240;
          t5 = true;
        }
        _box_1.terminal.writeAt$4(1, y, " )", borderColor);
        t6 = _box_1.terminal;
        if (letter >= t3)
          return H.ioore(letters, letter);
        t6.writeAt$4(1, y, letters[letter], letterColor);
        ++letter;
        if (t5)
          _box_1.terminal.drawGlyph$3(3, y, t4.type.appearance);
        _box_1.terminal.writeAt$4(5, y, t4.get$nounText(), textColor);
        if (t1 && getPrice.call$1(t4) != null) {
          price = Y.formatMoney(getPrice.call$1(t4));
          t6 = _box_1.terminal;
          t7 = t6.get$width(t6);
          t8 = price.length;
          if (typeof t7 !== "number")
            return t7.$sub();
          t9 = t5 ? C.Color_222_156_33 : C.Color_38_38_56;
          t6.writeAt$4(t7 - t8 - 1, y, price, t9);
          t9 = _box_1.terminal;
          t7 = t9.get$width(t9);
          if (typeof t7 !== "number")
            return t7.$sub();
          t5 = t5 ? C.Color_142_82_55 : C.Color_38_38_56;
          t9.writeAt$4(t7 - t8 - 2, y, "$", t5);
        }
        t5 = new Y.drawItems_drawStat(_box_1, _box_0, y);
        t6 = t4.type;
        t7 = t6.attack;
        if (t7 != null) {
          $.$get$Element_none();
          t5.call$4("\xbb", C.JSDouble_methods.toString$0(C.JSInt_methods.toInt$0(t7.damage * 100) / 100), C.Color_179_74_4, C.Color_64_31_36);
        } else {
          t6 = t6.armor;
          if (t6 + t4.get$armorModifier() !== 0)
            t5.call$4("\u2022", t6 + t4.get$armorModifier(), C.Color_22_117_38, C.Color_0_64_39);
        }
        if (t4 === inspected) {
          t4 = _box_1.terminal;
          t4.drawGlyph$3(2, y, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
          t4 = _box_1.terminal;
          t5 = t4.get$width(t4);
          if (typeof t5 !== "number")
            return t5.$sub();
          t4.drawGlyph$3(t5 - 1, y, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
        }
        ++i;
      }
    },
    drawInspector: function(terminal, hero, item) {
      var _box_0, t1, writeSection, writeLabel, writeScale, writeBonus, writeStat, t2, t3, t4, t5, color, armor, x, _i, element, resistance, t6, description, line;
      _box_0 = {};
      _box_0.terminal = terminal;
      terminal = terminal.rect$4(0, 46, 0, 34, 20);
      _box_0.terminal = terminal;
      R.Draw_frame(terminal, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal), null);
      t1 = item.type;
      terminal.drawGlyph$3(1, 0, t1.appearance);
      terminal.writeAt$4(3, 0, item.get$nounText(), C.Color_226_223_240);
      _box_0.y = 2;
      writeSection = new Y.drawInspector_writeSection(_box_0);
      writeLabel = new Y.drawInspector_writeLabel(_box_0);
      writeScale = new Y.drawInspector_writeScale(_box_0);
      writeBonus = new Y.drawInspector_writeBonus(_box_0);
      writeStat = new Y.drawInspector_writeStat(_box_0, writeLabel);
      t2 = t1.attack;
      if (t2 != null) {
        writeSection.call$1("Attack");
        writeLabel.call$1("Damage");
        t3 = item.get$element();
        t4 = $.$get$Element_none();
        if (t3 == null ? t4 != null : t3 !== t4)
          _box_0.terminal.writeAt$4(9, _box_0.y, item.get$element().abbreviation, B.elementColor(item.get$element()));
        t3 = _box_0.terminal;
        t4 = _box_0.y;
        t5 = t2.damage;
        t3.writeAt$4(12, t4, C.JSInt_methods.toString$0(t5), C.Color_132_126_135);
        writeScale.call$3(16, _box_0.y, item.get$damageScale());
        writeBonus.call$3(20, _box_0.y, item.get$damageBonus());
        _box_0.terminal.writeAt$4(25, _box_0.y, "=", C.Color_38_38_56);
        t4 = item.get$damageScale();
        t3 = item.get$damageBonus();
        _box_0.terminal.writeAt$4(27, _box_0.y, C.JSString_methods.padLeft$1(C.JSNumber_methods.toStringAsFixed$1(t5 * t4 + t3, 2), 6), C.Color_179_74_4);
        ++_box_0.y;
        if (item.get$strikeBonus() !== 0) {
          writeLabel.call$1("Strike");
          writeBonus.call$3(12, _box_0.y, item.get$strikeBonus());
          ++_box_0.y;
        }
        t2 = t2.range;
        if (t2 > 0)
          writeStat.call$2("Range", t2);
        if (hero != null) {
          writeLabel.call$1("Heft");
          t2 = hero.strength;
          t3 = t2.modify$1(t2._value);
          t4 = item.get$heft();
          if (typeof t3 !== "number")
            return t3.$ge();
          color = t3 >= t4 ? C.Color_226_223_240 : C.Color_204_35_57;
          _box_0.terminal.writeAt$4(12, _box_0.y, C.JSInt_methods.toString$0(item.get$heft()), color);
          writeScale.call$3(16, _box_0.y, t2.heftScale$1(item.get$heft()));
          ++_box_0.y;
        }
      }
      t2 = t1.armor;
      if (t2 + item.get$armorModifier() !== 0) {
        writeSection.call$1("Defense");
        writeLabel.call$1("Armor");
        _box_0.terminal.writeAt$4(12, _box_0.y, C.JSInt_methods.toString$0(t2), C.Color_132_126_135);
        writeBonus.call$3(16, _box_0.y, item.get$armorModifier());
        _box_0.terminal.writeAt$4(25, _box_0.y, "=", C.Color_38_38_56);
        armor = C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t2 + item.get$armorModifier()), 6);
        _box_0.terminal.writeAt$4(27, _box_0.y, armor, C.Color_22_117_38);
        ++_box_0.y;
        writeStat.call$2("Weight", item.get$weight());
      }
      writeSection.call$1("Resistances");
      for (t2 = $.$get$Elements_all(), x = 1, _i = 0; _i < 12; ++_i) {
        element = t2[_i];
        t3 = $.$get$Element_none();
        if (element == null ? t3 == null : element === t3)
          continue;
        resistance = item.resistance$1(element);
        writeBonus.call$3(x - 1, _box_0.y, resistance);
        t3 = _box_0.terminal;
        t4 = _box_0.y;
        t5 = element.abbreviation;
        t6 = resistance === 0 ? C.Color_38_38_56 : B.elementColor(element);
        t3.writeAt$4(x, t4 + 1, t5, t6);
        x += 3;
      }
      _box_0.y += 2;
      description = H.setRuntimeTypeInfo([], [P.String]);
      writeSection.call$1("Description");
      t2 = t1.toss;
      if (t2 != null) {
        t3 = t2.attack;
        t4 = t3.element;
        t5 = $.$get$Element_none();
        element = (t4 == null ? t5 != null : t4 !== t5) ? " " + t4.name : "";
        C.JSArray_methods.add$1(description, "It can be thrown for " + t3.damage + element + " damage up to range " + t3.range + ".");
        t2 = t2.breakage;
        if (t2 !== 0)
          C.JSArray_methods.add$1(description, "It has a " + t2 + "% chance of breaking when thrown.");
      }
      t2 = t1.emanationLevel;
      if (t2 > 0)
        C.JSArray_methods.add$1(description, "It emanates " + t2 + " light.");
      for (t1 = t1.destroyChance, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        C.JSArray_methods.add$1(description, "It can be destroyed by " + t1.get$current().name.toLowerCase() + ".");
      t1 = _box_0.terminal;
      t1 = t1.get$width(t1);
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 = O.Log_wordWrap(t1 - 2, C.JSArray_methods.join$1(description, " "));
      t2 = t1.length;
      _i = 0;
      for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        line = t1[_i];
        _box_0.terminal.writeAt$4(1, _box_0.y, line, C.Color_132_126_135);
        ++_box_0.y;
      }
    },
    formatMoney: function(price) {
      var result, t1;
      H.intTypeCheck(price);
      result = J.toString$0$(price);
      if (typeof price !== "number")
        return price.$gt();
      if (price > 999999999) {
        t1 = result.length - 9;
        result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
      }
      if (price > 999999) {
        t1 = result.length - 6;
        result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
      }
      if (price > 999) {
        t1 = result.length - 3;
        result = C.JSString_methods.substring$2(result, 0, t1) + "," + C.JSString_methods.substring$1(result, t1);
      }
      return result;
    },
    drawItems_drawStat: {
      "^": "Closure;_box_1,_box_0,y",
      call$4: function(symbol, stat, light, dark) {
        var string, t1, t2, t3, t4, t5, t6, t7;
        string = J.toString$0$(stat);
        t1 = this._box_1;
        t2 = t1.terminal;
        t3 = t1.statRight;
        t4 = string.length;
        t5 = this.y;
        t6 = this._box_0;
        t7 = t6.enabled ? dark : C.Color_38_38_56;
        t2.writeAt$4(t3 - t4 - 1, t5, symbol, t7);
        t7 = t1.terminal;
        t1 = t1.statRight;
        t2 = t6.enabled ? light : C.Color_38_38_56;
        t7.writeAt$4(t1 - t4, t5, string, t2);
      }
    },
    drawInspector_writeSection: {
      "^": "Closure:35;_box_0",
      call$1: function(label) {
        var t1, t2, y;
        t1 = this._box_0;
        t2 = t1.y;
        if (t2 !== 2) {
          y = t2 + 1;
          t1.y = y;
          t2 = y;
        }
        t1.terminal.writeAt$4(1, t2, label + ":", C.Color_222_156_33);
        ++t1.y;
      }
    },
    drawInspector_writeLabel: {
      "^": "Closure:35;_box_0",
      call$1: function(label) {
        var t1 = this._box_0;
        t1.terminal.writeAt$4(1, t1.y, label + ":", C.Color_132_126_135);
      }
    },
    drawInspector_writeScale: {
      "^": "Closure;_box_0",
      call$3: function(x, y, scale) {
        var string, xColor, numberColor, t1;
        string = C.JSNumber_methods.toStringAsFixed$1(scale, 1);
        if (scale > 1) {
          xColor = C.Color_0_64_39;
          numberColor = C.Color_22_117_38;
        } else if (scale < 1) {
          xColor = C.Color_84_0_39;
          numberColor = C.Color_204_35_57;
        } else {
          xColor = C.Color_38_38_56;
          numberColor = C.Color_38_38_56;
        }
        t1 = this._box_0;
        t1.terminal.writeAt$4(x, y, "x", xColor);
        t1.terminal.writeAt$4(x + 1, y, string, numberColor);
      }
    },
    drawInspector_writeBonus: {
      "^": "Closure;_box_0",
      call$3: function(x, y, bonus) {
        var string, t1, t2, t3, t4;
        string = C.JSInt_methods.toString$0(Math.abs(bonus));
        if (bonus > 0) {
          t1 = this._box_0;
          t2 = string.length;
          t1.terminal.writeAt$4(x + 2 - t2, y, "+", C.Color_0_64_39);
          t1.terminal.writeAt$4(x + 3 - t2, y, string, C.Color_22_117_38);
        } else {
          t1 = this._box_0;
          t2 = string.length;
          t3 = x + 2 - t2;
          t2 = x + 3 - t2;
          t4 = t1.terminal;
          if (bonus < 0) {
            t4.writeAt$4(t3, y, "-", C.Color_84_0_39);
            t1.terminal.writeAt$4(t2, y, string, C.Color_204_35_57);
          } else {
            t4.writeAt$4(t3, y, "+", C.Color_38_38_56);
            t1.terminal.writeAt$4(t2, y, string, C.Color_38_38_56);
          }
        }
      }
    },
    drawInspector_writeStat: {
      "^": "Closure:119;_box_0,writeLabel",
      call$2: function(label, value) {
        var t1;
        this.writeLabel.call$1(label);
        t1 = this._box_0;
        t1.terminal.writeAt$4(12, t1.y, C.JSInt_methods.toString$0(value), C.Color_226_223_240);
        ++t1.y;
      }
    }
  }], ["", "package:hauberk/src/ui/loading_dialog.dart",, F, {
    "^": "",
    LoadingDialog: {
      "^": "Screen;_loading_dialog$_save,_game,0_steps,_frame,0_ui",
      handleInput$1: function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$1(false);
          return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 78:
            this._ui.pop$1(false);
            break;
          case 89:
            this._ui.pop$1(true);
            break;
        }
        return true;
      },
      update$0: function(_) {
        var t1, t2, t3;
        if (this._steps == null) {
          t1 = this._game.generate$0();
          this._steps = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]);
        }
        if ($.Stopwatch__frequency == null) {
          H.Primitives_initTicker();
          $.Stopwatch__frequency = $.Primitives_timerFrequency;
        }
        t1 = H.intTypeCheck($.Primitives_timerTicks.call$0());
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 -= 0;
        while (true) {
          t2 = H.intTypeCheck($.Primitives_timerTicks.call$0());
          if (typeof t2 !== "number")
            return t2.$sub();
          t3 = $.Stopwatch__frequency;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(C.JSInt_methods.$tdiv((t2 - t1) * 1000, t3) < 16))
            break;
          if (this._steps.moveNext$0())
            this.dirty$0();
          else {
            t1 = this._ui;
            t2 = new R.GameScreen(this._game, this._loading_dialog$_save, H.setRuntimeTypeInfo([], [K.Effect]), 0, false, new L.Vec(60, 34));
            t2._positionCamera$0();
            $.Debug__gameScreen = t2;
            $.$get$Debug__monsters().clear$0(0);
            t1.toString;
            H.assertSubtype(t2, "$isScreen", [H.getTypeArgumentByIndex(t1, 0)], "$asScreen");
            t3 = t1._screens;
            if (0 >= t3.length)
              return H.ioore(t3, -1);
            t3.pop()._ui = null;
            t2._ui = H.assertSubtype(t1, "$isUserInterface", [H.getRuntimeTypeArgument(t2, "Screen", 0)], "$asUserInterface");
            C.JSArray_methods.add$1(t3, t2);
            t1._render$0();
            return;
          }
        }
        this._frame = (this._frame + 1) % 10;
      },
      render$1: function(terminal) {
        var offset;
        terminal.writeAt$4(30, 18, "Entering dungeon...", C.Color_132_126_135);
        offset = C.JSInt_methods._tdivFast$1(this._frame, 2);
        terminal.writeAt$4(30, 20, C.JSString_methods.substring$2(C.JSString_methods.$mul("/    ", 5), offset, offset + 20), C.Color_226_223_240);
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/main_menu_screen.dart",, B, {
    "^": "",
    MainMenuScreen: {
      "^": "Screen;content,storage,selectedHero,0_ui",
      handleInput$1: function(input) {
        var t1, t2, t3, t4, t5;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_n:
            this._main_menu_screen$_changeSelection$1(-1);
            return true;
          case C.Input_s:
            this._main_menu_screen$_changeSelection$1(1);
            return true;
          case C.Input_ok:
            t1 = this.selectedHero;
            t2 = this.storage;
            t3 = t2.heroes;
            t4 = t3.length;
            if (t1 < t4) {
              t5 = this._ui;
              if (t1 < 0)
                return H.ioore(t3, t1);
              t5.push$1(B.SelectDepthScreen$(this.content, t3[t1], t2));
            }
            return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, t2, t3, t4;
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 68:
            t1 = this.selectedHero;
            t2 = this.storage.heroes;
            t3 = t2.length;
            if (t1 < t3) {
              if (t1 < 0)
                return H.ioore(t2, t1);
              t1 = t2[t1];
              this._ui.push$1(new L.ConfirmDialog("Are you sure you want to delete " + H.S(t1.name) + "?", "delete"));
            }
            return true;
          case 78:
            t1 = this._ui;
            t2 = $.$get$rng();
            t2.toString;
            H.assertSubtype(C.List_0, "$isList", [P.String], "$asList");
            t3 = C.List_0.length;
            t4 = t2.range$1(t3);
            if (t4 < 0 || t4 >= t3)
              return H.ioore(C.List_0, t4);
            t4 = new R.NewHeroScreen(this.content, this.storage, 0, "", C.List_0[t4]);
            $.$get$Races_all();
            t4._new_hero_screen$_race = t2.range$1(6);
            $.$get$Classes_all();
            t4._class = t2.range$1(3);
            t1.push$1(t4);
            return true;
        }
        return false;
      },
      activate$2: function($screen, result) {
        var t1, t2, t3;
        if ($screen instanceof L.ConfirmDialog && J.$eq$(result, "delete")) {
          t1 = this.storage;
          t2 = t1.heroes;
          C.JSArray_methods.removeAt$1(t2, this.selectedHero);
          t3 = this.selectedHero;
          if (t3 > 0 && t3 >= t2.length)
            this.selectedHero = t3 - 1;
          t1.save$0(0);
          this.dirty$0();
        }
      },
      render$1: function(terminal) {
        var y, y0, x, t1, color, x0, i, hero, primary, secondary, t2;
        for (y = 0; y < 16; y = y0)
          for (y0 = y + 1, x = 0; x < C.List_23r[y].length; x = x0) {
            t1 = C.List_co5[y];
            if (x >= t1.length)
              return H.ioore(t1, x);
            color = C.Map_cmivT.$index(0, t1[x]);
            x0 = x + 1;
            t1 = C.List_23r[y];
            if (x >= t1.length)
              return H.ioore(t1, x);
            terminal.writeAt$4(x0, y0, t1[x], color);
          }
        terminal.writeAt$4(10, 18, "Which hero shall you play?", C.Color_132_126_135);
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[L] Select a hero, [\u2195] Change selection, [N] Create a new hero, [D] Delete hero", C.Color_38_38_56);
        t1 = this.storage.heroes;
        if (t1.length === 0)
          terminal.writeAt$4(10, 20, "(No heroes. Please create a new one.)", C.Color_38_38_56);
        for (i = 0; i < t1.length; ++i) {
          hero = t1[i];
          if (i === this.selectedHero) {
            terminal.drawGlyph$3(9, 20 + i, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
            primary = C.Color_222_156_33;
            secondary = C.Color_222_156_33;
          } else {
            primary = C.Color_226_223_240;
            secondary = C.Color_38_38_56;
          }
          t2 = 20 + i;
          terminal.writeAt$4(10, t2, hero.name, primary);
          terminal.writeAt$4(30, t2, "Level " + G.experienceLevel(hero.experience), secondary);
          terminal.writeAt$4(40, t2, hero.race._race.name, secondary);
          terminal.writeAt$4(50, t2, hero.heroClass.name, secondary);
        }
      },
      _main_menu_screen$_changeSelection$1: function(offset) {
        this.selectedHero = C.JSInt_methods.$mod(this.selectedHero + offset, this.storage.heroes.length);
        this.dirty$0();
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/new_hero_screen.dart",, R, {
    "^": "",
    NewHeroScreen: {
      "^": "Screen;content,storage,_field,_new_hero_screen$_name,_defaultName,0_new_hero_screen$_race,0_class,0_ui",
      render$1: function(terminal) {
        var terminal0, t1, t2, help;
        terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
        terminal0 = new G.PortTerminal(new L.Vec(40, 10), 0, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal0, 0, 0, 40, 10, this._field === 0 ? C.Color_222_156_33 : C.Color_38_38_56);
        terminal0.writeAt$4(1, 0, "Name", this._field === 0 ? C.Color_222_156_33 : C.Color_132_126_135);
        terminal0.writeAt$4(1, 2, "Out of the mists of history, a hero", C.Color_132_126_135);
        terminal0.writeAt$4(1, 3, "appears named...", C.Color_132_126_135);
        R.Draw_box(terminal0, 2, 5, 23, 3, this._field === 0 ? C.Color_222_156_33 : C.Color_38_38_56);
        t1 = this._new_hero_screen$_name;
        if (t1.length !== 0) {
          terminal0.writeAt$4(3, 6, t1, C.Color_226_223_240);
          if (this._field === 0)
            terminal0.writeAt$5(3 + this._new_hero_screen$_name.length, 6, " ", C.Color_0_0_0, C.Color_222_156_33);
        } else {
          t1 = this._field;
          t2 = this._defaultName;
          if (t1 === 0)
            terminal0.writeAt$5(3, 6, t2, C.Color_0_0_0, C.Color_222_156_33);
          else
            terminal0.writeAt$4(3, 6, t2, C.Color_226_223_240);
        }
        this._renderRace$1(terminal);
        this._renderClass$1(terminal);
        this._renderMenu$1(terminal);
        help = H.setRuntimeTypeInfo(["[Tab] Next field"], [P.String]);
        switch (this._field) {
          case 0:
            C.JSArray_methods.add$1(help, "[A-Z Del] Edit name");
            break;
          case 1:
            C.JSArray_methods.add$1(help, "[\u2195] Select race");
            break;
          case 2:
            C.JSArray_methods.add$1(help, "[\u2195] Select class");
            break;
        }
        C.JSArray_methods.add$1(help, "[Enter] Create hero");
        C.JSArray_methods.add$1(help, "[Esc] Cancel");
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, C.JSArray_methods.join$1(help, ", "), C.Color_38_38_56);
      },
      _renderRace$1: function(terminal) {
        var t1, t2, race, y, _i, stat, width;
        terminal = new G.PortTerminal(new L.Vec(40, 29), 0, 10, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 0, 40, 29, this._field === 1 ? C.Color_222_156_33 : C.Color_38_38_56);
        terminal.writeAt$4(1, 0, "Race", this._field === 1 ? C.Color_222_156_33 : C.Color_132_126_135);
        t1 = $.$get$Races_all();
        t2 = this._new_hero_screen$_race;
        if (t2 < 0 || t2 >= 6)
          return H.ioore(t1, t2);
        race = t1[t2];
        terminal.writeAt$4(1, 2, race.name, C.Color_226_223_240);
        for (t1 = O.Log_wordWrap(38, race.description), t2 = t1.length, y = 4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
          ++y;
        }
        for (y = 18, _i = 0; _i < 5; ++_i) {
          stat = C.List_zPV[_i];
          terminal.writeAt$4(2, y, stat.name, C.Color_38_38_56);
          t1 = race.stats.$index(0, stat);
          if (typeof t1 !== "number")
            return H.iae(t1);
          width = C.JSInt_methods._tdivFast$1(25 * t1, 45);
          terminal.writeAt$5(12, y, C.JSString_methods.$mul(" ", width), C.Color_226_223_240, C.Color_204_35_57);
          terminal.writeAt$5(12 + width, y, C.JSString_methods.$mul(" ", 25 - width), C.Color_226_223_240, C.Color_84_0_39);
          y += 2;
        }
      },
      _renderClass$1: function(terminal) {
        var t1, t2, heroClass, y, _i;
        terminal = new G.PortTerminal(new L.Vec(40, 29), 40, 10, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 0, 40, 29, this._field === 2 ? C.Color_222_156_33 : C.Color_38_38_56);
        terminal.writeAt$4(1, 0, "Class", this._field === 2 ? C.Color_222_156_33 : C.Color_132_126_135);
        t1 = $.$get$Classes_all();
        t2 = this._class;
        if (t2 < 0 || t2 >= 3)
          return H.ioore(t1, t2);
        heroClass = t1[t2];
        terminal.writeAt$4(1, 2, heroClass.name, C.Color_226_223_240);
        for (t1 = O.Log_wordWrap(38, heroClass.description), t2 = t1.length, y = 4, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          terminal.writeAt$4(1, y, t1[_i], C.Color_132_126_135);
          ++y;
        }
      },
      _renderMenu$1: function(terminal) {
        var t1, items, t2, t3, selected, label, y, i, item, isSelected;
        terminal = new G.PortTerminal(new L.Vec(40, 10), 40, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 0, 40, 10, null);
        if (this._field === 0)
          return;
        t1 = P.String;
        items = H.setRuntimeTypeInfo([], [t1]);
        if (this._field === 1) {
          t2 = $.$get$Races_all();
          t3 = H.getTypeArgumentByIndex(t2, 0);
          C.JSArray_methods.addAll$1(items, new H.MappedListIterable(t2, H.functionTypeCheck(new R.NewHeroScreen__renderMenu_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]));
          selected = this._new_hero_screen$_race;
          label = "race";
        } else {
          t2 = $.$get$Classes_all();
          t3 = H.getTypeArgumentByIndex(t2, 0);
          C.JSArray_methods.addAll$1(items, new H.MappedListIterable(t2, H.functionTypeCheck(new R.NewHeroScreen__renderMenu_closure0(), {func: 1, ret: t1, args: [t3]}), [t3, t1]));
          selected = this._class;
          label = "class";
        }
        terminal.writeAt$4(1, 0, "Choose a " + label + ":", C.Color_222_156_33);
        for (y = 2, i = 0; i < items.length; ++i) {
          item = items[i];
          isSelected = i === selected;
          terminal.writeAt$4(2, y, item, isSelected ? C.Color_222_156_33 : C.Color_226_223_240);
          if (isSelected)
            terminal.writeAt$4(1, y, "\u25ba", C.Color_222_156_33);
          ++y;
        }
      },
      handleInput$1: function(input) {
        var t1;
        H.interceptedTypeCheck(input, "$isInput");
        t1 = this._field;
        if (t1 === 1)
          switch (input) {
            case C.Input_n:
              this._changeRace$1(-1);
              return true;
            case C.Input_s:
              this._changeRace$1(1);
              return true;
          }
        else if (t1 === 2)
          switch (input) {
            case C.Input_n:
              this._changeClass$1(-1);
              return true;
            case C.Input_s:
              this._changeClass$1(1);
              return true;
          }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, t2, t3, t4, t5, hero;
        switch (keyCode) {
          case 13:
            t1 = this.content;
            t2 = this._new_hero_screen$_name;
            t2 = t2.length !== 0 ? t2 : this._defaultName;
            t3 = $.$get$Races_all();
            t4 = this._new_hero_screen$_race;
            if (t4 < 0 || t4 >= 6)
              return H.ioore(t3, t4);
            t4 = t3[t4];
            t3 = $.$get$Classes_all();
            t5 = this._class;
            if (t5 < 0 || t5 >= 3)
              return H.ioore(t3, t5);
            hero = t1.createHero$3(t2, t4, t3[t5]);
            t5 = this.storage;
            C.JSArray_methods.add$1(t5.heroes, hero);
            t5.save$0(0);
            this._ui.goTo$1(B.SelectDepthScreen$(t1, hero, t5));
            return true;
          case 9:
            if (shift)
              this._changeField$1(-1);
            else
              this._changeField$1(1);
            return true;
          case 27:
            this._ui.pop$0();
            return true;
          case 8:
            if (this._field === 0) {
              t1 = this._new_hero_screen$_name;
              t2 = t1.length;
              if (t2 !== 0) {
                t1 = C.JSString_methods.substring$2(t1, 0, t2 - 1);
                this._new_hero_screen$_name = t1;
                if (t1.length === 0) {
                  t1 = $.$get$rng();
                  t1.toString;
                  H.assertSubtype(C.List_0, "$isList", [P.String], "$asList");
                  t2 = C.List_0.length;
                  t1 = t1.range$1(t2);
                  if (t1 < 0 || t1 >= t2)
                    return H.ioore(C.List_0, t1);
                  this._defaultName = C.List_0[t1];
                }
                this.dirty$0();
              }
            }
            return true;
          case 32:
            if (this._field === 0)
              this._appendToName$1(" ");
            return true;
          default:
            if (this._field === 0 && !alt) {
              if (keyCode == null)
                break;
              if (keyCode >= 65 && keyCode <= 90) {
                this._appendToName$1(P.String_String$fromCharCodes(H.setRuntimeTypeInfo([!shift ? 32 + keyCode : keyCode], [P.int]), 0, null));
                return true;
              } else if (keyCode >= 48 && keyCode <= 57) {
                this._appendToName$1(P.String_String$fromCharCodes(H.setRuntimeTypeInfo([keyCode], [P.int]), 0, null));
                return true;
              }
            }
            break;
        }
        return false;
      },
      _changeField$1: function(offset) {
        this._field = C.JSInt_methods.$mod(this._field + offset + 3, 3);
        this.dirty$0();
      },
      _appendToName$1: function(text) {
        var t1 = this._new_hero_screen$_name += text;
        if (t1.length > 20)
          this._new_hero_screen$_name = C.JSString_methods.substring$2(t1, 0, 20);
        this.dirty$0();
      },
      _changeRace$1: function(offset) {
        var t1, race;
        t1 = this._new_hero_screen$_race;
        $.$get$Races_all();
        race = C.JSInt_methods.clamp$2(t1 + offset, 0, 5);
        if (race !== this._new_hero_screen$_race) {
          this._new_hero_screen$_race = H.intTypeCheck(race);
          this.dirty$0();
        }
      },
      _changeClass$1: function(offset) {
        var t1, heroClass;
        t1 = this._class;
        $.$get$Classes_all();
        heroClass = C.JSInt_methods.clamp$2(t1 + offset, 0, 2);
        if (heroClass !== this._class) {
          this._class = H.intTypeCheck(heroClass);
          this.dirty$0();
        }
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    NewHeroScreen__renderMenu_closure: {
      "^": "Closure:120;",
      call$1: [function(race) {
        return H.interceptedTypeCheck(race, "$isRace").name;
      }, null, null, 4, 0, null, 46, "call"]
    },
    NewHeroScreen__renderMenu_closure0: {
      "^": "Closure:121;",
      call$1: [function(c) {
        return H.interceptedTypeCheck(c, "$isHeroClass").name;
      }, null, null, 4, 0, null, 47, "call"]
    }
  }], ["", "package:hauberk/src/ui/select_depth_screen.dart",, B, {
    "^": "",
    SelectDepthScreen: {
      "^": "Screen;content,save,storage,selectedDepth,0_ui",
      handleInput$1: function(input) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_w:
            this._changeDepth$1(this.selectedDepth - 1);
            return true;
          case C.Input_e:
            this._changeDepth$1(this.selectedDepth + 1);
            return true;
          case C.Input_n:
            this._changeDepth$1(this.selectedDepth - 10);
            return true;
          case C.Input_s:
            this._changeDepth$1(this.selectedDepth + 10);
            return true;
          case C.Input_ok:
            t1 = this._ui;
            t2 = this.save;
            t3 = this.selectedDepth;
            t4 = P.ListQueue$(null, O.Message);
            t5 = V.Action;
            t6 = P.ListQueue$(null, t5);
            t5 = H.setRuntimeTypeInfo([], [t5]);
            t7 = H.setRuntimeTypeInfo([], [D.Event0]);
            t8 = [L.Vec];
            t9 = H.setRuntimeTypeInfo([], t8);
            t3 = new D.Game(this.content, t2, new O.Log(t4), t6, t5, t7, new Y.Energy(0), t9, t3);
            t7 = L.Stage$(80, 60, t3);
            t3._stage = t7;
            C.JSArray_methods.addAll$1(t9, t7.tiles.bounds.inflate$1(-1));
            t7 = $.$get$rng();
            t7.toString;
            C.JSArray_methods.shuffle$1(H.assertSubtype(t9, "$isList", t8, "$asList"), t7._random);
            t1.push$1(new F.LoadingDialog(t2, t3, 0));
            return true;
          case C.Input_cancel:
            this._ui.pop$0();
            return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        switch (keyCode) {
          case 72:
            this._ui.push$1(new F._HomeViewScreen(this.save, null, false));
            return true;
          case 49:
            return this.tryEnterShop$1(0);
          case 50:
            return this.tryEnterShop$1(1);
          case 51:
            return this.tryEnterShop$1(2);
          case 52:
            return this.tryEnterShop$1(3);
          case 53:
            return this.tryEnterShop$1(4);
          case 54:
            return this.tryEnterShop$1(5);
          case 55:
            return this.tryEnterShop$1(6);
          case 56:
            return this.tryEnterShop$1(7);
          case 57:
            return this.tryEnterShop$1(8);
        }
        return false;
      },
      tryEnterShop$1: function(index) {
        var t1, t2, t3, shops;
        t1 = this.save;
        t2 = t1.shops;
        t3 = t2.get$keys(t2);
        shops = P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "Iterable", 0));
        if (index >= shops.length)
          return false;
        this._ui.push$1(new F._ShopViewScreen(t2.$index(0, shops[index]), t1, null, false));
        return true;
      },
      render$1: function(terminal) {
        var _box_0, t1, depth, t2, x, y, color, t3, drawMenuItem, i;
        _box_0 = {};
        t1 = this.save;
        terminal.writeAt$4(15, 4, "Greetings, " + H.S(t1.name) + ", how deep shall you venture?", C.Color_132_126_135);
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[L] Enter dungeon, [\u2195] Change depth, [\u2194] Change depth", C.Color_38_38_56);
        for (depth = 1; depth <= 100; ++depth) {
          t2 = depth - 1;
          x = C.JSInt_methods.$mod(t2, 10);
          y = C.JSInt_methods._tdivFast$1(t2, 10);
          t2 = t1.maxDepth;
          if (depth > t2 + 1)
            color = C.Color_38_38_56;
          else if (depth === this.selectedDepth) {
            t2 = x * 5;
            t3 = 6 + y;
            terminal.drawGlyph$3(14 + t2, t3, new L.Glyph(9658, C.Color_222_156_33, C.Color_0_0_0));
            terminal.drawGlyph$3(18 + t2, t3, new L.Glyph(9668, C.Color_222_156_33, C.Color_0_0_0));
            color = C.Color_222_156_33;
          } else
            color = C.Color_226_223_240;
          terminal.writeAt$4(15 + x * 5, 6 + y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(depth), 3), color);
        }
        _box_0.y = 18;
        drawMenuItem = new B.SelectDepthScreen_render_drawMenuItem(_box_0, terminal);
        drawMenuItem.call$2("h", "Enter Home");
        ++_box_0.y;
        for (t1 = $.$get$Shops_all(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), i = 1; t1.moveNext$0();) {
          t2 = t1.get$current();
          drawMenuItem.call$2(C.JSInt_methods.toString$0(i), t2.name);
          ++i;
        }
      },
      activate$2: function($screen, result) {
        var t1 = J.getInterceptor$($screen);
        if (!!t1.$isGameScreen && H.boolTypeCast(result))
          this.storage.save$0(0);
        else if (!!t1.$isItemScreen)
          this.storage.save$0(0);
      },
      _changeDepth$1: function(level) {
        var t1;
        if (level < 1)
          return;
        if (level > 100)
          return;
        t1 = this.save.maxDepth;
        if (level > t1 + 1)
          return;
        this.selectedDepth = level;
        this.dirty$0();
      },
      $asScreen: function() {
        return [Y.Input];
      },
      static: {
        SelectDepthScreen$: function($content, save, storage) {
          var t1 = new B.SelectDepthScreen($content, save, storage, 1);
          t1.selectedDepth = Math.min(100, save.maxDepth + 1);
          return t1;
        }
      }
    },
    SelectDepthScreen_render_drawMenuItem: {
      "^": "Closure:122;_box_0,terminal",
      call$2: function(key, label) {
        var t1, t2;
        t1 = this.terminal;
        t2 = this._box_0;
        t1.writeAt$4(20, t2.y, key, C.Color_128_128_128);
        t1.writeAt$4(21, t2.y, ")", C.Color_64_64_64);
        t1.writeAt$3(23, t2.y, label);
        ++t2.y;
      }
    }
  }], ["", "package:hauberk/src/ui/select_skill_dialog.dart",, Z, {
    "^": "",
    SelectSkillDialog: {
      "^": "Screen;_select_skill_dialog$_game,_select_skill_dialog$_skills,0_ui",
      get$isTransparent: function() {
        return true;
      },
      SelectSkillDialog$1: function(game) {
        var t1, t2, t3, t4;
        for (t1 = this._select_skill_dialog$_game.hero.skills.get$acquired(), t2 = J.get$iterator$ax(t1._iterable), t1 = new H.WhereIterator(t2, t1._f, [H.getTypeArgumentByIndex(t1, 0)]), t3 = this._select_skill_dialog$_skills; t1.moveNext$0();) {
          t4 = t2.get$current();
          if (!!J.getInterceptor$(t4).$isUsableSkill)
            C.JSArray_methods.add$1(t3, t4);
        }
      },
      handleInput$1: function(input) {
        if (H.interceptedTypeCheck(input, "$isInput") === C.Input_cancel) {
          this._ui.pop$0();
          return true;
        }
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        if (typeof keyCode !== "number")
          return keyCode.$ge();
        if (keyCode >= 65 && keyCode <= 90) {
          this.selectCommand$1(keyCode - 65);
          return true;
        }
        return false;
      },
      selectCommand$1: function(index) {
        var t1, t2;
        t1 = this._select_skill_dialog$_skills;
        t2 = t1.length;
        if (index >= t2)
          return;
        if (index < 0)
          return H.ioore(t1, index);
        if (t1[index].unusableReason$1(this._select_skill_dialog$_game) != null)
          return;
        t2 = this._ui;
        if (index >= t1.length)
          return H.ioore(t1, index);
        t2.pop$1(t1[index]);
      },
      render$1: function(terminal) {
        var t1, t2, i, y, skill, reason, t3, borderColor, letterColor, textColor;
        t1 = this._select_skill_dialog$_skills;
        R.Draw_frame(terminal, 0, 0, 50, t1.length + 3, null);
        terminal.writeAt$4(1, 0, "Perform which command?", C.Color_222_156_33);
        for (t2 = this._select_skill_dialog$_game, i = 0; i < t1.length; ++i) {
          y = i + 2;
          skill = t1[i];
          reason = skill.unusableReason$1(t2);
          t3 = reason == null;
          if (t3) {
            borderColor = C.Color_226_223_240;
            letterColor = C.Color_222_156_33;
            textColor = C.Color_222_156_33;
          } else {
            borderColor = C.Color_38_38_56;
            letterColor = C.Color_19_17_28;
            textColor = C.Color_38_38_56;
          }
          terminal.writeAt$4(1, y, "( )   ", borderColor);
          if (i >= 26)
            return H.ioore("abcdefghijklmnopqrstuvwxyz", i);
          terminal.writeAt$4(2, y, "abcdefghijklmnopqrstuvwxyz"[i], letterColor);
          terminal.writeAt$4(5, y, skill.get$useName(), textColor);
          if (!t3)
            terminal.writeAt$4(25, y, "(" + reason + ")", textColor);
        }
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[A-Z] Select command, [1-9] Bind quick key, [Esc] Exit", C.Color_38_38_56);
      },
      $asScreen: function() {
        return [Y.Input];
      },
      static: {
        SelectSkillDialog$: function(game) {
          var t1 = new Z.SelectSkillDialog(game, H.setRuntimeTypeInfo([], [M.UsableSkill]));
          t1.SelectSkillDialog$1(game);
          return t1;
        }
      }
    }
  }], ["", "package:hauberk/src/ui/skill_dialog.dart",, R, {
    "^": "",
    SkillDialog_SkillDialog: function(hero) {
      var t1, t2, t3, screens, i, i0;
      t1 = M.Discipline;
      t2 = new R.DisciplineDialog(hero, H.setRuntimeTypeInfo([], [t1]), 0);
      t2.SkillTypeDialog$1(hero, t1);
      t1 = M.Spell;
      t3 = new R.SpellDialog(hero, H.setRuntimeTypeInfo([], [t1]), 0);
      t3.SkillTypeDialog$1(hero, t1);
      screens = [t2, t3];
      for (i = 0; i < 2; i = i0) {
        i0 = i + 1;
        screens[i]._skill_dialog$_nextScreen = screens[i0 % 2];
      }
      return C.JSArray_methods.get$first(screens);
    },
    SkillDialog: {
      "^": "Screen;",
      $asScreen: function() {
        return [Y.Input];
      }
    },
    SkillTypeDialog: {
      "^": "SkillDialog;$ti",
      SkillTypeDialog$1: function(_hero, $T) {
        var t1, t2, t3, _i, skill;
        for (t1 = this._skill_dialog$_hero.skills.get$discovered(), t2 = t1.length, t3 = this._skill_dialog$_skills, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          skill = t1[_i];
          if (H.checkSubtypeOfRuntimeType(skill, $T))
            C.JSArray_methods.add$1(t3, skill);
        }
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        if (shift || alt)
          return false;
        if (keyCode === 9) {
          this._ui.goTo$1(this._skill_dialog$_nextScreen);
          return true;
        }
        return false;
      },
      handleInput$1: function(input) {
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_n:
            this._changeSelection$1(-1);
            return true;
          case C.Input_s:
            this._changeSelection$1(1);
            return true;
          case C.Input_cancel:
            this._ui.pop$0();
            return true;
        }
        return false;
      },
      render$1: function(terminal) {
        var helpText;
        terminal.fill$4(0, 0, 0, terminal.get$width(terminal), terminal.get$height(terminal));
        this._renderSkillList$1(terminal);
        this._renderSkill$1(terminal);
        helpText = "[Esc] Exit, [Tab] View " + this._skill_dialog$_nextScreen.get$_skill_dialog$_name();
        terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, helpText, C.Color_63_64_114);
      },
      _renderSkillList$1: function(terminal) {
        var t1, t2, t3, i, _i, skill, y, nameColor, detailColor, t4;
        t1 = terminal._display._glyphs.bounds.size.y - 1;
        terminal = new G.PortTerminal(new L.Vec(40, t1), 0, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 0, 40, t1, null);
        terminal.writeAt$4(1, 0, this.get$_skill_dialog$_name(), C.Color_132_126_135);
        this._renderSkillListHeader$1(terminal);
        terminal.writeAt$4(2, 2, this.get$_rowSeparator(), C.Color_38_38_56);
        t1 = this._skill_dialog$_skills;
        t2 = t1.length;
        if (t2 === 0) {
          terminal.writeAt$4(2, 3, "(None known.)", C.Color_38_38_56);
          return;
        }
        for (t3 = this._skill_dialog$_hero, i = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          skill = t1[_i];
          y = i * 2 + 3;
          terminal.writeAt$4(2, y + 1, this.get$_rowSeparator(), C.Color_19_17_28);
          if (i === this._selectedSkill) {
            nameColor = C.Color_222_156_33;
            detailColor = C.Color_132_126_135;
          } else {
            t4 = t3.skills._levels;
            if (!(t4.containsKey$1(0, skill) && J.$gt$n(t4.$index(0, skill), 0))) {
              nameColor = C.Color_38_38_56;
              detailColor = C.Color_38_38_56;
            } else {
              nameColor = C.Color_226_223_240;
              detailColor = C.Color_132_126_135;
            }
          }
          terminal.writeAt$4(2, y, skill.get$name(skill), nameColor);
          this._renderSkillInList$4(terminal, y, detailColor, skill);
          ++i;
        }
        terminal.drawGlyph$3(1, this._selectedSkill * 2 + 3, L.Glyph$fromCharCode(9658, C.Color_222_156_33, null));
      },
      _renderSkill$1: function(terminal) {
        var t1, t2, t3, skill;
        t1 = terminal._display._glyphs.bounds.size;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$sub();
        t2 -= 40;
        t1 = t1.y - 1;
        terminal = new G.PortTerminal(new L.Vec(t2, t1), 40, 0, terminal, C.Color_255_255_255, C.Color_0_0_0);
        R.Draw_frame(terminal, 0, 0, t2, t1, null);
        t1 = this._skill_dialog$_skills;
        t2 = t1.length;
        if (t2 === 0)
          return;
        t3 = this._selectedSkill;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        skill = t1[t3];
        terminal.writeAt$4(1, 0, skill.get$name(skill), C.Color_222_156_33);
        this._writeText$4(terminal, 1, 2, skill.get$description());
        this._renderSkillDetails$2(terminal, skill);
      },
      _writeText$4: function(terminal, x, y, text) {
        var t1, t2, _i, y0;
        t1 = terminal.size.x;
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 = O.Log_wordWrap(t1 - 1 - x, text);
        t2 = t1.length;
        _i = 0;
        for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i, y = y0) {
          y0 = y + 1;
          terminal.writeAt$4(x, y, t1[_i], C.Color_132_126_135);
        }
      },
      _changeSelection$1: function(offset) {
        var t1 = this._skill_dialog$_skills.length;
        if (t1 === 0)
          return;
        this._selectedSkill = H.intTypeCheck(C.JSInt_methods.clamp$2(this._selectedSkill + offset, 0, t1 - 1));
        this.dirty$0();
      }
    },
    DisciplineDialog: {
      "^": "SkillTypeDialog;_skill_dialog$_hero,_skill_dialog$_skills,_selectedSkill,0_skill_dialog$_nextScreen,0_ui",
      get$_skill_dialog$_name: function() {
        return "Disciplines";
      },
      get$_rowSeparator: function() {
        return "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500 \u2500\u2500\u2500\u2500";
      },
      _renderSkillListHeader$1: function(terminal) {
        terminal.writeAt$4(31, 1, "Lev Next", C.Color_38_38_56);
      },
      _renderSkillInList$4: function(terminal, y, color, skill) {
        var t1, percent;
        H.interceptedTypeCheck(skill, "$isDiscipline");
        t1 = this._skill_dialog$_hero;
        terminal.writeAt$4(31, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(t1.skills.level$1(skill)), 3), color);
        percent = skill.percentUntilNext$1(t1);
        terminal.writeAt$4(35, y, percent == null ? "  --" : C.JSString_methods.padLeft$1(H.S(percent) + "%", 4), color);
      },
      _renderSkillDetails$2: function(terminal, skill) {
        var t1, t2, level, t3, percent, points, current, next;
        H.interceptedTypeCheck(skill, "$isDiscipline");
        t1 = this._skill_dialog$_hero;
        t2 = t1.skills;
        level = t2.level$1(skill);
        terminal.writeAt$4(1, 8, "At current level " + level + ":", C.Color_226_223_240);
        if (level > 0)
          this._writeText$4(terminal, 3, 10, skill.levelDescription$1(level));
        else
          terminal.writeAt$4(3, 10, "(You haven't trained this yet.)", C.Color_38_38_56);
        if (level < skill.get$maxLevel()) {
          t3 = level + 1;
          terminal.writeAt$4(1, 16, "At next level " + t3 + ":", C.Color_226_223_240);
          this._writeText$4(terminal, 3, 18, skill.levelDescription$1(t3));
        }
        terminal.writeAt$4(1, 30, "Level:", C.Color_38_38_56);
        terminal.writeAt$4(9, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(level), 4), C.Color_132_126_135);
        R.Draw_meter(terminal, 14, 30, 25, level, skill.get$maxLevel(), C.Color_204_35_57, C.Color_84_0_39);
        terminal.writeAt$4(1, 32, "Next:", C.Color_38_38_56);
        percent = skill.percentUntilNext$1(t1);
        if (percent != null) {
          points = t2.points$1(0, skill);
          t1 = t1.heroClass;
          current = skill.trainingNeeded$2(t1, level);
          next = skill.trainingNeeded$2(t1, level + 1);
          terminal.writeAt$4(9, 32, C.JSString_methods.padLeft$1(H.S(percent) + "%", 4), C.Color_132_126_135);
          if (typeof current !== "number")
            return H.iae(current);
          if (typeof next !== "number")
            return next.$sub();
          R.Draw_meter(terminal, 14, 32, 25, points - current, next - current, C.Color_204_35_57, C.Color_84_0_39);
        } else
          terminal.writeAt$4(14, 32, "(At max level.)", C.Color_38_38_56);
      },
      $asSkillTypeDialog: function() {
        return [M.Discipline];
      },
      $asScreen: function() {
        return [Y.Input];
      }
    },
    SpellDialog: {
      "^": "SkillTypeDialog;_skill_dialog$_hero,_skill_dialog$_skills,_selectedSkill,0_skill_dialog$_nextScreen,0_ui",
      get$_skill_dialog$_name: function() {
        return "Spells";
      },
      get$_rowSeparator: function() {
        return "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2500\u2500\u2500\u2500";
      },
      _renderSkillListHeader$1: function(terminal) {
        terminal.writeAt$4(35, 1, "Comp", C.Color_38_38_56);
      },
      _renderSkillInList$4: function(terminal, y, color, skill) {
        terminal.writeAt$4(35, y, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(H.interceptedTypeCheck(skill, "$isSpell").complexity$1(this._skill_dialog$_hero.heroClass)), 4), color);
      },
      _renderSkillDetails$2: function(terminal, skill) {
        var t1, t2, t3;
        H.interceptedTypeCheck(skill, "$isSpell");
        terminal.writeAt$4(1, 30, "Complexity:", C.Color_38_38_56);
        t1 = this._skill_dialog$_hero;
        if (t1.skills.isAcquired$1(skill))
          terminal.writeAt$4(13, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.complexity$1(t1.heroClass)), 3), C.Color_132_126_135);
        else {
          t2 = t1.heroClass;
          terminal.writeAt$4(13, 30, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.complexity$1(t2)), 3), C.Color_204_35_57);
          t2 = skill.complexity$1(t2);
          t3 = t1.intellect;
          t3 = t3.modify$1(t3._value);
          if (typeof t3 !== "number")
            return H.iae(t3);
          terminal.writeAt$4(17, 30, "Need " + H.S(t2 - t3) + " more intellect", C.Color_38_38_56);
        }
        terminal.writeAt$4(1, 32, "Focus cost:", C.Color_38_38_56);
        terminal.writeAt$4(13, 32, C.JSString_methods.padLeft$1(C.JSInt_methods.toString$0(skill.focusCost$1(t1)), 3), C.Color_132_126_135);
        if (skill.get$damage() != null) {
          terminal.writeAt$4(1, 34, "Damage:", C.Color_38_38_56);
          terminal.writeAt$4(13, 34, C.JSString_methods.padLeft$1(J.toString$0$(skill.get$damage()), 3), C.Color_132_126_135);
        }
        if (skill.get$range() != null) {
          terminal.writeAt$4(1, 36, "Range:", C.Color_38_38_56);
          terminal.writeAt$4(13, 36, C.JSString_methods.padLeft$1(J.toString$0$(skill.get$range()), 3), C.Color_132_126_135);
        }
      },
      $asSkillTypeDialog: function() {
        return [M.Spell];
      },
      $asScreen: function() {
        return [Y.Input];
      }
    }
  }], ["", "package:hauberk/src/ui/storage.dart",, S, {
    "^": "",
    Storage: {
      "^": "Object;content,heroes",
      _load$0: function() {
        var hero, $name, race, heroClass, name0, inventoryItems, inventory, equipment, item, homeItems, $home, crucibleItems, crucible, shops, experience, levels, points, skills, name1, skill, skillSet, lore, gold, maxDepth, heroSave, error, trace, storage, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, _i, maxDepth0, exception;
        if (window.location.search === "?clear") {
          this.save$0(0);
          return;
        }
        storage = window.localStorage.getItem("heroes");
        if (storage == null)
          return;
        for (t1 = J.get$iterator$ax(H.listSuperNativeTypeCheck(J.$index$asx(C.JsonCodec_null_null.decode$1(0, storage), "heroes"), "$isIterable")), t2 = this.heroes, t3 = R.Item, t4 = [t3], t3 = [t3], t5 = [P.String, null], t6 = M.Skill, t7 = P.int, t8 = O.Shop, t9 = O.Inventory; t1.moveNext$0();) {
          hero = t1.get$current();
          try {
            $name = H.stringTypeCast(J.$index$asx(hero, "name"));
            race = this._loadRace$1(H.subtypeCast(J.$index$asx(hero, "race"), "$isMap", t5, "$asMap"));
            heroClass = null;
            if (J.$index$asx(hero, "class") == null)
              heroClass = $.$get$Classes_all()[0];
            else {
              name0 = H.stringTypeCast(J.$index$asx(hero, "class"));
              heroClass = C.JSArray_methods.firstWhere$1($.$get$Classes_all(), new S.Storage__load_closure(name0));
            }
            inventoryItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "inventory")));
            t10 = inventoryItems;
            t11 = H.setRuntimeTypeInfo([], t4);
            if (t10 != null)
              C.JSArray_methods.addAll$1(t11, t10);
            inventory = new O.Inventory(C.ItemLocation_wMy, t11, 24);
            t10 = new Array(9);
            t10.fixed$length = Array;
            equipment = new E.Equipment(C.List_tBY, H.setRuntimeTypeInfo(t10, t3));
            for (t10 = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "equipment"))), t11 = t10.length, _i = 0; _i < t10.length; t10.length === t11 || (0, H.throwConcurrentModificationError)(t10), ++_i) {
              item = t10[_i];
              equipment.equip$1(item);
            }
            homeItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "home")));
            t10 = homeItems;
            t11 = H.setRuntimeTypeInfo([], t4);
            if (t10 != null)
              C.JSArray_methods.addAll$1(t11, t10);
            $home = new O.Inventory(C.ItemLocation_ukJ, t11, 26);
            crucibleItems = this._loadItems$1(H.listTypeCheck(J.$index$asx(hero, "crucible")));
            t10 = crucibleItems;
            t11 = H.setRuntimeTypeInfo([], t4);
            if (t10 != null)
              C.JSArray_methods.addAll$1(t11, t10);
            crucible = new O.Inventory(C.ItemLocation_vOz, t11, 8);
            shops = P.LinkedHashMap_LinkedHashMap$_empty(t8, t9);
            if (J.containsKey$1$x(hero, "shops"))
              J.forEach$1$ax(J.$index$asx(hero, "shops"), new S.Storage__load_closure0(this, shops));
            inventory.countChanged$0();
            $home.countChanged$0();
            crucible.countChanged$0();
            experience = H.intTypeCast(J.$index$asx(hero, "experience"));
            levels = P.LinkedHashMap_LinkedHashMap$_empty(t6, t7);
            points = P.LinkedHashMap_LinkedHashMap$_empty(t6, t7);
            skills = H.subtypeCast(J.$index$asx(hero, "skills"), "$isMap", t5, "$asMap");
            if (skills != null)
              for (t10 = J.get$iterator$ax(J.get$keys$x(skills)); t10.moveNext$0();) {
                name1 = t10.get$current();
                t11 = H.stringTypeCheck(name1);
                skill = $.$get$Skills__byName().$index(0, t11);
                t11 = J.$index$asx(skills, name1);
                if (typeof t11 === "number" && Math.floor(t11) === t11) {
                  J.$indexSet$ax(levels, skill, H.intTypeCast(J.$index$asx(skills, name1)));
                  J.$indexSet$ax(points, skill, 0);
                } else {
                  J.$indexSet$ax(levels, skill, H.intTypeCast(J.$index$asx(J.$index$asx(skills, name1), "level")));
                  J.$indexSet$ax(points, skill, H.intTypeCast(J.$index$asx(J.$index$asx(skills, name1), "points")));
                }
              }
            skillSet = new M.SkillSet(levels, points);
            lore = this._loadLore$1(H.subtypeCast(J.$index$asx(hero, "lore"), "$isMap", t5, "$asMap"));
            gold = H.intTypeCast(J.$index$asx(hero, "gold"));
            maxDepth0 = H.intTypeCast(J.$index$asx(hero, "maxDepth"));
            maxDepth = maxDepth0 == null ? 0 : maxDepth0;
            t10 = heroClass;
            t11 = new Array(9);
            t11.fixed$length = Array;
            H.setRuntimeTypeInfo(t11, t3);
            heroSave = new G.HeroSave($name, race, t10, inventory, equipment, $home, crucible, shops, experience, skillSet, gold, maxDepth, lore);
            C.JSArray_methods.add$1(t2, heroSave);
          } catch (exception) {
            error = H.unwrapException(exception);
            trace = H.getTraceFromException(exception);
            H.printString("Could not load hero. Data:");
            H.printString(C.JsonCodec_null_null.encode$1(hero));
            H.printString("Error:\n" + H.S(error) + "\n" + H.S(trace));
          }
        }
      },
      _loadRace$1: function(data) {
        var t1, $name, race, statData, stats, t2, _i, stat, seed;
        H.assertSubtype(data, "$isMap", [P.String, null], "$asMap");
        if (data == null)
          return $.$get$Races_all()[4].rollStats$0();
        t1 = J.getInterceptor$asx(data);
        $name = H.stringTypeCast(t1.$index(data, "name"));
        race = C.JSArray_methods.firstWhere$1($.$get$Races_all(), new S.Storage__loadRace_closure($name));
        statData = t1.$index(data, "stats");
        stats = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
        for (t2 = J.getInterceptor$asx(statData), _i = 0; _i < 5; ++_i) {
          stat = C.List_zPV[_i];
          stats.$indexSet(0, stat, H.intTypeCast(t2.$index(statData, stat.name)));
        }
        seed = H.intTypeCast(t1.$index(data, "seed"));
        return N.RaceStats$(race, stats, seed == null ? 1234 : seed);
      },
      _loadItems$1: function(data) {
        var items, t1, t2, item;
        items = H.setRuntimeTypeInfo([], [R.Item]);
        for (t1 = J.get$iterator$ax(data), t2 = [P.String, null]; t1.moveNext$0();) {
          item = this._loadItem$1(H.subtypeCast(t1.get$current(), "$isMap", t2, "$asMap"));
          if (item != null)
            C.JSArray_methods.add$1(items, item);
        }
        return items;
      },
      _loadItem$1: function(data) {
        var t1, t2, count, prefix, suffix;
        H.assertSubtype(data, "$isMap", [P.String, null], "$asMap");
        t1 = J.getInterceptor$asx(data);
        t2 = H.stringTypeCast(t1.$index(data, "type"));
        t2 = $.$get$Items_types().tryFind$1(t2);
        if (t2 == null) {
          P.print("Couldn't find item type \"" + H.S(t1.$index(data, "type")) + '", discarding item.');
          return;
        }
        count = t1.containsKey$1(data, "count") ? H.intTypeCast(t1.$index(data, "count")) : 1;
        if (t1.containsKey$1(data, "prefix"))
          prefix = !!J.getInterceptor$(t1.$index(data, "prefix")).$isMap ? Z.Affixes_find(H.stringTypeCast(J.$index$asx(t1.$index(data, "prefix"), "name"))) : Z.Affixes_find(H.stringTypeCast(t1.$index(data, "prefix")));
        else
          prefix = null;
        if (t1.containsKey$1(data, "suffix"))
          suffix = !!J.getInterceptor$(t1.$index(data, "suffix")).$isMap ? Z.Affixes_find(H.stringTypeCast(J.$index$asx(t1.$index(data, "suffix"), "name"))) : Z.Affixes_find(H.stringTypeCast(t1.$index(data, "suffix")));
        else
          suffix = null;
        return new R.Item(t2, prefix, suffix, count);
      },
      _loadLore$1: function(data) {
        var t1, t2, t3, slain, seen, slainMap, seenMap;
        t1 = [P.String, null];
        H.assertSubtype(data, "$isMap", t1, "$asMap");
        t2 = B.Breed;
        t3 = P.int;
        slain = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
        seen = P.LinkedHashMap_LinkedHashMap$_empty(t2, t3);
        if (data != null) {
          t2 = J.getInterceptor$asx(data);
          slainMap = H.subtypeCast(t2.$index(data, "slain"), "$isMap", t1, "$asMap");
          if (slainMap != null)
            J.forEach$1$ax(slainMap, new S.Storage__loadLore_closure(this, slain));
          seenMap = H.subtypeCast(t2.$index(data, "seen"), "$isMap", t1, "$asMap");
          if (seenMap != null)
            J.forEach$1$ax(seenMap, new S.Storage__loadLore_closure0(this, seen));
        }
        return new V.Lore(seen, slain);
      },
      save$0: function(_) {
        var heroData, t1, t2, t3, t4, t5, t6, _i, hero, raceStats, t7, t8, _i0, stat, race, inventory, equipment, $home, crucible, shops, skills, t9, skill, t10, t11, seen, slain, lore, data;
        heroData = [];
        for (t1 = this.heroes, t2 = t1.length, t3 = P.String, t4 = P.Object, t5 = [P.Map,,,], t6 = P.int, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          hero = t1[_i];
          raceStats = P.LinkedHashMap__makeEmpty();
          for (t7 = hero.race, t8 = t7._max, _i0 = 0; _i0 < 5; ++_i0) {
            stat = C.List_zPV[_i0];
            raceStats.$indexSet(0, stat.name, t8.$index(0, stat));
          }
          race = P.LinkedHashMap_LinkedHashMap$_literal(["name", t7._race.name, "seed", t7.seed, "stats", raceStats], t3, t4);
          inventory = this._saveItems$1(hero.inventory);
          equipment = this._saveItems$1(hero.equipment);
          $home = this._saveItems$1(hero.home);
          crucible = this._saveItems$1(hero.crucible);
          shops = P.LinkedHashMap__makeEmpty();
          hero.shops.forEach$1(0, new S.Storage_save_closure(this, shops));
          skills = P.LinkedHashMap__makeEmpty();
          t7 = hero.skills._levels;
          t7 = t7.get$keys(t7);
          t7 = P.List_List$from(t7, true, H.getRuntimeTypeArgument(t7, "Iterable", 0));
          t8 = H.getTypeArgumentByIndex(t7, 0);
          t9 = t7.length - 1;
          if (t9 - 0 <= 32)
            H.Sort__insertionSort(t7, 0, t9, J._interceptors_JSArray__compareAny$closure(), t8);
          else
            H.Sort__dualPivotQuicksort(t7, 0, t9, J._interceptors_JSArray__compareAny$closure(), t8);
          t8 = t7.length;
          _i0 = 0;
          for (; _i0 < t7.length; t7.length === t8 || (0, H.throwConcurrentModificationError)(t7), ++_i0) {
            skill = t7[_i0];
            t9 = J.get$name$x(skill);
            t10 = hero.skills;
            H.interceptedTypeCheck(skill, "$isSkill");
            t10 = t10._levels.$index(0, skill);
            if (t10 == null)
              t10 = 0;
            t11 = hero.skills._points.$index(0, skill);
            skills.$indexSet(0, t9, P.LinkedHashMap_LinkedHashMap$_literal(["level", t10, "points", t11 == null ? 0 : t11], t3, t6));
          }
          seen = P.LinkedHashMap__makeEmpty();
          slain = P.LinkedHashMap__makeEmpty();
          lore = P.LinkedHashMap_LinkedHashMap$_literal(["seen", seen, "slain", slain], t3, t5);
          for (t7 = $.$get$Monsters_breeds().get$all(), t7 = new H.MappedIterator(J.get$iterator$ax(t7._iterable), t7._f, [H.getTypeArgumentByIndex(t7, 0), H.getTypeArgumentByIndex(t7, 1)]); t7.moveNext$0();) {
            t8 = t7.__internal$_current;
            t9 = hero._lore._seen.$index(0, t8);
            if (t9 == null)
              t9 = 0;
            if (t9 !== 0)
              seen.$indexSet(0, O.Log__categorize(t8._breed$_name, false, true), t9);
            t9 = hero._lore._slain.$index(0, t8);
            if (t9 == null)
              t9 = 0;
            if (t9 !== 0)
              slain.$indexSet(0, O.Log__categorize(t8._breed$_name, false, true), t9);
          }
          heroData.push(P.LinkedHashMap_LinkedHashMap$_literal(["name", hero.name, "race", race, "class", hero.heroClass.name, "inventory", inventory, "equipment", equipment, "home", $home, "crucible", crucible, "shops", shops, "experience", hero.experience, "skills", skills, "lore", lore, "gold", hero.gold, "maxDepth", hero.maxDepth], t3, t4));
        }
        data = P.LinkedHashMap_LinkedHashMap$_literal(["heroes", heroData], t3, [P.List,,]);
        window.localStorage.setItem("heroes", C.JsonCodec_null_null.encode$1(data));
        P.print("Saved.");
      },
      _saveItems$1: function(items) {
        var list, t1, t2, t3, itemData, t4;
        H.assertSubtype(items, "$isIterable", [R.Item], "$asIterable");
        list = [];
        for (t1 = items.get$iterator(items), t2 = P.String; t1.moveNext$0();) {
          t3 = t1.get$current();
          itemData = P.LinkedHashMap_LinkedHashMap$_literal(["type", O.Log__categorize(t3.type.quantifiableName, false, true), "count", t3._count], t2, null);
          t4 = t3.prefix;
          if (t4 != null)
            itemData.$indexSet(0, "prefix", t4.name);
          t3 = t3.suffix;
          if (t3 != null)
            itemData.$indexSet(0, "suffix", t3.name);
          list.push(itemData);
        }
        return list;
      }
    },
    Storage__load_closure: {
      "^": "Closure:123;name",
      call$1: function(c) {
        var t1, t2;
        H.interceptedTypeCheck(c, "$isHeroClass");
        t1 = J.get$name$x(c);
        t2 = this.name;
        return t1 == null ? t2 == null : t1 === t2;
      }
    },
    Storage__load_closure0: {
      "^": "Closure:9;$this,shops",
      call$2: function($name, shopData) {
        var shop, t1;
        shop = $.$get$Shops_all().$index(0, $name);
        if (shop != null) {
          t1 = H.assertSubtype(this.$this._loadItems$1(H.listTypeCheck(shopData)), "$isIterable", [R.Item], "$asIterable");
          this.shops.$indexSet(0, shop, O.Inventory$(new O.ItemLocation(J.get$name$x(shop), "All sold out!"), 26, t1));
        } else
          P.print("Couldn't find shop '" + H.S($name) + "'.");
      }
    },
    Storage__loadRace_closure: {
      "^": "Closure:124;name",
      call$1: function(race) {
        return H.interceptedTypeCheck(race, "$isRace").name === this.name;
      }
    },
    Storage__loadLore_closure: {
      "^": "Closure:14;$this,slain",
      call$2: function(breedName, count) {
        var t1;
        H.stringTypeCheck(breedName);
        t1 = $.$get$Monsters_breeds().tryFind$1(breedName);
        if (t1 != null)
          this.slain.$indexSet(0, t1, H.intTypeCast(count));
      }
    },
    Storage__loadLore_closure0: {
      "^": "Closure:14;$this,seen",
      call$2: function(breedName, count) {
        var t1;
        H.stringTypeCheck(breedName);
        t1 = $.$get$Monsters_breeds().tryFind$1(breedName);
        if (t1 != null)
          this.seen.$indexSet(0, t1, H.intTypeCast(count));
      }
    },
    Storage_save_closure: {
      "^": "Closure:31;$this,shops",
      call$2: function(shop, inventory) {
        H.interceptedTypeCheck(shop, "$isShop");
        H.interceptedTypeCheck(inventory, "$isInventory");
        this.shops.$indexSet(0, shop.name, this.$this._saveItems$1(inventory));
      }
    }
  }], ["", "package:hauberk/src/ui/target_dialog.dart",, X, {
    "^": "",
    _findLowest: function(collection, callback, $T) {
      var t1, bestItem, bestScore, _i, item, score, t2;
      H.assertSubtype(collection, "$isIterable", [$T], "$asIterable");
      H.functionTypeCheck(callback, {func: 1, ret: P.num, args: [$T]});
      for (t1 = collection.length, bestItem = null, bestScore = null, _i = 0; _i < collection.length; collection.length === t1 || (0, H.throwConcurrentModificationError)(collection), ++_i) {
        item = collection[_i];
        score = callback.call$1(item);
        if (bestScore != null) {
          if (typeof score !== "number")
            return score.$lt();
          t2 = score < bestScore;
        } else
          t2 = true;
        if (t2) {
          bestScore = score;
          bestItem = item;
        }
      }
      return bestItem;
    },
    _findHighest: function(collection, callback, $T) {
      var t1, bestItem, bestScore, _i, item, score, t2;
      H.assertSubtype(collection, "$isIterable", [$T], "$asIterable");
      H.functionTypeCheck(callback, {func: 1, ret: P.num, args: [$T]});
      for (t1 = collection.length, bestItem = null, bestScore = null, _i = 0; _i < collection.length; collection.length === t1 || (0, H.throwConcurrentModificationError)(collection), ++_i) {
        item = collection[_i];
        score = callback.call$1(item);
        if (bestScore != null) {
          if (typeof score !== "number")
            return score.$gt();
          t2 = score > bestScore;
        } else
          t2 = true;
        if (t2) {
          bestScore = score;
          bestItem = item;
        }
      }
      return bestItem;
    },
    TargetDialog: {
      "^": "Screen;_target_dialog$_gameScreen,_target_dialog$_range,_target_dialog$_onSelect,_monsters,_targetingFloor,_target_dialog$_animateOffset,0_ui",
      get$isTransparent: function() {
        return true;
      },
      TargetDialog$3: function(_gameScreen, _range, _onSelect) {
        var t1, t2, hero, t3, t4, t5, t6, _i, actor, t7, t8, t9, t10, t11;
        t1 = this._target_dialog$_gameScreen;
        t2 = t1.game;
        hero = t2.hero;
        for (t3 = t2._stage._actors, t4 = t3.length, t5 = this._monsters, t6 = this._target_dialog$_range, _i = 0; _i < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i) {
          actor = t3[_i];
          if (!(actor instanceof B.Monster))
            continue;
          t7 = actor.game._stage;
          t8 = actor._pos;
          t7 = t7.tiles;
          t9 = t7._elements;
          t10 = t8.y;
          t7 = t7.bounds.size.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          t11 = t8.x;
          if (typeof t11 !== "number")
            return H.iae(t11);
          t11 = t10 * t7 + t11;
          if (t11 < 0 || t11 >= t9.length)
            return H.ioore(t9, t11);
          t11 = t9[t11];
          if (!(t11.illumination > 0 && !t11._isOccluded))
            continue;
          if (t8.$sub(0, hero._pos).$gt(0, t6))
            continue;
          C.JSArray_methods.add$1(t5, actor);
        }
        if (t5.length === 0) {
          this._targetingFloor = true;
          t1.targetFloor$1(t2.hero._pos);
        } else
          this._targetNearest$1(t2.hero._pos);
      },
      _targetNearest$1: function(pos) {
        var t1, t2, nearest, _i, monster;
        t1 = this._monsters;
        t2 = t1.length;
        if (t2 === 0)
          return false;
        for (nearest = null, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          monster = t1[_i];
          if (nearest == null || pos.$sub(0, monster._pos).$lt(0, pos.$sub(0, nearest._pos)))
            nearest = monster;
        }
        this._target_dialog$_gameScreen.targetActor$1(nearest);
        return true;
      },
      handleInput$1: function(input) {
        var t1;
        switch (H.interceptedTypeCheck(input, "$isInput")) {
          case C.Input_ok:
            t1 = this._target_dialog$_gameScreen;
            if (t1.get$currentTarget(t1) != null) {
              this._ui.pop$0();
              this._target_dialog$_onSelect.call$1(t1.get$currentTarget(t1));
            }
            break;
          case C.Input_cancel:
            this._ui.pop$0();
            break;
          case C.Input_nw:
            this._changeTarget$1(C.Direction_m1_m1);
            break;
          case C.Input_n:
            this._changeTarget$1(C.Direction_0_m1);
            break;
          case C.Input_ne:
            this._changeTarget$1(C.Direction_1_m1);
            break;
          case C.Input_w:
            this._changeTarget$1(C.Direction_m1_0);
            break;
          case C.Input_e:
            this._changeTarget$1(C.Direction_1_0);
            break;
          case C.Input_sw:
            this._changeTarget$1(C.Direction_m1_1);
            break;
          case C.Input_s:
            this._changeTarget$1(C.Direction_0_1);
            break;
          case C.Input_se:
            this._changeTarget$1(C.Direction_1_1);
            break;
        }
        return true;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        var t1, t2;
        if (keyCode === 9 && this._monsters.length !== 0) {
          t1 = this._targetingFloor;
          this._targetingFloor = !t1;
          t2 = this._target_dialog$_gameScreen;
          if (t1) {
            t1 = t2.get$currentTarget(t2);
            this._targetNearest$1(t1 == null ? t2.game.hero._pos : t1);
          } else
            t2.targetFloor$1(t2.get$currentTarget(t2));
          return true;
        }
        return false;
      },
      update$0: function(_) {
        var t1 = (this._target_dialog$_animateOffset + 1) % 25;
        this._target_dialog$_animateOffset = t1;
        if (C.JSInt_methods.$mod(t1, 5) === 0)
          this.dirty$0();
      },
      render$1: function(terminal) {
        var t1, t2, stage, black, t3, t4, t5, t6, pos, t7, t8, t9, toPos, color, charCode, target, i, reachedTarget, toTarget, targetColor;
        t1 = this._target_dialog$_gameScreen;
        t2 = t1.game;
        stage = t2._stage;
        black = L.Glyph$(" ", null, null);
        for (t3 = t1._cameraBounds, t3.toString, t3 = X.RectIterator$(t3), t4 = this._target_dialog$_range; t3.moveNext$0();) {
          t5 = t3._rect$_x;
          t6 = t3._rect$_y;
          pos = new L.Vec(t5, t6);
          t7 = stage.tiles;
          t8 = t7._elements;
          t7 = t7.bounds.size.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (typeof t5 !== "number")
            return H.iae(t5);
          t7 = t6 * t7 + t5;
          if (t7 < 0 || t7 >= t8.length)
            return H.ioore(t8, t7);
          t7 = t8[t7];
          if (t7._isExplored) {
            if (t7._isOccluded) {
              t7 = t1._cameraBounds.pos;
              t8 = t7.x;
              if (typeof t8 !== "number")
                return H.iae(t8);
              terminal.drawGlyph$3(t5 - t8, t6 - t7.y, black);
              continue;
            }
            t8 = t7.type;
            t8.toString;
            t9 = $.$get$Motility_walk();
            t8 = t8.motility._bitMask;
            if ((t8 & t9._bitMask) === 0) {
              t7.toString;
              t8 = (t8 & $.$get$Motility_fly()._bitMask) === 0;
            } else
              t8 = false;
            if (t8)
              continue;
            t8 = stage._actorsByTile;
            t9 = t8._elements;
            t8 = t8.bounds.size.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            t8 = t6 * t8 + t5;
            if (t8 < 0 || t8 >= t9.length)
              return H.ioore(t9, t8);
            if (t9[t8] != null)
              continue;
            if (stage._itemsByTile.containsKey$1(0, pos))
              continue;
          } else if (this._isKnownOccluded$1(pos))
            continue;
          toPos = pos.$sub(0, t2.hero._pos);
          if (toPos.$gt(0, t4)) {
            t7 = t1._cameraBounds.pos;
            t8 = t7.x;
            if (typeof t8 !== "number")
              return H.iae(t8);
            terminal.drawGlyph$3(t5 - t8, t6 - t7.y, black);
            continue;
          }
          if (typeof t4 !== "number")
            return t4.$mul();
          color = toPos.$gt(0, t4 * 2 / 3) ? C.Color_142_82_55 : C.Color_222_156_33;
          charCode = t7._isExplored ? t7.type.appearance.char : 183;
          t7 = t1._cameraBounds.pos;
          t8 = t7.x;
          if (typeof t8 !== "number")
            return H.iae(t8);
          terminal.drawGlyph$3(t5 - t8, t6 - t7.y, new L.Glyph(charCode, color, C.Color_0_0_0));
        }
        target = t1.get$currentTarget(t1);
        if (target == null)
          return;
        i = C.JSInt_methods._tdivFast$1(this._target_dialog$_animateOffset, 5);
        t3 = G._LineIterator$(t2.hero._pos, target);
        while (true) {
          t3.moveNext$0();
          if (!true) {
            reachedTarget = false;
            break;
          }
          pos = t3._line$_current;
          if (J.$eq$(pos, target)) {
            reachedTarget = true;
            break;
          }
          t5 = stage.tiles;
          t6 = t5._elements;
          t7 = pos.y;
          t5 = t5.bounds.size.x;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t8 = pos.x;
          if (typeof t8 !== "number")
            return H.iae(t8);
          t5 = t7 * t5 + t8;
          if (t5 < 0 || t5 >= t6.length)
            return H.ioore(t6, t5);
          t5 = t6[t5];
          if (t5._isExplored) {
            t6 = stage._actorsByTile;
            t9 = t6._elements;
            t6 = t6.bounds.size.x;
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = t7 * t6 + t8;
            if (t6 < 0 || t6 >= t9.length)
              return H.ioore(t9, t6);
            if (t9[t6] != null) {
              reachedTarget = false;
              break;
            }
            t5.toString;
            t6 = $.$get$Motility_fly();
            if ((t5.type.motility._bitMask & t6._bitMask) === 0) {
              reachedTarget = false;
              break;
            }
          }
          t5 = i === 0 ? C.Color_222_156_33 : C.Color_142_82_55;
          t6 = t1._cameraBounds.pos;
          t9 = t6.x;
          if (typeof t9 !== "number")
            return H.iae(t9);
          terminal.drawGlyph$3(t8 - t9, t7 - t6.y, new L.Glyph(8226, t5, C.Color_0_0_0));
          i = C.JSInt_methods.$mod(i + 5 - 1, 5);
        }
        if (reachedTarget) {
          toTarget = target.$sub(0, t2.hero._pos);
          if (typeof t4 !== "number")
            return t4.$mul();
          targetColor = toTarget.$gt(0, t4 * 2 / 3) ? C.Color_142_82_55 : C.Color_222_156_33;
          t2 = target.x;
          if (typeof t2 !== "number")
            return t2.$sub();
          t3 = target.y;
          t1.drawStageGlyph$4(terminal, t2 - 1, t3, L.Glyph$("-", targetColor, null));
          t1.drawStageGlyph$4(terminal, t2 + 1, t3, L.Glyph$("-", targetColor, null));
          t1.drawStageGlyph$4(terminal, t2, t3 - 1, L.Glyph$("|", targetColor, null));
          t1.drawStageGlyph$4(terminal, t2, t3 + 1, L.Glyph$("|", targetColor, null));
        }
        if (this._monsters.length === 0)
          terminal.writeAt$4(0, terminal._display._glyphs.bounds.size.y - 1, "[\u2195\u2194] Choose tile, [Esc] Cancel", C.Color_38_38_56);
        else {
          t1 = terminal._display._glyphs;
          if (this._targetingFloor)
            terminal.writeAt$4(0, t1.bounds.size.y - 1, "[\u2195\u2194] Choose tile, [Tab] Target monsters, [Esc] Cancel", C.Color_38_38_56);
          else
            terminal.writeAt$4(0, t1.bounds.size.y - 1, "[\u2195\u2194] Choose monster, [Tab] Target floor, [Esc] Cancel", C.Color_38_38_56);
        }
      },
      _changeTarget$1: function(dir) {
        if (this._targetingFloor)
          this._changeFloorTarget$1(dir);
        else
          this._changeMonsterTarget$1(dir);
      },
      _changeFloorTarget$1: function(dir) {
        var t1, pos, t2, t3;
        t1 = this._target_dialog$_gameScreen;
        pos = t1.get$currentTarget(t1).$add(0, dir);
        t2 = t1.game;
        if (t2.hero._pos.$sub(0, pos).$gt(0, this._target_dialog$_range))
          return;
        t2 = t2._stage.tiles.$index(0, pos);
        if (t2._isExplored) {
          t2.toString;
          t3 = $.$get$Motility_fly();
          t2 = (t2.type.motility._bitMask & t3._bitMask) === 0 || t2._isOccluded;
        } else
          t2 = false;
        if (t2)
          return;
        t1.targetFloor$1(pos);
      },
      _changeMonsterTarget$1: function(dir) {
        var t1, t2, ahead, behind, perp, t3, t4, t5, t6, _i, monster, relative, t7, nearest, farthest;
        t1 = B.Monster;
        t2 = [t1];
        ahead = H.setRuntimeTypeInfo([], t2);
        behind = H.setRuntimeTypeInfo([], t2);
        perp = dir.get$rotateLeft90();
        for (t2 = this._monsters, t3 = t2.length, t4 = this._target_dialog$_gameScreen, t5 = perp.x, t6 = perp.y, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          monster = t2[_i];
          relative = monster._pos.$sub(0, t4.get$currentTarget(t4));
          if (typeof t5 !== "number")
            return t5.$mul();
          t7 = relative.x;
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (t5 * relative.y - t6 * t7 > 0)
            C.JSArray_methods.add$1(ahead, monster);
          else
            C.JSArray_methods.add$1(behind, monster);
        }
        nearest = X._findLowest(ahead, new X.TargetDialog__changeMonsterTarget_closure(this), t1);
        if (nearest != null) {
          t4.targetActor$1(nearest);
          return;
        }
        farthest = X._findHighest(behind, new X.TargetDialog__changeMonsterTarget_closure0(this), t1);
        if (farthest != null)
          t4.targetActor$1(farthest);
      },
      _isKnownOccluded$1: function(target) {
        var t1, stage, pos, t2, t3, t4, t5;
        t1 = this._target_dialog$_gameScreen.game;
        stage = t1._stage;
        for (t1 = G._LineIterator$(t1.hero._pos, target); t1.moveNext$0(), true;) {
          pos = t1._line$_current;
          if (J.$eq$(pos, target))
            return false;
          t2 = stage.tiles;
          t3 = t2.bounds;
          if (!t3.contains$1(0, pos))
            return true;
          t2 = t2._elements;
          t4 = pos.y;
          t3 = t3.size.x;
          if (typeof t3 !== "number")
            return H.iae(t3);
          t5 = pos.x;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = t4 * t3 + t5;
          if (t5 < 0 || t5 >= t2.length)
            return H.ioore(t2, t5);
          t5 = t2[t5];
          if (t5._isExplored) {
            t5.toString;
            t2 = $.$get$Motility_fly();
            t2 = (t5.type.motility._bitMask & t2._bitMask) === 0;
          } else
            t2 = false;
          if (t2)
            return true;
        }
        throw H.wrapException("unreachable");
      },
      $asScreen: function() {
        return [Y.Input];
      },
      static: {
        TargetDialog$: function(_gameScreen, _range, _onSelect) {
          var t1 = new X.TargetDialog(_gameScreen, _range, _onSelect, H.setRuntimeTypeInfo([], [B.Monster]), false, 0);
          t1.TargetDialog$3(_gameScreen, _range, _onSelect);
          return t1;
        }
      }
    },
    TargetDialog__changeMonsterTarget_closure: {
      "^": "Closure:36;$this",
      call$1: function(monster) {
        var t1 = this.$this._target_dialog$_gameScreen;
        return monster.get$pos().$sub(0, t1.get$currentTarget(t1)).get$lengthSquared();
      }
    },
    TargetDialog__changeMonsterTarget_closure0: {
      "^": "Closure:36;$this",
      call$1: function(monster) {
        var t1 = this.$this._target_dialog$_gameScreen;
        return monster.get$pos().$sub(0, t1.get$currentTarget(t1)).get$lengthSquared();
      }
    }
  }], ["", "package:malison/src/display.dart",, D, {
    "^": "",
    Display: {
      "^": "Object;_glyphs,_changedGlyphs",
      get$width: function(_) {
        return this._glyphs.bounds.size.x;
      },
      get$height: function(_) {
        return this._glyphs.bounds.size.y;
      },
      setGlyph$3: function(x, y, glyph) {
        var t1, t2, t3;
        if (typeof x !== "number")
          return x.$lt();
        if (x < 0)
          return;
        t1 = this._glyphs;
        t2 = t1.bounds.size;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (x >= t3)
          return;
        if (y < 0)
          return;
        if (y >= t2.y)
          return;
        t2 = this._changedGlyphs;
        if (!J.$eq$(t1.$get$2(x, y), glyph))
          t2.$set$3(x, y, glyph);
        else
          t2.$set$3(x, y, null);
      },
      render$1: function(renderGlyph) {
        var t1, t2, t3, t4, t5, t6, t7, t8, y, x, t9, glyph;
        H.functionTypeCheck(renderGlyph, {func: 1, ret: -1, args: [P.int, P.int, L.Glyph]});
        for (t1 = this._glyphs, t2 = t1.bounds.size, t3 = t2.y, t2 = t2.x, t4 = H.getTypeArgumentByIndex(t1, 0), t1 = t1._elements, t5 = this._changedGlyphs, t6 = H.getTypeArgumentByIndex(t5, 0), t7 = t5._elements, t5 = t5.bounds.size.x, t8 = t7.length, y = 0; y < t3; ++y) {
          if (typeof t2 !== "number")
            return H.iae(t2);
          x = 0;
          for (; x < t2; ++x) {
            if (typeof t5 !== "number")
              return H.iae(t5);
            t9 = y * t5 + x;
            if (t9 < 0 || t9 >= t8)
              return H.ioore(t7, t9);
            glyph = t7[t9];
            if (glyph == null)
              continue;
            renderGlyph.call$3(x, y, glyph);
            C.JSArray_methods.$indexSet(t1, y * t2 + x, H.assertSubtypeOfRuntimeType(glyph, t4));
            C.JSArray_methods.$indexSet(t7, t9, H.assertSubtypeOfRuntimeType(null, t6));
          }
        }
      }
    }
  }], ["", "package:malison/src/glyph.dart",, L, {
    "^": "",
    Color: {
      "^": "Object;r,g,b",
      get$hashCode: function(_) {
        return (this.r & 0x1FFFFFFF ^ this.g & 0x1FFFFFFF ^ this.b & 0x1FFFFFFF) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof L.Color)
          return this.r === other.r && this.g === other.g && this.b === other.b;
        return false;
      },
      add$2: function(_, other, fractionOther) {
        H.interceptedTypeCheck(other, "$isColor");
        if (fractionOther == null)
          fractionOther = 1;
        return new L.Color(C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(this.r + other.r * fractionOther, 0, 255)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(this.g + other.g * fractionOther, 0, 255)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.clamp$2(this.b + other.b * fractionOther, 0, 255)));
      },
      add$1: function($receiver, other) {
        return this.add$2($receiver, other, null);
      },
      blend$2: function(other, fractionOther) {
        var fractionThis = 1 - fractionOther;
        return new L.Color(C.JSNumber_methods.toInt$0(this.r * fractionThis + other.r * fractionOther), C.JSNumber_methods.toInt$0(this.g * fractionThis + other.g * fractionOther), C.JSNumber_methods.toInt$0(this.b * fractionThis + other.b * fractionOther));
      }
    },
    Glyph: {
      "^": "Object;char,fore,back",
      get$hashCode: function(_) {
        var t1, t2;
        t1 = this.fore;
        t2 = this.back;
        return (J.get$hashCode$(this.char) ^ t1.get$hashCode(t1) ^ t2.get$hashCode(t2)) >>> 0;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof L.Glyph) {
          t1 = this.char;
          t2 = other.char;
          return (t1 == null ? t2 == null : t1 === t2) && this.fore.$eq(0, other.fore) && this.back.$eq(0, other.back);
        }
        return false;
      },
      static: {
        Glyph$: function(char, fore, $back) {
          var t1, t2;
          t1 = J._codeUnitAt$1$s(char, 0);
          t2 = fore != null ? fore : C.Color_255_255_255;
          return new L.Glyph(t1, t2, $back != null ? $back : C.Color_0_0_0);
        },
        Glyph$fromCharCode: function(char, fore, $back) {
          var t1 = fore != null ? fore : C.Color_255_255_255;
          return new L.Glyph(char, t1, $back != null ? $back : C.Color_0_0_0);
        }
      }
    }
  }], ["", "package:malison/src/key_bindings.dart",, S, {
    "^": "",
    KeyBindings: {
      "^": "Object;_bindings,$ti",
      bind$4$alt$shift: function(input, keyCode, alt, shift) {
        H.assertSubtypeOfRuntimeType(input, H.getTypeArgumentByIndex(this, 0));
        if (shift == null)
          shift = false;
        if (alt == null)
          alt = false;
        this._bindings.$indexSet(0, new S._KeyBinding(keyCode, shift, alt), input);
      },
      bind$2: function(input, keyCode) {
        return this.bind$4$alt$shift(input, keyCode, null, null);
      },
      bind$3$shift: function(input, keyCode, shift) {
        return this.bind$4$alt$shift(input, keyCode, null, shift);
      },
      bind$3$alt: function(input, keyCode, alt) {
        return this.bind$4$alt$shift(input, keyCode, alt, null);
      }
    },
    _KeyBinding: {
      "^": "Object;charCode,shift,alt",
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof S._KeyBinding) {
          t1 = this.charCode;
          t2 = other.charCode;
          return (t1 == null ? t2 == null : t1 === t2) && this.shift === other.shift && this.alt === other.alt;
        }
        return false;
      },
      get$hashCode: function(_) {
        return (J.get$hashCode$(this.charCode) ^ C.JSBool_methods.get$hashCode(this.shift) ^ C.JSBool_methods.get$hashCode(this.alt)) >>> 0;
      },
      toString$0: function(_) {
        var result = "key(" + H.S(this.charCode);
        if (this.shift)
          result += " shift";
        return (this.alt ? result + " alt" : result) + ")";
      }
    }
  }], ["", "package:malison/src/port_terminal.dart",, G, {
    "^": "",
    PortTerminal: {
      "^": "Terminal;size,_x,_y,_root,foreColor,backColor",
      get$width: function(_) {
        return this.size.x;
      },
      get$height: function(_) {
        return this.size.y;
      },
      drawGlyph$3: function(x, y, glyph) {
        var t1, t2;
        H.intTypeCheck(x);
        if (typeof x !== "number")
          return x.$lt();
        if (x < 0)
          return;
        t1 = this.size;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (x >= t2)
          return;
        if (y < 0)
          return;
        if (y >= t1.y)
          return;
        t1 = this._x;
        if (typeof t1 !== "number")
          return t1.$add();
        this._root.drawGlyph$3(t1 + x, this._y + y, glyph);
      }
    }
  }], ["", "package:malison/src/retro_terminal.dart",, S, {
    "^": "",
    RetroTerminal: {
      "^": "RenderableTerminal;_display,_canvas,_context,_font,_fontColorCache,_scale,_imageLoaded,_charWidth,_charHeight,foreColor,backColor",
      get$width: function(_) {
        return this._display._glyphs.bounds.size.x;
      },
      get$height: function(_) {
        return this._display._glyphs.bounds.size.y;
      },
      RetroTerminal$_$5: function(_display, _charWidth, _charHeight, canvas, _font) {
        var t1, t2, canvasWidth, canvasHeight, t3;
        t1 = this._display._glyphs.bounds.size;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return H.iae(t2);
        canvasWidth = this._charWidth * t2;
        canvasHeight = this._charHeight * t1.y;
        t1 = this._canvas;
        t2 = this._scale;
        t1.width = canvasWidth * t2;
        t1.height = canvasHeight * t2;
        t2 = t1.style;
        t3 = "" + canvasWidth + "px";
        t2.width = t3;
        t1 = t1.style;
        t2 = "" + canvasHeight + "px";
        t1.height = t2;
        t1 = W.Event;
        W._EventStreamSubscription$(this._font, "load", H.functionTypeCheck(new S.RetroTerminal$__closure(this), {func: 1, ret: -1, args: [t1]}), false, t1);
      },
      drawGlyph$3: function(x, y, glyph) {
        this._display.setGlyph$3(H.intTypeCheck(x), y, glyph);
      },
      render$0: function() {
        if (!this._imageLoaded)
          return;
        this._display.render$1(new S.RetroTerminal_render_closure(this));
      },
      _getColorFont$1: function(color) {
        var t1, cached, t2, t3, tint, context;
        t1 = this._fontColorCache;
        cached = t1.$index(0, color);
        if (cached != null)
          return cached;
        t2 = this._font;
        t3 = t2.width;
        tint = W.CanvasElement_CanvasElement(t2.height, t3);
        context = tint.getContext("2d");
        context.drawImage(t2, 0, 0);
        context.globalCompositeOperation = "source-atop";
        context.fillStyle = "rgb(" + color.r + ", " + color.g + ", " + color.b + ")";
        context.fillRect(0, 0, t2.width, t2.height);
        t1.$indexSet(0, color, tint);
        return tint;
      },
      static: {
        RetroTerminal$_: function(_display, _charWidth, _charHeight, canvas, _font) {
          var t1 = J.toInt$0$n(window.devicePixelRatio);
          t1 = new S.RetroTerminal(_display, canvas, canvas.getContext("2d"), _font, P.LinkedHashMap_LinkedHashMap$_empty(L.Color, W.CanvasElement), t1, false, _charWidth, _charHeight, C.Color_255_255_255, C.Color_0_0_0);
          t1.RetroTerminal$_$5(_display, _charWidth, _charHeight, canvas, _font);
          return t1;
        }
      }
    },
    RetroTerminal$__closure: {
      "^": "Closure:37;$this",
      call$1: function(_) {
        var t1 = this.$this;
        t1._imageLoaded = true;
        t1.render$0();
      }
    },
    RetroTerminal_render_closure: {
      "^": "Closure:32;$this",
      call$3: function(x, y, glyph) {
        var char, fromUnicode, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        char = glyph.char;
        fromUnicode = C.Map_6xa1A.$index(0, char);
        if (fromUnicode != null)
          char = fromUnicode;
        if (typeof char !== "number")
          return char.$mod();
        t1 = C.JSInt_methods.$mod(char, 32);
        t2 = this.$this;
        t3 = t2._charWidth;
        t4 = C.JSInt_methods._tdivFast$1(char, 32);
        t5 = t2._charHeight;
        t6 = t2._context;
        t7 = glyph.back;
        t6.fillStyle = "rgb(" + t7.r + ", " + t7.g + ", " + t7.b + ")";
        t7 = t2._scale;
        t8 = x * t3 * t7;
        t9 = y * t5 * t7;
        t10 = t3 * t7;
        t7 = t5 * t7;
        t6.fillRect(t8, t9, t10, t7);
        if (char === 0 || char === 32)
          return;
        t6.drawImage(t2._getColorFont$1(glyph.fore), t1 * t3 * 2, t4 * t5 * 2, t3 * 2, t5 * 2, t8, t9, t10, t7);
      }
    }
  }], ["", "package:malison/src/terminal.dart",, K, {
    "^": "",
    Terminal: {
      "^": "Object;",
      fill$5: function(_, x, y, width, height, color) {
        var glyph, t1, py, t2, px;
        glyph = L.Glyph$fromCharCode(32, this.foreColor, this.backColor);
        for (t1 = y + height, py = y; py < t1; ++py) {
          if (typeof width !== "number")
            return H.iae(width);
          t2 = x + width;
          px = x;
          for (; px < t2; ++px)
            this.drawGlyph$3(px, py, glyph);
        }
      },
      fill$4: function($receiver, x, y, width, height) {
        return this.fill$5($receiver, x, y, width, height, null);
      },
      writeAt$5: function(x, y, text, fore, $back) {
        var t1, i, t2, t3;
        H.stringTypeCheck(text);
        if (fore == null)
          fore = this.foreColor;
        if ($back == null)
          $back = this.backColor;
        for (t1 = text.length, i = 0; i < t1; ++i) {
          t2 = x + i;
          t3 = this.get$width(this);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t2 >= t3)
            break;
          t3 = C.JSString_methods._codeUnitAt$1(text, i);
          this.drawGlyph$3(t2, y, new L.Glyph(t3, fore, $back));
        }
      },
      writeAt$4: function(x, y, text, fore) {
        return this.writeAt$5(x, y, text, fore, null);
      },
      writeAt$3: function(x, y, text) {
        return this.writeAt$5(x, y, text, null, null);
      },
      rect$4: function(_, x, y, width, height) {
        return new G.PortTerminal(new L.Vec(width, height), x, y, this, C.Color_255_255_255, C.Color_0_0_0);
      }
    },
    RenderableTerminal: {
      "^": "Terminal;"
    }
  }], ["", "package:malison/src/user_interface.dart",, B, {
    "^": "",
    UserInterface: {
      "^": "Object;keyPress,_screens,_terminal,_dirty,0_keyDownSubscription,0_keyUpSubscription,_running,$ti",
      set$handlingInput: function(value) {
        var t1, t2, t3, t4;
        if (this._keyDownSubscription != null)
          return;
        t1 = document;
        t2 = t1.body;
        t2.toString;
        t3 = W.KeyboardEvent;
        t4 = {func: 1, ret: -1, args: [t3]};
        this._keyDownSubscription = W._EventStreamSubscription$(t2, "keydown", H.functionTypeCheck(this.get$_keyDown(), t4), false, t3);
        t1 = t1.body;
        t1.toString;
        this._keyUpSubscription = W._EventStreamSubscription$(t1, "keyup", H.functionTypeCheck(this.get$_keyUp(), t4), false, t3);
      },
      set$running: function(value) {
        if (this._running)
          return;
        this._running = true;
        C.Window_methods.requestAnimationFrame$1(window, this.get$_user_interface$_tick());
      },
      push$1: function($screen) {
        H.assertSubtype($screen, "$isScreen", this.$ti, "$asScreen");
        $screen._ui = H.assertSubtype(this, "$isUserInterface", [H.getRuntimeTypeArgument($screen, "Screen", 0)], "$asUserInterface");
        C.JSArray_methods.add$1(this._screens, $screen);
        this._render$0();
      },
      pop$1: function(result) {
        var t1, $screen, t2, t3;
        t1 = this._screens;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        $screen = t1.pop();
        $screen._ui = null;
        t2 = t1.length;
        t3 = t2 - 1;
        if (t3 < 0)
          return H.ioore(t1, t3);
        t1[t3].activate$2($screen, result);
        this._render$0();
      },
      pop$0: function() {
        return this.pop$1(null);
      },
      goTo$1: function($screen) {
        var t1;
        H.assertSubtype($screen, "$isScreen", this.$ti, "$asScreen");
        t1 = this._screens;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop()._ui = null;
        $screen.toString;
        $screen._ui = H.assertSubtype(this, "$isUserInterface", [H.getRuntimeTypeArgument($screen, "Screen", 0)], "$asUserInterface");
        C.JSArray_methods.add$1(t1, $screen);
        this._render$0();
      },
      refresh$0: function() {
        var t1, t2, _i;
        for (t1 = this._screens, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].update$0(0);
        if (this._dirty)
          this._render$0();
      },
      _keyDown$1: [function($event) {
        var keyCode, shift, alt, input, $screen, t1;
        H.interceptedTypeCheck($event, "$isKeyboardEvent");
        keyCode = $event.keyCode;
        if (keyCode === 59)
          keyCode = 186;
        shift = $event.shiftKey;
        alt = $event.altKey;
        if (shift == null)
          shift = false;
        if (alt == null)
          alt = false;
        input = this.keyPress._bindings.$index(0, new S._KeyBinding(keyCode, shift, alt));
        $screen = C.JSArray_methods.get$last(this._screens);
        if (input != null) {
          $event.preventDefault();
          if ($screen.handleInput$1(input))
            return;
        }
        t1 = $event.shiftKey;
        if ($screen.keyDown$3$alt$shift(keyCode, $event.altKey, t1))
          $event.preventDefault();
      }, "call$1", "get$_keyDown", 4, 0, 38],
      _keyUp$1: [function($event) {
        var keyCode, $screen, t1;
        H.interceptedTypeCheck($event, "$isKeyboardEvent");
        keyCode = $event.keyCode;
        if (keyCode === 59)
          keyCode = 186;
        $screen = C.JSArray_methods.get$last(this._screens);
        t1 = $event.shiftKey;
        if ($screen.keyUp$3$alt$shift(keyCode, $event.altKey, t1))
          $event.preventDefault();
      }, "call$1", "get$_keyUp", 4, 0, 38],
      _user_interface$_tick$1: [function(time) {
        H.numTypeCheck(time);
        this.refresh$0();
        if (this._running)
          C.Window_methods.requestAnimationFrame$1(window, this.get$_user_interface$_tick());
      }, "call$1", "get$_user_interface$_tick", 4, 0, 128, 32],
      _render$0: function() {
        var t1, i;
        t1 = this._terminal;
        t1.fill$4(0, 0, 0, t1.get$width(t1), t1.get$height(t1));
        for (t1 = this._screens, i = t1.length - 1; i >= 0; --i) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          if (!t1[i].get$isTransparent())
            break;
        }
        if (i < 0)
          i = 0;
        for (; i < t1.length; ++i)
          t1[i].render$1(this._terminal);
        this._dirty = false;
        this._terminal.render$0();
      }
    },
    Screen: {
      "^": "Object;$ti",
      get$isTransparent: function() {
        return false;
      },
      dirty$0: function() {
        var t1 = this._ui;
        if (t1 == null)
          return;
        t1._dirty = true;
      },
      handleInput$1: function(input) {
        H.assertSubtypeOfRuntimeType(input, H.getRuntimeTypeArgument(this, "Screen", 0));
        return false;
      },
      keyDown$3$alt$shift: function(keyCode, alt, shift) {
        return false;
      },
      keyUp$3$alt$shift: function(keyCode, alt, shift) {
        return false;
      },
      activate$2: function(popped, result) {
        H.assertSubtype(popped, "$isScreen", [H.getRuntimeTypeArgument(this, "Screen", 0)], "$asScreen");
      },
      update$0: function(_) {
      },
      render$1: function(terminal) {
      }
    }
  }], ["", "package:piecemeal/src/array2d.dart",, M, {
    "^": "",
    Array2D: {
      "^": "IterableBase;_elements,bounds,$ti",
      get$width: function(_) {
        return this.bounds.size.x;
      },
      get$height: function(_) {
        return this.bounds.size.y;
      },
      $index: function(_, pos) {
        var t1, t2, t3, t4;
        H.interceptedTypeCheck(pos, "$isVec");
        t1 = this._elements;
        t2 = pos.y;
        t3 = this.bounds.size.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = pos.x;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = t2 * t3 + t4;
        if (t4 < 0 || t4 >= t1.length)
          return H.ioore(t1, t4);
        return t1[t4];
      },
      $indexSet: function(_, pos, value) {
        var t1, t2, t3;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        t1 = pos.y;
        t2 = this.bounds.size.x;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = pos.x;
        if (typeof t3 !== "number")
          return H.iae(t3);
        C.JSArray_methods.$indexSet(this._elements, t1 * t2 + t3, value);
      },
      $get$2: function(x, y) {
        var t1, t2;
        t1 = this._elements;
        t2 = this.bounds.size.x;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof x !== "number")
          return H.iae(x);
        t2 = y * t2 + x;
        if (t2 < 0 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return t1[t2];
      },
      $set$3: function(x, y, value) {
        var t1;
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        t1 = this.bounds.size.x;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (typeof x !== "number")
          return H.iae(x);
        C.JSArray_methods.$indexSet(this._elements, y * t1 + x, value);
      },
      generate$1: function(generator) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = H.getTypeArgumentByIndex(this, 0);
        if (H.functionTypeTest(generator, {func: 1, ret: t1}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._rect$_x;
            t6 = t3._rect$_y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$0(), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [L.Vec]}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._rect$_x;
            t6 = t3._rect$_y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$1(new L.Vec(t5, t6)), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [P.int, P.int]}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._rect$_x;
            t6 = t3._rect$_y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$2(t5, t6), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else
          throw H.wrapException(P.ArgumentError$("Generator must take zero arguments, one Vec, or two ints."));
      },
      get$iterator: function(_) {
        var t1 = this._elements;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      static: {
        Array2D$: function(width, height, value, $T) {
          if (typeof width !== "number")
            return width.$mul();
          return new M.Array2D(P.List_List$filled(width * height, value, false, $T), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [$T]);
        }
      }
    }
  }], ["", "package:piecemeal/src/circle.dart",, Q, {
    "^": "",
    _radiusSquared: function(radius) {
      if (radius < 7) {
        if (radius < 0)
          return H.ioore(C.List_E7y, radius);
        return C.List_E7y[radius];
      }
      return radius * radius;
    },
    Circle: {
      "^": "IterableBase;center,radius",
      get$iterator: function(_) {
        return Q._CircleIterator__CircleIterator(this, false);
      },
      $asIterable: function() {
        return [L.Vec];
      }
    },
    _CircleIterator: {
      "^": "Object;_circle,_boundsIterator,_edge",
      get$current: function() {
        var t1 = this._boundsIterator;
        return new L.Vec(t1._rect$_x, t1._rect$_y).$add(0, this._circle.center);
      },
      moveNext$0: function() {
        var t1, t2, t3, t4, t5, t6, t7, $length;
        for (t1 = this._edge, t2 = this._circle.radius, t3 = this._boundsIterator, t4 = t2 > 0, t5 = t2 - 1; true;) {
          if (!t3.moveNext$0())
            return false;
          t6 = t3._rect$_x;
          t7 = t3._rect$_y;
          if (typeof t6 !== "number")
            return t6.$mul();
          $length = t6 * t6 + t7 * t7;
          if ($length > Q._radiusSquared(t2))
            continue;
          if (t1 && t4 && $length < Q._radiusSquared(t5))
            continue;
          break;
        }
        return true;
      },
      static: {
        _CircleIterator__CircleIterator: function(circle, edge) {
          var t1, size;
          t1 = circle.radius;
          size = t1 + t1 + 1;
          t1 = -t1;
          return new Q._CircleIterator(circle, X.RectIterator$(new X.Rect(new L.Vec(t1, t1), new L.Vec(size, size))), edge);
        }
      }
    }
  }], ["", "package:piecemeal/src/direction.dart",, Z, {
    "^": "",
    Direction: {
      "^": "VecBase;x,y",
      get$rotateLeft45: function() {
        switch (this) {
          case C.Direction_0_0:
            return C.Direction_0_0;
          case C.Direction_0_m1:
            return C.Direction_m1_m1;
          case C.Direction_1_m1:
            return C.Direction_0_m1;
          case C.Direction_1_0:
            return C.Direction_1_m1;
          case C.Direction_1_1:
            return C.Direction_1_0;
          case C.Direction_0_1:
            return C.Direction_1_1;
          case C.Direction_m1_1:
            return C.Direction_0_1;
          case C.Direction_m1_0:
            return C.Direction_m1_1;
          case C.Direction_m1_m1:
            return C.Direction_m1_0;
        }
        throw H.wrapException("unreachable");
      },
      get$rotateRight45: function() {
        switch (this) {
          case C.Direction_0_0:
            return C.Direction_0_0;
          case C.Direction_0_m1:
            return C.Direction_1_m1;
          case C.Direction_1_m1:
            return C.Direction_1_0;
          case C.Direction_1_0:
            return C.Direction_1_1;
          case C.Direction_1_1:
            return C.Direction_0_1;
          case C.Direction_0_1:
            return C.Direction_m1_1;
          case C.Direction_m1_1:
            return C.Direction_m1_0;
          case C.Direction_m1_0:
            return C.Direction_m1_m1;
          case C.Direction_m1_m1:
            return C.Direction_0_m1;
        }
        throw H.wrapException("unreachable");
      },
      get$rotateLeft90: function() {
        switch (this) {
          case C.Direction_0_0:
            return C.Direction_0_0;
          case C.Direction_0_m1:
            return C.Direction_m1_0;
          case C.Direction_1_m1:
            return C.Direction_m1_m1;
          case C.Direction_1_0:
            return C.Direction_0_m1;
          case C.Direction_1_1:
            return C.Direction_1_m1;
          case C.Direction_0_1:
            return C.Direction_1_0;
          case C.Direction_m1_1:
            return C.Direction_1_1;
          case C.Direction_m1_0:
            return C.Direction_0_1;
          case C.Direction_m1_m1:
            return C.Direction_m1_1;
        }
        throw H.wrapException("unreachable");
      },
      get$rotateRight90: function() {
        switch (this) {
          case C.Direction_0_0:
            return C.Direction_0_0;
          case C.Direction_0_m1:
            return C.Direction_1_0;
          case C.Direction_1_m1:
            return C.Direction_1_1;
          case C.Direction_1_0:
            return C.Direction_0_1;
          case C.Direction_1_1:
            return C.Direction_m1_1;
          case C.Direction_0_1:
            return C.Direction_m1_0;
          case C.Direction_m1_1:
            return C.Direction_m1_m1;
          case C.Direction_m1_0:
            return C.Direction_0_m1;
          case C.Direction_m1_m1:
            return C.Direction_1_m1;
        }
        throw H.wrapException("unreachable");
      },
      get$rotate180: function() {
        switch (this) {
          case C.Direction_0_0:
            return C.Direction_0_0;
          case C.Direction_0_m1:
            return C.Direction_0_1;
          case C.Direction_1_m1:
            return C.Direction_m1_1;
          case C.Direction_1_0:
            return C.Direction_m1_0;
          case C.Direction_1_1:
            return C.Direction_m1_m1;
          case C.Direction_0_1:
            return C.Direction_0_m1;
          case C.Direction_m1_1:
            return C.Direction_1_m1;
          case C.Direction_m1_0:
            return C.Direction_1_0;
          case C.Direction_m1_m1:
            return C.Direction_1_1;
        }
        throw H.wrapException("unreachable");
      },
      toString$0: function(_) {
        switch (this) {
          case C.Direction_0_0:
            return "none";
          case C.Direction_0_m1:
            return "n";
          case C.Direction_1_m1:
            return "ne";
          case C.Direction_1_0:
            return "e";
          case C.Direction_1_1:
            return "se";
          case C.Direction_0_1:
            return "s";
          case C.Direction_m1_1:
            return "sw";
          case C.Direction_m1_0:
            return "w";
          case C.Direction_m1_m1:
            return "nw";
        }
        throw H.wrapException("unreachable");
      },
      $isVec: 1
    }
  }], ["", "package:piecemeal/src/line.dart",, G, {
    "^": "",
    _LineIterator: {
      "^": "Object;_line$_start,_line$_end,0_line$_current,0_error,0_primary,0_secondary,0_primaryStep,0_secondaryStep",
      get$current: function() {
        return this._line$_current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._line$_current.$add(0, this._primaryStep);
        this._line$_current = t1;
        t2 = this._error;
        t3 = this._secondary;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 + t3;
        this._error = t3;
        t2 = this._primary;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t3 * 2 >= t2) {
          this._line$_current = t1.$add(0, this._secondaryStep);
          t1 = this._error;
          t2 = this._primary;
          if (typeof t2 !== "number")
            return H.iae(t2);
          this._error = t1 - t2;
        }
        return true;
      },
      static: {
        _LineIterator$: function(_start, _end) {
          var t1, delta, t2, t3, t4, t5;
          t1 = new G._LineIterator(_start, _end);
          delta = _end.$sub(0, _start);
          t2 = delta.x;
          t3 = new L.Vec(J.get$sign$in(t2), 0);
          t1._primaryStep = t3;
          t4 = delta.y;
          t5 = new L.Vec(0, C.JSInt_methods.get$sign(t4));
          t1._secondaryStep = t5;
          t2 = Math.abs(t2);
          t4 = Math.abs(t4);
          t1._primary = t2;
          t1._secondary = t4;
          if (t4 > t2) {
            t1._primary = t4;
            t1._secondary = t2;
            t1._primaryStep = t5;
            t1._secondaryStep = t3;
          }
          t1._line$_current = _start;
          t1._error = 0;
          return t1;
        }
      }
    }
  }], ["", "package:piecemeal/src/rect.dart",, X, {
    "^": "",
    Rect: {
      "^": "IterableBase;pos<,size",
      get$x: function(_) {
        return this.pos.x;
      },
      get$y: function(_) {
        return this.pos.y;
      },
      get$width: function(_) {
        return this.size.x;
      },
      get$height: function(_) {
        return this.size.y;
      },
      get$left: function(_) {
        var t1, t2;
        t1 = this.pos.x;
        t2 = this.size.x;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return Math.min(t1, t1 + t2);
      },
      get$top: function(_) {
        var t1 = this.pos.y;
        return Math.min(t1, t1 + this.size.y);
      },
      get$right: function(_) {
        var t1, t2;
        t1 = this.pos.x;
        t2 = this.size.x;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return Math.max(t1, t1 + t2);
      },
      get$bottom: function(_) {
        var t1 = this.pos.y;
        return Math.max(t1, t1 + this.size.y);
      },
      get$center: function() {
        return new L.Vec(C.JSInt_methods._tdivFast$1(this.get$left(this) + this.get$right(this), 2), C.JSInt_methods._tdivFast$1(this.get$top(this) + this.get$bottom(this), 2));
      },
      toString$0: function(_) {
        return "(" + this.pos.toString$0(0) + ")-(" + this.size.toString$0(0) + ")";
      },
      inflate$1: function(distance) {
        var t1, t2, t3, t4, t5;
        t1 = this.pos;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = this.size;
        t4 = t3.x;
        t5 = distance * 2;
        if (typeof t4 !== "number")
          return t4.$add();
        return new X.Rect(new L.Vec(t2 - distance, t1.y - distance), new L.Vec(t4 + t5, t3.y + t5));
      },
      offset$2: function(_, x, y) {
        var t1, t2, t3;
        t1 = this.pos;
        t2 = t1.x;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof x !== "number")
          return H.iae(x);
        t3 = this.size;
        return new X.Rect(new L.Vec(t2 + x, t1.y + y), new L.Vec(t3.x, t3.y));
      },
      contains$1: function(_, object) {
        var t1, t2, t3, t4, t5;
        if (!J.getInterceptor$(object).$isVec)
          return false;
        t1 = object.x;
        t2 = this.pos;
        t3 = t2.x;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t1 < t3)
          return false;
        t4 = this.size;
        t5 = t4.x;
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (t1 >= t3 + t5)
          return false;
        t1 = object.y;
        t2 = t2.y;
        if (t1 < t2)
          return false;
        if (t1 >= t2 + t4.y)
          return false;
        return true;
      },
      containsRect$1: function(rect) {
        if (rect.get$left(rect) < this.get$left(this))
          return false;
        if (rect.get$right(rect) > this.get$right(this))
          return false;
        if (rect.get$top(rect) < this.get$top(this))
          return false;
        if (rect.get$bottom(rect) > this.get$bottom(this))
          return false;
        return true;
      },
      get$iterator: function(_) {
        return X.RectIterator$(this);
      },
      $asIterable: function() {
        return [L.Vec];
      },
      static: {
        Rect_intersect: function(a, b) {
          var left, right, $top, bottom;
          left = Math.max(a.get$left(a), b.get$left(b));
          right = Math.min(a.get$right(a), b.get$right(b));
          $top = Math.max(a.get$top(a), b.get$top(b));
          bottom = Math.min(a.get$bottom(a), b.get$bottom(b));
          return new X.Rect(new L.Vec(left, $top), new L.Vec(Math.max(0, right - left), Math.max(0, bottom - $top)));
        }
      }
    },
    RectIterator: {
      "^": "Object;_rect,0_rect$_x,0_rect$_y",
      get$current: function() {
        return new L.Vec(this._rect$_x, this._rect$_y);
      },
      moveNext$0: function() {
        var t1, t2;
        t1 = this._rect$_x;
        if (typeof t1 !== "number")
          return t1.$add();
        ++t1;
        this._rect$_x = t1;
        t2 = this._rect;
        if (t1 >= t2.get$right(t2)) {
          this._rect$_x = t2.pos.x;
          ++this._rect$_y;
        }
        return this._rect$_y < t2.get$bottom(t2);
      },
      static: {
        RectIterator$: function(_rect) {
          var t1, t2, t3;
          t1 = new X.RectIterator(_rect);
          t2 = _rect.pos;
          t3 = t2.x;
          if (typeof t3 !== "number")
            return t3.$sub();
          t1._rect$_x = t3 - 1;
          t1._rect$_y = t2.y;
          return t1;
        }
      }
    }
  }], ["", "package:piecemeal/src/rng.dart",, N, {
    "^": "",
    Rng: {
      "^": "Object;0_random",
      range$2: function(minOrMax, max) {
        if (max == null) {
          max = minOrMax;
          minOrMax = 0;
        }
        return this._random.nextInt$1(max - minOrMax) + minOrMax;
      },
      range$1: function(minOrMax) {
        return this.range$2(minOrMax, null);
      },
      inclusive$2: function(minOrMax, max) {
        if (max == null) {
          max = minOrMax;
          minOrMax = 0;
        }
        return this._random.nextInt$1(max + 1 - minOrMax) + minOrMax;
      },
      inclusive$1: function(minOrMax) {
        return this.inclusive$2(minOrMax, null);
      },
      float$2: function(_, minOrMax, max) {
        var t1;
        if (minOrMax == null)
          return this._random.nextDouble$0();
        else {
          t1 = this._random;
          if (max == null)
            return t1.nextDouble$0() * minOrMax;
          else
            return t1.nextDouble$0() * (max - minOrMax) + minOrMax;
        }
      },
      float$1: function($receiver, minOrMax) {
        return this.float$2($receiver, minOrMax, null);
      },
      float$0: function($receiver) {
        return this.float$2($receiver, null, null);
      },
      countFromFloat$1: function(range) {
        var count = C.JSNumber_methods.floor$0(range);
        return $.$get$rng().float$1(0, 1) < range - count ? count + 1 : count;
      },
      normal$0: function() {
        var t1, u, v, lengthSquared;
        do {
          t1 = $.$get$rng();
          u = t1.float$2(0, -1, 1);
          v = t1.float$2(0, -1, 1);
          lengthSquared = u * u + v * v;
        } while (lengthSquared >= 1);
        return u * Math.sqrt(-2 * Math.log(lengthSquared) / lengthSquared);
      },
      triangleInt$2: function(center, range) {
        var x;
        if (range < 0)
          throw H.wrapException(P.ArgumentError$('The argument "range" must be zero or greater.'));
        x = this.inclusive$1(range);
        if (x <= this.inclusive$1(range))
          return center + x;
        else
          return center - range - 1 + x;
      },
      taper$2: function(start, chanceOfIncrement) {
        while (true) {
          if (!(this._random.nextInt$1(chanceOfIncrement - 0) === 0))
            break;
          ++start;
        }
        return start;
      },
      static: {
        Rng$: function(seed) {
          var t1, t2;
          t1 = new N.Rng();
          t2 = P._Random$(seed);
          t1._random = t2;
          return t1;
        }
      }
    }
  }], ["", "package:piecemeal/src/vec.dart",, L, {
    "^": "",
    VecBase: {
      "^": "Object;x>,y>",
      get$kingLength: function() {
        var t1 = this.x;
        if (typeof t1 !== "number")
          return t1.abs$0();
        return Math.max(Math.abs(t1), Math.abs(this.y));
      },
      get$lengthSquared: function() {
        var t1, t2;
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = this.y;
        return t1 * t1 + t2 * t2;
      },
      get$length: function(_) {
        return Math.sqrt(this.get$lengthSquared());
      },
      $mul: function(_, other) {
        var t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        return new L.Vec(t1 * other, this.y * other);
      },
      $add: function(_, other) {
        var t1, t2;
        if (other instanceof L.VecBase) {
          t1 = this.x;
          t2 = other.x;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return new L.Vec(t1 + t2, this.y + other.y);
        } else if (typeof other === "number" && Math.floor(other) === other) {
          t1 = this.x;
          if (typeof t1 !== "number")
            return t1.$add();
          return new L.Vec(t1 + other, this.y + other);
        }
        throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
      },
      $sub: function(_, other) {
        var t1, t2;
        if (other instanceof L.VecBase) {
          t1 = this.x;
          t2 = other.x;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return new L.Vec(t1 - t2, this.y - other.y);
        }
        throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
      },
      $gt: function(_, other) {
        if (other instanceof L.VecBase)
          return this.get$lengthSquared() > other.get$lengthSquared();
        else if (typeof other === "number")
          return this.get$lengthSquared() > other * other;
        throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
      },
      $ge: function(_, other) {
        if (typeof other === "number")
          return this.get$lengthSquared() >= other * other;
        throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
      },
      $lt: function(_, other) {
        if (other instanceof L.VecBase)
          return this.get$lengthSquared() < other.get$lengthSquared();
        else if (typeof other === "number")
          return this.get$lengthSquared() < other * other;
        throw H.wrapException(P.ArgumentError$("Operand must be an int or VecBase."));
      },
      $le: function(_, other) {
        var t1 = this.get$lengthSquared();
        return t1 <= other * other;
      },
      toString$0: function(_) {
        return H.S(this.x) + ", " + this.y;
      }
    },
    Vec: {
      "^": "VecBase;x,y",
      get$hashCode: function(_) {
        var t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$xor();
        return (t1 ^ this.y) >>> 0 & 0x1FFFFFFF;
      },
      $eq: function(_, other) {
        var t1, t2;
        if (other == null)
          return false;
        if (other instanceof L.VecBase) {
          t1 = this.x;
          t2 = other.x;
          return (t1 == null ? t2 == null : t1 === t2) && this.y === other.y;
        }
        return false;
      }
    }
  }], ["", "main.dart",, F, {
    "^": "",
    addTerminal: function($name, w, h) {
      var element, t1, file, t2, t3, t4, t5, t6, e, terminal, button;
      element = W.CanvasElement_CanvasElement(null, null);
      t1 = W.Event;
      W._EventStreamSubscription$(element, "dblclick", H.functionTypeCheck(new F.addTerminal_closure(element), {func: 1, ret: -1, args: [t1]}), false, t1);
      file = "font_" + w;
      t1 = h == null;
      t2 = (!t1 ? file + ("_" + H.S(h)) : file) + ".png";
      t3 = t1 ? w : h;
      t4 = L.Glyph;
      t5 = M.Array2D$(80, 40, null, t4);
      t4 = M.Array2D$(80, 40, C.Glyph_kVM, t4);
      t6 = document;
      e = t6.createElement("img");
      e.src = t2;
      terminal = S.RetroTerminal$_(new D.Display(t5, t4), w, t3, element, e);
      t2 = $.$get$terminals();
      C.JSArray_methods.add$1(t2, new F.TerminalView($name, element, terminal, w, t1 ? w : h));
      button = t6.createElement("button");
      C.ButtonElement_methods.setInnerHtml$1(button, $name);
      t1 = W.MouseEvent;
      W._EventStreamSubscription$(button, "click", H.functionTypeCheck(new F.addTerminal_closure0($name, terminal), {func: 1, ret: -1, args: [t1]}), false, t1);
      J.get$children$x(t6.querySelector(".button-bar")).add$1(0, button);
    },
    main: function() {
      var t1, t2, t3, t4, t5, t6, t7, description, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, $content, font, fontIndex, i;
      $.$get$Items_types().defineTags$1("item");
      t1 = R.category(199, 10, null);
      t1.tag$1(0, "item");
      t2 = $.$get$Elements_earth();
      t1.toss$4$breakage$damage$element$range(10, 3, t2, 7);
      R.item("Rock", 1, C.Color_142_82_55, 1, null);
      t1 = R.category(252, 4, null);
      t1.tag$1(0, "item");
      t1.toss$3$breakage$damage$range(30, 2, 5);
      R.item("Skull", 1, C.Color_132_126_135, 1, null);
      t1 = R.category(162, null, null);
      t1.tag$1(0, "treasure/coin");
      t1._isTreasure = true;
      R.item("Copper Coins", 1, C.Color_122_44_24, null, 1);
      R.item("Bronze Coins", 7, C.Color_142_82_55, null, 8);
      R.item("Silver Coins", 11, C.Color_129_231_235, null, 20);
      R.item("Electrum Coins", 20, C.Color_255_238_168, null, 50);
      R.item("Gold Coins", 30, C.Color_222_156_33, null, 100);
      R.item("Platinum Coins", 40, C.Color_132_126_135, null, 300);
      t1 = R.category(36, null, null);
      t1.tag$1(0, "treasure/bar");
      t1._isTreasure = true;
      R.item("Copper Bar", 35, C.Color_122_44_24, null, 150);
      R.item("Bronze Bar", 50, C.Color_142_82_55, null, 500);
      R.item("Silver Bar", 60, C.Color_129_231_235, null, 800);
      R.item("Electrum Bar", 70, C.Color_255_238_168, null, 1200);
      R.item("Gold Bar", 80, C.Color_222_156_33, null, 2000);
      R.item("Platinum Bar", 90, C.Color_132_126_135, null, 3000);
      t1 = R.category(233, 20, null);
      t3 = $.$get$Elements_fire();
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 1;
      R.item("Flower", 1, C.Color_64_163_229, 1, null);
      R.item("Insect Wing", 1, C.Color_86_30_138, 1, null);
      R.item("Red Feather", 2, C.Color_204_35_57, 1, null);
      R.item("Black Feather", 2, C.Color_38_38_56, 1, null);
      t1 = R.category(233, 4, null);
      t1._destroyChance.$indexSet(0, t3, 20);
      t1._fuel = 3;
      R.item("Fur Pelt", 1, C.Color_142_82_55, 1, null);
      R.item("Fox Pelt", 2, C.Color_122_44_24, 1, null);
      t1 = R.category(161, null, null);
      t1.tag$1(0, "item/food");
      t1._destroyChance.$indexSet(0, t3, 20);
      t1._fuel = 3;
      t1 = R.item("Loa[f|ves] of Bread", 1, C.Color_189_144_108, 1, 4);
      t1._maxStack = 6;
      t1.food$1(200);
      t1 = R.category(172, null, "hit[s]");
      t1.tag$1(0, "item/light");
      t1.toss$1$breakage(70);
      t1 = R.item("Tallow Candle", 1, C.Color_189_144_108, 1, 6);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(2, t3, 8);
      t1.lightSource$2$level$range(2, 8);
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 20;
      t1 = R.item("Wax Candle", 4, C.Color_226_223_240, 1, 8);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(3, t3, 8);
      t1.lightSource$2$level$range(3, 10);
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 25;
      t1 = R.item("Oil Lamp", 4, C.Color_64_31_36, 1, 18);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(10, t3, 8);
      t1.lightSource$2$level$range(4, 13);
      t1._destroyChance.$indexSet(0, t3, 50);
      t1._fuel = 40;
      t1 = R.item("Torch[es]", 8, C.Color_142_82_55, 1, 16);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(6, t3, 10);
      t1.lightSource$2$level$range(5, 18);
      t1._destroyChance.$indexSet(0, t3, 60);
      t1._fuel = 60;
      t1 = R.item("Lantern", 15, C.Color_222_156_33, 0.3, 78);
      t1.toss$3$damage$element$range(5, t3, 5);
      t1.lightSource$2$level$range(6, 24);
      G.potions();
      G.scrolls();
      t1 = R.category(189, 3, null);
      t1.tag$1(0, "magic/book/sorcery");
      t1.toss$3$breakage$damage$range(25, 1, 3);
      t1._destroyChance.$indexSet(0, t3, 5);
      t1._fuel = 10;
      t1 = R.item('Spellbook "Elemental Primer"', 1, C.Color_84_0_39, 0.05, 100);
      t4 = P.String;
      t5 = [t4];
      t6 = H.setRuntimeTypeInfo(["Sense Items", "Flee", "Escape", "Disappear", "Icicle", "Brilliant Beam", "Windstorm", "Fire Barrier", "Tidal Wave"], t5);
      t1.toString;
      H.assertSubtype(t6, "$isList", t5, "$asList");
      t5 = M.Skill;
      t7 = H.getTypeArgumentByIndex(t6, 0);
      C.JSArray_methods.addAll$1(t1._skills, new H.MappedListIterable(t6, H.functionTypeCheck(Q.skills_Skills_find$closure(), {func: 1, ret: t5, args: [t7]}), [t7, t5]));
      t5 = R.category(225, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/club");
      t7 = t5._skills;
      t6 = $.$get$Skills__byName();
      C.JSArray_methods.add$1(t7, t6.$index(0, "Club Mastery"));
      t5.toss$2$breakage$range(25, 5);
      t5 = R.item("Stick", 1, C.Color_142_82_55, 0.5, 2);
      t5.weapon$2$heft(8, 6);
      t5.toss$1$damage(3);
      t5._destroyChance.$indexSet(0, t3, 10);
      t5._fuel = 10;
      t5 = R.item("Cudgel", 3, C.Color_132_126_135, 0.5, 20);
      t5.weapon$2$heft(10, 8);
      t5.toss$1$damage(4);
      t5._destroyChance.$indexSet(0, t3, 5);
      t5._fuel = 10;
      t5 = R.item("Club", 6, C.Color_64_31_36, 0.5, 40);
      t5.weapon$2$heft(12, 11);
      t5.toss$1$damage(5);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 10;
      t5 = R.category(237, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/staff");
      t5.toss$2$breakage$range(35, 4);
      t5 = R.item("Walking Stick", 2, C.Color_142_82_55, 0.5, 20);
      t5.weapon$2$heft(10, 9);
      t5.toss$1$damage(3);
      t5._destroyChance.$indexSet(0, t3, 5);
      t5._fuel = 15;
      t5 = R.item("Sta[ff|aves]", 5, C.Color_64_31_36, 0.5, 50);
      t5.weapon$2$heft(14, 11);
      t5.toss$1$damage(5);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 15;
      t5 = R.item("Quartersta[ff|aves]", 11, C.Color_132_126_135, 0.5, 80);
      t5.weapon$2$heft(24, 13);
      t5.toss$1$damage(8);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 15;
      t5 = R.category(243, null, "bash[es]");
      t5.tag$1(0, "equipment/weapon/hammer");
      t5.toss$2$breakage$range(15, 5);
      t5 = R.item("Hammer", 27, C.Color_142_82_55, 0.5, 120);
      t5.weapon$2$heft(32, 22);
      t5.toss$1$damage(12);
      t5 = R.item("Mattock", 39, C.Color_64_31_36, 0.5, 240);
      t5.weapon$2$heft(40, 26);
      t5.toss$1$damage(16);
      t5 = R.item("War Hammer", 45, C.Color_132_126_135, 0.5, 400);
      t5.weapon$2$heft(48, 30);
      t5.toss$1$damage(20);
      t5 = R.category(250, null, "bash[es]");
      t5.tag$1(0, "equipment/weapon/mace");
      t5.toss$2$breakage$range(15, 4);
      t5 = R.item("Morningstar", 24, C.Color_132_126_135, 0.5, 130);
      t5.weapon$2$heft(26, 17);
      t5.toss$1$damage(11);
      t5 = R.item("Mace", 33, C.Color_63_64_114, 0.5, 310);
      t5.weapon$2$heft(36, 23);
      t5.toss$1$damage(16);
      t5 = R.category(241, null, "whip[s]");
      t5.tag$1(0, "equipment/weapon/whip");
      t5.toss$2$breakage$range(25, 4);
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Whip Mastery"));
      t5 = R.item("Whip", 4, C.Color_142_82_55, 0.5, 40);
      t5.weapon$2$heft(10, 7);
      t5.toss$1$damage(1);
      t5._destroyChance.$indexSet(0, t3, 10);
      t5._fuel = 5;
      t5 = R.item("Chain Whip", 15, C.Color_132_126_135, 0.5, 230);
      t5.weapon$2$heft(18, 15);
      t5.toss$1$damage(2);
      t5 = R.item("Flail", 27, C.Color_63_64_114, 0.5, 350);
      t5.weapon$2$heft(28, 24);
      t5.toss$1$damage(4);
      t5 = R.category(209, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/dagger");
      t5.toss$2$breakage$range(2, 8);
      t5 = R.item("Kni[fe|ves]", 3, C.Color_38_38_56, 0.5, 20);
      t5.weapon$2$heft(8, 5);
      t5.toss$1$damage(8);
      t5 = R.item("Dirk", 4, C.Color_132_126_135, 0.5, 30);
      t5.weapon$2$heft(10, 6);
      t5.toss$1$damage(10);
      t5 = R.item("Dagger", 6, C.Color_64_163_229, 0.5, 50);
      t5.weapon$2$heft(12, 7);
      t5.toss$1$damage(12);
      t5 = R.item("Stiletto[es]", 10, C.Color_63_64_114, 0.5, 80);
      t5.weapon$2$heft(14, 6);
      t5.toss$1$damage(14);
      t5 = R.item("Rondel", 20, C.Color_129_231_235, 0.5, 130);
      t5.weapon$2$heft(16, 9);
      t5.toss$1$damage(16);
      t5 = R.item("Baselard", 30, C.Color_222_156_33, 0.5, 200);
      t5.weapon$2$heft(18, 11);
      t5.toss$1$damage(18);
      t5 = R.category(170, null, "slash[es]");
      t5.tag$1(0, "equipment/weapon/sword");
      t5.toss$2$breakage$range(20, 5);
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Swordfighting"));
      t5 = R.item("Rapier", 7, C.Color_38_38_56, 0.5, 140);
      t5.weapon$2$heft(20, 12);
      t5.toss$1$damage(4);
      t5 = R.item("Shortsword", 11, C.Color_63_64_114, 0.5, 230);
      t5.weapon$2$heft(22, 13);
      t5.toss$1$damage(6);
      t5 = R.item("Scimitar", 18, C.Color_132_126_135, 0.5, 370);
      t5.weapon$2$heft(24, 16);
      t5.toss$1$damage(9);
      t5 = R.item("Cutlass[es]", 24, C.Color_255_238_168, 0.5, 520);
      t5.weapon$2$heft(26, 17);
      t5.toss$1$damage(11);
      t5 = R.item("Falchion", 38, C.Color_129_231_235, 0.5, 750);
      t5.weapon$2$heft(28, 18);
      t5.toss$1$damage(15);
      t5 = R.category(186, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/spear");
      t5.toss$1$range(9);
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Spear Mastery"));
      t5 = R.item("Pointed Stick", 2, C.Color_64_31_36, 0.5, 10);
      t5.weapon$2$heft(10, 9);
      t5.toss$1$damage(9);
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 12;
      t5 = R.item("Spear", 7, C.Color_142_82_55, 0.5, 160);
      t5.weapon$2$heft(16, 13);
      t5.toss$1$damage(15);
      t5 = R.item("Angon", 14, C.Color_132_126_135, 0.5, 340);
      t5.weapon$2$heft(20, 19);
      t5.toss$1$damage(20);
      t5 = R.category(186, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/polearm");
      t5.toss$1$range(4);
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Spear Mastery"));
      t5 = R.item("Lance", 28, C.Color_64_163_229, 0.5, 550);
      t5.weapon$2$heft(24, 27);
      t5.toss$1$damage(20);
      t5 = R.item("Partisan", 35, C.Color_63_64_114, 0.5, 850);
      t5.weapon$2$heft(30, 29);
      t5.toss$1$damage(26);
      t5 = R.category(191, null, "chop[s]");
      t5.tag$1(0, "equipment/weapon/axe");
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Axe Mastery"));
      t5 = R.item("Hatchet", 6, C.Color_63_64_114, 0.5, 90);
      t5.weapon$2$heft(18, 10);
      t5.toss$2$damage$range(20, 8);
      t5 = R.item("Axe", 12, C.Color_142_82_55, 0.5, 210);
      t5.weapon$2$heft(25, 14);
      t5.toss$2$damage$range(24, 7);
      t5 = R.item("Valaska", 24, C.Color_132_126_135, 0.5, 330);
      t5.weapon$2$heft(32, 19);
      t5.toss$2$damage$range(26, 5);
      t5 = R.item("Battleaxe", 40, C.Color_38_38_56, 0.5, 550);
      t5.weapon$2$heft(39, 30);
      t5.toss$2$damage$range(28, 4);
      t5 = R.category(8976, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/bow");
      t5.toss$2$breakage$range(50, 5);
      C.JSArray_methods.add$1(t5._skills, t6.$index(0, "Archery"));
      t6 = R.item("Short Bow", 5, C.Color_142_82_55, 0.3, 150);
      t6.ranged$4$damage$heft$range("the arrow", 8, 11, 12);
      t6.toss$1$damage(2);
      t6._destroyChance.$indexSet(0, t3, 15);
      t6._fuel = 10;
      t6 = R.item("Longbow", 13, C.Color_64_31_36, 0.3, 250);
      t6.ranged$4$damage$heft$range("the arrow", 16, 20, 14);
      t6.toss$1$damage(3);
      t6._destroyChance.$indexSet(0, t3, 7);
      t6._fuel = 13;
      t6 = R.item("Crossbow", 28, C.Color_132_126_135, 0.3, 600);
      t6.ranged$4$damage$heft$range("the bolt", 24, 24, 16);
      t6.toss$1$damage(4);
      t6._destroyChance.$indexSet(0, t3, 4);
      t6._fuel = 14;
      t6 = R.category(201, null, null);
      t6.tag$1(0, "equipment/armor/helm");
      t6.toss$3$breakage$damage$range(10, 3, 5);
      t6 = R.item("Leather Cap", 4, C.Color_142_82_55, 0.5, 50);
      t6._armor = 2;
      t6._weight = 2;
      t6._destroyChance.$indexSet(0, t3, 12);
      t6._fuel = 2;
      t6 = R.item("Chainmail Coif", 7, C.Color_38_38_56, 0.5, 160);
      t6._armor = 3;
      t6._weight = 3;
      t6 = R.item("Steel Cap", 12, C.Color_63_64_114, 0.5, 200);
      t6._armor = 4;
      t6._weight = 3;
      t6 = R.item("Visored Helm", 20, C.Color_132_126_135, 0.5, 350);
      t6._armor = 5;
      t6._weight = 6;
      t6 = R.item("Great Helm", 30, C.Color_226_223_240, 0.5, 550);
      t6._armor = 6;
      t6._weight = 8;
      R.category(244, null, null).tag$1(0, "equipment/armor/body/robe");
      t6 = R.item("Robe", 2, C.Color_21_87_194, 0.5, 20);
      t6._armor = 4;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 15);
      t6._fuel = 8;
      t6 = R.item("Fur-lined Robe", 6, C.Color_0_64_39, 0.25, 80);
      t6._armor = 6;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 12);
      t6._fuel = 8;
      R.category(246, null, null).tag$1(0, "equipment/armor/body");
      t6 = R.item("Cloth Shirt", 2, C.Color_189_144_108, 0.5, 40);
      t6._armor = 3;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 15);
      t6._fuel = 4;
      t6 = R.item("Leather Shirt", 5, C.Color_142_82_55, 0.5, 90);
      t6._armor = 6;
      t6._weight = 1;
      t6._destroyChance.$indexSet(0, t3, 12);
      t6._fuel = 4;
      t6 = R.item("Jerkin", 7, C.Color_132_126_135, 0.5, 130);
      t6._armor = 8;
      t6._weight = 1;
      t6 = R.item("Leather Armor", 10, C.Color_64_31_36, 0.5, 240);
      t6._armor = 11;
      t6._weight = 2;
      t6._destroyChance.$indexSet(0, t3, 10);
      t6._fuel = 4;
      t6 = R.item("Padded Armor", 14, C.Color_38_38_56, 0.5, 320);
      t6._armor = 15;
      t6._weight = 3;
      t6._destroyChance.$indexSet(0, t3, 8);
      t6._fuel = 4;
      t6 = R.item("Studded Armor", 17, C.Color_63_64_114, 0.5, 400);
      t6._armor = 22;
      t6._weight = 4;
      t6._destroyChance.$indexSet(0, t3, 6);
      t6._fuel = 4;
      R.category(242, null, null).tag$1(0, "equipment/armor/body");
      t6 = R.item("Mail Hauberk", 20, C.Color_38_38_56, 0.5, 500);
      t6._armor = 28;
      t6._weight = 5;
      t6 = R.item("Scale Mail", 23, C.Color_132_126_135, 0.5, 700);
      t6._armor = 36;
      t6._weight = 7;
      R.category(198, null, null).tag$1(0, "equipment/armor/cloak");
      t6 = R.item("Cloak", 3, C.Color_26_46_150, 0.5, 70);
      t6._armor = 2;
      t6._weight = 1;
      t6._destroyChance.$indexSet(0, t3, 20);
      t6._fuel = 5;
      t6 = R.item("Fur Cloak", 5, C.Color_64_31_36, 0.2, 140);
      t6._armor = 3;
      t6._weight = 1;
      t6._destroyChance.$indexSet(0, t3, 16);
      t6._fuel = 5;
      t6 = R.category(197, null, null);
      t6.tag$1(0, "equipment/armor/gloves");
      t6.toss$3$breakage$damage$range(20, 5, 4);
      t6 = R.item("Pair[s] of Gloves", 4, C.Color_189_144_108, 0.5, 170);
      t6._armor = 2;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 7);
      t6._fuel = 2;
      t6 = R.item("Set[s] of Bracers", 17, C.Color_64_31_36, 0.5, 480);
      t6._armor = 3;
      t6._weight = 1;
      t6 = R.item("Pair[s] of Gauntlets", 23, C.Color_38_38_56, 0.5, 800);
      t6._armor = 4;
      t6._weight = 2;
      t6 = R.category(230, null, null);
      t6.tag$1(0, "equipment/armor/shield");
      t6.toss$3$breakage$damage$range(10, 5, 8);
      t6 = R.item("Small Leather Shield", 3, C.Color_64_31_36, 0.5, 170);
      t6._armor = 3;
      t6._weight = 2;
      t6._destroyChance.$indexSet(0, t3, 7);
      t6._fuel = 14;
      t6 = R.item("Wooden Targe", 8, C.Color_189_144_108, 0.5, 250);
      t6._armor = 4;
      t6._weight = 4;
      t6._destroyChance.$indexSet(0, t3, 14);
      t6._fuel = 20;
      t6 = R.item("Large Leather Shield", 17, C.Color_142_82_55, 0.5, 320);
      t6._armor = 5;
      t6._weight = 5;
      t6._destroyChance.$indexSet(0, t3, 7);
      t6._fuel = 17;
      t6 = R.item("Steel Buckler", 27, C.Color_38_38_56, 0.5, 450);
      t6._armor = 6;
      t6._weight = 6;
      t6 = R.item("Kite Shield", 35, C.Color_132_126_135, 0.5, 650);
      t6._armor = 7;
      t6._weight = 9;
      R.category(236, null, null).tag$1(0, "equipment/armor/boots");
      t6 = R.item("Pair[s] of Sandals", 2, C.Color_142_82_55, 0.24, 10);
      t6._armor = 1;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 20);
      t6._fuel = 3;
      t6 = R.item("Pair[s] of Shoes", 8, C.Color_64_31_36, 0.3, 30);
      t6._armor = 2;
      t6._weight = null;
      t6._destroyChance.$indexSet(0, t3, 14);
      t6._fuel = 3;
      R.category(196, null, null).tag$1(0, "equipment/armor/boots");
      t6 = R.item("Pair[s] of Boots", 14, C.Color_142_82_55, 0.3, 70);
      t6._armor = 6;
      t6._weight = 1;
      t6 = R.item("Pair[s] of Plated Boots", 22, C.Color_63_64_114, 0.3, 250);
      t6._armor = 8;
      t6._weight = 2;
      t6 = R.item("Pair[s] of Greaves", 47, C.Color_132_126_135, 0.25, 350);
      t6._armor = 12;
      t6._weight = 3;
      R.finishItem();
      Y.Themes_defineTags($.$get$Monsters_breeds(), "monster", B.Breed);
      t6 = R.family("a", null, "fearless", null, null, null, null);
      t6.groups$1("bug");
      t6._vision = 4;
      t6._hearing = 2;
      t6.placeIn$1("passage");
      t6._stain = $.$get$Tiles_spiderweb();
      t6 = R.breed("brown spider", 5, C.Color_142_82_55, 6, 30, null, 40, 0);
      t5 = $.$get$Elements_poison();
      C.JSArray_methods.add$1(t6._attacks, U.Attack$(null, "bite[s]", 5, 0, t5));
      t6 = $.$get$collapseNewlines();
      description = H.stringReplaceAllUnchecked("Like a large dog, if the dog had eight articulated legs, eight\n  glittering eyes, and wanted nothing more than to kill you.", t6, " ");
      $._builder._description = description;
      C.JSArray_methods.add$1(R.breed("gray spider", 7, C.Color_63_64_114, 12, 30, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 5, 0, t5));
      t1 = R.breed("spiderling", 9, C.Color_226_223_240, 8, 35, null, 50, 0);
      t1.count$2(2, 5);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 5, 0, t5));
      C.JSArray_methods.add$1(R.breed("giant spider", 12, C.Color_26_46_150, 40, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 5, 0, t5));
      t1 = R.family("b", null, null, null, null, 1, null);
      t1.groups$1("animal");
      t1._vision = 2;
      t1._hearing = 8;
      t7 = t1._motility;
      t8 = $.$get$Motility_fly();
      t7 = t7._bitMask;
      t8 = t8._bitMask;
      t1._motility = new Q.Motility(t7 | t8);
      t1.placeIn$2("room", "passage");
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("brown bat", 1, C.Color_142_82_55, 3, null, 0.5, 50, 0);
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(20, "{1} flits out of the way."));
      t1.count$2(2, 4);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
      C.JSArray_methods.add$1(R.breed("giant bat", 4, C.Color_64_31_36, 24, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      t1 = R.breed("cave bat", 6, C.Color_132_126_135, 30, null, null, 40, 0);
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(20, "{1} flits out of the way."));
      t1.count$2(2, 5);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      t1 = R.family("c", 25, null, null, 25, null, 20);
      t1.groups$1("animal");
      t1._vision = 5;
      t1._hearing = 10;
      t1.placeIn$2("room", "passage");
      t1 = R.breed("mangy cur", 2, C.Color_255_238_168, 11, null, null, null, 0);
      t1.count$1(4);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(6, 10));
      t1.drop$2$percent("Fur Pelt", 20);
      t1 = R.breed("wild dog", 4, C.Color_132_126_135, 20, null, null, null, 0);
      t1.count$1(4);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(8, 10));
      t1.drop$2$percent("Fur Pelt", 20);
      t1 = R.breed("mongrel", 7, C.Color_179_74_4, 28, null, null, null, 0);
      t1.count$2(2, 5);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 8, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1.drop$2$percent("Fur Pelt", 20);
      t1 = R.breed("wolf", 26, C.Color_226_223_240, 60, null, null, null, 0);
      t1.count$2(3, 6);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 12, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1 = R.breed("varg", 30, C.Color_63_64_114, 80, null, null, null, 0);
      t1.count$2(2, 6);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 16, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1 = R.breed("Skoll", 36, C.Color_222_156_33, 200, null, null, null, 0);
      t1._flags = "unique";
      t1.minion$3("varg", 3, 5);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 20, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1 = R.breed("Hati", 40, C.Color_21_87_194, 250, null, null, null, 0);
      t1._flags = "unique";
      t1.minion$3("varg", 3, 5);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 23, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1 = R.breed("Fenrir", 44, C.Color_38_38_56, 300, null, null, null, 0);
      t1._flags = "unique";
      t1.minion$3("varg", 3, 5);
      t1.minion$1("Skoll");
      t1.minion$1("Hati");
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 26, 0, null));
      C.JSArray_methods.add$1(t1._moves, new U.HowlMove(10, 10));
      t1 = R.family("d", null, null, null, null, null, null);
      t1.groups$1("dragon");
      t1._vision = 16;
      t1._hearing = 10;
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(20, "{2} [is|are] deflected by its scales."));
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("green dragon", 60, C.Color_131_158_13, 350, null, null, null, 0);
      t7 = t1._attacks;
      C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 25, 0, null));
      t1.drop$2$count("treasure", 7);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 4);
      t1 = R.breed("blue dragon", 65, C.Color_226_223_240, 400, null, null, null, 0);
      t7 = t1._attacks;
      C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 25, 0, null));
      t1.toString;
      t7 = $.$get$Elements_water();
      t9 = U.Attack$(new O.Noun("the water"), "blasts", 70, 10, t7);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t9, 5));
      t1.drop$2$count("treasure", 8);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 5);
      t1 = R.breed("white dragon", 70, C.Color_226_223_240, 500, null, null, null, 0);
      t9 = t1._attacks;
      C.JSArray_methods.add$1(t9, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t9, U.Attack$(null, "claw[s]", 25, 0, null));
      t1.toString;
      t9 = $.$get$Elements_cold();
      t10 = U.Attack$(new O.Noun("the ice"), "freezes", 80, 10, t9);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t10, 5));
      t1.drop$2$count("treasure", 8);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 5);
      t1 = R.breed("purple dragon", 75, C.Color_86_30_138, 600, null, null, null, 0);
      t10 = t1._attacks;
      C.JSArray_methods.add$1(t10, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t10, U.Attack$(null, "claw[s]", 25, 0, null));
      t1.toString;
      t10 = $.$get$Elements_lightning();
      t11 = U.Attack$(new O.Noun("the lightning"), "shocks", 100, 10, t10);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t11, 5));
      t1.drop$2$count("treasure", 8);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 5);
      t1 = R.breed("red dragon", 75, C.Color_204_35_57, 600, null, null, null, 0);
      t11 = t1._attacks;
      C.JSArray_methods.add$1(t11, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t11, U.Attack$(null, "claw[s]", 25, 0, null));
      t1.toString;
      t11 = U.Attack$(new O.Noun("the flame"), "burns", 100, 10, t3);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t11, 5));
      t1.drop$2$count("treasure", 8);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 5);
      t1 = R.breed("gold dragon", 80, C.Color_222_156_33, 700, null, null, null, 0);
      t11 = t1._attacks;
      C.JSArray_methods.add$1(t11, U.Attack$(null, "bite[s]", 32, 0, null));
      C.JSArray_methods.add$1(t11, U.Attack$(null, "claw[s]", 27, 0, null));
      t1.toString;
      t11 = $.$get$Elements_light();
      t12 = U.Attack$(new O.Noun("the light"), "sears", 120, 10, t11);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t12, 5));
      t1.drop$2$count("treasure", 8);
      t1.drop$2$count("magic", 4);
      t1.drop$2$count("equipment", 5);
      t1 = R.family("e", null, "immobile", null, null, null, null);
      t1._vision = 16;
      t1._hearing = 1;
      t1.placeIn$1("laboratory");
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(10, "{1} blinks out of the way."));
      t1._motility = new Q.Motility(t1._motility._bitMask | t8);
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("lazy eye", 5, C.Color_64_163_229, 12, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
      t1._bolt$6$damage$range$rate("the spark", "zaps", t10, 12, 8, 6);
      t1 = R.breed("mad eye", 9, C.Color_255_122_105, 40, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
      t1.toString;
      t12 = $.$get$Elements_air();
      t1._bolt$6$damage$range$rate("the wind", "blows", t12, 15, 8, 6);
      t1 = R.breed("floating eye", 15, C.Color_255_238_168, 60, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "stare[s] at", 10, 0, null));
      t1._bolt$6$damage$range$rate("the spark", "zaps", t10, 24, 8, 4);
      C.JSArray_methods.add$1(t1._moves, new S.TeleportMove(7, 10));
      t1 = R.breed("baleful eye", 20, C.Color_179_74_4, 80, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "gaze[s] into", 12, 0, null));
      t1._bolt$6$damage$range$rate("the flame", "burns", t3, 20, 8, 4);
      t1._bolt$6$damage$range$rate("the jet", "splashes", t7, 20, 8, 4);
      C.JSArray_methods.add$1(t1._moves, new S.TeleportMove(9, 10));
      t1 = R.breed("malevolent eye", 30, C.Color_204_35_57, 120, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "gaze[s] into", 20, 0, null));
      t1._bolt$6$damage$range$rate("the light", "sears", t11, 20, 10, 4);
      t13 = $.$get$Elements_dark();
      t1._bolt$6$damage$range$rate("the darkness", "crushes", t13, 20, 10, 4);
      t14 = U.Attack$(new O.Noun("the flame"), "burns", 30, 10, t3);
      t1 = t1._moves;
      C.JSArray_methods.add$1(t1, new Y.ConeMove(t14, 7));
      C.JSArray_methods.add$1(t1, new S.TeleportMove(9, 10));
      t1 = R.breed("murderous eye", 40, C.Color_84_0_39, 180, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "gaze[s] into", 30, 0, null));
      t1.toString;
      t14 = $.$get$Elements_acid();
      t1._bolt$6$damage$range$rate("the acid", "burns", t14, 40, 8, 7);
      t1._bolt$6$damage$range$rate("the stone", "hits", t2, 40, 8, 7);
      t15 = U.Attack$(new O.Noun("the ice"), "freezes", 30, 10, t9);
      t1 = t1._moves;
      C.JSArray_methods.add$1(t1, new Y.ConeMove(t15, 7));
      C.JSArray_methods.add$1(t1, new S.TeleportMove(9, 10));
      t1 = R.breed("watcher", 60, C.Color_132_126_135, 300, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "see[s]", 50, 0, null));
      t1._bolt$6$damage$range$rate("the light", "sears", t11, 40, 10, 7);
      t15 = U.Attack$(new O.Noun("the light"), "sears", 30, 10, t11);
      t16 = t1._moves;
      C.JSArray_methods.add$1(t16, new Y.ConeMove(t15, 7));
      t1._bolt$6$damage$range$rate("the darkness", "crushes", t13, 50, 10, 7);
      C.JSArray_methods.add$1(t16, new Y.ConeMove(U.Attack$(new O.Noun("the darkness"), "crushes", 40, 10, t13), 7));
      t16 = R.family("f", null, null, null, null, null, null);
      t16._vision = 10;
      t16._hearing = 8;
      t16.placeIn$2("room", "passage");
      t16.groups$1("animal");
      t16 = R.breed("stray cat", 1, C.Color_222_156_33, 9, null, null, 30, 1)._attacks;
      C.JSArray_methods.add$1(t16, U.Attack$(null, "bite[s]", 5, 0, null));
      C.JSArray_methods.add$1(t16, U.Attack$(null, "scratch[es]", 4, 0, null));
      t16 = R.family("g", null, null, null, 10, null, null);
      t16._vision = 8;
      t16._hearing = 4;
      t16.groups$1("goblin");
      t1 = t16._motility;
      t15 = $.$get$Motility_door();
      t1 = t1._bitMask;
      t15 = t15._bitMask;
      t16._motility = new Q.Motility(t1 | t15);
      t16._emanationLevel = 2;
      t16 = R.breed("goblin peon", 4, C.Color_189_144_108, 26, null, null, 20, 0);
      t16.count$1(4);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "stab[s]", 8, 0, null));
      C.JSArray_methods.add$1(t16._moves, new R.MissiveMove(C.Missive_1, 8));
      t16.drop$2$percent("treasure", 30);
      t16.drop$2$percent("spear", 20);
      t16.drop$2$percent("healing", 10);
      t16 = R.breed("goblin archer", 6, C.Color_22_117_38, 32, null, null, null, 0);
      t16.count$1(2);
      t16.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "stab[s]", 4, 0, null));
      t1 = $.$get$Element_none();
      t16._bolt$6$damage$range$rate("the arrow", "hits", t1, 8, 8, 3);
      t16.drop$2$percent("treasure", 30);
      t16.drop$2$percent("bow", 30);
      t16.drop$2$percent("dagger", 15);
      t16.drop$2$percent("healing", 5);
      t16 = R.breed("goblin fighter", 6, C.Color_142_82_55, 58, null, null, null, 0);
      t16.count$1(2);
      t16.minion$3("goblin archer", 0, 1);
      t16.minion$3("goblin peon", 0, 3);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "stab[s]", 12, 0, null));
      t16.drop$2$percent("treasure", 30);
      t16.drop$2$percent("spear", 20);
      t16.drop$2$percent("armor", 20);
      t16.drop$2$percent("resistance", 5);
      t16.drop$2$percent("healing", 5);
      t16 = R.breed("goblin warrior", 8, C.Color_132_126_135, 68, null, null, null, 0);
      t16.count$1(2);
      t16.minion$3("goblin fighter", 0, 1);
      t16.minion$3("goblin archer", 0, 1);
      t16.minion$3("goblin peon", 0, 3);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "stab[s]", 16, 0, null));
      t16.drop$2$percent("treasure", 35);
      t16.drop$2$percent("axe", 20);
      t16.drop$2$percent("armor", 20);
      t16.drop$2$percent("resistance", 5);
      t16.drop$2$percent("healing", 5);
      t16._flags = "protective";
      t16 = R.breed("goblin mage", 9, C.Color_26_46_150, 50, null, null, null, 0);
      t16.placeIn$1("laboratory");
      t16.minion$3("goblin fighter", 0, 1);
      t16.minion$3("goblin archer", 0, 1);
      t16.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "whip[s]", 7, 0, null));
      t16._bolt$6$damage$range$rate("the flame", "burns", t3, 12, 8, 12);
      t16._bolt$6$damage$range$rate("the spark", "zaps", t10, 16, 8, 12);
      t16.drop$2$percent("treasure", 30);
      t16.drop$2$percent("robe", 20);
      t16.drop$2$percent("whip", 10);
      t16.drop$2$percent("magic", 30);
      t16 = R.breed("goblin ranger", 12, C.Color_0_64_39, 60, null, null, null, 0);
      t16.minion$3("goblin mage", 0, 1);
      t16.minion$3("goblin fighter", 0, 1);
      t16.minion$3("goblin archer", 0, 1);
      t16.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "stab[s]", 10, 0, null));
      t16._bolt$6$damage$range$rate("the arrow", "hits", t1, 12, 8, 3);
      t16.drop$2$percent("treasure", 20);
      t16.drop$2$percent("bow", 30);
      t16.drop$2$percent("armor", 20);
      t16.drop$2$percent("magic", 20);
      t16 = R.breed("Erlkonig, the Goblin Prince", 14, C.Color_38_38_56, 120, null, null, null, 0);
      t16.placeIn$1("great-hall");
      t16._pronoun = C.Pronoun_he_him_his;
      t16.minion$3("goblin mage", 1, 2);
      t16.minion$3("goblin fighter", 1, 3);
      t16.minion$3("goblin archer", 1, 3);
      t16.minion$3("goblin peon", 2, 4);
      t17 = t16._attacks;
      C.JSArray_methods.add$1(t17, U.Attack$(null, "hit[s]", 10, 0, null));
      C.JSArray_methods.add$1(t17, U.Attack$(null, "slash[es]", 14, 0, null));
      t16._bolt$6$damage$range$rate("the darkness", "crushes", t13, 20, 10, 20);
      t16.drop$2$count("treasure", 3);
      t16.drop$3$count$depthOffset("equipment", 2, 3);
      t16.drop$3$count$depthOffset("magic", 3, 4);
      t16._flags = "protective unique";
      t16 = R.family("i", null, "fearless", null, 40, null, 3);
      t16.groups$1("bug");
      t16._vision = 5;
      t16._hearing = 2;
      t16.placeIn$2("room", "passage");
      t16 = R.breed("giant cockroach[es]", 1, C.Color_64_31_36, 1, null, 0.4, null, 0);
      t16.placeIn$2("food", "storage");
      t16.count$2(2, 5);
      t16._location = C.SpawnLocation_3;
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 2, 0, null));
      t17 = L.SpawnMove$(6, null);
      C.JSArray_methods.add$1(t16._moves, t17);
      description = H.stringReplaceAllUnchecked("It's not quite as easy to squash one of these when it's as long as\n      your arm.", t6, " ");
      $._builder._description = description;
      t16 = R.breed("giant centipede", 3, C.Color_204_35_57, 14, null, null, 20, 2)._attacks;
      C.JSArray_methods.add$1(t16, U.Attack$(null, "crawl[s] on", 4, 0, null));
      C.JSArray_methods.add$1(t16, U.Attack$(null, "bite[s]", 8, 0, null));
      t16 = R.breed("firefly", 8, C.Color_179_74_4, 10, null, null, 70, 1);
      t16.placeIn$1("aquatic");
      t16.count$2(3, 8);
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "bite[s]", 12, 0, t3));
      t16 = R.family("j", null, "fearless", 0.7, 30, -1, null);
      t16.groups$1("jelly");
      t16._vision = 3;
      t16._hearing = 1;
      t16.placeIn$1("laboratory");
      t16._location = C.SpawnLocation_2;
      t16.count$1(4);
      t16 = R.breed("green jelly", 1, C.Color_131_158_13, 5, null, null, null, 0);
      t17 = $.$get$Tiles_greenJellyStain();
      t16._stain = t17;
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 3, 0, null));
      t16 = R.family("j", null, "fearless immobile", 0.6, null, null, null);
      t16.groups$1("jelly");
      t16._vision = 2;
      t16._hearing = 1;
      t16.placeIn$1("laboratory");
      t16._location = C.SpawnLocation_3;
      t16.count$1(4);
      t16 = R.breed("green slime", 2, C.Color_22_117_38, 10, null, null, null, 0);
      t16._stain = t17;
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 4, 0, null));
      t16.toString;
      t18 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t16._moves, t18);
      t18 = R.breed("frosty slime", 4, C.Color_226_223_240, 14, null, null, null, 0);
      t18._stain = $.$get$Tiles_whiteJellyStain();
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t9));
      t18.toString;
      t16 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t18._moves, t16);
      t16 = R.breed("mud slime", 6, C.Color_142_82_55, 20, null, null, null, 0);
      t16._stain = $.$get$Tiles_brownJellyStain();
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 8, 0, t2));
      t16.toString;
      t18 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t16._moves, t18);
      t18 = R.breed("smoking slime", 15, C.Color_204_35_57, 30, null, null, null, 0);
      t18._emanationLevel = 4;
      t18._stain = $.$get$Tiles_redJellyStain();
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "crawl[s] on", 10, 0, t3));
      t18.toString;
      t16 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t18._moves, t16);
      t16 = R.breed("sparkling slime", 20, C.Color_86_30_138, 40, null, null, null, 0);
      t16._emanationLevel = 3;
      t16._stain = $.$get$Tiles_violetJellyStain();
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t10));
      t16.toString;
      t18 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t16._moves, t18);
      t18 = R.breed("caustic slime", 25, C.Color_129_217_117, 50, null, null, null, 0);
      t18._stain = t17;
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "crawl[s] on", 13, 0, t14));
      t18.toString;
      t16 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t18._moves, t16);
      t16 = R.breed("virulent slime", 35, C.Color_0_64_39, 60, null, null, null, 0);
      t16._stain = t17;
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 14, 0, t5));
      t16.toString;
      t17 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t16._moves, t17);
      t17 = R.breed("ectoplasm", 45, C.Color_38_38_56, 40, null, null, null, 0);
      t17._stain = $.$get$Tiles_grayJellyStain();
      t16 = $.$get$Elements_spirit();
      C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 15, 0, t16));
      t17.toString;
      t18 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t17._moves, t18);
      t18 = R.family("k", null, "cowardly", null, 15, null, null);
      t18.groups$1("kobold");
      t18._vision = 10;
      t18._hearing = 4;
      t18 = R.breed("scurrilous imp", 1, C.Color_255_122_105, 8, null, null, 20, 0);
      t18.count$1(2);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "club[s]", 4, 0, null));
      t17 = t18._moves;
      C.JSArray_methods.add$1(t17, new R.MissiveMove(C.Missive_1, 5));
      C.JSArray_methods.add$1(t17, new X.HasteMove(10, 1, 5));
      t18.drop$2$percent("treasure", 20);
      t18.drop$2$percent("club", 40);
      t18.drop$2$percent("speed", 30);
      t18 = R.breed("vexing imp", 2, C.Color_86_30_138, 10, null, null, null, 0);
      t18.count$1(2);
      t18.minion$3("scurrilous imp", 0, 1);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
      C.JSArray_methods.add$1(t18._moves, new R.MissiveMove(C.Missive_1, 5));
      t18._bolt$6$damage$range$rate("the spark", "zaps", t10, 6, 8, 5);
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("teleportation", 50);
      R.family("k", null, null, null, 20, null, null).groups$1("kobold");
      t18 = R.breed("kobold", 3, C.Color_204_35_57, 12, null, null, null, 0);
      t18.count$1(3);
      t18.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "poke[s]", 4, 0, null));
      C.JSArray_methods.add$1(t18._moves, new S.TeleportMove(6, 10));
      t18.drop$2$percent("equipment", 20);
      t18.drop$2$percent("magic", 40);
      t18 = R.breed("kobold shaman", 4, C.Color_26_46_150, 16, null, null, null, 0);
      t18.placeIn$1("laboratory");
      t18.count$1(2);
      t18.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 4, 0, null));
      t18._bolt$6$damage$range$rate("the jet", "splashes", t7, 6, 8, 5);
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("robe", 20);
      t18.drop$2$percent("magic", 40);
      t18 = R.breed("kobold trickster", 5, C.Color_222_156_33, 20, null, null, null, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 5, 0, null));
      t17 = t18._moves;
      C.JSArray_methods.add$1(t17, new R.MissiveMove(C.Missive_1, 5));
      t18._bolt$6$damage$range$rate("the spark", "zaps", t10, 8, 8, 5);
      C.JSArray_methods.add$1(t17, new S.TeleportMove(6, 7));
      C.JSArray_methods.add$1(t17, new X.HasteMove(10, 1, 7));
      t18.drop$2$percent("treasure", 45);
      t18.drop$2$percent("magic", 20);
      t18.drop$2$percent("magic", 40);
      t18 = R.breed("kobold priest", 6, C.Color_21_87_194, 25, null, null, null, 0);
      t18.count$1(2);
      t18.minion$3("kobold", 1, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "club[s]", 6, 0, null));
      t17 = t18._moves;
      C.JSArray_methods.add$1(t17, new O.HealMove(10, 15));
      t18._bolt$6$damage$range$rate("the flame", "burns", t3, 8, 8, 10);
      C.JSArray_methods.add$1(t17, new X.HasteMove(10, 1, 7));
      t18.drop$2$percent("treasure", 35);
      t18.drop$2$percent("club", 40);
      t18.drop$2$percent("robe", 20);
      t18.drop$2$percent("magic", 40);
      t18 = R.breed("imp incanter", 7, C.Color_189_106_235, 18, null, null, null, 0);
      t18.placeIn$1("laboratory");
      t18.count$1(2);
      t18.minion$3("kobold", 1, 3);
      t18.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
      C.JSArray_methods.add$1(t18._moves, new R.MissiveMove(C.Missive_1, 6));
      t18._bolt$6$damage$range$rate("the flame", "burns", t3, 10, 8, 5);
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("robe", 20);
      t18.drop$2$percent("magic", 50);
      t18._flags = "cowardly";
      t18 = R.breed("imp warlock", 8, C.Color_56_16_125, 40, null, null, null, 0);
      t18.placeIn$1("laboratory");
      t18.minion$3("imp incanter", 1, 3);
      t18.minion$3("kobold", 1, 3);
      t18.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
      t18._bolt$6$damage$range$rate("the ice", "freezes", t9, 12, 8, 8);
      t18._bolt$6$damage$range$rate("the flame", "burns", t3, 12, 8, 8);
      t18.drop$2$percent("treasure", 35);
      t18.drop$2$percent("staff", 40);
      t18.drop$2$percent("robe", 20);
      t18.drop$3$count$percent("magic", 2, 60);
      t18 = R.breed("Feng", 10, C.Color_179_74_4, 60, null, null, 10, 1);
      t18._pronoun = C.Pronoun_he_him_his;
      t18.minion$3("imp warlock", 1, 2);
      t18.minion$3("imp incanter", 1, 2);
      t18.minion$3("kobold priest", 1, 2);
      t18.minion$3("kobold", 1, 3);
      t18.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
      t17 = t18._moves;
      C.JSArray_methods.add$1(t17, new R.MissiveMove(C.Missive_1, 7));
      C.JSArray_methods.add$1(t17, new S.TeleportMove(6, 5));
      C.JSArray_methods.add$1(t17, new S.TeleportMove(30, 50));
      C.JSArray_methods.add$1(t17, new Y.ConeMove(U.Attack$(new O.Noun("the lightning"), "shocks", 12, 10, t10), 8));
      t18.drop$2$count("treasure", 2);
      t18.drop$3$depthOffset$percent("spear", 5, 80);
      t18.drop$3$count$depthOffset("armor", 2, 5);
      t18.drop$3$count$depthOffset("magic", 3, 5);
      t18._flags = "unique";
      t18 = R.family("p", null, null, null, 10, null, 14);
      t18.groups$1("human");
      t18._vision = 10;
      t18._hearing = 5;
      t18._motility = new Q.Motility(t18._motility._bitMask | t15);
      t18._emanationLevel = 2;
      t18 = R.breed("Harold the Misfortunate", 1, C.Color_189_106_235, 20, null, null, null, 0);
      t18._pronoun = C.Pronoun_he_him_his;
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
      C.JSArray_methods.add$1(t18._moves, new R.MissiveMove(C.Missive_0, 5));
      t18.drop$2$percent("treasure", 80);
      t18.drop$3$depthOffset$percent("weapon", 4, 50);
      t18.drop$3$depthOffset$percent("armor", 4, 60);
      t18.drop$3$depthOffset$percent("magic", 4, 30);
      t18._flags = "unique";
      t18 = R.breed("hapless adventurer", 1, C.Color_255_238_168, 14, 15, null, 30, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
      C.JSArray_methods.add$1(t18._moves, new R.MissiveMove(C.Missive_0, 12));
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("weapon", 50);
      t18.drop$2$percent("armor", 60);
      t18.drop$2$percent("magic", 30);
      t18._flags = "cowardly";
      t18 = R.breed("simpering knave", 2, C.Color_179_74_4, 17, null, null, null, 0);
      t17 = t18._attacks;
      C.JSArray_methods.add$1(t17, U.Attack$(null, "hit[s]", 2, 0, null));
      C.JSArray_methods.add$1(t17, U.Attack$(null, "stab[s]", 4, 0, null));
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("whip", 30);
      t18.drop$2$percent("armor", 40);
      t18.drop$2$percent("magic", 20);
      t18._flags = "cowardly";
      t18 = R.breed("decrepit mage", 3, C.Color_86_30_138, 20, null, null, 30, 0);
      t18.placeIn$1("laboratory");
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 2, 0, null));
      t18._bolt$6$damage$range$rate("the spark", "zaps", t10, 8, 8, 10);
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("magic", 60);
      t18.drop$2$percent("dagger", 10);
      t18.drop$2$percent("staff", 10);
      t18.drop$2$percent("robe", 20);
      t18.drop$2$percent("boots", 20);
      t18 = R.breed("unlucky ranger", 5, C.Color_22_117_38, 30, 25, null, 20, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "slash[es]", 2, 0, null));
      t18._bolt$6$damage$range$rate("the arrow", "hits", t1, 2, 8, 4);
      C.JSArray_methods.add$1(t18._moves, new R.MissiveMove(C.Missive_0, 10));
      t18.drop$2$percent("treasure", 25);
      t18.drop$2$percent("potion", 30);
      t18.drop$2$percent("bow", 40);
      t18.drop$2$percent("sword", 10);
      t18.drop$2$percent("body", 20);
      t18 = R.breed("drunken priest", 5, C.Color_21_87_194, 34, null, null, 40, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "hit[s]", 8, 0, null));
      t17 = t18._moves;
      C.JSArray_methods.add$1(t17, new O.HealMove(8, 15));
      C.JSArray_methods.add$1(t17, new R.MissiveMove(C.Missive_0, 5));
      t18.drop$2$percent("treasure", 45);
      t18.drop$2$percent("scroll", 30);
      t18.drop$2$percent("club", 20);
      t18.drop$2$percent("robe", 40);
      t18._flags = "fearless";
      t18 = R.family("r", 30, null, null, 30, null, null);
      t18.groups$1("animal");
      t18._vision = 4;
      t18._hearing = 6;
      t18.placeIn$2("food", "passage");
      t18._location = C.SpawnLocation_2;
      t18 = R.breed("[mouse|mice]", 1, C.Color_189_144_108, 2, null, 0.7, null, 0);
      t18.count$2(2, 5);
      t18 = t18._attacks;
      C.JSArray_methods.add$1(t18, U.Attack$(null, "bite[s]", 3, 0, null));
      C.JSArray_methods.add$1(t18, U.Attack$(null, "scratch[es]", 2, 0, null));
      t18 = R.breed("sewer rat", 2, C.Color_38_38_56, 8, null, null, 20, 0);
      t18.count$2(1, 4);
      t18 = t18._attacks;
      C.JSArray_methods.add$1(t18, U.Attack$(null, "bite[s]", 4, 0, null));
      C.JSArray_methods.add$1(t18, U.Attack$(null, "scratch[es]", 3, 0, null));
      t18 = R.breed("sickly rat", 3, C.Color_22_117_38, 16, null, null, null, 0)._attacks;
      C.JSArray_methods.add$1(t18, U.Attack$(null, "bite[s]", 8, 0, t5));
      C.JSArray_methods.add$1(t18, U.Attack$(null, "scratch[es]", 4, 0, null));
      t18 = R.breed("plague rat", 6, C.Color_131_158_13, 20, null, null, null, 0);
      t18.count$2(1, 4);
      t18 = t18._attacks;
      C.JSArray_methods.add$1(t18, U.Attack$(null, "bite[s]", 15, 0, t5));
      C.JSArray_methods.add$1(t18, U.Attack$(null, "scratch[es]", 8, 0, null));
      t18 = R.family("s", 5, "fearless", null, 30, -3, 2);
      t18.groups$1("bug");
      t18._vision = 3;
      t18._hearing = 1;
      t18.placeIn$1("passage");
      C.JSArray_methods.add$1(R.breed("giant slug", 3, C.Color_99_87_7, 20, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 8, 0, null));
      C.JSArray_methods.add$1(R.breed("suppurating slug", 6, C.Color_131_158_13, 50, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t5));
      t18 = R.family("v", null, "fearless immobile", null, null, null, null);
      t18.groups$1("plant");
      t18._vision = 10;
      t18._hearing = 10;
      t18 = R.breed("choker", 16, C.Color_22_117_38, 40, null, null, null, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "strangle", 12, 0, null));
      t18.placeIn$1("passage");
      t18 = R.breed("nightshade", 19, C.Color_189_106_235, 50, null, null, null, 0);
      t18._bolt$6$damage$range$rate(null, "whips", t1, 10, 2, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "touch[es]", 12, 0, t5));
      t18 = R.breed("creeper", 22, C.Color_131_158_13, 60, null, null, null, 0);
      t18.toString;
      t17 = L.SpawnMove$(10, true);
      C.JSArray_methods.add$1(t18._moves, t17);
      t18._bolt$6$damage$range$rate(null, "whips", t1, 10, 2, 3);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "strangle", 8, 0, null));
      t18 = R.breed("strangler", 26, C.Color_0_64_39, 80, null, null, null, 0);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "strangle", 14, 0, null));
      t18.placeIn$1("passage");
      t18 = R.family("w", 15, "fearless", null, 40, null, null);
      t18.groups$1("bug");
      t18._vision = 0;
      t18._hearing = 3;
      t18.placeIn$1("passage");
      t18 = R.breed("blood worm", 1, C.Color_84_0_39, 4, null, 0.5, null, 0);
      t18.count$2(2, 5);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
      t18 = R.breed("fire worm", 10, C.Color_179_74_4, 6, null, null, null, 0);
      t18.count$2(2, 6);
      t18._location = C.SpawnLocation_2;
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t3));
      R.family("w", 10, "fearless", null, 30, null, null);
      C.JSArray_methods.add$1(R.breed("giant earthworm", 3, C.Color_255_122_105, 20, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
      C.JSArray_methods.add$1(R.breed("giant cave worm", 7, C.Color_189_144_108, 80, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 8, 0, t14));
      t18 = R.family("B", null, null, null, null, null, null);
      t18.groups$1("animal");
      t18._vision = 8;
      t18._hearing = 6;
      C.JSArray_methods.add$1(t18._defenses, new U.Defense(10, "{1} flaps out of the way."));
      t18._motility = new Q.Motility(t18._motility._bitMask | t8);
      t18.count$2(3, 6);
      t18 = R.breed("crow", 4, C.Color_38_38_56, 9, null, null, 30, 2);
      C.JSArray_methods.add$1(t18._attacks, U.Attack$(null, "bite[s]", 5, 0, null));
      t18.drop$2$percent("treasure", 10);
      t18.drop$2$percent("Black Feather", 25);
      description = H.stringReplaceAllUnchecked('"What harm can a stupid little crow do?" you think as it and its\n      murderous friends dive towards your eyes, claws extended.', t6, " ");
      $._builder._description = description;
      t1 = R.breed("raven", 6, C.Color_63_64_114, 22, null, null, 15, 0);
      t17 = t1._attacks;
      C.JSArray_methods.add$1(t17, U.Attack$(null, "bite[s]", 5, 0, null));
      C.JSArray_methods.add$1(t17, U.Attack$(null, "claw[s]", 4, 0, null));
      t1.drop$2$percent("treasure", 10);
      t1.drop$2$percent("Black Feather", 20);
      t1._flags = "protective";
      description = H.stringReplaceAllUnchecked("It's black eyes gleam with a malevolent intelligence.", t6, " ");
      $._builder._description = description;
      t1 = R.family("F", null, "cowardly", null, 30, 2, null);
      t1.groups$1("fae");
      t1._vision = 10;
      t1._hearing = 8;
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(10, "{1} flits out of the way."));
      t1._motility = new Q.Motility(t1._motility._bitMask | t8);
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("forest sprite", 2, C.Color_129_217_117, 6, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "scratch[es]", 3, 0, null));
      C.JSArray_methods.add$1(t1._moves, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the spark", "zaps", t10, 4, 8, 7);
      t1.drop$2$percent("treasure", 10);
      t1.drop$2$percent("magic", 60);
      t1 = R.breed("house sprite", 5, C.Color_64_163_229, 10, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "poke[s]", 5, 0, null));
      t8 = t1._moves;
      C.JSArray_methods.add$1(t8, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the stone", "hits", t2, 4, 8, 10);
      C.JSArray_methods.add$1(t8, new S.TeleportMove(4, 7));
      t1.drop$2$percent("treasure", 10);
      t1.drop$2$percent("magic", 80);
      t1 = R.breed("mischievous sprite", 7, C.Color_255_122_105, 24, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "stab[s]", 6, 0, null));
      t8 = t1._moves;
      C.JSArray_methods.add$1(t8, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the wind", "blows", t12, 8, 8, 8);
      C.JSArray_methods.add$1(t8, new S.TeleportMove(5, 5));
      t1.drop$2$percent("treasure", 10);
      t1.drop$1("magic");
      R.family("Q", null, null, null, null, null, null);
      t1 = R.breed("Nameless Unmaker", 100, C.Color_86_30_138, 1000, null, null, null, 2);
      t1._vision = 16;
      t1._hearing = 16;
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "crushe[s]", 250, 0, t2));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "blast[s]", 200, 0, t10));
      t1.toString;
      t8 = U.Attack$(new O.Noun("the darkness"), "crushes", 500, 10, t13);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t8, 5));
      t1._flags = "fearless unique";
      t1._motility = new Q.Motility(t1._motility._bitMask | t15);
      t1.drop$2$count("treasure", 10);
      R.family("R", null, null, null, null, null, null).groups$1("animal");
      t1 = R.breed("frog", 1, C.Color_131_158_13, 4, 30, null, 30, 0);
      t1._vision = 6;
      t1._hearing = 4;
      t15 = t1._motility;
      t8 = $.$get$Motility_swim();
      t1._motility = new Q.Motility(t15._bitMask | t8._bitMask);
      t1.placeIn$1("aquatic");
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "hop[s] on", 2, 0, null));
      t1 = R.family("R", null, "fearless", null, 10, null, null);
      t1.groups$1("saurian");
      t1._vision = 10;
      t1._hearing = 5;
      t1 = R.breed("lizard guard", 11, C.Color_222_156_33, 26, null, null, null, 0);
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 8, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 10, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("lizard protector", 15, C.Color_131_158_13, 30, null, null, null, 0);
      t1.minion$3("lizard guard", 0, 2);
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 14, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("armored lizard", 17, C.Color_132_126_135, 38, null, null, null, 0);
      t1.minion$3("lizard guard", 0, 2);
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 15, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 50);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("scaled guardian", 19, C.Color_38_38_56, 50, null, null, null, 0);
      t1.minion$3("lizard protector", 0, 2);
      t1.minion$3("lizard guard", 0, 1);
      t1.minion$3("salamander", 0, 1);
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 15, 0, null));
      t1.drop$2$percent("treasure", 40);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("weapon", 20);
      t1 = R.breed("saurian", 21, C.Color_179_74_4, 64, null, null, null, 0);
      t1.minion$3("lizard protector", 0, 2);
      t1.minion$3("armored lizard", 0, 1);
      t1.minion$3("lizard guard", 0, 1);
      t1.minion$3("salamander", 0, 2);
      t8 = t1._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 12, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 17, 0, null));
      t1.drop$2$percent("treasure", 50);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("weapon", 20);
      t1 = R.family("R", 30, null, null, 20, null, null);
      t1.groups$1("animal");
      t1._vision = 6;
      t1._hearing = 5;
      t1._location = C.SpawnLocation_1;
      t1._emanationLevel = 3;
      t1 = R.breed("juvenile salamander", 7, C.Color_255_122_105, 40, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 14, 0, t3));
      t1.toString;
      t8 = U.Attack$(new O.Noun("the flame"), "burns", 20, 4, t3);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t8, 16));
      t8 = R.breed("salamander", 13, C.Color_204_35_57, 60, null, null, null, 0);
      C.JSArray_methods.add$1(t8._attacks, U.Attack$(null, "bite[s]", 18, 0, t3));
      t8.toString;
      t1 = U.Attack$(new O.Noun("the flame"), "burns", 30, 5, t3);
      C.JSArray_methods.add$1(t8._moves, new Y.ConeMove(t1, 16));
      t1 = R.breed("three-headed salamander", 23, C.Color_84_0_39, 90, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 24, 0, t3));
      t1.toString;
      t8 = U.Attack$(new O.Noun("the flame"), "burns", 30, 5, t3);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t8, 10));
      t8 = R.family("S", 30, null, null, 30, null, null);
      t8.groups$1("animal");
      t8._vision = 4;
      t8._hearing = 7;
      t8 = R.breed("water snake", 1, C.Color_131_158_13, 9, null, null, null, 0);
      t8.placeIn$1("aquatic");
      C.JSArray_methods.add$1(t8._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
      t8 = R.breed("brown snake", 3, C.Color_142_82_55, 25, null, null, null, 0);
      t8.placeIn$1("aquatic");
      C.JSArray_methods.add$1(t8._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
      t8 = R.breed("cave snake", 8, C.Color_132_126_135, 40, null, null, null, 0);
      t8.placeIn$1("passage");
      C.JSArray_methods.add$1(t8._attacks, U.Attack$(null, "bite[s]", 10, 0, null));
      R.finishBreed();
      R.linkMinions();
      t8 = P.int;
      S.recipe("Healing Poultice", P.LinkedHashMap_LinkedHashMap$_literal(["Flower", 1, "Soothing Balm", 1], t4, t8));
      S.recipe("Soothing Balm", P.LinkedHashMap_LinkedHashMap$_literal(["Flower", 3], t4, t8));
      S.recipe("Mending Salve", P.LinkedHashMap_LinkedHashMap$_literal(["Soothing Balm", 3], t4, t8));
      S.recipe("Healing Poultice", P.LinkedHashMap_LinkedHashMap$_literal(["Mending Salve", 3], t4, t8));
      S.recipe("Potion of Amelioration", P.LinkedHashMap_LinkedHashMap$_literal(["Healing Poultice", 3], t4, t8));
      S.recipe("Potion of Rejuvenation", P.LinkedHashMap_LinkedHashMap$_literal(["Potion of Amelioration", 4], t4, t8));
      S.recipe("Scroll of Sidestepping", P.LinkedHashMap_LinkedHashMap$_literal(["Insect Wing", 1, "Black Feather", 1], t4, t8));
      S.recipe("Scroll of Phasing", P.LinkedHashMap_LinkedHashMap$_literal(["Scroll of Sidestepping", 2], t4, t8));
      S.recipe("Scroll of Teleportation", P.LinkedHashMap_LinkedHashMap$_literal(["Scroll of Phasing", 2], t4, t8));
      S.recipe("Scroll of Disappearing", P.LinkedHashMap_LinkedHashMap$_literal(["Scroll of Teleportation", 2], t4, t8));
      S.recipe("Fur Cloak", P.LinkedHashMap_LinkedHashMap$_literal(["Fox Pelt", 1], t4, t8));
      S.recipe("Fur Cloak", P.LinkedHashMap_LinkedHashMap$_literal(["Fur Pelt", 1], t4, t8));
      S.recipe("Fur-lined Robe", P.LinkedHashMap_LinkedHashMap$_literal(["Robe", 1, "Fur Pelt", 2], t4, t8));
      S.recipe("Fur-lined Robe", P.LinkedHashMap_LinkedHashMap$_literal(["Robe", 1, "Fox Pelt", 1], t4, t8));
      R.finishAffix();
      $._affixTag = "armor";
      t8 = R.affix("_ of Resist Air", 10, 0.5);
      t8._priceBonus = 200;
      t8._priceScale = 1.2;
      t8.resist$1(t12);
      t8 = R.affix("_ of Resist Earth", 11, 0.5);
      t8._priceBonus = 230;
      t8._priceScale = 1.2;
      t8.resist$1(t2);
      t8 = R.affix("_ of Resist Fire", 12, 0.5);
      t8._priceBonus = 260;
      t8._priceScale = 1.3;
      t8.resist$1(t3);
      t8 = R.affix("_ of Resist Water", 13, 0.5);
      t8._priceBonus = 310;
      t8._priceScale = 1.2;
      t8.resist$1(t7);
      t8 = R.affix("_ of Resist Acid", 14, 0.3);
      t8._priceBonus = 340;
      t8._priceScale = 1.3;
      t8.resist$1(t14);
      t8 = R.affix("_ of Resist Cold", 15, 0.5);
      t8._priceBonus = 400;
      t8._priceScale = 1.2;
      t8.resist$1(t9);
      t8 = R.affix("_ of Resist Lightning", 16, 0.3);
      t8._priceBonus = 430;
      t8._priceScale = 1.2;
      t8.resist$1(t10);
      t8 = R.affix("_ of Resist Poison", 17, 0.25);
      t8._priceBonus = 460;
      t8._priceScale = 1.5;
      t8.resist$1(t5);
      t8 = R.affix("_ of Resist Dark", 18, 0.25);
      t8._priceBonus = 490;
      t8._priceScale = 1.3;
      t8.resist$1(t13);
      t8 = R.affix("_ of Resist Light", 19, 0.25);
      t8._priceBonus = 490;
      t8._priceScale = 1.3;
      t8.resist$1(t11);
      t8 = R.affix("_ of Resist Spirit", 20, 0.4);
      t8._priceBonus = 520;
      t8._priceScale = 1.4;
      t8.resist$1(t16);
      t8 = R.affix("_ of Resist Nature", 40, 0.3);
      t8._priceBonus = 3000;
      t8._priceScale = 4;
      t8.resist$1(t12);
      t8.resist$1(t2);
      t8.resist$1(t3);
      t8.resist$1(t7);
      t8.resist$1(t9);
      t8.resist$1(t10);
      t8 = R.affix("_ of Resist Destruction", 40, 0.3);
      t8._priceBonus = 1300;
      t8._priceScale = 2.6;
      t8.resist$1(t14);
      t8.resist$1(t3);
      t8.resist$1(t10);
      t8.resist$1(t5);
      t8 = R.affix("_ of Resist Evil", 60, 0.3);
      t8._priceBonus = 1500;
      t8._priceScale = 3;
      t8.resist$1(t14);
      t8.resist$1(t5);
      t8.resist$1(t13);
      t8.resist$1(t16);
      t8 = R.affix("_ of Resistance", 70, 0.3);
      t8._priceBonus = 5000;
      t8._priceScale = 6;
      t8.resist$1(t12);
      t8.resist$1(t2);
      t8.resist$1(t3);
      t8.resist$1(t7);
      t8.resist$1(t14);
      t8.resist$1(t9);
      t8.resist$1(t10);
      t8.resist$1(t5);
      t8.resist$1(t13);
      t8.resist$1(t11);
      t8.resist$1(t16);
      t8 = R.affix("_ of Protection from Air", 16, 0.25);
      t8._priceBonus = 500;
      t8._priceScale = 1.4;
      t8.resist$2(t12, 2);
      t12 = R.affix("_ of Protection from Earth", 17, 0.25);
      t12._priceBonus = 500;
      t12._priceScale = 1.4;
      t12.resist$2(t2, 2);
      t12 = R.affix("_ of Protection from Fire", 18, 0.25);
      t12._priceBonus = 500;
      t12._priceScale = 1.5;
      t12.resist$2(t3, 2);
      t12 = R.affix("_ of Protection from Water", 19, 0.25);
      t12._priceBonus = 500;
      t12._priceScale = 1.4;
      t12.resist$2(t7, 2);
      t7 = R.affix("_ of Protection from Acid", 20, 0.2);
      t7._priceBonus = 500;
      t7._priceScale = 1.5;
      t7.resist$2(t14, 2);
      t14 = R.affix("_ of Protection from Cold", 21, 0.25);
      t14._priceBonus = 500;
      t14._priceScale = 1.4;
      t14.resist$2(t9, 2);
      t14 = R.affix("_ of Protection from Lightning", 22, 0.16);
      t14._priceBonus = 500;
      t14._priceScale = 1.4;
      t14.resist$2(t10, 2);
      t14 = R.affix("_ of Protection from Poison", 23, 0.14);
      t14._priceBonus = 1000;
      t14._priceScale = 1.6;
      t14.resist$2(t5, 2);
      t14 = R.affix("_ of Protection from Dark", 24, 0.14);
      t14._priceBonus = 500;
      t14._priceScale = 1.5;
      t14.resist$2(t13, 2);
      t14 = R.affix("_ of Protection from Light", 25, 0.14);
      t14._priceBonus = 500;
      t14._priceScale = 1.5;
      t14.resist$2(t11, 2);
      t14 = R.affix("_ of Protection from Spirit", 26, 0.13);
      t14._priceBonus = 800;
      t14._priceScale = 1.6;
      t14.resist$2(t16, 2);
      R.finishAffix();
      $._affixTag = "weapon";
      t14 = R.affix("_ of Harming", 1, 1);
      t14._priceBonus = 100;
      t14._priceScale = 1.1;
      t14._heftScale = 1.05;
      t14._damageScale = null;
      t14._damageBonus = 1;
      t14 = R.affix("_ of Wounding", 10, 1);
      t14._priceBonus = 140;
      t14._priceScale = 1.3;
      t14._heftScale = 1.07;
      t14._damageScale = null;
      t14._damageBonus = 3;
      t14 = R.affix("_ of Maiming", 25, 1);
      t14._priceBonus = 180;
      t14._priceScale = 1.5;
      t14._heftScale = 1.09;
      t14._damageScale = 1.2;
      t14._damageBonus = 3;
      t14 = R.affix("_ of Slaying", 45, 1);
      t14._priceBonus = 200;
      t14._priceScale = 2;
      t14._heftScale = 1.11;
      t14._damageScale = 1.4;
      t14._damageBonus = 5;
      t14 = R.affix("Elven _", 40, 1);
      t14._priceBonus = 300;
      t14._priceScale = 1.6;
      t14._heftScale = 0.7;
      t14._damageScale = 1.3;
      t14._damageBonus = null;
      t14.resist$1(t11);
      t14 = R.affix("Dwarven _", 40, 1);
      t14._priceBonus = 200;
      t14._priceScale = 2.2;
      t14._heftScale = 1.2;
      t14._damageScale = 1.5;
      t14._damageBonus = 4;
      t14.resist$1(t2);
      t14.resist$1(t13);
      R.finishAffix();
      $._affixTag = "bow";
      t14 = R.affix("Ash _", 10, 1);
      t14._priceBonus = 300;
      t14._priceScale = 1.3;
      t14._heftScale = 0.8;
      t14._damageScale = null;
      t14._damageBonus = 3;
      t14 = R.affix("Yew _", 20, 1);
      t14._priceBonus = 500;
      t14._priceScale = 1.4;
      t14._heftScale = 0.8;
      t14._damageScale = null;
      t14._damageBonus = 5;
      R.finishAffix();
      $._affixTag = "weapon";
      t14 = R.affix("Glimmering _", 20, 0.3);
      t14._priceBonus = 300;
      t14._priceScale = 1.3;
      t14._damageScale = 1.2;
      t14._damageBonus = null;
      t14.brand$1(t11);
      t14 = R.affix("Shining _", 32, 0.25);
      t14._priceBonus = 400;
      t14._priceScale = 1.6;
      t14._damageScale = 1.4;
      t14._damageBonus = null;
      t14.brand$1(t11);
      t14 = R.affix("Radiant _", 48, 0.2);
      t14._priceBonus = 500;
      t14._priceScale = 2;
      t14._damageScale = 1.6;
      t14._damageBonus = null;
      t14.brand$2$resist(t11, 2);
      t11 = R.affix("Dim _", 16, 0.3);
      t11._priceBonus = 300;
      t11._priceScale = 1.3;
      t11._damageScale = 1.2;
      t11._damageBonus = null;
      t11.brand$1(t13);
      t11 = R.affix("Dark _", 32, 0.25);
      t11._priceBonus = 400;
      t11._priceScale = 1.6;
      t11._damageScale = 1.4;
      t11._damageBonus = null;
      t11.brand$1(t13);
      t11 = R.affix("Black _", 56, 0.2);
      t11._priceBonus = 500;
      t11._priceScale = 2;
      t11._damageScale = 1.6;
      t11._damageBonus = null;
      t11.brand$2$resist(t13, 2);
      t13 = R.affix("Chilling _", 20, 0.3);
      t13._priceBonus = 300;
      t13._priceScale = 1.5;
      t13._damageScale = 1.4;
      t13._damageBonus = null;
      t13.brand$1(t9);
      t13 = R.affix("Freezing _", 40, 0.25);
      t13._priceBonus = 400;
      t13._priceScale = 1.7;
      t13._damageScale = 1.6;
      t13._damageBonus = null;
      t13.brand$2$resist(t9, 2);
      t9 = R.affix("Burning _", 20, 0.3);
      t9._priceBonus = 300;
      t9._priceScale = 1.5;
      t9._damageScale = 1.3;
      t9._damageBonus = null;
      t9.brand$1(t3);
      t9 = R.affix("Flaming _", 40, 0.25);
      t9._priceBonus = 360;
      t9._priceScale = 1.8;
      t9._damageScale = 1.6;
      t9._damageBonus = null;
      t9.brand$1(t3);
      t9 = R.affix("Searing _", 60, 0.2);
      t9._priceBonus = 500;
      t9._priceScale = 2.1;
      t9._damageScale = 1.8;
      t9._damageBonus = null;
      t9.brand$2$resist(t3, 2);
      t3 = R.affix("Electric _", 50, 0.2);
      t3._priceBonus = 300;
      t3._priceScale = 1.5;
      t3._damageScale = 1.4;
      t3._damageBonus = null;
      t3.brand$1(t10);
      t3 = R.affix("Shocking _", 70, 0.2);
      t3._priceBonus = 400;
      t3._priceScale = 2;
      t3._damageScale = 1.8;
      t3._damageBonus = null;
      t3.brand$2$resist(t10, 2);
      t10 = R.affix("Poisonous _", 35, 0.2);
      t10._priceBonus = 500;
      t10._priceScale = 1.5;
      t10._damageScale = 1.1;
      t10._damageBonus = null;
      t10.brand$1(t5);
      t10 = R.affix("Venomous _", 70, 0.2);
      t10._priceBonus = 800;
      t10._priceScale = 1.8;
      t10._damageScale = 1.3;
      t10._damageBonus = null;
      t10.brand$2$resist(t5, 2);
      t5 = R.affix("Ghostly _", 45, 0.2);
      t5._priceBonus = 300;
      t5._priceScale = 1.6;
      t5._heftScale = 0.7;
      t5._damageScale = 1.4;
      t5._damageBonus = null;
      t5.brand$1(t16);
      t5 = R.affix("Spiritual _", 80, 0.15);
      t5._priceBonus = 400;
      t5._priceScale = 2.1;
      t5._heftScale = 0.7;
      t5._damageScale = 1.7;
      t5._damageBonus = null;
      t5.brand$2$resist(t16, 2);
      R.finishAffix();
      t16 = P.double;
      R.shop("The General's General Store", P.LinkedHashMap_LinkedHashMap$_literal(["Loaf of Bread", 1, "Tallow Candle", 1, "Wax Candle", 0.7, "Oil Lamp", 0.5, "Torch", 0.4, "Lantern", 0.1, "Soothing Balm", 0.8, "Mending Salve", 0.6, "Healing Poultice", 0.3, "Club", 0.3, "Staff", 0.2, "Quarterstaff", 0.1, "Whip", 0.2, "Dagger", 0.2, "Hatchet", 0.1, "Axe", 0.05], t4, t16));
      R.shop("Dirk's Death Emporium", P.LinkedHashMap_LinkedHashMap$_literal(["Hammer", 1, "Mattock", 1, "War Hammer", 1, "Morningstar", 1, "Mace", 1, "Chain Whip", 1, "Flail", 1, "Falchion", 1, "Rapier", 1, "Shortsword", 1, "Scimitar", 1, "Cutlass", 1, "Spear", 1, "Angon", 1, "Lance", 1, "Partisan", 1, "Valaska", 1, "Battleaxe", 1, "Short Bow", 1, "Longbow", 1, "Crossbow", 1], t4, t16));
      R.shop("Skullduggery and Bamboozelry", P.LinkedHashMap_LinkedHashMap$_literal(["Dirk", 1, "Dagger", 1, "Stiletto", 1, "Rondel", 1, "Baselard", 1], t4, t16));
      R.shop("Garthag's Armoury", P.LinkedHashMap_LinkedHashMap$_literal(["Cloak", 1, "Fur Cloak", 1, "Cloth Shirt", 1, "Leather Shirt", 1, "Jerkin", 1, "Leather Armor", 1, "Padded Armor", 1, "Studded Armor", 1, "Mail Hauberk", 1, "Scale Mail", 1, "Robe", 1, "Fur-lined Robe", 1, "Pair of Sandals", 1, "Pair of Shoes", 1, "Pair of Boots", 1, "Pair of Plated Boots", 1, "Pair of Greaves", 1], t4, t16));
      R.shop("Unguence the Alchemist", P.LinkedHashMap_LinkedHashMap$_literal(["Soothing Balm", 1, "Mending Salve", 1, "Healing Poultice", 1, "Antidote", 1, "Potion of Quickness", 1, "Potion of Alacrity", 1, "Bottled Wind", 1, "Bottled Ice", 1, "Bottled Fire", 1, "Bottled Ocean", 1, "Bottled Earth", 1], t4, t16));
      R.shop("The Droll Magery", P.LinkedHashMap_LinkedHashMap$_literal(['Spellbook "Elemental Primer"', 1, "Scroll of Sidestepping", 1, "Scroll of Phasing", 1, "Scroll of Item Detection", 1], t4, t16));
      F.FloorDrops_initialize();
      t16 = $.$get$Decor_all();
      Y.Themes_defineTags(t16, null, Y.Decor);
      $._frequency = 1;
      $._themes = "kitchen laboratory";
      T.furnishing(C.Symmetry_1, "\u2500\u2510-\u2502\u2564\u255b", "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(C.Symmetry_1, "\u2500\u2510-\u2502\u2564\u255b", "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(C.Symmetry_1, "\u2500\u2510-\u2502\u2564\u255b", "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-", "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    ?###?");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-", "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    ?####?");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-", "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    ?#####?");
      T.furnishing(C.Symmetry_0, "\u2502-\u255e\u2550\u2561", "    ?###?\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(C.Symmetry_0, "\u2502-\u255e\u2550\u2561", "    ?####?\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(C.Symmetry_0, "\u2502-\u255e\u2550\u2561", "    ?#####?\n    .\u2502---\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      $._frequency = 0.05;
      $._themes = "workshop";
      T.furnishing(C.Symmetry_0, "\u2500\u2510\u250c\u2564\u255b\u2558", "    ?.....?\n    #\u2500\u2510.\u250c\u2500#\n    #\u2564\u255b.\u2558\u2564#\n    ?.....?");
      T.furnishing(C.Symmetry_0, "\u2500\u2510\u250c\u2564\u255b\u2558\u2550", "    ?.......?\n    #\u2500\u2500\u2510.\u250c\u2500\u2500#\n    #\u2550\u2564\u255b.\u2558\u2564\u2550#\n    ?.......?");
      T.furnishing(C.Symmetry_0, "\u2500\u2510\u250c\u2564\u255b\u2558\u2550", "    ?.........?\n    #\u2500\u2500\u2500\u2510.\u250c\u2500\u2500\u2500#\n    #\u2550\u2550\u2564\u255b.\u2558\u2564\u2550\u2550#\n    ?.........?");
      T.furnishing(C.Symmetry_0, "\u2502\u255e\u2561\u250c\u2510", "    ?##?\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(C.Symmetry_0, "\u2502\u255e\u2561\u250c\u2510", "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(C.Symmetry_0, "\u2502\u255e\u2561\u250c\u2510", "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      $._frequency = 0.1;
      $._themes = "great-hall";
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u255e\u2550\u2561", "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u255e\u2550\u2561", "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u255e\u2550\u2561", "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u255e\u2550\u2561", "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(C.Symmetry_0, "\u250c\u2500\u2510\u2502-\u2558\u2564\u2550\u255b", "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      $._frequency = 1;
      $._themes = "great-hall laboratory";
      T.furnishing(C.Symmetry_3, "\u03c0", "    ...\n    .\u03c0.\n    ..\u250c");
      T.furnishing(C.Symmetry_4, "\u03c0", "    ...\n    .\u03c0.\n    .\u250c?");
      T.furnishing(C.Symmetry_1, "\u03c0", "    ..\u255e\n    .\u03c0.\n    ...");
      T.furnishing(C.Symmetry_4, "\u03c0", "    ?\u2550?\n    .\u03c0.\n    ...");
      T.furnishing(C.Symmetry_0, "\u03c0", "    ?\u2564?\n    .\u03c0.\n    ...");
      $._frequency = 4;
      $._themes = "great-hall laboratory";
      T.furnishing(C.Symmetry_0, "i", "    i");
      $._frequency = 1;
      $._themes = "kitchen larder pantry storeroom";
      T.furnishing(C.Symmetry_4, "%", "    ##\n    #%");
      T.furnishing(C.Symmetry_4, "%", "    ?.?\n    .%.\n    ?.?");
      T.furnishing(C.Symmetry_4, "%", "    ###\n    #%%");
      T.furnishing(C.Symmetry_4, "%", "    ###\n    #%%\n    #%.");
      T.furnishing(C.Symmetry_4, "%", "    ?##?\n    .%%.\n    ?..?");
      T.furnishing(C.Symmetry_4, "%", "    ?###?\n    .%%%.\n    ?...?");
      T.furnishing(C.Symmetry_4, "%", "    ?###?\n    .%%%.\n    ?.%.?\n    ??.??");
      $._frequency = 1;
      $._themes = "chamber storeroom treasure-room";
      T.furnishing(C.Symmetry_4, "&", "    ##\n    #&");
      T.furnishing(C.Symmetry_4, "&", "    ?#?\n    .&.\n    ?.?");
      $._frequency = 0.03;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_0, "\u2248P", "    .....\n    .\u2248\u2248\u2248.\n    .\u2248P\u2248.\n    .\u2248\u2248\u2248.\n    .....");
      T.furnishing(C.Symmetry_4, "\u2248P", "    #####\n    .\u2248P\u2248.\n    .\u2248\u2248\u2248.\n    .....");
      T.furnishing(C.Symmetry_4, "\u2248PI", "    ##I##\n    .\u2248P\u2248.\n    .\u2248\u2248\u2248.\n    .....");
      T.furnishing(C.Symmetry_4, "\u2248PI", "    #I#I#\n    .\u2248P\u2248.\n    .\u2248\u2248\u2248.\n    .....");
      T.furnishing(C.Symmetry_4, "\u2248PI", "    ##I#I##\n    .\u2248\u2248P\u2248\u2248.\n    ..\u2248\u2248\u2248..\n    ?.....?");
      T.furnishing(C.Symmetry_4, "\u2248Pl", "    #######\n    .l\u2248P\u2248l.\n    ..\u2248\u2248\u2248..\n    ?.....?");
      T.furnishing(C.Symmetry_4, "\u2248PI", "    ##I##\n    .\u2248\u2248P#\n    ..\u2248\u2248I\n    ?..\u2248#");
      $._frequency = 1;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_4, "*", "    \u2248\u2248\n    \u2248*");
      T.furnishing(C.Symmetry_4, "*", "    \u2248\n    *");
      $._frequency = 0.2;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_4, "*", "    *");
      $._frequency = 0.03;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_4, "=", "    '\u2248\u2248\u2248\n    '==\u2248\n    '\u2248\u2248\u2248");
      T.furnishing(C.Symmetry_4, "=", "    '\u2248\u2248\u2248\u2248\n    '===\u2248\n    '\u2248\u2248\u2248\u2248");
      T.furnishing(C.Symmetry_4, "=", "    '\u2248\u2248\u2248\u2248\u2248\n    '====\u2248\n    '\u2248\u2248\u2248\u2248\u2248");
      $._frequency = 0.2;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_4, "\u2022", "    '\u2022");
      T.furnishing(C.Symmetry_4, "\u2022", "    ''\n    '\u2022");
      $._frequency = 0.1;
      $._themes = "aquatic";
      T.furnishing(C.Symmetry_4, "\u2022", "    o\u2022");
      T.furnishing(C.Symmetry_4, "\u2022", "    \u2248\u2022\n    o\u2248");
      t16.toString;
      t4 = H.assertSubtypeOfRuntimeType(new L.Blast(), H.getTypeArgumentByIndex(t16, 0));
      t5 = t16._resources;
      t16.add$5(0, C.JSInt_methods.toString$0(t5.get$length(t5)), t4, 1, 10, "laboratory");
      $content = new T.GameContent();
      F.addTerminal("Small", 8, null);
      F.addTerminal("Large", 16, null);
      F.addTerminal("Small Rect", 8, 10);
      F.addTerminal("Large Rect", 16, 20);
      font = window.localStorage.getItem("font");
      i = 0;
      while (true) {
        t1 = $.$get$terminals();
        t2 = t1.length;
        if (!(i < t2)) {
          fontIndex = 1;
          break;
        }
        if (t1[i].name === font) {
          fontIndex = i;
          break;
        }
        ++i;
      }
      if (fontIndex >= t2)
        return H.ioore(t1, fontIndex);
      $.currentView = t1[fontIndex];
      document.querySelector("#game").appendChild($.currentView.element);
      t1 = $.currentView.terminal;
      t2 = Y.Input;
      t3 = new S.KeyBindings(new H.JsLinkedHashMap(0, 0, [S._KeyBinding, t2]), [t2]);
      $.ui = new B.UserInterface(t3, H.setRuntimeTypeInfo([], [[B.Screen, Y.Input]]), t1, true, false, [t2]);
      t3.bind$2(C.Input_ok, 13);
      $.ui.keyPress.bind$2(C.Input_cancel, 27);
      $.ui.keyPress.bind$3$shift(C.Input_forfeit, 70, true);
      $.ui.keyPress.bind$2(C.Input_quit, 81);
      $.ui.keyPress.bind$3$shift(C.Input_open, 67, true);
      $.ui.keyPress.bind$2(C.Input_close, 67);
      $.ui.keyPress.bind$2(C.Input_drop, 68);
      $.ui.keyPress.bind$2(C.Input_use, 85);
      $.ui.keyPress.bind$2(C.Input_pickUp, 71);
      $.ui.keyPress.bind$2(C.Input_swap, 88);
      $.ui.keyPress.bind$2(C.Input_unequip, 69);
      $.ui.keyPress.bind$2(C.Input_toss, 84);
      $.ui.keyPress.bind$2(C.Input_selectSkill, 83);
      $.ui.keyPress.bind$2(C.Input_heroInfo, 65);
      $.ui.keyPress.bind$3$shift(C.Input_editSkills, 83, true);
      $.ui.keyPress.bind$2(C.Input_nw, 73);
      $.ui.keyPress.bind$2(C.Input_n, 79);
      $.ui.keyPress.bind$2(C.Input_ne, 80);
      $.ui.keyPress.bind$2(C.Input_w, 75);
      $.ui.keyPress.bind$2(C.Input_e, 186);
      $.ui.keyPress.bind$2(C.Input_sw, 188);
      $.ui.keyPress.bind$2(C.Input_s, 190);
      $.ui.keyPress.bind$2(C.Input_se, 191);
      $.ui.keyPress.bind$3$shift(C.Input_runNW, 73, true);
      $.ui.keyPress.bind$3$shift(C.Input_runN, 79, true);
      $.ui.keyPress.bind$3$shift(C.Input_runNE, 80, true);
      $.ui.keyPress.bind$3$shift(C.Input_runW, 75, true);
      $.ui.keyPress.bind$3$shift(C.Input_runE, 186, true);
      $.ui.keyPress.bind$3$shift(C.Input_runSW, 188, true);
      $.ui.keyPress.bind$3$shift(C.Input_runS, 190, true);
      $.ui.keyPress.bind$3$shift(C.Input_runSE, 191, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireNW, 73, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireN, 79, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireNE, 80, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireW, 75, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireE, 186, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireSW, 188, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireS, 190, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireSE, 191, true);
      $.ui.keyPress.bind$2(C.Input_ok, 76);
      $.ui.keyPress.bind$3$shift(C.Input_rest, 76, true);
      $.ui.keyPress.bind$3$alt(C.Input_fire, 76, true);
      $.ui.keyPress.bind$2(C.Input_n, 38);
      $.ui.keyPress.bind$2(C.Input_w, 37);
      $.ui.keyPress.bind$2(C.Input_e, 39);
      $.ui.keyPress.bind$2(C.Input_s, 40);
      $.ui.keyPress.bind$3$shift(C.Input_runN, 38, true);
      $.ui.keyPress.bind$3$shift(C.Input_runW, 37, true);
      $.ui.keyPress.bind$3$shift(C.Input_runE, 39, true);
      $.ui.keyPress.bind$3$shift(C.Input_runS, 40, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireN, 38, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireW, 37, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireE, 39, true);
      $.ui.keyPress.bind$3$alt(C.Input_fireS, 40, true);
      $.ui.keyPress.bind$2(C.Input_nw, 103);
      $.ui.keyPress.bind$2(C.Input_n, 104);
      $.ui.keyPress.bind$2(C.Input_ne, 105);
      $.ui.keyPress.bind$2(C.Input_w, 100);
      $.ui.keyPress.bind$2(C.Input_e, 102);
      $.ui.keyPress.bind$2(C.Input_sw, 97);
      $.ui.keyPress.bind$2(C.Input_s, 98);
      $.ui.keyPress.bind$2(C.Input_se, 99);
      $.ui.keyPress.bind$3$shift(C.Input_runNW, 103, true);
      $.ui.keyPress.bind$3$shift(C.Input_runN, 104, true);
      $.ui.keyPress.bind$3$shift(C.Input_runNE, 105, true);
      $.ui.keyPress.bind$3$shift(C.Input_runW, 100, true);
      $.ui.keyPress.bind$3$shift(C.Input_runE, 102, true);
      $.ui.keyPress.bind$3$shift(C.Input_runSW, 97, true);
      $.ui.keyPress.bind$3$shift(C.Input_runS, 98, true);
      $.ui.keyPress.bind$3$shift(C.Input_runSE, 99, true);
      $.ui.keyPress.bind$2(C.Input_ok, 101);
      $.ui.keyPress.bind$3$shift(C.Input_rest, 101, true);
      $.ui.keyPress.bind$3$alt(C.Input_fire, 101, true);
      $.ui.keyPress.bind$4$alt$shift(C.Input_wizard, 87, true, true);
      t3 = $.ui;
      t2 = new S.Storage($content, H.setRuntimeTypeInfo([], [G.HeroSave]));
      t2._load$0();
      t3.push$1(new B.MainMenuScreen($content, t2, 0));
      $.ui.set$handlingInput(true);
      $.ui.set$running(true);
    },
    fullscreen: function(element) {
      var jsElement, methods, t1, _i, method;
      jsElement = H.interceptedTypeCheck(P._wrapToDart(P._convertToJS(element)), "$isJsObject");
      if (jsElement.hasProperty$1("requestFullscreen"))
        jsElement.callMethod$1("requestFullscreen");
      else {
        methods = ["mozRequestFullScreen", "webkitRequestFullscreen", "msRequestFullscreen"];
        for (t1 = jsElement._js$_jsObject, _i = 0; _i < 3; ++_i) {
          method = methods[_i];
          if (method in t1) {
            jsElement.callMethod$1(method);
            return;
          }
        }
      }
    },
    TerminalView: {
      "^": "Object;name>,element,terminal,charWidth,charHeight"
    },
    addTerminal_closure: {
      "^": "Closure:37;element",
      call$1: function(_) {
        F.fullscreen(this.element);
      }
    },
    addTerminal_closure0: {
      "^": "Closure:129;name,terminal",
      call$1: function(_) {
        var t1, i, t2, t3;
        H.interceptedTypeCheck(_, "$isMouseEvent");
        for (t1 = this.name, i = 0; t2 = $.$get$terminals(), i < t2.length; ++i) {
          t2 = t2[i];
          if (t2.name === t1) {
            $.currentView = t2;
            document.querySelector("#game").appendChild($.currentView.element);
          } else {
            t2 = t2.element;
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          }
        }
        t2 = $.ui;
        t2._terminal = this.terminal;
        t2._dirty = true;
        window.localStorage.setItem("font", t1);
      }
    }
  }, 1]];
  setupProgram(dart, 0, 0);
  // getInterceptor methods
  J.getInterceptor$ = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ansx = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$in = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSNumber.prototype;
    }
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.get$appearance$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$appearance(receiver);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$children$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$children(receiver);
  };
  J.get$codeUnits$s = function(receiver) {
    return J.getInterceptor$s(receiver).get$codeUnits(receiver);
  };
  J.get$error$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$error(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$keys$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$keys(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$message$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$message(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$position$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$position(receiver);
  };
  J.get$previousNode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$previousNode(receiver);
  };
  J.get$sign$in = function(receiver) {
    if (typeof receiver === "number")
      return receiver > 0 ? 1 : receiver < 0 ? -1 : receiver;
    return J.getInterceptor$in(receiver).get$sign(receiver);
  };
  J.get$text$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$text(receiver);
  };
  J.get$type$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$type(receiver);
  };
  J.$add$ansx = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ansx(receiver).$add(receiver, a0);
  };
  J.$div$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver / a0;
    return J.getInterceptor$n(receiver).$div(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J.$indexSet$ax = function(receiver, a0, a1) {
    if (typeof a0 === "number")
      if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
        return receiver[a0] = a1;
    return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J._codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
  };
  J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.add$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).add$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.allMatches$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
  };
  J.ceil$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).ceil$0(receiver);
  };
  J.clamp$2$n = function(receiver, a0, a1) {
    return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.containsKey$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.forEach$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
  };
  J.map$1$1$ax = function(receiver, a0, $T1) {
    return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
  };
  J.remove$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).remove$0(receiver);
  };
  J.replaceWith$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.toList$0$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).toList$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor$(receiver).get$hashCode(receiver);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor$(receiver).$eq(receiver, a0);
  };
  J.noSuchMethod$1$ = function(receiver, a0) {
    return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor$(receiver).toString$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.ButtonElement_methods = W.ButtonElement.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSBool_methods = J.JSBool.prototype;
  C.JSDouble_methods = J.JSDouble.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.TableElement_methods = W.TableElement.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.Window_methods = W.Window.prototype;
  C.ActionResult_null_false_true = new V.ActionResult(null, false, true);
  C.ActionResult_null_true_false = new V.ActionResult(null, true, false);
  C.ActionResult_null_true_true = new V.ActionResult(null, true, true);
  C.C_OutOfMemoryError = new P.OutOfMemoryError();
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.Color_0_0_0 = new L.Color(0, 0, 0);
  C.Color_0_64_39 = new L.Color(0, 64, 39);
  C.Color_122_44_24 = new L.Color(122, 44, 24);
  C.Color_128_128_128 = new L.Color(128, 128, 128);
  C.Color_129_217_117 = new L.Color(129, 217, 117);
  C.Color_129_231_235 = new L.Color(129, 231, 235);
  C.Color_131_158_13 = new L.Color(131, 158, 13);
  C.Color_132_126_135 = new L.Color(132, 126, 135);
  C.Color_142_82_55 = new L.Color(142, 82, 55);
  C.Color_179_74_4 = new L.Color(179, 74, 4);
  C.Color_189_106_235 = new L.Color(189, 106, 235);
  C.Color_189_144_108 = new L.Color(189, 144, 108);
  C.Color_19_17_28 = new L.Color(19, 17, 28);
  C.Color_204_35_57 = new L.Color(204, 35, 57);
  C.Color_21_87_194 = new L.Color(21, 87, 194);
  C.Color_222_156_33 = new L.Color(222, 156, 33);
  C.Color_226_223_240 = new L.Color(226, 223, 240);
  C.Color_22_117_38 = new L.Color(22, 117, 38);
  C.Color_255_122_105 = new L.Color(255, 122, 105);
  C.Color_255_238_168 = new L.Color(255, 238, 168);
  C.Color_255_255_255 = new L.Color(255, 255, 255);
  C.Color_26_46_150 = new L.Color(26, 46, 150);
  C.Color_38_38_56 = new L.Color(38, 38, 56);
  C.Color_56_16_125 = new L.Color(56, 16, 125);
  C.Color_63_64_114 = new L.Color(63, 64, 114);
  C.Color_64_163_229 = new L.Color(64, 163, 229);
  C.Color_64_31_36 = new L.Color(64, 31, 36);
  C.Color_64_64_64 = new L.Color(64, 64, 64);
  C.Color_7_6_18 = new L.Color(7, 6, 18);
  C.Color_84_0_39 = new L.Color(84, 0, 39);
  C.Color_86_30_138 = new L.Color(86, 30, 138);
  C.Color_99_87_7 = new L.Color(99, 87, 7);
  C.Color_9_95_112 = new L.Color(9, 95, 112);
  C.DetectType_0 = new T.DetectType(0, "DetectType.exit");
  C.DetectType_1 = new T.DetectType(1, "DetectType.item");
  C.Direction_0_0 = new Z.Direction(0, 0);
  C.Direction_0_1 = new Z.Direction(0, 1);
  C.Direction_0_m1 = new Z.Direction(0, -1);
  C.Direction_1_0 = new Z.Direction(1, 0);
  C.Direction_1_1 = new Z.Direction(1, 1);
  C.Direction_1_m1 = new Z.Direction(1, -1);
  C.Direction_m1_0 = new Z.Direction(-1, 0);
  C.Direction_m1_1 = new Z.Direction(-1, 1);
  C.Direction_m1_m1 = new Z.Direction(-1, -1);
  C.EventType_awaken = new D.EventType("awaken");
  C.EventType_bolt = new D.EventType("bolt");
  C.EventType_cone = new D.EventType("cone");
  C.EventType_detect = new D.EventType("detect");
  C.EventType_die = new D.EventType("die");
  C.EventType_frighten = new D.EventType("frighten");
  C.EventType_gold = new D.EventType("gold");
  C.EventType_heal = new D.EventType("heal");
  C.EventType_hit = new D.EventType("hit");
  C.EventType_howl = new D.EventType("howl");
  C.EventType_knockBack = new D.EventType("knockBack");
  C.EventType_map = new D.EventType("map");
  C.EventType_openBarrel = new D.EventType("openBarrel");
  C.EventType_pause = new D.EventType("pause");
  C.EventType_slash = new D.EventType("slash");
  C.EventType_spawn = new D.EventType("spawn");
  C.EventType_stab = new D.EventType("stab");
  C.EventType_teleport = new D.EventType("teleport");
  C.EventType_toss = new D.EventType("toss");
  C.EventType_wind = new D.EventType("wind");
  C.Glyph_kVM = new L.Glyph(32, C.Color_255_255_255, C.Color_0_0_0);
  C.HitType_0 = new U.HitType(0, "HitType.melee");
  C.HitType_1 = new U.HitType(1, "HitType.ranged");
  C.HitType_2 = new U.HitType(2, "HitType.toss");
  C.Input_cancel = new Y.Input("cancel");
  C.Input_close = new Y.Input("close");
  C.Input_drop = new Y.Input("drop");
  C.Input_e = new Y.Input("e");
  C.Input_editSkills = new Y.Input("editSkills");
  C.Input_fire = new Y.Input("fire");
  C.Input_fireE = new Y.Input("fireE");
  C.Input_fireN = new Y.Input("fireN");
  C.Input_fireNE = new Y.Input("fireNE");
  C.Input_fireNW = new Y.Input("fireNW");
  C.Input_fireS = new Y.Input("fireS");
  C.Input_fireSE = new Y.Input("fireSE");
  C.Input_fireSW = new Y.Input("fireSW");
  C.Input_fireW = new Y.Input("fireW");
  C.Input_forfeit = new Y.Input("forfeit");
  C.Input_heroInfo = new Y.Input("heroInfo");
  C.Input_n = new Y.Input("n");
  C.Input_ne = new Y.Input("ne");
  C.Input_nw = new Y.Input("nw");
  C.Input_ok = new Y.Input("ok");
  C.Input_open = new Y.Input("open");
  C.Input_pickUp = new Y.Input("pickUp");
  C.Input_quit = new Y.Input("quit");
  C.Input_rest = new Y.Input("rest");
  C.Input_runE = new Y.Input("runE");
  C.Input_runN = new Y.Input("runN");
  C.Input_runNE = new Y.Input("runNE");
  C.Input_runNW = new Y.Input("runNW");
  C.Input_runS = new Y.Input("runS");
  C.Input_runSE = new Y.Input("runSE");
  C.Input_runSW = new Y.Input("runSW");
  C.Input_runW = new Y.Input("runW");
  C.Input_s = new Y.Input("s");
  C.Input_se = new Y.Input("se");
  C.Input_selectSkill = new Y.Input("selectSkill");
  C.Input_sw = new Y.Input("sw");
  C.Input_swap = new Y.Input("swap");
  C.Input_toss = new Y.Input("toss");
  C.Input_unequip = new Y.Input("unequip");
  C.Input_use = new Y.Input("use");
  C.Input_w = new Y.Input("w");
  C.Input_wizard = new Y.Input("wizard");
  C.ItemLocation_46y = new O.ItemLocation("On Ground", "There is nothing on the ground.");
  C.ItemLocation_A8D = new O.ItemLocation("Equipment", "<not used>");
  C.ItemLocation_ukJ = new O.ItemLocation("Home", "There is nothing in your home.");
  C.ItemLocation_vOz = new O.ItemLocation("Crucible", "The crucible is waiting.");
  C.ItemLocation_wMy = new O.ItemLocation("Inventory", "Your backpack is empty.");
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.JsonCodec_null_null = new P.JsonCodec(null, null);
  C.JsonDecoder_null = new P.JsonDecoder(null);
  C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
  C.List_0 = H.setRuntimeTypeInfo(Isolate.makeConstantList(["Merek", "Carac", "Ulric", "Tybalt", "Borin", "Sadon", "Terrowin", "Rowan", "Forthwind", "Althalos", "Fendrel", "Brom", "Hadrian", "Crewe", "Bolbec", "Fenwick", "Mowbray", "Drake", "Bryce", "Leofrick", "Letholdus", "Lief", "Barda", "Rulf", "Robin", "Gavin", "Terrin", "Jarin", "Cedric", "Gavin", "Josef", "Janshai", "Doran", "Asher", "Quinn", "Xalvador", "Favian", "Destrian", "Dain", "Millicent", "Alys", "Ayleth", "Anastas", "Alianor", "Cedany", "Ellyn", "Helewys", "Malkyn", "Peronell", "Thea", "Gloriana", "Arabella", "Hildegard", "Brunhild", "Adelaide", "Beatrix", "Emeline", "Mirabelle", "Helena", "Guinevere", "Isolde", "Maerwynn", "Catrain", "Gussalen", "Enndolynn", "Krea", "Dimia", "Aleida"]), [P.String]);
  C.List_23r = H.setRuntimeTypeInfo(Isolate.makeConstantList(["______ ______                     _____                          _____", "\\ .  / \\  . /                     \\ . |                          \\  .|", " | .|   |. |                       | .|                           |. |", " |. |___| .|   _____  _____ _____  |. | ___     ______  ____  ___ | .|  ____", " |:::___:::|   \\::::\\ \\:::| \\:::|  |::|/:::\\   /::::::\\ \\:::|/:::\\|::| /::/", " |xx|   |xx|  ___ \\xx| |xx|  |xx|  |xx|  \\xx\\ |xx|__)xx| |xx|  \\x||xx|/x/", " |xx|   |xx| /xxx\\|xx| |xx|  |xx|  |xx|   |xx||xx|\\xxxx| |xx|     |xxxxxx\\", " |XX|   |XX||XX(__|XX| |XX\\__|XX|  |XX|__/XXX||XX|_____  |XX|     |XX| \\XX\\_", " |XX|   |XX| \\XXXX/\\XX\\ \\XXX/|XXX\\/XXX/\\XXXX/  \\XXXXXX/ /XXXX\\   /XXXX\\ \\XXX\\", " |XX|   |XX|_________________________________________________________________", " |XX|   |XX||XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\", "_|XX|   |XX|_", "\\XXX|   |XXX/", " \\XX|   |XX/", "  \\X|   |X/", "   \\|   |/"]), [P.String]);
  C.List_2Zi = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.List_5uo = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.ItemLocation_46y]), [O.ItemLocation]);
  C.List_E7y = H.setRuntimeTypeInfo(Isolate.makeConstantList([0, 2, 5, 10, 18, 26, 38]), [P.int]);
  C.List_GFv = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.ItemLocation_wMy, C.ItemLocation_A8D, C.ItemLocation_46y]), [O.ItemLocation]);
  C.List_QOW = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Color_38_38_56, C.Color_63_64_114, C.Color_132_126_135, C.Color_226_223_240, C.Color_189_144_108, C.Color_142_82_55, C.Color_122_44_24, C.Color_64_31_36, C.Color_255_238_168, C.Color_222_156_33, C.Color_179_74_4, C.Color_129_217_117, C.Color_99_87_7, C.Color_131_158_13, C.Color_22_117_38, C.Color_0_64_39, C.Color_255_122_105, C.Color_204_35_57, C.Color_84_0_39, C.Color_189_106_235, C.Color_86_30_138, C.Color_56_16_125, C.Color_129_231_235, C.Color_64_163_229, C.Color_21_87_194, C.Color_26_46_150]), [L.Color]);
  C._Sort_JQf = new E._Sort("ordered by appearance", "Sort by appearance");
  C._Sort_Qu1 = new E._Sort("ordered by depth", "Sort by depth");
  C._Sort_0CF = new E._Sort("ordered by name", "Sort by name");
  C._Sort_gc6 = new E._Sort("uniques", "Show only uniques");
  C.List_WtG = H.setRuntimeTypeInfo(Isolate.makeConstantList([C._Sort_JQf, C._Sort_Qu1, C._Sort_0CF, C._Sort_gc6]), [E._Sort]);
  C.List_aAW = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Direction_0_m1, C.Direction_1_0, C.Direction_0_1, C.Direction_m1_0]), [Z.Direction]);
  C.List_co5 = H.setRuntimeTypeInfo(Isolate.makeConstantList(["LLLLLL LLLLLL                     LLLLL                          LLLLL", "ERRRRE ERRRRE                     ERRRE                          ERRRE", " ERRE   ERRE                       ERRE                           ERRE", " ERRELLLERRE   LLLLL  LLLLL LLLLL  ERRE LLL     LLLLLL  LLLL  LLL ERRE  LLLL", " ERRREEERRRE   ERRRRL ERRRE ERRRE  ERREERRRL   LRRRRRRL ERRRLLRRRLERRE LRRE", " ERRE   ERRE  LLL ERRE ERRE  ERRE  ERRE  ERRL ERRELLERRE ERRE  EREERRELRE", " EOOE   EOOE LOOOEEOOE EOOE  EOOE  EOOE   EOOEEOOEEOOOOE EOOE     EOOOOOOL", " EGGE   EGGEEGGELLEGGE EGGLLLEGGE  EGGELLLGGGEEGGELLLLL  EGGE     EGGE EGGLL", " EYYE   EYYE EYYYYEEYYE EYYYEEYYYLLYYYEEYYYYE  EYYYYYYE LYYYYL   LYYYYL EYYYL", " EYYE   EYYELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", " EYYE   EYYEEYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYL", "LEYYE   EYYEL", "EYYYE   EYYYE", " EYYE   EYYE", "  EYE   EYE", "   EE   EE"]), [P.String]);
  C.List_ego = H.setRuntimeTypeInfo(Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
  C.List_empty = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.String]);
  C.List_empty0 = Isolate.makeConstantList([]);
  C.List_iDg = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.ItemLocation_wMy, C.ItemLocation_A8D]), [O.ItemLocation]);
  C.List_izR = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Direction_1_m1, C.Direction_1_1, C.Direction_m1_1, C.Direction_m1_m1]), [Z.Direction]);
  C.List_mC8 = H.setRuntimeTypeInfo(Isolate.makeConstantList([15, 20, 24, 30, 40, 50, 60, 80, 100, 120, 150, 180, 240]), [P.int]);
  C.List_slV = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Direction_0_m1, C.Direction_1_m1, C.Direction_1_0, C.Direction_1_1, C.Direction_0_1, C.Direction_m1_1, C.Direction_m1_0, C.Direction_m1_m1]), [Z.Direction]);
  C.List_tBY = H.setRuntimeTypeInfo(Isolate.makeConstantList(["weapon", "ring", "necklace", "body", "cloak", "shield", "helm", "gloves", "boots"]), [P.String]);
  C.List_ukV = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Color_255_122_105, C.Color_204_35_57, C.Color_64_31_36, C.Color_0_0_0]), [L.Color]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.Stat_Strength = new D.Stat("Strength");
  C.Stat_Agility = new D.Stat("Agility");
  C.Stat_Fortitude = new D.Stat("Fortitude");
  C.Stat_Intellect = new D.Stat("Intellect");
  C.Stat_Will = new D.Stat("Will");
  C.List_zPV = H.setRuntimeTypeInfo(Isolate.makeConstantList([C.Stat_Strength, C.Stat_Agility, C.Stat_Fortitude, C.Stat_Intellect, C.Stat_Will]), [D.Stat]);
  C.LogType_cheat = new O.LogType("cheat");
  C.LogType_error = new O.LogType("error");
  C.LogType_gain = new O.LogType("gain");
  C.LogType_help = new O.LogType("help");
  C.LogType_message = new O.LogType("message");
  C.LogType_quest = new O.LogType("quest");
  C.Map_6xa1A = new H.GeneralConstantMap([9786, 1, 9787, 2, 9829, 3, 9830, 4, 9827, 5, 9824, 6, 8226, 7, 9688, 8, 9675, 9, 9689, 10, 9794, 11, 9792, 12, 9834, 13, 9835, 14, 9788, 15, 9658, 16, 9668, 17, 8597, 18, 8252, 19, 182, 20, 167, 21, 9644, 22, 8616, 23, 8593, 24, 8595, 25, 8594, 26, 8592, 27, 8735, 28, 8596, 29, 9650, 30, 9660, 31, 8962, 127, 199, 128, 252, 129, 233, 130, 226, 131, 228, 132, 224, 133, 229, 134, 231, 135, 234, 136, 235, 137, 232, 138, 239, 139, 238, 140, 236, 141, 196, 142, 197, 143, 201, 144, 230, 145, 198, 146, 244, 147, 246, 148, 242, 149, 251, 150, 249, 151, 255, 152, 214, 153, 220, 154, 162, 155, 163, 156, 165, 157, 8359, 158, 402, 159, 225, 160, 237, 161, 243, 162, 250, 163, 241, 164, 209, 165, 170, 166, 186, 167, 191, 168, 8976, 169, 172, 170, 189, 171, 188, 172, 161, 173, 171, 174, 187, 175, 9617, 176, 9618, 177, 9619, 178, 9474, 179, 9508, 180, 9569, 181, 9570, 182, 9558, 183, 9557, 184, 9571, 185, 9553, 186, 9559, 187, 9565, 188, 9564, 189, 9563, 190, 9488, 191, 9492, 192, 9524, 193, 9516, 194, 9500, 195, 9472, 196, 9532, 197, 9566, 198, 9567, 199, 9562, 200, 9556, 201, 9577, 202, 9574, 203, 9568, 204, 9552, 205, 9580, 206, 9575, 207, 9576, 208, 9572, 209, 9573, 210, 9561, 211, 9560, 212, 9554, 213, 9555, 214, 9579, 215, 9578, 216, 9496, 217, 9484, 218, 9608, 219, 9604, 220, 9612, 221, 9616, 222, 9600, 223, 945, 224, 223, 225, 915, 226, 960, 227, 931, 228, 963, 229, 181, 230, 964, 231, 934, 232, 920, 233, 937, 234, 948, 235, 8734, 236, 966, 237, 949, 238, 8745, 239, 8801, 240, 177, 241, 8805, 242, 8804, 243, 8992, 244, 8993, 245, 247, 246, 8776, 247, 176, 248, 8729, 249, 183, 250, 8730, 251, 8319, 252, 178, 253, 9632, 254], [P.int, P.int]);
  C.List_cmY = H.setRuntimeTypeInfo(Isolate.makeConstantList(["L", "E", "R", "O", "G", "Y"]), [P.String]);
  C.Map_cmivT = new H.ConstantStringMap(6, {L: C.Color_132_126_135, E: C.Color_63_64_114, R: C.Color_204_35_57, O: C.Color_122_44_24, G: C.Color_179_74_4, Y: C.Color_222_156_33}, C.List_cmY, [P.String, L.Color]);
  C.List_empty1 = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.Symbol0]);
  C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty1, [P.Symbol0, null]);
  C.Missive_0 = new R.Missive(0, "Missive.clumsy");
  C.Missive_1 = new R.Missive(1, "Missive.insult");
  C.Pronoun_he_him_his = new O.Pronoun("he", "him", "his");
  C.Pronoun_it_it_its = new O.Pronoun("it", "it", "its");
  C.Pronoun_they_them_their = new O.Pronoun("they", "them", "their");
  C.Pronoun_you_you_your = new O.Pronoun("you", "you", "your");
  C.SpawnLocation_0 = new B.SpawnLocation(0, "SpawnLocation.anywhere");
  C.SpawnLocation_1 = new B.SpawnLocation(1, "SpawnLocation.open");
  C.SpawnLocation_2 = new B.SpawnLocation(2, "SpawnLocation.wall");
  C.SpawnLocation_3 = new B.SpawnLocation(3, "SpawnLocation.corner");
  C.Symbol_call = new H.Symbol("call");
  C.Symmetry_0 = new T.Symmetry(0, "Symmetry.none");
  C.Symmetry_1 = new T.Symmetry(1, "Symmetry.mirrorHorizontal");
  C.Symmetry_2 = new T.Symmetry(2, "Symmetry.mirrorVertical");
  C.Symmetry_3 = new T.Symmetry(3, "Symmetry.mirrorBoth");
  C.Symmetry_4 = new T.Symmetry(4, "Symmetry.rotate90");
  C.Symmetry_5 = new T.Symmetry(5, "Symmetry.rotate180");
  C.Vec_0_1 = new L.Vec(0, 1);
  C.Vec_0_m1 = new L.Vec(0, -1);
  C.Vec_1_0 = new L.Vec(1, 0);
  C.Vec_m1_0 = new L.Vec(-1, 0);
  C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  $.Primitives_timerFrequency = null;
  $.Primitives_timerTicks = null;
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Stopwatch__frequency = null;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.Device__isOpera = null;
  $.Device__isIE = null;
  $.Device__isFirefox = null;
  $.Device__isWebKit = null;
  $.Device__cachedCssPrefix = null;
  $._frequency = 1;
  $._themes = null;
  $.Dungeon_last = null;
  $.Dungeon_debugPlaces = null;
  $._sortIndex = 0;
  $._category = null;
  $._item = null;
  $._affixTag = null;
  $._affix = null;
  $._builder = null;
  $.Debug_showAllMonsters = false;
  $.Debug_showHeroVolume = false;
  $.Debug__gameScreen = null;
  $.Skill__nextSortOrder = 0;
  $.ui = null;
  $.currentView = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    var hunk = $dart_deferred_initializers$[hunkHash];
    if (hunk == null)
      throw "DeferredLoading state error: code with hash '" + hunkHash + "' was not loaded";
    hunk($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryParts = {};
  init.deferredPartUris = [];
  init.deferredPartHashes = [];
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__nullFuture", "$get$Future__nullFuture", function() {
    return P._Future$zoneValue(null, C.C__RootZone, P.Null);
  }, "Future__nullFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
    return {};
  }, "CssStyleDeclaration__propertyCache", "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
  }, "_Html5NodeValidator__allowedElements", "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
  }, "_Html5NodeValidator__attributeValidators", "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartObject");
  }, "_DART_OBJECT_PROPERTY_NAME", "_dartProxyCtor", "$get$_dartProxyCtor", function() {
    return function DartObject(o) {
      this.o = o;
    };
  }, "_dartProxyCtor", "_messages", "$get$_messages", function() {
    var t1 = [P.String];
    return P.LinkedHashMap_LinkedHashMap$_literal([C.Missive_0, H.setRuntimeTypeInfo(["{1} forget[s] what {1 he} was doing.", "{1} lurch[es] around.", "{1} stumble[s] awkwardly.", "{1} trip[s] over {1 his} own feet!"], t1), C.Missive_1, H.setRuntimeTypeInfo(["{1} insult[s] {2 his} mother!", "{1} jeer[s] at {2}!", "{1} mock[s] {2} mercilessly!", "{1} make[s] faces at {2}!", "{1} laugh[s] at {2}!", "{1} sneer[s] at {2}!"], t1)], R.Missive, [P.List, P.String]);
  }, "_messages", "Classes_adventurer", "$get$Classes_adventurer", function() {
    return V._class("Adventurer", "TODO", X.parseDrop("item", 1), 0.5, 0.2);
  }, "Classes_adventurer", "Classes_warrior", "$get$Classes_warrior", function() {
    return V._class("Warrior", "TODO", X.parseDrop("weapon", 1), 1, 0);
  }, "Classes_warrior", "Classes_mage", "$get$Classes_mage", function() {
    return V._class("Mage", "TODO", X.parseDrop('Spellbook "Elemental Primer"', 1), 0.2, 1);
  }, "Classes_mage", "Classes_all", "$get$Classes_all", function() {
    return H.setRuntimeTypeInfo([$.$get$Classes_adventurer(), $.$get$Classes_warrior(), $.$get$Classes_mage()], [T.HeroClass]);
  }, "Classes_all", "Blast__tileMap", "$get$Blast__tileMap", function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27;
    t1 = $.$get$Tiles_floor();
    t2 = $.$get$Tiles_burntFloor();
    t3 = $.$get$Tiles_burntFloor2();
    t4 = Q.TileType;
    t5 = [t4];
    t6 = H.setRuntimeTypeInfo([t2, t3], t5);
    t7 = $.$get$Tiles_tableTopLeft();
    t8 = H.setRuntimeTypeInfo([t7, t2, t3], t5);
    t9 = $.$get$Tiles_tableTop();
    t10 = H.setRuntimeTypeInfo([t9, t2, t3], t5);
    t11 = $.$get$Tiles_tableTopRight();
    t12 = H.setRuntimeTypeInfo([t11, t2, t3], t5);
    t13 = $.$get$Tiles_tableSide();
    t14 = H.setRuntimeTypeInfo([t13, t2, t3], t5);
    t15 = $.$get$Tiles_tableCenter();
    t16 = H.setRuntimeTypeInfo([t15, t2, t3], t5);
    t17 = $.$get$Tiles_tableBottomLeft();
    t18 = H.setRuntimeTypeInfo([t17, t2, t3], t5);
    t19 = $.$get$Tiles_tableBottom();
    t20 = H.setRuntimeTypeInfo([t19, t2, t3], t5);
    t21 = $.$get$Tiles_tableBottomRight();
    t22 = H.setRuntimeTypeInfo([t21, t2, t3], t5);
    t23 = $.$get$Tiles_tableLegLeft();
    t24 = H.setRuntimeTypeInfo([t23, t2, t3], t5);
    t25 = $.$get$Tiles_tableLeg();
    t26 = H.setRuntimeTypeInfo([t25, t2, t3], t5);
    t27 = $.$get$Tiles_tableLegRight();
    return P.LinkedHashMap_LinkedHashMap$_literal([t1, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, H.setRuntimeTypeInfo([t27, t2, t3], t5)], t4, [P.List, Q.TileType]);
  }, "Blast__tileMap", "Decor_all", "$get$Decor_all", function() {
    return Y.ResourceSet$(Y.Decor);
  }, "Decor_all", "_applyCells", "$get$_applyCells", function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    t1 = $.$get$Tiles_tableTopLeft();
    t2 = $.$get$Motility_walk();
    t1 = S.Cell$(t1, t2, null, null);
    t3 = S.Cell$($.$get$Tiles_tableTop(), t2, null, null);
    t4 = S.Cell$($.$get$Tiles_tableTopRight(), t2, null, null);
    t5 = $.$get$Tiles_tableCenter();
    t6 = S.Cell$(t5, t2, null, null);
    t7 = S.Cell$($.$get$Tiles_tableSide(), t2, null, null);
    t8 = S.Cell$($.$get$Tiles_tableBottomLeft(), t2, null, null);
    t9 = S.Cell$($.$get$Tiles_tableBottom(), t2, null, null);
    t10 = S.Cell$($.$get$Tiles_tableBottomRight(), t2, null, null);
    t11 = S.Cell$($.$get$Tiles_tableLegLeft(), t2, null, null);
    t12 = S.Cell$($.$get$Tiles_tableLeg(), t2, null, null);
    t13 = S.Cell$($.$get$Tiles_tableLegRight(), t2, null, null);
    t14 = S.Cell$($.$get$Tiles_chair(), t2, null, null);
    t5 = S.Cell$($.$get$Tiles_candle(), null, t5, null);
    t15 = $.$get$Tiles_wallTorch();
    t16 = S.Cell$(t15, null, $.$get$Tiles_wall(), null);
    t15 = S.Cell$(t15, t2, null, null);
    t17 = S.Cell$($.$get$Tiles_statue(), t2, null, null);
    t18 = $.$get$Tiles_water();
    return P.LinkedHashMap_LinkedHashMap$_literal(["\u250c", t1, "\u2500", t3, "\u2510", t4, "-", t6, "\u2502", t7, "\u2558", t8, "\u2550", t9, "\u255b", t10, "\u255e", t11, "\u2564", t12, "\u2561", t13, "\u03c0", t14, "i", t5, "I", t16, "l", t15, "P", t17, "\u2248", S.Cell$(t18, t2, null, null), "%", S.Cell$($.$get$Tiles_closedBarrel(), t2, null, null), "&", S.Cell$($.$get$Tiles_closedChest(), t2, null, null), "*", S.Cell$($.$get$Tiles_tallGrass(), null, $.$get$Tiles_grass(), null), "=", S.Cell$($.$get$Tiles_bridge(), null, t18, null), "\u2022", S.Cell$($.$get$Tiles_steppingStone(), null, t18, null)], P.String, S.Cell);
  }, "_applyCells", "_requireCells", "$get$_requireCells", function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18;
    t1 = S.Cell$(null, null, null, null);
    t2 = S.Cell$(null, $.$get$Motility_walk(), null, null);
    t3 = S.Cell$(null, null, $.$get$Tiles_wall(), null);
    t4 = S.Cell$(null, null, $.$get$Tiles_tableTopLeft(), null);
    t5 = S.Cell$(null, null, $.$get$Tiles_tableTop(), null);
    t6 = S.Cell$(null, null, $.$get$Tiles_tableTopRight(), null);
    t7 = S.Cell$(null, null, $.$get$Tiles_tableCenter(), null);
    t8 = S.Cell$(null, null, $.$get$Tiles_tableSide(), null);
    t9 = S.Cell$(null, null, $.$get$Tiles_tableBottomLeft(), null);
    t10 = S.Cell$(null, null, $.$get$Tiles_tableBottom(), null);
    t11 = S.Cell$(null, null, $.$get$Tiles_tableBottomRight(), null);
    t12 = S.Cell$(null, null, $.$get$Tiles_tableLegLeft(), null);
    t13 = S.Cell$(null, null, $.$get$Tiles_tableLeg(), null);
    t14 = S.Cell$(null, null, $.$get$Tiles_tableLegRight(), null);
    t15 = S.Cell$(null, null, $.$get$Tiles_chair(), null);
    t16 = S.Cell$(null, null, $.$get$Tiles_water(), null);
    t17 = S.Cell$(null, null, null, H.setRuntimeTypeInfo([$.$get$Tiles_grass(), $.$get$Tiles_tallGrass()], [Q.TileType]));
    t18 = $.$get$Tiles_steppingStone();
    return P.LinkedHashMap_LinkedHashMap$_literal(["?", t1, ".", t2, "#", t3, "\u250c", t4, "\u2500", t5, "\u2510", t6, "-", t7, "\u2502", t8, "\u2558", t9, "\u2550", t10, "\u255b", t11, "\u255e", t12, "\u2564", t13, "\u2561", t14, "\u03c0", t15, "\u2248", t16, "'", t17, "\u2022", S.Cell$(null, null, t18, null), "o", S.Cell$(null, null, t18, null)], P.String, S.Cell);
  }, "_requireCells", "_mirrorHorizontal", "$get$_mirrorHorizontal", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2510", "\u255b\u2558", "\u255e\u2561"], [P.String]);
  }, "_mirrorHorizontal", "_mirrorVertical", "$get$_mirrorVertical", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2558", "\u2510\u255b", "\u2500\u2550"], [P.String]);
  }, "_mirrorVertical", "_rotate", "$get$_rotate", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2510\u255b\u2558", "\u2500\u2502\u2550\u2502"], [P.String]);
  }, "_rotate", "RoomTypes__resources", "$get$RoomTypes__resources", function() {
    return Y.ResourceSet$(R.RoomType);
  }, "RoomTypes__resources", "Elements_air", "$get$Elements_air", function() {
    return G.Element$("air", "Ai", 1.2, new A.Elements_closure0(), null, null, null);
  }, "Elements_air", "Elements_earth", "$get$Elements_earth", function() {
    return G.Element$("earth", "Ea", 1.1, null, null, null, null);
  }, "Elements_earth", "Elements_fire", "$get$Elements_fire", function() {
    return G.Element$("fire", "Fi", 1.2, new A.Elements_closure7(), "burns up", true, new A.Elements_closure8());
  }, "Elements_fire", "Elements_water", "$get$Elements_water", function() {
    return G.Element$("water", "Wa", 1.3, null, null, null, null);
  }, "Elements_water", "Elements_acid", "$get$Elements_acid", function() {
    return G.Element$("acid", "Ac", 1.4, null, null, null, null);
  }, "Elements_acid", "Elements_cold", "$get$Elements_cold", function() {
    return G.Element$("cold", "Co", 1.2, new A.Elements_closure3(), "shatters", null, new A.Elements_closure4());
  }, "Elements_cold", "Elements_lightning", "$get$Elements_lightning", function() {
    return G.Element$("lightning", "Ln", 1.1, null, null, null, null);
  }, "Elements_lightning", "Elements_poison", "$get$Elements_poison", function() {
    return G.Element$("poison", "Po", 2, new A.Elements_closure5(), null, null, new A.Elements_closure6());
  }, "Elements_poison", "Elements_dark", "$get$Elements_dark", function() {
    return G.Element$("dark", "Dk", 1.5, new A.Elements_closure(), null, null, null);
  }, "Elements_dark", "Elements_light", "$get$Elements_light", function() {
    return G.Element$("light", "Li", 1.5, new A.Elements_closure1(), null, null, new A.Elements_closure2());
  }, "Elements_light", "Elements_spirit", "$get$Elements_spirit", function() {
    return G.Element$("spirit", "Sp", 3, null, null, null, null);
  }, "Elements_spirit", "Elements_all", "$get$Elements_all", function() {
    return H.setRuntimeTypeInfo([$.$get$Element_none(), $.$get$Elements_air(), $.$get$Elements_earth(), $.$get$Elements_fire(), $.$get$Elements_water(), $.$get$Elements_acid(), $.$get$Elements_cold(), $.$get$Elements_lightning(), $.$get$Elements_poison(), $.$get$Elements_dark(), $.$get$Elements_light(), $.$get$Elements_spirit()], [G.Element]);
  }, "Elements_all", "Affixes_prefixes", "$get$Affixes_prefixes", function() {
    return Y.ResourceSet$(L.Affix);
  }, "Affixes_prefixes", "Affixes_suffixes", "$get$Affixes_suffixes", function() {
    return Y.ResourceSet$(L.Affix);
  }, "Affixes_suffixes", "_floorDrops", "$get$_floorDrops", function() {
    return Y.ResourceSet$(F.FloorDrop);
  }, "_floorDrops", "Items_types", "$get$Items_types", function() {
    return Y.ResourceSet$(L.ItemType);
  }, "Items_types", "Shops_all", "$get$Shops_all", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, O.Shop);
  }, "Shops_all", "collapseNewlines", "$get$collapseNewlines", function() {
    return P.RegExp_RegExp("\\n\\s*", true, false);
  }, "collapseNewlines", "breedGroups", "$get$breedGroups", function() {
    return P.LinkedHashMap_LinkedHashMap$fromIterable([B.BreedGroup$("Animals", "animal"), B.BreedGroup$("Bugs", "bug"), B.BreedGroup$("Dragons", "dragon"), B.BreedGroup$("Fae Folk", "fae"), B.BreedGroup$("Goblins", "goblin"), B.BreedGroup$("Humans", "human"), B.BreedGroup$("Jellies", "jelly"), B.BreedGroup$("Kobolds", "kobold"), B.BreedGroup$("Plants", "plant"), B.BreedGroup$("Saurians", "saurian")], new R.closure(), null, P.String, B.BreedGroup);
  }, "breedGroups", "_family", "$get$_family", function() {
    return R._FamilyBuilder$(null);
  }, "_family", "_minionNames", "$get$_minionNames", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(B.Breed, [P.List, R._NamedMinion]);
  }, "_minionNames", "Monsters_breeds", "$get$Monsters_breeds", function() {
    return Y.ResourceSet$(B.Breed);
  }, "Monsters_breeds", "Recipes_all", "$get$Recipes_all", function() {
    return H.setRuntimeTypeInfo([], [G.Recipe]);
  }, "Recipes_all", "Races_dwarf", "$get$Races_dwarf", function() {
    return B.Races__race("Dwarf", 25, "It takes a certain kind of person to be willing to spend their life deep in the bowels of the Earth, toiling away in darkness. Dwarves aren't just willing, but delight in it. Solid, impenetrable and, well, not very bright... perhaps it's no surprise that dwarves love mines since they have so much in common.", 45, 15, 35, 30);
  }, "Races_dwarf", "Races_elf", "$get$Races_elf", function() {
    return B.Races__race("Elf", 40, "There are few things elves are not good at, as any elf will be quick to inform you. Clever, quick on their feet, and surprisingly strong for how they look. Which is radiantly beautiful, naturally.", 25, 35, 35, 25);
  }, "Races_elf", "Races_fae", "$get$Races_fae", function() {
    return B.Races__race("Fae", 45, "What can be said about the fae folk that is known to be true? Dimunitive and easily harmed, they survive by cloaking themselves in fables, tricks, and subterfuge. Quick to anger, and quick to forgive, the fae live each moment as if it may be their last, bright-burning flames all too aware of how easily they may be snuffed out.", 15, 30, 20, 20);
  }, "Races_fae", "Races_gnome", "$get$Races_gnome", function() {
    return B.Races__race("Gnome", 20, "Gnomes are gentle, quiet folk, difficult to arouse to anger (unless you interrupt one while reading). Most live a life of the mind, seeking knowledge more than adventure. But this insatiable desire for the former, on many occasions, leads them into the jaws of the latter.", 30, 45, 20, 35);
  }, "Races_gnome", "Races_human", "$get$Races_human", function() {
    return B.Races__race("Human", 30, "Humans excel at nothing, but nor are they particularly weak in any area. Most other races considers humans sort of like mice: pesky creatures who seem do little but breed, which they do with great devotion.", 30, 30, 30, 30);
  }, "Races_human", "Races_troll", "$get$Races_troll", function() {
    return B.Races__race("Troll", 40, "Troll strong like rock. Troll smart like rock. Troll eat rock.", 35, 10, 45, 20);
  }, "Races_troll", "Races_all", "$get$Races_all", function() {
    return H.setRuntimeTypeInfo([$.$get$Races_dwarf(), $.$get$Races_elf(), $.$get$Races_fae(), $.$get$Races_gnome(), $.$get$Races_human(), $.$get$Races_troll()], [N.Race]);
  }, "Races_all", "Skills_all", "$get$Skills_all", function() {
    return Q.Skills__generateSkills();
  }, "Skills_all", "Skills__byName", "$get$Skills__byName", function() {
    return P.LinkedHashMap_LinkedHashMap$fromIterable($.$get$Skills_all(), new Q.Skills_closure(), null, P.String, M.Skill);
  }, "Skills__byName", "Tiles_floor", "$get$Tiles_floor", function() {
    return Z.tile("floor", "\xb7", C.Color_63_64_114, null).open$0(0);
  }, "Tiles_floor", "Tiles_burntFloor", "$get$Tiles_burntFloor", function() {
    return Z.tile("burnt floor", "\u03c6", C.Color_38_38_56, null).open$0(0);
  }, "Tiles_burntFloor", "Tiles_burntFloor2", "$get$Tiles_burntFloor2", function() {
    return Z.tile("burnt floor", "\u03b5", C.Color_38_38_56, null).open$0(0);
  }, "Tiles_burntFloor2", "Tiles_rock", "$get$Tiles_rock", function() {
    return Z.tile("rock", "\u2593", C.Color_132_126_135, C.Color_63_64_114).solid$0();
  }, "Tiles_rock", "Tiles_wall", "$get$Tiles_wall", function() {
    return Z.tile("wall", "\u2592", C.Color_132_126_135, C.Color_63_64_114).solid$0();
  }, "Tiles_wall", "Tiles_openDoor", "$get$Tiles_openDoor", function() {
    var t1 = Z.tile("open door", "\u25cb", C.Color_142_82_55, C.Color_64_31_36);
    t1._onClose = H.functionTypeCheck(Z.tiles___closeDoor$closure(), {func: 1, ret: V.Action, args: [L.Vec]});
    return t1.open$0(0);
  }, "Tiles_openDoor", "Tiles_closedDoor", "$get$Tiles_closedDoor", function() {
    return Z.tile("closed door", "\u25d9", C.Color_142_82_55, C.Color_64_31_36).onOpen$1(Z.tiles___openDoor$closure())._tiles$_motility$1($.$get$Motility_door());
  }, "Tiles_closedDoor", "Tiles_stairs", "$get$Tiles_stairs", function() {
    var t1 = Z.tile("stairs", "\u2261", C.Color_132_126_135, C.Color_63_64_114);
    t1._isExit = true;
    return t1.open$0(0);
  }, "Tiles_stairs", "Tiles_bridge", "$get$Tiles_bridge", function() {
    return Z.tile("bridge", "\u2261", C.Color_142_82_55, C.Color_64_31_36).open$0(0);
  }, "Tiles_bridge", "Tiles_water", "$get$Tiles_water", function() {
    return Z.tile("water", "\u2248", C.Color_21_87_194, C.Color_26_46_150)._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_swim()));
  }, "Tiles_water", "Tiles_steppingStone", "$get$Tiles_steppingStone", function() {
    return Z.tile("stepping stone", "\u2022", C.Color_132_126_135, C.Color_26_46_150).open$0(0);
  }, "Tiles_steppingStone", "Tiles_dirt", "$get$Tiles_dirt", function() {
    return Z.tile("dirt", "\xb7", C.Color_64_31_36, null).open$0(0);
  }, "Tiles_dirt", "Tiles_dirt2", "$get$Tiles_dirt2", function() {
    return Z.tile("dirt2", "\u03c6", C.Color_64_31_36, null).open$0(0);
  }, "Tiles_dirt2", "Tiles_grass", "$get$Tiles_grass", function() {
    return Z.tile("grass", "\u2591", C.Color_22_117_38, null).open$0(0);
  }, "Tiles_grass", "Tiles_tallGrass", "$get$Tiles_tallGrass", function() {
    return Z.tile("tall grass", "\u221a", C.Color_22_117_38, null).open$0(0);
  }, "Tiles_tallGrass", "Tiles_tree", "$get$Tiles_tree", function() {
    return Z.tile("tree", "\u25b2", C.Color_22_117_38, C.Color_0_64_39).solid$0();
  }, "Tiles_tree", "Tiles_treeAlt1", "$get$Tiles_treeAlt1", function() {
    return Z.tile("tree", "\u2660", C.Color_22_117_38, C.Color_0_64_39).solid$0();
  }, "Tiles_treeAlt1", "Tiles_treeAlt2", "$get$Tiles_treeAlt2", function() {
    return Z.tile("tree", "\u2663", C.Color_22_117_38, C.Color_0_64_39).solid$0();
  }, "Tiles_treeAlt2", "Tiles_tableTopLeft", "$get$Tiles_tableTopLeft", function() {
    return Z.tile("table", "\u250c", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTopLeft", "Tiles_tableTop", "$get$Tiles_tableTop", function() {
    return Z.tile("table", "\u2500", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTop", "Tiles_tableTopRight", "$get$Tiles_tableTopRight", function() {
    return Z.tile("table", "\u2510", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTopRight", "Tiles_tableSide", "$get$Tiles_tableSide", function() {
    return Z.tile("table", "\u2502", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableSide", "Tiles_tableCenter", "$get$Tiles_tableCenter", function() {
    return Z.tile("table", " ", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableCenter", "Tiles_tableBottomLeft", "$get$Tiles_tableBottomLeft", function() {
    return Z.tile("table", "\u2558", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottomLeft", "Tiles_tableBottom", "$get$Tiles_tableBottom", function() {
    return Z.tile("table", "\u2550", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottom", "Tiles_tableBottomRight", "$get$Tiles_tableBottomRight", function() {
    return Z.tile("table", "\u255b", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottomRight", "Tiles_tableLegLeft", "$get$Tiles_tableLegLeft", function() {
    return Z.tile("table", "\u255e", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLegLeft", "Tiles_tableLeg", "$get$Tiles_tableLeg", function() {
    return Z.tile("table", "\u2564", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLeg", "Tiles_tableLegRight", "$get$Tiles_tableLegRight", function() {
    return Z.tile("table", "\u2561", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLegRight", "Tiles_candle", "$get$Tiles_candle", function() {
    return Z.tile("candle", "\u2265", C.Color_189_144_108, null).emanate$1(6).obstacle$0();
  }, "Tiles_candle", "Tiles_wallTorch", "$get$Tiles_wallTorch", function() {
    return Z.tile("wall torch", "\u2264", C.Color_222_156_33, C.Color_63_64_114).emanate$1(8).solid$0();
  }, "Tiles_wallTorch", "Tiles_openChest", "$get$Tiles_openChest", function() {
    return Z.tile("open chest", "\u2320", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_openChest", "Tiles_closedChest", "$get$Tiles_closedChest", function() {
    return Z.tile("closed chest", "\u2321", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure0()).obstacle$0();
  }, "Tiles_closedChest", "Tiles_closedBarrel", "$get$Tiles_closedBarrel", function() {
    return Z.tile("closed barrel", "\xb0", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure()).obstacle$0();
  }, "Tiles_closedBarrel", "Tiles_openBarrel", "$get$Tiles_openBarrel", function() {
    return Z.tile("open barrel", "\u2219", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_openBarrel", "Tiles_statue", "$get$Tiles_statue", function() {
    return Z.tile("statue", "P", C.Color_226_223_240, C.Color_63_64_114).obstacle$0();
  }, "Tiles_statue", "Tiles_chair", "$get$Tiles_chair", function() {
    return Z.tile("chair", "\u03c0", C.Color_142_82_55, null).open$0(0);
  }, "Tiles_chair", "Tiles_brownJellyStain", "$get$Tiles_brownJellyStain", function() {
    return Z.tile("brown jelly stain", "\xb7", C.Color_142_82_55, null).open$0(0);
  }, "Tiles_brownJellyStain", "Tiles_grayJellyStain", "$get$Tiles_grayJellyStain", function() {
    return Z.tile("gray jelly stain", "\xb7", C.Color_38_38_56, null).open$0(0);
  }, "Tiles_grayJellyStain", "Tiles_greenJellyStain", "$get$Tiles_greenJellyStain", function() {
    return Z.tile("green jelly stain", "\xb7", C.Color_131_158_13, null).open$0(0);
  }, "Tiles_greenJellyStain", "Tiles_redJellyStain", "$get$Tiles_redJellyStain", function() {
    return Z.tile("red jelly stain", "\xb7", C.Color_204_35_57, null).open$0(0);
  }, "Tiles_redJellyStain", "Tiles_violetJellyStain", "$get$Tiles_violetJellyStain", function() {
    return Z.tile("violet jelly stain", "\xb7", C.Color_86_30_138, null).open$0(0);
  }, "Tiles_violetJellyStain", "Tiles_whiteJellyStain", "$get$Tiles_whiteJellyStain", function() {
    return Z.tile("white jelly stain", "\xb7", C.Color_226_223_240, null).open$0(0);
  }, "Tiles_whiteJellyStain", "Tiles_spiderweb", "$get$Tiles_spiderweb", function() {
    return Z.tile("spiderweb", "\xf7", C.Color_63_64_114, null).open$0(0);
  }, "Tiles_spiderweb", "Tiles__ignition", "$get$Tiles__ignition", function() {
    return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_openDoor(), 30, $.$get$Tiles_closedDoor(), 30, $.$get$Tiles_bridge(), 50, $.$get$Tiles_grass(), 3, $.$get$Tiles_tallGrass(), 3, $.$get$Tiles_tree(), 40, $.$get$Tiles_treeAlt1(), 40, $.$get$Tiles_treeAlt2(), 40, $.$get$Tiles_tableTopLeft(), 20, $.$get$Tiles_tableTop(), 20, $.$get$Tiles_tableTopRight(), 20, $.$get$Tiles_tableSide(), 20, $.$get$Tiles_tableCenter(), 20, $.$get$Tiles_tableBottomLeft(), 20, $.$get$Tiles_tableBottom(), 20, $.$get$Tiles_tableBottomRight(), 20, $.$get$Tiles_tableLegLeft(), 20, $.$get$Tiles_tableLeg(), 20, $.$get$Tiles_tableLegRight(), 20, $.$get$Tiles_openChest(), 40, $.$get$Tiles_closedChest(), 80, $.$get$Tiles_openBarrel(), 15, $.$get$Tiles_closedBarrel(), 40, $.$get$Tiles_candle(), 1, $.$get$Tiles_chair(), 10, $.$get$Tiles_spiderweb(), 1], Q.TileType, P.int);
  }, "Tiles__ignition", "Tiles__fuel", "$get$Tiles__fuel", function() {
    return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Tiles_openDoor(), 70, $.$get$Tiles_closedDoor(), 70, $.$get$Tiles_bridge(), 50, $.$get$Tiles_grass(), 30, $.$get$Tiles_tallGrass(), 50, $.$get$Tiles_tree(), 100, $.$get$Tiles_treeAlt1(), 100, $.$get$Tiles_treeAlt2(), 100, $.$get$Tiles_tableTopLeft(), 60, $.$get$Tiles_tableTop(), 60, $.$get$Tiles_tableTopRight(), 60, $.$get$Tiles_tableSide(), 60, $.$get$Tiles_tableCenter(), 60, $.$get$Tiles_tableBottomLeft(), 60, $.$get$Tiles_tableBottom(), 60, $.$get$Tiles_tableBottomRight(), 60, $.$get$Tiles_tableLegLeft(), 60, $.$get$Tiles_tableLeg(), 60, $.$get$Tiles_tableLegRight(), 60, $.$get$Tiles_openChest(), 70, $.$get$Tiles_closedChest(), 80, $.$get$Tiles_openBarrel(), 30, $.$get$Tiles_closedBarrel(), 40, $.$get$Tiles_candle(), 60, $.$get$Tiles_chair(), 40, $.$get$Tiles_spiderweb(), 20], Q.TileType, P.int);
  }, "Tiles__fuel", "Tiles__burnTypes", "$get$Tiles__burnTypes", function() {
    var t1, t2, t3, t4, t5, t6, t7;
    t1 = $.$get$Tiles_bridge();
    t2 = Q.TileType;
    t3 = [t2];
    t4 = H.setRuntimeTypeInfo([$.$get$Tiles_water()], t3);
    t5 = $.$get$Tiles_grass();
    t6 = $.$get$Tiles_dirt();
    t7 = $.$get$Tiles_dirt2();
    return P.LinkedHashMap_LinkedHashMap$_literal([t1, t4, t5, H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_tallGrass(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_tree(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_treeAlt1(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_treeAlt2(), H.setRuntimeTypeInfo([t6, t7], t3), $.$get$Tiles_candle(), H.setRuntimeTypeInfo([$.$get$Tiles_tableCenter()], t3), $.$get$Tiles_spiderweb(), H.setRuntimeTypeInfo([$.$get$Tiles_floor()], t3)], t2, [P.List, Q.TileType]);
  }, "Tiles__burnTypes", "Debug__monsters", "$get$Debug__monsters", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(B.Monster, E._MonsterLog);
  }, "Debug__monsters", "Element_none", "$get$Element_none", function() {
    return G.Element$("none", "No", 1, null, null, null, null);
  }, "Element_none", "Fov__octantCoordinates", "$get$Fov__octantCoordinates", function() {
    var t1 = [L.Vec];
    return H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_1_0], t1), H.setRuntimeTypeInfo([C.Vec_0_1, C.Vec_m1_0], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_1], t1), H.setRuntimeTypeInfo([C.Vec_m1_0, C.Vec_0_m1], t1), H.setRuntimeTypeInfo([C.Vec_0_m1, C.Vec_m1_0], t1)], [[P.List, L.Vec]]);
  }, "Fov__octantCoordinates", "Lighting__diagonalAttenuate", "$get$Lighting__diagonalAttenuate", function() {
    return C.JSInt_methods.ceil$0(63);
  }, "Lighting__diagonalAttenuate", "Motility_none", "$get$Motility_none", function() {
    return Q.Motility$_(0);
  }, "Motility_none", "Motility_door", "$get$Motility_door", function() {
    return Q.Motility$_(1);
  }, "Motility_door", "Motility_fly", "$get$Motility_fly", function() {
    return Q.Motility$_(2);
  }, "Motility_fly", "Motility_swim", "$get$Motility_swim", function() {
    return Q.Motility$_(4);
  }, "Motility_swim", "Motility_walk", "$get$Motility_walk", function() {
    return Q.Motility$_(8);
  }, "Motility_walk", "Motility_doorAndFly", "$get$Motility_doorAndFly", function() {
    return $.$get$Motility_door().$or(0, $.$get$Motility_fly());
  }, "Motility_doorAndFly", "Motility_doorAndWalk", "$get$Motility_doorAndWalk", function() {
    return $.$get$Motility_door().$or(0, $.$get$Motility_walk());
  }, "Motility_doorAndWalk", "Motility_flyAndWalk", "$get$Motility_flyAndWalk", function() {
    return $.$get$Motility_fly().$or(0, $.$get$Motility_walk());
  }, "Motility_flyAndWalk", "_directionLines", "$get$_directionLines", function() {
    return P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0_m1, "|", C.Direction_1_m1, "/", C.Direction_1_0, "-", C.Direction_1_1, "\\", C.Direction_0_1, "|", C.Direction_m1_1, "/", C.Direction_m1_0, "-", C.Direction_m1_m1, "\\"], Z.Direction, P.String);
  }, "_directionLines", "_elementSequences", "$get$_elementSequences", function() {
    var t1, t2;
    t1 = [L.Color];
    t2 = [[P.List, L.Glyph]];
    return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Element_none(), H.setRuntimeTypeInfo([K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_189_144_108], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_189_144_108], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_142_82_55], t1))], t2), $.$get$Elements_air(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_129_231_235], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_129_231_235], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_64_163_229], t1))], t2), $.$get$Elements_earth(), H.setRuntimeTypeInfo([K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_189_144_108, C.Color_222_156_33], t1)), K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_142_82_55, C.Color_64_31_36], t1)), K._glyphs("\u2022*", H.setRuntimeTypeInfo([C.Color_142_82_55], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_64_31_36], t1))], t2), $.$get$Elements_fire(), H.setRuntimeTypeInfo([K._glyphs("\u25b2^", H.setRuntimeTypeInfo([C.Color_222_156_33, C.Color_255_238_168], t1)), K._glyphs("*^", H.setRuntimeTypeInfo([C.Color_179_74_4], t1)), K._glyphs("^", H.setRuntimeTypeInfo([C.Color_204_35_57], t1)), K._glyphs("^", H.setRuntimeTypeInfo([C.Color_64_31_36, C.Color_204_35_57], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_64_31_36, C.Color_204_35_57], t1))], t2), $.$get$Elements_water(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_64_163_229], t1)), K._glyphs("o\u2022^", H.setRuntimeTypeInfo([C.Color_64_163_229, C.Color_21_87_194], t1)), K._glyphs("\u2022^", H.setRuntimeTypeInfo([C.Color_21_87_194, C.Color_26_46_150], t1)), K._glyphs("^~", H.setRuntimeTypeInfo([C.Color_21_87_194, C.Color_26_46_150], t1)), K._glyphs("~", H.setRuntimeTypeInfo([C.Color_26_46_150], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_26_46_150, C.Color_56_16_125], t1))], t2), $.$get$Elements_acid(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_255_238_168, C.Color_222_156_33], t1)), K._glyphs("o\u2022~", H.setRuntimeTypeInfo([C.Color_131_158_13, C.Color_222_156_33], t1)), K._glyphs(":,", H.setRuntimeTypeInfo([C.Color_131_158_13, C.Color_99_87_7], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_131_158_13], t1))], t2), $.$get$Elements_cold(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_226_223_240], t1)), K._glyphs("+x", H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_226_223_240], t1)), K._glyphs("+x", H.setRuntimeTypeInfo([C.Color_64_163_229, C.Color_132_126_135], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_63_64_114, C.Color_26_46_150], t1))], t2), $.$get$Elements_lightning(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_189_106_235], t1)), K._glyphs("-|\\/", H.setRuntimeTypeInfo([C.Color_86_30_138, C.Color_226_223_240], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_19_17_28, C.Color_189_106_235], t1))], t2), $.$get$Elements_poison(), H.setRuntimeTypeInfo([K._glyphs("Oo", H.setRuntimeTypeInfo([C.Color_129_217_117, C.Color_131_158_13], t1)), K._glyphs("o\u2022", H.setRuntimeTypeInfo([C.Color_22_117_38, C.Color_22_117_38, C.Color_99_87_7], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_0_64_39, C.Color_99_87_7], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_0_64_39], t1))], t2), $.$get$Elements_dark(), H.setRuntimeTypeInfo([K._glyphs("*%", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_38_38_56], t1)), K._glyphs("\u2022", H.setRuntimeTypeInfo([C.Color_19_17_28, C.Color_19_17_28, C.Color_132_126_135], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_19_17_28], t1))], t2), $.$get$Elements_light(), H.setRuntimeTypeInfo([K._glyphs("*", H.setRuntimeTypeInfo([C.Color_226_223_240], t1)), K._glyphs("x+", H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_255_238_168], t1)), K._glyphs(":;\"'`,", H.setRuntimeTypeInfo([C.Color_255_238_168, C.Color_222_156_33], t1)), K._glyphs(".", H.setRuntimeTypeInfo([C.Color_132_126_135, C.Color_255_238_168], t1))], t2), $.$get$Elements_spirit(), H.setRuntimeTypeInfo([K._glyphs("Oo*+", H.setRuntimeTypeInfo([C.Color_189_106_235, C.Color_132_126_135], t1)), K._glyphs("o+", H.setRuntimeTypeInfo([C.Color_86_30_138, C.Color_22_117_38], t1)), K._glyphs("\u2022.", H.setRuntimeTypeInfo([C.Color_56_16_125, C.Color_0_64_39, C.Color_0_64_39], t1))], t2)], G.Element, [P.List, [P.List, L.Glyph]]);
  }, "_elementSequences", "TeleportEffect__colors", "$get$TeleportEffect__colors", function() {
    return H.setRuntimeTypeInfo([C.Color_129_231_235, C.Color_64_163_229, C.Color_189_106_235, C.Color_226_223_240], [L.Color]);
  }, "TeleportEffect__colors", "DetectEffect__colors", "$get$DetectEffect__colors", function() {
    return H.setRuntimeTypeInfo([C.Color_226_223_240, C.Color_255_238_168, C.Color_222_156_33, C.Color_99_87_7, C.Color_122_44_24], [L.Color]);
  }, "DetectEffect__colors", "HowlEffect_bang", "$get$HowlEffect_bang", function() {
    return L.Glyph$("!", C.Color_9_95_112, null);
  }, "HowlEffect_bang", "HowlEffect_slash", "$get$HowlEffect_slash", function() {
    return L.Glyph$("/", C.Color_129_231_235, null);
  }, "HowlEffect_slash", "HowlEffect_backslash", "$get$HowlEffect_backslash", function() {
    return L.Glyph$("\\", C.Color_129_231_235, null);
  }, "HowlEffect_backslash", "HowlEffect_dash", "$get$HowlEffect_dash", function() {
    return L.Glyph$("-", C.Color_9_95_112, null);
  }, "HowlEffect_dash", "HowlEffect_less", "$get$HowlEffect_less", function() {
    return L.Glyph$("<", C.Color_9_95_112, null);
  }, "HowlEffect_less", "HowlEffect_greater", "$get$HowlEffect_greater", function() {
    return L.Glyph$(">", C.Color_9_95_112, null);
  }, "HowlEffect_greater", "GameScreen__fireChars", "$get$GameScreen__fireChars", function() {
    return H.setRuntimeTypeInfo([9650, 94], [P.int]);
  }, "GameScreen__fireChars", "GameScreen__fireColors", "$get$GameScreen__fireColors", function() {
    var t1 = [L.Color];
    return H.setRuntimeTypeInfo([H.setRuntimeTypeInfo([C.Color_222_156_33, C.Color_122_44_24], t1), H.setRuntimeTypeInfo([C.Color_255_238_168, C.Color_179_74_4], t1), H.setRuntimeTypeInfo([C.Color_142_82_55, C.Color_204_35_57], t1), H.setRuntimeTypeInfo([C.Color_204_35_57, C.Color_64_31_36], t1)], [[P.List, L.Color]]);
  }, "GameScreen__fireColors", "GameScreen__resistLetters", "$get$GameScreen__resistLetters", function() {
    return P.LinkedHashMap_LinkedHashMap$_literal([$.$get$Elements_air(), "A", $.$get$Elements_earth(), "E", $.$get$Elements_fire(), "F", $.$get$Elements_water(), "W", $.$get$Elements_acid(), "A", $.$get$Elements_cold(), "C", $.$get$Elements_lightning(), "L", $.$get$Elements_poison(), "P", $.$get$Elements_dark(), "D", $.$get$Elements_light(), "L", $.$get$Elements_spirit(), "S"], G.Element, P.String);
  }, "GameScreen__resistLetters", "rng", "$get$rng", function() {
    return N.Rng$(new P.DateTime(H.Primitives_dateNow(), false).get$millisecondsSinceEpoch());
  }, "rng", "terminals", "$get$terminals", function() {
    return H.setRuntimeTypeInfo([], [F.TerminalView]);
  }, "terminals"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = ["pos", "_", "distance", "hit", "damage", "element", "invocation", "input", "b", "attributeName", null, "error", "stackTrace", "value", "context", "o", "name", "a", "each", "e", "attr", "n", "callback", "captureThis", "self", "arguments", "numberOfArguments", "arg1", "arg2", "line", "arg3", "arg", "time", "object", "named", "arg4", "__", "___", "____", "resource", "tag", "item", "group", "sentence", "index", "closure", "race", "c", "fuel"];
  init.types = [{func: 1, ret: P.Null}, {func: 1, ret: P.bool, args: [Z.Direction]}, {func: 1, ret: -1}, {func: 1, ret: P.bool, args: [L.Vec]}, {func: 1, args: [,]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.Null, args: [P.int]}, {func: 1, ret: P.int, args: [R.Item]}, {func: 1, ret: P.Null, args: [L.Vec]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: S.TeleportAction}, {func: 1, ret: P.Null, args: [R.Item]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, args: [L.Vec]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: P.int}, {func: 1, ret: P.int, args: [B.Breed, B.Breed]}, {func: 1, ret: E.HasteAction}, {func: 1, ret: -1, args: [P.String], opt: [O.Noun, O.Noun, O.Noun]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [R.Item]}, {func: 1, ret: P.Null, args: [P.int, L.Color]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [R.Item, L.Vec]}, {func: 1, ret: P.bool, args: [W.Element0, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: P.double}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: V.Action, args: [L.Vec]}, {func: 1, ret: P.Null, args: [B.Monster]}, {func: 1, ret: P.Null, args: [O.Shop, O.Inventory]}, {func: 1, ret: P.Null, args: [P.int, P.int, L.Glyph]}, {func: 1, ret: P.Null, args: [R.Item, P.int]}, {func: 1, ret: -1, args: [E.Condition]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: P.num, args: [,]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [W.KeyboardEvent]}, {func: 1, ret: P.Null, args: [Z.Direction]}, {func: 1, ret: P.Null, args: [B.Breed, L.Vec]}, {func: 1, ret: P.bool, args: [X.Rect]}, {func: 1, args: [P.String]}, {func: 1, ret: P.int, args: [D.Place, D.Place]}, {func: 1, ret: P.bool, args: [D.Place]}, {func: 1, ret: P.String}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, args: [, P.String]}, {func: 1, ret: [P.Set, L.Vec]}, {func: 1, ret: P.bool, args: [L.Junction]}, {func: 1, ret: G.WindAction, args: [P.int]}, {func: 1, ret: G.BurnActorAction, args: [P.int]}, {func: 1, ret: G.BurnFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.FreezeActorAction, args: [P.int]}, {func: 1, ret: G.FreezeFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.PoisonAction, args: [P.int]}, {func: 1, ret: G.PoisonFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.BlindAction, args: [P.int]}, {func: 1, ret: E.DazzleAction, args: [P.int]}, {func: 1, ret: G.LightFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: X.EatAction}, {func: 1, ret: T.DetectAction}, {func: 1, ret: E.ResistAction}, {func: 1, ret: Q.MappingAction}, {func: 1, ret: O.HealAction}, {func: 1, ret: G.RingSelfAction}, {func: 1, ret: G.RingFromAction, args: [L.Vec]}, {func: 1, ret: N.FlowSelfAction}, {func: 1, ret: N.FlowFromAction, args: [L.Vec]}, {func: 1, ret: F.IlluminateSelfAction}, {func: 1, ret: -1, args: [P.int, P.double]}, {func: 1, ret: P.Null, args: [L.Drop, P.double]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: P.Null, args: [P.String, P.double]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: P.Null, args: [B.Breed, [P.List, R._NamedMinion]]}, {func: 1, ret: B.Minion, args: [R._NamedMinion]}, {func: 1, ret: -1, args: [P.int], opt: [P.int]}, {func: 1, ret: Q.OpenChestAction, args: [L.Vec]}, {func: 1, ret: Q.OpenBarrelAction, args: [L.Vec]}, {func: 1, ret: W.Element0, args: [W.Node]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: P.Null, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: -1, args: [M.Skill]}, {func: 1, ret: P.Null, args: [P.double]}, {func: 1, ret: P.double, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [M.Skill]}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, ret: O.AddItemResult, args: [R.Item], named: {wasUnequipped: P.bool}}, {func: 1, ret: R.Item, args: [R.Item]}, {func: 1, ret: -1, args: [G.Element, P.int]}, {func: 1, ret: -1, args: [R.Item]}, {func: 1, ret: P.Null, args: [P.String, P.int]}, {func: 1, ret: P.bool, args: [O.Move]}, {func: 1, ret: P.Null, args: [Z.Direction, P.bool]}, {func: 1, ret: P.Null, args: [L.Vec, P.int]}, {func: 1, ret: Q.Tile}, {func: 1, ret: O.Inventory}, {func: 1, ret: P.Null, args: [L.Vec, O.Inventory]}, {func: 1, ret: -1, args: [S.Actor]}, {func: 1, ret: -1, args: [Z.Direction]}, {func: 1, ret: -1, args: [P.int, P.int]}, {func: 1, ret: P.bool, args: [K.Effect]}, {func: 1, ret: P.bool, args: [P.bool, P.int]}, {func: 1, ret: P.Null, args: [D.StatBase]}, {func: 1, ret: P.int, args: [B.Monster, B.Monster]}, {func: 1, ret: P.Null, args: [P.String, L.Color], opt: [L.Color]}, {func: 1, ret: P.bool, args: [P.double, P.double]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: P.String, args: [B.BreedGroup]}, {func: 1, ret: P.bool, args: [B.Breed]}, {func: 1, ret: [P.List, L.Vec]}, {func: 1, ret: P.bool, args: [P.int]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: P.Null, args: [P.String, P.Object]}, {func: 1, ret: P.String, args: [N.Race]}, {func: 1, ret: P.String, args: [T.HeroClass]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.bool, args: [T.HeroClass]}, {func: 1, ret: P.bool, args: [N.Race]}, {func: 1, ret: [P.List, L.Vec], args: [P.int]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [P.double]}, {func: 1, ret: -1, args: [P.num]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.num}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.int, args: [L.Vec]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: M.Skill, args: [P.String]}, {func: 1, ret: P.int, args: [P.int, R.Item]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main, []);
    else
      F.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=main.dart.js.map
