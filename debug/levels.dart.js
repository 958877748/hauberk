// Generated by dart2js (full emitter, strong), the Dart to JavaScript compiler version: 2.1.0-edge.c52a38c4ad9b43aac68dfe8516894afa24a4e0cb.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, metadataOffset, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var comma = "", body = "";
      for (var i = 0; i < fields.length; i++) {
        var fieldDescriptor = fields[i];
        if (fieldDescriptor.charCodeAt(0) == 48) {
          fieldDescriptor = fieldDescriptor.substring(1);
          var field = generateAccessor(fieldDescriptor, accessors, name);
          body += "this." + field + " = null;\n";
        } else {
          var field = generateAccessor(fieldDescriptor, accessors, name);
          var parameter = "p_" + field;
          str += comma;
          comma = ", ";
          str += parameter;
          body += "this." + field + " = " + parameter + ";\n";
        }
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (superclass && superclass.indexOf("+") > 0) {
          var s = superclass.split("+");
          superclass = s[0];
          var mixinClass = s[1];
          finishClass(mixinClass);
          var mixin = allClasses[mixinClass];
          var mixinPrototype = mixin.prototype;
          var clsPrototype = allClasses[cls].prototype;
          var properties = Object.keys(mixinPrototype);
          for (var i = 0; i < properties.length; i++) {
            var d = properties[i];
            if (!hasOwnProperty.call(clsPrototype, d))
              clsPrototype[d] = mixinPrototype[d];
          }
        }
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (mixinPrototype)
          prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
      var chain;
      if (targetPrototype.hasOwnProperty("$deferredAction"))
        chain = targetPrototype.$deferredAction;
      return function foo() {
        if (!supportsDirectProtoAccess)
          return;
        var prototype = this;
        while (!prototype.hasOwnProperty("$deferredAction"))
          prototype = prototype.__proto__;
        if (chain)
          prototype.$deferredAction = chain;
        else {
          delete prototype.$deferredAction;
          convertToFastObject(prototype);
        }
        mixinPrototype.$deferredAction();
        prototype.$deferredAction();
      };
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"],
        split, supr,
        fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0,
        applyTrampolineIndex = index,
        alias = array[index],
        f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      if (typeof f == "number") {
        applyTrampolineIndex = f;
        f = array[++index];
      }
      prototype[name] = prototype[alias] = f;
      var funcs = [f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var isIntercepted = (requiredParameterInfo & 1) === 1;
      requiredParameterInfo = requiredParameterInfo >> 1;
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var totalParameterCount = requiredParameterCount + optionalParameterCount;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      if (metadataOffset > 0) {
        var position = 3;
        for (var i = 0; i < optionalParameterCount; i++) {
          if (typeof array[position] == "number")
            array[position] = array[position] + metadataOffset;
          position++;
        }
        for (var i = 0; i < totalParameterCount; i++) {
          array[position] = array[position] + metadataOffset;
          position++;
        }
      }
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, applyTrampolineIndex, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic)
          functions.push(getterStubName);
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
      var cache = null;
      return isStatic ? function() {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
        return cache;
      } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code"
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    Interceptor: {
      "^": "Object;",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
      }],
      "%": "MediaError|Navigator|NavigatorConcurrentHardware|PositionError|SQLError"
    },
    JSBool: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      get$hashCode: function(receiver) {
        return receiver ? 519018 : 218159;
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      get$hashCode: function(receiver) {
        return 0;
      },
      $isNull: 1
    },
    JavaScriptObject: {
      "^": "Interceptor;",
      get$hashCode: function(receiver) {
        return 0;
      },
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }]
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        if (dartClosure == null)
          return this.super$JavaScriptObject$toString(receiver);
        return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      },
      $isFunction: 1
    },
    JSArray: {
      "^": "Interceptor;$ti",
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("add"));
        receiver.push(value);
      },
      where$1: function(receiver, f) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      },
      addAll$1: function(receiver, collection) {
        var t1;
        H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("addAll"));
        for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
          receiver.push(t1.get$current());
      },
      join$1: function(receiver, separator) {
        var list, i;
        list = new Array(receiver.length);
        list.fixed$length = Array;
        for (i = 0; i < receiver.length; ++i)
          this.$indexSet(list, i, H.S(receiver[i]));
        return list.join(separator);
      },
      fold$1$2: function(receiver, initialValue, combine, $T) {
        var $length, value, i;
        H.assertSubtypeOfRuntimeType(initialValue, $T);
        H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
        $length = receiver.length;
        for (value = initialValue, i = 0; i < $length; ++i) {
          value = combine.call$2(value, receiver[i]);
          if (receiver.length !== $length)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return value;
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      get$first: function(receiver) {
        if (receiver.length > 0)
          return receiver[0];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      get$last: function(receiver) {
        var t1 = receiver.length;
        if (t1 > 0)
          return receiver[t1 - 1];
        throw H.wrapException(H.IterableElementError_noElement());
      },
      setRange$4: function(receiver, start, end, iterable, skipCount) {
        var t1, $length, i;
        t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("setRange"));
        P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
        $length = end - start;
        if ($length === 0)
          return;
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        t1 = J.getInterceptor$asx(iterable);
        if (skipCount + $length > t1.get$length(iterable))
          throw H.wrapException(H.IterableElementError_tooFew());
        if (skipCount < start)
          for (i = $length - 1; i >= 0; --i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
        else
          for (i = 0; i < $length; ++i)
            receiver[start + i] = t1.$index(iterable, skipCount + i);
      },
      setRange$3: function($receiver, start, end, iterable) {
        return this.setRange$4($receiver, start, end, iterable, 0);
      },
      any$1: function(receiver, test) {
        var end, i;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
        end = receiver.length;
        for (i = 0; i < end; ++i) {
          if (test.call$1(receiver[i]))
            return true;
          if (receiver.length !== end)
            throw H.wrapException(P.ConcurrentModificationError$(receiver));
        }
        return false;
      },
      sort$1: function(receiver, compare) {
        var t1 = H.getTypeArgumentByIndex(receiver, 0);
        H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("sort"));
        H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
      },
      sort$0: function($receiver) {
        return this.sort$1($receiver, null);
      },
      shuffle$1: function(receiver, random) {
        var $length, pos, t1, tmp;
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("shuffle"));
        if (random == null)
          random = C.C__JSRandom;
        $length = receiver.length;
        for (; $length > 1;) {
          pos = random.nextInt$1($length);
          --$length;
          t1 = receiver.length;
          if ($length >= t1)
            return H.ioore(receiver, $length);
          tmp = receiver[$length];
          if (pos < 0 || pos >= t1)
            return H.ioore(receiver, pos);
          this.$indexSet(receiver, $length, receiver[pos]);
          this.$indexSet(receiver, pos, tmp);
        }
      },
      indexOf$2: function(receiver, element, start) {
        var i;
        if (start >= receiver.length)
          return -1;
        for (i = start; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], element))
            return i;
        return -1;
      },
      indexOf$1: function($receiver, element) {
        return this.indexOf$2($receiver, element, 0);
      },
      contains$1: function(receiver, other) {
        var i;
        for (i = 0; i < receiver.length; ++i)
          if (J.$eq$(receiver[i], other))
            return true;
        return false;
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      },
      get$iterator: function(receiver) {
        return new J.ArrayIterator(receiver, receiver.length, 0, [H.getTypeArgumentByIndex(receiver, 0)]);
      },
      get$hashCode: function(receiver) {
        return H.Primitives_objectHashCode(receiver);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      set$length: function(receiver, newLength) {
        if (!!receiver.fixed$length)
          H.throwExpression(P.UnsupportedError$("set length"));
        if (newLength < 0)
          throw H.wrapException(P.RangeError$range(newLength, 0, null, "newLength", null));
        receiver.length = newLength;
      },
      $index: function(receiver, index) {
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        if (!!receiver.immutable$list)
          H.throwExpression(P.UnsupportedError$("indexed set"));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        receiver[index] = value;
      },
      $add: function(receiver, other) {
        var t1, totalLength;
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
        H.assertSubtype(other, "$isList", t1, "$asList");
        totalLength = C.JSInt_methods.$add(receiver.length, other.get$length(other));
        t1 = H.setRuntimeTypeInfo([], t1);
        this.set$length(t1, totalLength);
        this.setRange$3(t1, 0, receiver.length, receiver);
        this.setRange$3(t1, receiver.length, totalLength, other);
        return t1;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      static: {
        JSArray_JSArray$fixed: function($length, $E) {
          if (typeof $length !== "number" || Math.floor($length) !== $length)
            throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
          if ($length < 0 || $length > 4294967295)
            throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
          return J.JSArray_JSArray$markFixed(new Array($length), $E);
        },
        JSArray_JSArray$markFixed: function(allocation, $E) {
          return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
        },
        JSArray_markFixedList: function(list) {
          H.listTypeCheck(list);
          list.fixed$length = Array;
          return list;
        },
        JSArray__compareAny: [function(a, b) {
          return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
        }, "call$2", "_interceptors_JSArray__compareAny$closure", 8, 0, 58]
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,0__interceptors$_current,$ti",
      set$__interceptors$_current: function(_current) {
        this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this.__interceptors$_current;
      },
      moveNext$0: function() {
        var t1, $length, t2;
        t1 = this.__interceptors$_iterable;
        $length = t1.length;
        if (this.__interceptors$_length !== $length)
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        t2 = this.__interceptors$_index;
        if (t2 >= $length) {
          this.set$__interceptors$_current(null);
          return false;
        }
        this.set$__interceptors$_current(t1[t2]);
        ++this.__interceptors$_index;
        return true;
      },
      $isIterator: 1
    },
    JSNumber: {
      "^": "Interceptor;",
      compareTo$1: function(receiver, b) {
        var bIsNegative;
        H.numTypeCheck(b);
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        if (receiver < b)
          return -1;
        else if (receiver > b)
          return 1;
        else if (receiver === b) {
          if (receiver === 0) {
            bIsNegative = this.get$isNegative(b);
            if (this.get$isNegative(receiver) === bIsNegative)
              return 0;
            if (this.get$isNegative(receiver))
              return -1;
            return 1;
          }
          return 0;
        } else if (isNaN(receiver)) {
          if (isNaN(b))
            return 0;
          return 1;
        } else
          return -1;
      },
      get$isNegative: function(receiver) {
        return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
      },
      toInt$0: function(receiver) {
        var t1;
        if (receiver >= -2147483648 && receiver <= 2147483647)
          return receiver | 0;
        if (isFinite(receiver)) {
          t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
          return t1 + 0;
        }
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
      },
      ceil$0: function(receiver) {
        var truncated, d;
        if (receiver >= 0) {
          if (receiver <= 2147483647) {
            truncated = receiver | 0;
            return receiver === truncated ? truncated : truncated + 1;
          }
        } else if (receiver >= -2147483648)
          return receiver | 0;
        d = Math.ceil(receiver);
        if (isFinite(d))
          return d;
        throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
      },
      clamp$2: function(receiver, lowerLimit, upperLimit) {
        if (C.JSInt_methods.compareTo$1(lowerLimit, upperLimit) > 0)
          throw H.wrapException(H.argumentErrorValue(lowerLimit));
        if (this.compareTo$1(receiver, lowerLimit) < 0)
          return lowerLimit;
        if (this.compareTo$1(receiver, upperLimit) > 0)
          return upperLimit;
        return receiver;
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      get$hashCode: function(receiver) {
        return receiver & 0x1FFFFFFF;
      },
      $add: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      $mod: function(receiver, other) {
        var result = receiver % other;
        if (result === 0)
          return 0;
        if (result > 0)
          return result;
        if (other < 0)
          return result - other;
        else
          return result + other;
      },
      _tdivFast$1: function(receiver, other) {
        return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          t1 = other > 31 ? 31 : other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrBothPositive$1: function(receiver, other) {
        return other > 31 ? 0 : receiver >>> other;
      },
      $gt: function(receiver, other) {
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      },
      $isdouble: 1,
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;",
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;"
    },
    JSString: {
      "^": "Interceptor;",
      codeUnitAt$1: function(receiver, index) {
        if (index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length)
          H.throwExpression(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      _codeUnitAt$1: function(receiver, index) {
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      matchAsPrefix$2: function(receiver, string, start) {
        var t1, i;
        if (start > string.length)
          throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
        t1 = receiver.length;
        if (start + t1 > string.length)
          return;
        for (i = 0; i < t1; ++i)
          if (this._codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
            return;
        return new H.StringMatch(start, string, receiver);
      },
      $add: function(receiver, other) {
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      endsWith$1: function(receiver, other) {
        var otherLength, t1;
        otherLength = other.length;
        t1 = receiver.length;
        if (otherLength > t1)
          return false;
        return other === this.substring$1(receiver, t1 - otherLength);
      },
      split$1: function(receiver, pattern) {
        var t1 = H.setRuntimeTypeInfo(receiver.split(pattern), [P.String]);
        return t1;
      },
      startsWith$2: function(receiver, pattern, index) {
        var endIndex;
        if (index > receiver.length)
          throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      },
      startsWith$1: function($receiver, pattern) {
        return this.startsWith$2($receiver, pattern, 0);
      },
      substring$2: function(receiver, startIndex, endIndex) {
        if (endIndex == null)
          endIndex = receiver.length;
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      toLowerCase$0: function(receiver) {
        return receiver.toLowerCase();
      },
      trim$0: function(receiver) {
        var result, endIndex, startIndex, t1, endIndex0;
        result = receiver.trim();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        if (this._codeUnitAt$1(result, 0) === 133) {
          startIndex = J.JSString__skipLeadingWhitespace(result, 1);
          if (startIndex === endIndex)
            return "";
        } else
          startIndex = 0;
        t1 = endIndex - 1;
        endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
        if (startIndex === 0 && endIndex0 === endIndex)
          return result;
        return result.substring(startIndex, endIndex0);
      },
      get$codeUnits: function(receiver) {
        return new H.CodeUnits(receiver);
      },
      indexOf$2: function(receiver, pattern, start) {
        var t1, t2, i;
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        if (start > receiver.length)
          throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
        if (typeof pattern === "string")
          return receiver.indexOf(pattern, start);
        for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
          if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
            return i;
        return -1;
      },
      indexOf$1: function($receiver, pattern) {
        return this.indexOf$2($receiver, pattern, 0);
      },
      contains$2: function(receiver, other, startIndex) {
        if (startIndex > receiver.length)
          throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
        return H.stringContainsUnchecked(receiver, other, startIndex);
      },
      contains$1: function($receiver, other) {
        return this.contains$2($receiver, other, 0);
      },
      compareTo$1: function(receiver, other) {
        var t1;
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(H.argumentErrorValue(other));
        if (receiver === other)
          t1 = 0;
        else
          t1 = receiver < other ? -1 : 1;
        return t1;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$hashCode: function(receiver) {
        var t1, hash, i;
        for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
          hash = 536870911 & hash + receiver.charCodeAt(i);
          hash = 536870911 & hash + ((524287 & hash) << 10);
          hash ^= hash >> 6;
        }
        hash = 536870911 & hash + ((67108863 & hash) << 3);
        hash ^= hash >> 11;
        return 536870911 & hash + ((16383 & hash) << 15);
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1,
      $isString: 1,
      static: {
        JSString__isWhitespace: function(codeUnit) {
          if (codeUnit < 256)
            switch (codeUnit) {
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 32:
              case 133:
              case 160:
                return true;
              default:
                return false;
            }
          switch (codeUnit) {
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8232:
            case 8233:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        },
        JSString__skipLeadingWhitespace: function(string, index) {
          var t1, codeUnit;
          for (t1 = string.length; index < t1;) {
            codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
            ++index;
          }
          return index;
        },
        JSString__skipTrailingWhitespace: function(string, index) {
          var index0, codeUnit;
          for (; index > 0; index = index0) {
            index0 = index - 1;
            codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
            if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
              break;
          }
          return index;
        }
      }
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;_string",
      get$length: function(_) {
        return this._string.length;
      },
      $index: function(_, i) {
        return C.JSString_methods.codeUnitAt$1(this._string, i);
      },
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      }
    },
    EfficientLengthIterable: {
      "^": "Iterable;"
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti",
      get$iterator: function(_) {
        return new H.ListIterator(this, this.get$length(this), 0, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      },
      get$isEmpty: function(_) {
        return this.get$length(this) === 0;
      },
      where$1: function(_, test) {
        return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
      },
      toList$1$growable: function(_, growable) {
        var result, i;
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
        for (i = 0; i < this.get$length(this); ++i)
          C.JSArray_methods.$indexSet(result, i, this.elementAt$1(0, i));
        return result;
      },
      toList$0: function($receiver) {
        return this.toList$1$growable($receiver, true);
      }
    },
    ListIterator: {
      "^": "Object;_iterable,_length,_index,0__internal$_current,$ti",
      set$__internal$_current: function(_current) {
        this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this.__internal$_current;
      },
      moveNext$0: function() {
        var t1, t2, $length, t3;
        t1 = this._iterable;
        t2 = J.getInterceptor$asx(t1);
        $length = t2.get$length(t1);
        if (this._length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        t3 = this._index;
        if (t3 >= $length) {
          this.set$__internal$_current(null);
          return false;
        }
        this.set$__internal$_current(t2.elementAt$1(t1, t3));
        ++this._index;
        return true;
      },
      $isIterator: 1
    },
    MappedIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.MappedIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
      },
      get$length: function(_) {
        return J.get$length$asx(this._iterable);
      },
      get$isEmpty: function(_) {
        return J.get$isEmpty$asx(this._iterable);
      },
      $asIterable: function($S, $T) {
        return [$T];
      },
      static: {
        MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
          H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
          H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
          if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
            return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
          return new H.MappedIterable(iterable, $function, [$S, $T]);
        }
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;_iterable,_f,$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;0__internal$_current,_iterator,_f,$ti",
      set$__internal$_current: function(_current) {
        this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
      },
      moveNext$0: function() {
        var t1 = this._iterator;
        if (t1.moveNext$0()) {
          this.set$__internal$_current(this._f.call$1(t1.get$current()));
          return true;
        }
        this.set$__internal$_current(null);
        return false;
      },
      get$current: function() {
        return this.__internal$_current;
      },
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;_source,_f,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        return this._f.call$1(J.elementAt$1$ax(this._source, index));
      },
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    WhereIterable: {
      "^": "Iterable;_iterable,_f,$ti",
      get$iterator: function(_) {
        return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
      }
    },
    WhereIterator: {
      "^": "Iterator;_iterator,_f,$ti",
      moveNext$0: function() {
        var t1, t2;
        for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
          if (t2.call$1(t1.get$current()))
            return true;
        return false;
      },
      get$current: function() {
        return this._iterator.get$current();
      }
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $indexSet: function(_, index, value) {
        H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
        throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
      }
    },
    UnmodifiableListBase: {
      "^": "ListBase+UnmodifiableListMixin;"
    },
    ReversedListIterable: {
      "^": "ListIterable;_source,$ti",
      get$length: function(_) {
        return J.get$length$asx(this._source);
      },
      elementAt$1: function(_, index) {
        var t1, t2;
        t1 = this._source;
        t2 = J.getInterceptor$asx(t1);
        return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
      }
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor$(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.JS_CONST_u2C(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives__fromCharCodeApply: function(array) {
      var end, result, i, i0, chunkEnd;
      end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var a, t1, _i, i;
      a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, "index", null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, null, null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var $length, index, index0, index1;
      $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(new P._Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor$(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        if (t2 == null) {
          t2 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t2;
        }
        return new Function(t1 + H.S(t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t2;
      }
      return new Function(t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t1, t2, stubName, arity, lookedUpFunction, t3, t4, $arguments;
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null) {
        t2 = H.BoundClosure_computeFieldNamed("receiver");
        $.BoundClosure_receiverFieldNameCache = t2;
      }
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    _typeDescription: function(value) {
      var t1, functionTypeObject;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].builtin$cls) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.builtin$cls);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = ", ") {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = ", ") {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.builtin$cls === "Object" || type.builtin$cls === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.builtin$cls === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.builtin$cls === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.builtin$cls === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.builtin$cls === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.builtin$cls;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark, t1;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var nativeRegexp;
      if (pattern instanceof H.JSSyntaxRegExp) {
        nativeRegexp = pattern.get$_nativeGlobalVersion();
        nativeRegexp.lastIndex = 0;
        return receiver.replace(nativeRegexp, replacement.replace(/\$/g, "$$$$"));
      } else {
        if (pattern == null)
          H.throwExpression(H.argumentErrorValue(pattern));
        throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
      }
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,0cachedSortedIndices",
      static: {
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data = J.JSArray_markFixedList(data);
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
        }
      }
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (t1 !== -1)
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (t1 !== -1)
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (t1 !== -1)
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (t1 !== -1)
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (t1 !== -1)
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder_extractPattern: function(message) {
          var match, $arguments, argumentsExpr, expr, method, receiver;
          message = message.replace(String({}), '$receiver$').replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = H.setRuntimeTypeInfo([], [P.String]);
          $arguments = match.indexOf("\\$arguments\\$");
          argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
          expr = match.indexOf("\\$expr\\$");
          method = match.indexOf("\\$method\\$");
          receiver = match.indexOf("\\$receiver\\$");
          return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        return "NoSuchMethodError: method not found: '" + t1 + "' on null";
      },
      static: {
        NullError$: function(_message, match) {
          return new H.NullError(_message, match == null ? null : match.method);
        }
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + t1 + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + t1 + "' on '" + t2 + "' (" + H.S(this._message) + ")";
      },
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message",
      toString$0: function(_) {
        var t1 = this._message;
        return t1.length === 0 ? "Error" : "Error: " + t1;
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:5;ex",
      call$1: function(error) {
        if (!!J.getInterceptor$(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,0_trace",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1
    },
    Closure: {
      "^": "Object;",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    TearOffClosure: {
      "^": "Closure;"
    },
    StaticClosure: {
      "^": "TearOffClosure;",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + H.unminifyOrTag($name) + "'";
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
      },
      get$hashCode: function(_) {
        var t1, receiverHashCode;
        t1 = this._receiver;
        if (t1 == null)
          receiverHashCode = H.Primitives_objectHashCode(this._self);
        else
          receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
        return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
      },
      static: {
        BoundClosure_selfOf: function(closure) {
          return closure._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return closure._receiver;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, names, t1, i, $name;
          template = new H.BoundClosure("self", "target", "receiver", "name");
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    TypeErrorImplementation: {
      "^": "Error;message",
      toString$0: function(_) {
        return this.message;
      },
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
        }
      }
    },
    RuntimeError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      },
      static: {
        RuntimeError$: function(message) {
          return new H.RuntimeError(message);
        }
      }
    },
    JsLinkedHashMap: {
      "^": "MapBase;__js_helper$_length,0_strings,0_nums,0_rest,0_first,0_last,_modifications,$ti",
      get$length: function(_) {
        return this.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this.__js_helper$_length === 0;
      },
      get$keys: function() {
        return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
      },
      get$values: function(_) {
        return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
      },
      containsKey$1: function(key) {
        var strings, t1;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return false;
          return this._containsTableEntry$2(strings, key);
        } else {
          t1 = this.internalContainsKey$1(key);
          return t1;
        }
      },
      internalContainsKey$1: function(key) {
        var rest = this._rest;
        if (rest == null)
          return false;
        return this.internalFindBucketIndex$2(this._getTableBucket$2(rest, this.internalComputeHashCode$1(key)), key) >= 0;
      },
      addAll$1: function(_, other) {
        H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
      },
      $index: function(_, key) {
        var strings, cell, t1, nums;
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null)
            return;
          cell = this._getTableCell$2(strings, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null)
            return;
          cell = this._getTableCell$2(nums, key);
          t1 = cell == null ? null : cell.hashMapCellValue;
          return t1;
        } else
          return this.internalGet$1(key);
      },
      internalGet$1: function(key) {
        var rest, bucket, index;
        rest = this._rest;
        if (rest == null)
          return;
        bucket = this._getTableBucket$2(rest, this.internalComputeHashCode$1(key));
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index < 0)
          return;
        return bucket[index].hashMapCellValue;
      },
      $indexSet: function(_, key, value) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        if (typeof key === "string") {
          strings = this._strings;
          if (strings == null) {
            strings = this._newHashTable$0();
            this._strings = strings;
          }
          this._addHashTableEntry$3(strings, key, value);
        } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
          nums = this._nums;
          if (nums == null) {
            nums = this._newHashTable$0();
            this._nums = nums;
          }
          this._addHashTableEntry$3(nums, key, value);
        } else
          this.internalSet$2(key, value);
      },
      internalSet$2: function(key, value) {
        var rest, hash, bucket, index;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        rest = this._rest;
        if (rest == null) {
          rest = this._newHashTable$0();
          this._rest = rest;
        }
        hash = this.internalComputeHashCode$1(key);
        bucket = this._getTableBucket$2(rest, hash);
        if (bucket == null)
          this._setTableEntry$3(rest, hash, [this._newLinkedCell$2(key, value)]);
        else {
          index = this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(this._newLinkedCell$2(key, value));
        }
      },
      putIfAbsent$2: function(key, ifAbsent) {
        var value;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
        if (this.containsKey$1(key))
          return this.$index(0, key);
        value = ifAbsent.call$0();
        this.$indexSet(0, key, value);
        return value;
      },
      forEach$1: function(_, action) {
        var cell, modifications;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
        cell = this._first;
        modifications = this._modifications;
        for (; cell != null;) {
          action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
          if (modifications !== this._modifications)
            throw H.wrapException(P.ConcurrentModificationError$(this));
          cell = cell._next;
        }
      },
      _addHashTableEntry$3: function(table, key, value) {
        var cell;
        H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
        cell = this._getTableCell$2(table, key);
        if (cell == null)
          this._setTableEntry$3(table, key, this._newLinkedCell$2(key, value));
        else
          cell.hashMapCellValue = value;
      },
      _modified$0: function() {
        this._modifications = this._modifications + 1 & 67108863;
      },
      _newLinkedCell$2: function(key, value) {
        var cell, last;
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
        if (this._first == null) {
          this._last = cell;
          this._first = cell;
        } else {
          last = this._last;
          cell._previous = last;
          last._next = cell;
          this._last = cell;
        }
        ++this.__js_helper$_length;
        this._modified$0();
        return cell;
      },
      internalComputeHashCode$1: function(key) {
        return J.get$hashCode$(key) & 0x3ffffff;
      },
      internalFindBucketIndex$2: function(bucket, key) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i].hashMapCellKey, key))
            return i;
        return -1;
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      _getTableCell$2: function(table, key) {
        return table[key];
      },
      _getTableBucket$2: function(table, key) {
        return table[key];
      },
      _setTableEntry$3: function(table, key, value) {
        table[key] = value;
      },
      _deleteTableEntry$2: function(table, key) {
        delete table[key];
      },
      _containsTableEntry$2: function(table, key) {
        return this._getTableCell$2(table, key) != null;
      },
      _newHashTable$0: function() {
        var table = Object.create(null);
        this._setTableEntry$3(table, "<non-identifier-key>", table);
        this._deleteTableEntry$2(table, "<non-identifier-key>");
        return table;
      },
      $isLinkedHashMap: 1
    },
    JsLinkedHashMap_values_closure: {
      "^": "Closure;$this",
      call$1: function(each) {
        var t1 = this.$this;
        return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
      },
      $signature: function() {
        var t1 = this.$this;
        return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
      }
    },
    JsLinkedHashMap_addAll_closure: {
      "^": "Closure;$this",
      call$2: function(key, value) {
        var t1 = this.$this;
        t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
      },
      $signature: function() {
        var t1 = this.$this;
        return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
      }
    },
    LinkedHashMapCell: {
      "^": "Object;hashMapCellKey,hashMapCellValue,0_next,0_previous"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;_map,$ti",
      get$length: function(_) {
        return this._map.__js_helper$_length;
      },
      get$isEmpty: function(_) {
        return this._map.__js_helper$_length === 0;
      },
      get$iterator: function(_) {
        var t1, t2;
        t1 = this._map;
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
        t2._cell = t1._first;
        return t2;
      }
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;_map,_modifications,0_cell,0__js_helper$_current,$ti",
      set$__js_helper$_current: function(_current) {
        this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this.__js_helper$_current;
      },
      moveNext$0: function() {
        var t1 = this._map;
        if (this._modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._cell;
          if (t1 == null) {
            this.set$__js_helper$_current(null);
            return false;
          } else {
            this.set$__js_helper$_current(t1.hashMapCellKey);
            this._cell = this._cell._next;
            return true;
          }
        }
      },
      $isIterator: 1
    },
    initHooks_closure: {
      "^": "Closure:5;getTag",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:60;getUnknownTag",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, tag);
      }
    },
    initHooks_closure1: {
      "^": "Closure:59;prototypeForTag",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;pattern,_nativeRegExp,0_nativeGlobalRegExp,0_nativeAnchoredRegExp",
      toString$0: function(_) {
        return "RegExp/" + this.pattern + "/";
      },
      get$_nativeGlobalVersion: function() {
        var t1 = this._nativeGlobalRegExp;
        if (t1 != null)
          return t1;
        t1 = this._nativeRegExp;
        t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
        this._nativeGlobalRegExp = t1;
        return t1;
      },
      firstMatch$1: function(string) {
        var m;
        if (typeof string !== "string")
          H.throwExpression(H.argumentErrorValue(string));
        m = this._nativeRegExp.exec(string);
        if (m == null)
          return;
        return new H._MatchImplementation(this, m);
      },
      $isPattern: 1,
      static: {
        JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
          var m, i, g, regexp;
          m = multiLine ? "m" : "";
          i = caseSensitive ? "" : "i";
          g = global ? "g" : "";
          regexp = function(source, modifiers) {
            try {
              return new RegExp(source, modifiers);
            } catch (e) {
              return e;
            }
          }(source, m + i + g);
          if (regexp instanceof RegExp)
            return regexp;
          throw H.wrapException(new P.FormatException("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
        }
      }
    },
    _MatchImplementation: {
      "^": "Object;pattern,_match",
      $index: function(_, index) {
        var t1 = this._match;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
    },
    StringMatch: {
      "^": "Object;start,input,pattern",
      $index: function(_, g) {
        if (g !== 0)
          H.throwExpression(P.RangeError$value(g, null, null));
        return this.pattern;
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 4, 0, 7],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 4, 0, 7],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      P._TimerImpl$(0, callback);
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 4, 0, 7],
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object, P.StackTrace]});
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 1],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.next = newEntry;
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var t1, currentZone;
      t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(null, null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:9;_box_0",
      call$1: function(_) {
        var t1, f;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:38;_box_0,div,span",
      call$1: function(callback) {
        var t1, t2;
        this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _TimerImpl: {
      "^": "Object;_once,0_handle,_tick",
      _TimerImpl$2: function(milliseconds, callback) {
        if (self.setTimeout != null)
          this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
        else
          throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
      },
      static: {
        _TimerImpl$: function(milliseconds, callback) {
          var t1 = new P._TimerImpl(true, 0);
          t1._TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    _TimerImpl_internalCallback: {
      "^": "Closure:1;$this,callback",
      call$0: function() {
        var t1 = this.$this;
        t1._handle = null;
        t1._tick = 1;
        this.callback.call$0();
      }
    },
    _FutureListener: {
      "^": "Object;0_nextListener,result,state,callback,errorCallback,$ti",
      matchesErrorTest$1: function(asyncError) {
        if (this.state !== 6)
          return true;
        return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
      },
      handleError$1: function(asyncError) {
        var errorCallback, t1, t2, t3;
        errorCallback = this.errorCallback;
        t1 = P.Object;
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
        t3 = this.result._zone;
        if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
          return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
        else
          return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
      }
    },
    _Future: {
      "^": "Object;_state<,_zone,0_resultOrListeners<,$ti",
      then$1$2$onError: function(f, onError, $R) {
        var t1, currentZone, result, t2;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        currentZone = $.Zone__current;
        if (currentZone !== C.C__RootZone) {
          currentZone.toString;
          H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        result = new P._Future(0, $.Zone__current, [$R]);
        t2 = onError == null ? 1 : 3;
        this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
        return result;
      },
      then$1$1: function(f, $R) {
        return this.then$1$2$onError(f, null, $R);
      },
      _addListener$1: function(listener) {
        var t1, source;
        t1 = this._state;
        if (t1 <= 1) {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._addListener$1(listener);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(this, listener), {func: 1, ret: -1}));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, t1, existingListeners, cursor, cursor0, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        if (listeners == null)
          return;
        t1 = this._state;
        if (t1 <= 1) {
          existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (t1 === 2) {
            source = H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
            t1 = source._state;
            if (t1 < 4) {
              source._prependListeners$1(listeners);
              return;
            }
            this._state = t1;
            this._resultOrListeners = source._resultOrListeners;
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          t1 = this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, this), {func: 1, ret: -1}));
        }
      },
      _removeListeners$0: function() {
        var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, t2, listeners;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.futureOrCheck(value, {futureOr: 1, type: t1});
        t2 = this.$ti;
        if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
          if (H.checkSubtype(value, "$is_Future", t2, null))
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          H.assertSubtypeOfRuntimeType(value, t1);
          this._state = 4;
          this._resultOrListeners = value;
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeError$2: function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        listeners = this._removeListeners$0();
        this._state = 8;
        this._resultOrListeners = new P.AsyncError(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      },
      $isFuture: 1,
      static: {
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          target._state = 1;
          try {
            source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var t1, listeners;
          for (; t1 = source._state, t1 === 2;)
            source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
          if (t1 >= 4) {
            listeners = target._removeListeners$0();
            target._state = source._state;
            target._resultOrListeners = source._resultOrListeners;
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
            target._state = 2;
            target._resultOrListeners = source;
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result;
          _box_1 = {};
          _box_1.source = source;
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1._state === 8;
            if (listeners == null) {
              if (hasError) {
                asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
                t1 = t1._zone;
                t2 = asyncError.error;
                t3 = asyncError.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            t1 = _box_1.source;
            sourceResult = t1._resultOrListeners;
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t2 = !hasError;
            if (t2) {
              t3 = listeners.state;
              t3 = (t3 & 1) !== 0 || t3 === 8;
            } else
              t3 = true;
            if (t3) {
              t3 = listeners.result;
              zone = t3._zone;
              if (hasError) {
                t4 = t1._zone;
                t4.toString;
                t4 = t4 == zone;
                if (!t4)
                  zone.toString;
                else
                  t4 = true;
                t4 = !t4;
              } else
                t4 = false;
              if (t4) {
                H.interceptedTypeCheck(sourceResult, "$isAsyncError");
                t1 = t1._zone;
                t2 = sourceResult.error;
                t3 = sourceResult.stackTrace;
                t1.toString;
                P._rootHandleUncaughtError(null, null, t1, t2, t3);
                return;
              }
              oldZone = $.Zone__current;
              if (oldZone != zone)
                $.Zone__current = zone;
              else
                oldZone = null;
              t1 = listeners.state;
              if (t1 === 8)
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
              else if (t2) {
                if ((t1 & 1) !== 0)
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if ((t1 & 2) !== 0)
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                $.Zone__current = oldZone;
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor$(t1).$isFuture) {
                if (t1._state >= 4) {
                  current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                  t3._resultOrListeners = null;
                  listeners = t3._reverseListeners$1(current);
                  t3._state = t1._state;
                  t3._resultOrListeners = t1._resultOrListeners;
                  _box_1.source = t1;
                  continue;
                } else
                  P._Future__chainCoreFuture(t1, t3);
                return;
              }
            }
            result = listeners.result;
            current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
            result._resultOrListeners = null;
            listeners = result._reverseListeners$1(current);
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1) {
              H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
              result._state = 4;
              result._resultOrListeners = t2;
            } else {
              H.interceptedTypeCheck(t2, "$isAsyncError");
              result._state = 8;
              result._resultOrListeners = t2;
            }
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:9;target",
      call$1: function(value) {
        var t1 = this.target;
        t1._state = 0;
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:14;target",
      call$2: function(error, stackTrace) {
        this.target._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:1;_box_1,_box_0,listener,hasError",
      call$0: function() {
        var completeResult, e, s, t1, exception, t2, originalSource;
        completeResult = null;
        try {
          t1 = this.listener;
          completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError").error;
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          else
            t2.listenerValueOrError = new P.AsyncError(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor$(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_state() >= 4) {
            if (completeResult.get$_state() === 8) {
              t1 = this._box_0;
              t1.listenerValueOrError = H.interceptedTypeCheck(completeResult.get$_resultOrListeners(), "$isAsyncError");
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:20;originalSource",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:1;_box_0,listener,sourceResult",
      call$0: function() {
        var e, s, t1, t2, t3, t4, exception;
        try {
          t1 = this.listener;
          t2 = H.getTypeArgumentByIndex(t1, 0);
          t3 = H.assertSubtypeOfRuntimeType(this.sourceResult, t2);
          t4 = H.getTypeArgumentByIndex(t1, 1);
          this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = new P.AsyncError(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:1;_box_1,_box_0,listener",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) && t1.errorCallback != null) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = H.interceptedTypeCheck(this._box_1.source._resultOrListeners, "$isAsyncError");
          t2 = t1.error;
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1;
          else
            t4.listenerValueOrError = new P.AsyncError(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,0next"
    },
    Stream: {
      "^": "Object;$ti",
      get$length: function(_) {
        var t1, future, t2, t3;
        t1 = {};
        future = new P._Future(0, $.Zone__current, [P.int]);
        t1.count = 0;
        t2 = H.getTypeArgumentByIndex(this, 0);
        t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, this), {func: 1, ret: -1, args: [t2]});
        H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
        W._EventStreamSubscription$(this._target, this._eventType, t3, false, t2);
        return future;
      }
    },
    Stream_length_closure: {
      "^": "Closure;_box_0,$this",
      call$1: function(_) {
        H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
        ++this._box_0.count;
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future",
      call$0: function() {
        this.future._complete$1(this._box_0.count);
      }
    },
    StreamSubscription: {
      "^": "Object;"
    },
    AsyncError: {
      "^": "Object;error,stackTrace",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1
    },
    _Zone: {
      "^": "Object;",
      $isZone: 1
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = new P.NullThrownError();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        error = H.wrapException(t1);
        error.stack = t2.toString$0(0);
        throw error;
      }
    },
    _RootZone: {
      "^": "_Zone;",
      runGuarded$1: function(f) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$0();
            return;
          }
          P._rootRun(null, null, this, f, -1);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      runUnaryGuarded$1$2: function(f, arg, $T) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$1(arg);
            return;
          }
          P._rootRunUnary(null, null, this, f, arg, -1, $T);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          P._rootHandleUncaughtError(null, null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
        }
      },
      bindCallback$1$1: function(f, $R) {
        return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
      },
      bindCallbackGuarded$1: function(f) {
        return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      },
      bindUnaryCallbackGuarded$1$1: function(f, $T) {
        return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
      },
      $index: function(_, key) {
        return;
      },
      run$1$1: function(f, $R) {
        H.functionTypeCheck(f, {func: 1, ret: $R});
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f, $R);
      },
      runUnary$2$2: function(f, arg, $R, $T) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg, $R, $T);
      },
      runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure;$this,f,R",
      call$0: function() {
        return this.$this.run$1$1(this.f, this.R);
      },
      $signature: function() {
        return {func: 1, ret: this.R};
      }
    },
    _RootZone_bindCallbackGuarded_closure: {
      "^": "Closure:1;$this,f",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindUnaryCallbackGuarded_closure: {
      "^": "Closure;$this,f,T",
      call$1: function(arg) {
        var t1 = this.T;
        return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
      },
      $signature: function() {
        return {func: 1, ret: -1, args: [this.T]};
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap(0, 0, [$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap(0, 0, [$K, $V]);
    },
    LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
      return new P._LinkedHashSet(0, 0, [$E]);
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1, t2;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      C.JSArray_methods.add$1(t1, iterable);
      try {
        t2 = buffer;
        t2._contents = P.StringBuffer__writeAll(t2.get$_contents(), iterable, ", ");
      } finally {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = buffer;
      t1._contents = t1.get$_contents() + rightDelimiter;
      t1 = buffer.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var i, t1;
      for (i = 0; t1 = $.$get$_toStringVisiting(), i < t1.length; ++i)
        if (o === t1[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = J.get$iterator$ax(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var result, t1;
      result = P.LinkedHashSet_LinkedHashSet(null, null, null, $E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var t1, result, t2;
      t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($.$get$_toStringVisiting(), m);
        t2 = result;
        t2._contents = t2.get$_contents() + "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        t1 = result;
        t1._contents = t1.get$_contents() + "}";
      } finally {
        t1 = $.$get$_toStringVisiting();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = result.get$_contents();
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: [function(x) {
      return x;
    }, "call$1", "collection_MapBase__id$closure", 4, 0, 5],
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, _i, element;
      H.functionTypeCheck(key, {func: 1, args: [,]});
      for (t1 = iterable.length, _i = 0; _i < iterable.length; iterable.length === t1 || (0, H.throwConcurrentModificationError)(iterable), ++_i) {
        element = iterable[_i];
        map.$indexSet(0, key.call$1(element), P.collection_MapBase__id$closure().call$1(element));
      }
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;_collection$_length,0_collection$_strings,0_collection$_nums,0_collection$_rest,0_collection$_first,0_collection$_last,_collection$_modifications,$ti",
      _newSet$0: function() {
        return new P._LinkedHashSet(0, 0, this.$ti);
      },
      get$iterator: function(_) {
        var t1 = new P._LinkedHashSetIterator(this, this._collection$_modifications, this.$ti);
        t1._collection$_cell = this._collection$_first;
        return t1;
      },
      get$length: function(_) {
        return this._collection$_length;
      },
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      contains$1: function(_, object) {
        var strings, t1;
        if (typeof object === "string" && object !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null)
            return false;
          return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
        } else {
          t1 = this._contains$1(object);
          return t1;
        }
      },
      _contains$1: function(object) {
        var rest = this._collection$_rest;
        if (rest == null)
          return false;
        return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
      },
      add$1: function(_, element) {
        var strings, nums;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (typeof element === "string" && element !== "__proto__") {
          strings = this._collection$_strings;
          if (strings == null) {
            strings = P._LinkedHashSet__newHashTable();
            this._collection$_strings = strings;
          }
          return this._collection$_addHashTableEntry$2(strings, element);
        } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
          nums = this._collection$_nums;
          if (nums == null) {
            nums = P._LinkedHashSet__newHashTable();
            this._collection$_nums = nums;
          }
          return this._collection$_addHashTableEntry$2(nums, element);
        } else
          return this._add$1(element);
      },
      _add$1: function(element) {
        var rest, hash, bucket;
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        rest = this._collection$_rest;
        if (rest == null) {
          rest = P._LinkedHashSet__newHashTable();
          this._collection$_rest = rest;
        }
        hash = this._computeHashCode$1(element);
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [this._collection$_newLinkedCell$1(element)];
        else {
          if (this._findBucketIndex$2(bucket, element) >= 0)
            return false;
          bucket.push(this._collection$_newLinkedCell$1(element));
        }
        return true;
      },
      remove$1: function(_, object) {
        var t1;
        if (object !== "__proto__")
          return this._removeHashTableEntry$2(this._collection$_strings, object);
        else {
          t1 = this._remove$1(object);
          return t1;
        }
      },
      _remove$1: function(object) {
        var rest, bucket, index;
        rest = this._collection$_rest;
        if (rest == null)
          return false;
        bucket = this._getBucket$2(rest, object);
        index = this._findBucketIndex$2(bucket, object);
        if (index < 0)
          return false;
        this._unlinkCell$1(bucket.splice(index, 1)[0]);
        return true;
      },
      _collection$_addHashTableEntry$2: function(table, element) {
        H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
        if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
          return false;
        table[element] = this._collection$_newLinkedCell$1(element);
        return true;
      },
      _removeHashTableEntry$2: function(table, element) {
        var cell;
        if (table == null)
          return false;
        cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
        if (cell == null)
          return false;
        this._unlinkCell$1(cell);
        delete table[element];
        return true;
      },
      _collection$_modified$0: function() {
        this._collection$_modifications = this._collection$_modifications + 1 & 67108863;
      },
      _collection$_newLinkedCell$1: function(element) {
        var cell, last;
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0)));
        if (this._collection$_first == null) {
          this._collection$_last = cell;
          this._collection$_first = cell;
        } else {
          last = this._collection$_last;
          cell._collection$_previous = last;
          last._collection$_next = cell;
          this._collection$_last = cell;
        }
        ++this._collection$_length;
        this._collection$_modified$0();
        return cell;
      },
      _unlinkCell$1: function(cell) {
        var previous, next;
        previous = cell._collection$_previous;
        next = cell._collection$_next;
        if (previous == null)
          this._collection$_first = next;
        else
          previous._collection$_next = next;
        if (next == null)
          this._collection$_last = previous;
        else
          next._collection$_previous = previous;
        --this._collection$_length;
        this._collection$_modified$0();
      },
      _computeHashCode$1: function(element) {
        return J.get$hashCode$(element) & 0x3ffffff;
      },
      _getBucket$2: function(table, element) {
        return table[this._computeHashCode$1(element)];
      },
      _findBucketIndex$2: function(bucket, element) {
        var $length, i;
        if (bucket == null)
          return -1;
        $length = bucket.length;
        for (i = 0; i < $length; ++i)
          if (J.$eq$(bucket[i]._collection$_element, element))
            return i;
        return -1;
      },
      static: {
        _LinkedHashSet__newHashTable: function() {
          var table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          return table;
        }
      }
    },
    _LinkedHashSetCell: {
      "^": "Object;_collection$_element,0_collection$_next,0_collection$_previous"
    },
    _LinkedHashSetIterator: {
      "^": "Object;_set,_collection$_modifications,0_collection$_cell,0_current,$ti",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1 = this._set;
        if (this._collection$_modifications !== t1._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        else {
          t1 = this._collection$_cell;
          if (t1 == null) {
            this.set$_current(null);
            return false;
          } else {
            this.set$_current(H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(this, 0)));
            this._collection$_cell = this._collection$_cell._collection$_next;
            return true;
          }
        }
      },
      $isIterator: 1,
      static: {
        _LinkedHashSetIterator$: function(_set, _modifications, $E) {
          var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
          t1._collection$_cell = _set._collection$_first;
          return t1;
        }
      }
    },
    _HashSetBase: {
      "^": "SetBase;"
    },
    IterableMixin: {
      "^": "Object;$ti",
      get$length: function(_) {
        var t1, it, count;
        t1 = this._items;
        it = new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        var t1 = this._items;
        return !new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]).moveNext$0();
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      },
      $isIterable: 1
    },
    IterableBase: {
      "^": "Iterable;"
    },
    LinkedHashMap_LinkedHashMap$from_closure: {
      "^": "Closure:10;result,K,V",
      call$2: function(k, v) {
        this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
      }
    },
    ListBase: {
      "^": "_ListBase_Object_ListMixin;",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new H.ListIterator(receiver, this.get$length(receiver), 0, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      },
      elementAt$1: function(receiver, index) {
        return this.$index(receiver, index);
      },
      get$isEmpty: function(receiver) {
        return this.get$length(receiver) === 0;
      },
      $add: function(receiver, other) {
        var t1, result;
        t1 = [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)];
        H.assertSubtype(other, "$isList", t1, "$asList");
        result = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(result, C.JSInt_methods.$add(this.get$length(receiver), other.get$length(other)));
        C.JSArray_methods.setRange$3(result, 0, this.get$length(receiver), receiver);
        C.JSArray_methods.setRange$3(result, this.get$length(receiver), result.length, other);
        return result;
      },
      toString$0: function(receiver) {
        return P.IterableBase_iterableToFullString(receiver, "[", "]");
      }
    },
    MapBase: {
      "^": "MapMixin;"
    },
    MapBase_mapToString_closure: {
      "^": "Closure:10;_box_0,result",
      call$2: function(k, v) {
        var t1, t2;
        t1 = this._box_0;
        if (!t1.first)
          this.result._contents += ", ";
        t1.first = false;
        t1 = this.result;
        t2 = t1._contents += H.S(k);
        t1._contents = t2 + ": ";
        t1._contents += H.S(v);
      }
    },
    MapMixin: {
      "^": "Object;$ti",
      forEach$1: function(_, action) {
        var t1, key;
        H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1)]});
        for (t1 = J.get$iterator$ax(this.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          action.call$2(key, this.$index(0, key));
        }
      },
      get$length: function(_) {
        return J.get$length$asx(this.get$keys());
      },
      toString$0: function(_) {
        return P.MapBase_mapToString(this);
      },
      $isMap: 1
    },
    Queue: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    ListQueue: {
      "^": "ListIterable;0_table,_head,_tail,_modificationCount,$ti",
      set$_table: function(_table) {
        this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
      },
      get$iterator: function(_) {
        return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, this.$ti);
      },
      get$isEmpty: function(_) {
        return this._head === this._tail;
      },
      get$length: function(_) {
        return (this._tail - this._head & this._table.length - 1) >>> 0;
      },
      elementAt$1: function(_, index) {
        var $length, t1, t2, t3;
        $length = this.get$length(this);
        if (0 > index || index >= $length)
          H.throwExpression(P.IndexError$(index, this, "index", null, $length));
        t1 = this._table;
        t2 = t1.length;
        t3 = (this._head + index & t2 - 1) >>> 0;
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        return t1[t3];
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      $isQueue: 1,
      static: {
        ListQueue$: function(initialCapacity, $E) {
          var t1, t2;
          t1 = new P.ListQueue(0, 0, 0, [$E]);
          t2 = new Array(8);
          t2.fixed$length = Array;
          t1.set$_table(H.setRuntimeTypeInfo(t2, [$E]));
          return t1;
        }
      }
    },
    _ListQueueIterator: {
      "^": "Object;_queue,_end,_modificationCount,_position,0_current,$ti",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1, t2, t3;
        t1 = this._queue;
        if (this._modificationCount !== t1._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(t1));
        t2 = this._position;
        if (t2 === this._end) {
          this.set$_current(null);
          return false;
        }
        t3 = t1._table;
        if (t2 >= t3.length)
          return H.ioore(t3, t2);
        this.set$_current(t3[t2]);
        this._position = (this._position + 1 & t1._table.length - 1) >>> 0;
        return true;
      },
      $isIterator: 1
    },
    SetMixin: {
      "^": "Object;$ti",
      get$isEmpty: function(_) {
        return this._collection$_length === 0;
      },
      addAll$1: function(_, elements) {
        var t1;
        for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
          this.add$1(0, t1.get$current());
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToFullString(this, "{", "}");
      },
      join$1: function(_, separator) {
        var iterator, t1;
        iterator = P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
        if (!iterator.moveNext$0())
          return "";
        if (separator === "") {
          t1 = "";
          do
            t1 += H.S(iterator._current);
          while (iterator.moveNext$0());
        } else {
          t1 = H.S(iterator._current);
          for (; iterator.moveNext$0();)
            t1 = t1 + separator + H.S(iterator._current);
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    SetBase: {
      "^": "SetMixin;"
    },
    _ListBase_Object_ListMixin: {
      "^": "Object+ListMixin;"
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, growable, $E) {
      var result, i;
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return list;
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var it, i, list;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      it = new H.ListIterator(charCodes, charCodes.get$length(charCodes), 0, [H.getTypeArgumentByIndex(charCodes, 0)]);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
      list = [];
      for (; it.moveNext$0();)
        list.push(it.__internal$_current);
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source, caseSensitive, multiLine) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false));
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, i;
      H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
      result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    bool: {
      "^": "Object;"
    },
    "+bool": 0,
    double: {
      "^": "num;"
    },
    "+double": 0,
    Error: {
      "^": "Object;"
    },
    NullThrownError: {
      "^": "Error;",
      toString$0: function(_) {
        return "Throw of null.";
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name>,message",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + t1 + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + t1;
        prefix = this.get$_errorName() + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + explanation + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message);
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else if (t2 > t1)
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
        return explanation;
      },
      static: {
        RangeError$: function(message) {
          return new P.RangeError(null, null, false, null, null, message);
        },
        RangeError$value: function(value, $name, message) {
          return new P.RangeError(null, null, true, value, $name, "Value not in range");
        },
        RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
          return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
        },
        RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
          if (0 > start || start > $length)
            throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
          if (end != null) {
            if (start > end || end > $length)
              throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
            return end;
          }
          return $length;
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var invalidValue, t1;
        invalidValue = H.intTypeCheck(this.invalidValue);
        if (typeof invalidValue !== "number")
          return invalidValue.$lt();
        if (invalidValue < 0)
          return ": index must not be negative";
        t1 = this.length;
        if (t1 === 0)
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
          return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
        }
      }
    },
    UnsupportedError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Unsupported operation: " + this.message;
      },
      static: {
        UnsupportedError$: function(message) {
          return new P.UnsupportedError(message);
        }
      }
    },
    UnimplementedError: {
      "^": "Error;message",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
      },
      static: {
        UnimplementedError$: function(message) {
          return new P.UnimplementedError(message);
        }
      }
    },
    StateError: {
      "^": "Error;message",
      toString$0: function(_) {
        return "Bad state: " + this.message;
      },
      static: {
        StateError$: function(message) {
          return new P.StateError(message);
        }
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      },
      static: {
        ConcurrentModificationError$: function(modifiedObject) {
          return new P.ConcurrentModificationError(modifiedObject);
        }
      }
    },
    StackOverflowError: {
      "^": "Object;",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      $isError: 1
    },
    CyclicInitializationError: {
      "^": "Error;variableName",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
      }
    },
    _Exception: {
      "^": "Object;message",
      toString$0: function(_) {
        return "Exception: " + this.message;
      }
    },
    FormatException: {
      "^": "Object;message,source,offset",
      toString$0: function(_) {
        var t1, report, objectSource, source;
        t1 = this.message;
        report = "" !== t1 ? "FormatException: " + t1 : "FormatException";
        objectSource = this.source;
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      }
    },
    Function: {
      "^": "Object;"
    },
    int: {
      "^": "num;"
    },
    "+int": 0,
    Iterable: {
      "^": "Object;$ti",
      where$1: ["super$Iterable$where", function(_, test) {
        var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
        return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
      }],
      any$1: function(_, test) {
        var t1;
        H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
        for (t1 = this.get$iterator(this); t1.moveNext$0();)
          if (test.call$1(t1.get$current()))
            return true;
        return false;
      },
      get$length: function(_) {
        var it, count;
        it = this.get$iterator(this);
        for (count = 0; it.moveNext$0();)
          ++count;
        return count;
      },
      get$isEmpty: function(_) {
        return !this.get$iterator(this).moveNext$0();
      },
      get$single: function(_) {
        var it, result;
        it = this.get$iterator(this);
        if (!it.moveNext$0())
          throw H.wrapException(H.IterableElementError_noElement());
        result = it.get$current();
        if (it.moveNext$0())
          throw H.wrapException(H.IterableElementError_tooMany());
        return result;
      },
      elementAt$1: function(_, index) {
        var t1, elementIndex, element;
        if (index < 0)
          H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
        for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
          element = t1.get$current();
          if (index === elementIndex)
            return element;
          ++elementIndex;
        }
        throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
      },
      toString$0: function(_) {
        return P.IterableBase_iterableToShortString(this, "(", ")");
      }
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;$ti"
    },
    Null: {
      "^": "Object;",
      get$hashCode: function(_) {
        return P.Object.prototype.get$hashCode.call(this, this);
      },
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";",
      $eq: function(_, other) {
        return this === other;
      },
      get$hashCode: function(_) {
        return H.Primitives_objectHashCode(this);
      },
      toString$0: function(_) {
        return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    StackTrace: {
      "^": "Object;"
    },
    String: {
      "^": "Object;",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1
    },
    "+String": 0,
    StringBuffer: {
      "^": "Object;_contents<",
      get$length: function(_) {
        return this._contents.length;
      },
      toString$0: function(_) {
        var t1 = this._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      },
      static: {
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator = J.get$iterator$ax(objects);
          if (!iterator.moveNext$0())
            return string;
          if (separator.length === 0) {
            do
              string += H.S(iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string += H.S(iterator.get$current());
            for (; iterator.moveNext$0();)
              string = string + separator + H.S(iterator.get$current());
          }
          return string;
        }
      }
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1, fragment;
      t1 = document.body;
      fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement");
    },
    Element__safeTagName: function(element) {
      var result, t1, exception;
      result = "element tag unavailable";
      try {
        t1 = J.get$tagName$x(element);
        if (typeof t1 === "string")
          result = element.tagName;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: {
      "^": "Element;",
      "%": "HTMLAudioElement|HTMLBRElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadingElement|HTMLHtmlElement|HTMLImageElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMarqueeElement|HTMLMediaElement|HTMLMenuElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLVideoElement;HTMLElement"
    },
    AnchorElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isAnchorElement: 1,
      "%": "HTMLAnchorElement"
    },
    AreaElement: {
      "^": "HtmlElement;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "HTMLAreaElement"
    },
    BaseElement: {
      "^": "HtmlElement;",
      $isBaseElement: 1,
      "%": "HTMLBaseElement"
    },
    BodyElement: {
      "^": "HtmlElement;",
      $isBodyElement: 1,
      "%": "HTMLBodyElement"
    },
    ButtonElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLButtonElement"
    },
    CharacterData: {
      "^": "Node;0length=",
      "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
    },
    Document: {
      "^": "Node;",
      adoptNode$1: function(receiver, node) {
        return receiver.adoptNode(node);
      },
      querySelector$1: function(receiver, selectors) {
        return receiver.querySelector(selectors);
      },
      "%": "XMLDocument;Document"
    },
    DomError: {
      "^": "Interceptor;0name=",
      "%": "DOMError"
    },
    DomException: {
      "^": "Interceptor;",
      get$name: function(receiver) {
        var errorName = receiver.name;
        if (P.Device_isWebKit() && errorName === "SECURITY_ERR")
          return "SecurityError";
        if (P.Device_isWebKit() && errorName === "SYNTAX_ERR")
          return "SyntaxError";
        return errorName;
      },
      toString$0: function(receiver) {
        return String(receiver);
      },
      "%": "DOMException"
    },
    DomImplementation: {
      "^": "Interceptor;",
      createHtmlDocument$1: function(receiver, title) {
        return receiver.createHTMLDocument(title);
      },
      "%": "DOMImplementation"
    },
    Element: {
      "^": "Node;0tagName=",
      get$attributes: function(receiver) {
        return new W._ElementAttributeMap(receiver);
      },
      toString$0: function(receiver) {
        return receiver.localName;
      },
      createFragment$3$treeSanitizer$validator: ["super$Element$createFragment", function(receiver, html, treeSanitizer, validator) {
        var t1, t2, contextElement, fragment;
        if (treeSanitizer == null) {
          if (validator == null) {
            t1 = $.Element__defaultValidator;
            if (t1 == null) {
              t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
              t2 = new W.NodeValidatorBuilder(t1);
              C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
              C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
              $.Element__defaultValidator = t2;
              validator = t2;
            } else
              validator = t1;
          }
          t1 = $.Element__defaultSanitizer;
          if (t1 == null) {
            t1 = new W._ValidatingTreeSanitizer(validator);
            $.Element__defaultSanitizer = t1;
            treeSanitizer = t1;
          } else {
            t1.validator = validator;
            treeSanitizer = t1;
          }
        } else if (validator != null)
          throw H.wrapException(P.ArgumentError$("validator can only be passed if treeSanitizer is null"));
        if ($.Element__parseDocument == null) {
          t1 = document;
          t2 = t1.implementation;
          t2 = (t2 && C.DomImplementation_methods).createHtmlDocument$1(t2, "");
          $.Element__parseDocument = t2;
          $.Element__parseRange = t2.createRange();
          t2 = $.Element__parseDocument;
          t2.toString;
          t2 = t2.createElement("base");
          H.interceptedTypeCheck(t2, "$isBaseElement");
          t2.href = t1.baseURI;
          t1 = $.Element__parseDocument.head;
          (t1 && C.HeadElement_methods).append$1(t1, t2);
        }
        t1 = $.Element__parseDocument;
        if (t1.body == null) {
          t1.toString;
          t2 = t1.createElement("body");
          t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
        }
        t1 = $.Element__parseDocument;
        if (!!this.$isBodyElement)
          contextElement = t1.body;
        else {
          t2 = receiver.tagName;
          t1.toString;
          contextElement = t1.createElement(t2);
          t1 = $.Element__parseDocument.body;
          (t1 && C.BodyElement_methods).append$1(t1, contextElement);
        }
        if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
          t1 = $.Element__parseRange;
          (t1 && C.Range_methods).selectNodeContents$1(t1, contextElement);
          t1 = $.Element__parseRange;
          fragment = (t1 && C.Range_methods).createContextualFragment$1(t1, html);
        } else {
          contextElement.innerHTML = html;
          fragment = $.Element__parseDocument.createDocumentFragment();
          for (t1 = J.getInterceptor$x(fragment); t2 = contextElement.firstChild, t2 != null;)
            t1.append$1(fragment, t2);
        }
        t1 = $.Element__parseDocument.body;
        if (contextElement == null ? t1 != null : contextElement !== t1)
          J.remove$0$x(contextElement);
        treeSanitizer.sanitizeTree$1(fragment);
        C.HtmlDocument_methods.adoptNode$1(document, fragment);
        return fragment;
      }, function($receiver, html, treeSanitizer) {
        return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
      }, "createFragment$2$treeSanitizer", null, null, "get$createFragment", 5, 5, null],
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        receiver.textContent = null;
        this.append$1(receiver, this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      getAttribute$1: function(receiver, $name) {
        return receiver.getAttribute($name);
      },
      _removeAttribute$1: function(receiver, $name) {
        return receiver.removeAttribute($name);
      },
      get$onClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "click", false, [W.MouseEvent]);
      },
      $isElement: 1,
      "%": ";Element"
    },
    Element_Element$html_closure: {
      "^": "Closure:39;",
      call$1: function(e) {
        return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement;
      }
    },
    EmbedElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLEmbedElement"
    },
    Event0: {
      "^": "Interceptor;",
      $isEvent0: 1,
      "%": "AbortPaymentEvent|AnimationEvent|AnimationPlaybackEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|BackgroundFetchClickEvent|BackgroundFetchEvent|BackgroundFetchFailEvent|BackgroundFetchedEvent|BeforeInstallPromptEvent|BeforeUnloadEvent|BlobEvent|CanMakePaymentEvent|ClipboardEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|ExtendableEvent|ExtendableMessageEvent|FetchEvent|FontFaceSetLoadEvent|ForeignFetchEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaEncryptedEvent|MediaKeyMessageEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MojoInterfaceRequestEvent|MutationEvent|NotificationEvent|OfflineAudioCompletionEvent|PageTransitionEvent|PaymentRequestEvent|PaymentRequestUpdateEvent|PopStateEvent|PresentationConnectionAvailableEvent|PresentationConnectionCloseEvent|ProgressEvent|PromiseRejectionEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCPeerConnectionIceEvent|RTCTrackEvent|ResourceProgressEvent|SecurityPolicyViolationEvent|SensorErrorEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|SyncEvent|TrackEvent|TransitionEvent|USBConnectionEvent|VRDeviceEvent|VRDisplayEvent|VRSessionEvent|WebGLContextEvent|WebKitTransitionEvent;Event|InputEvent"
    },
    EventTarget: {
      "^": "Interceptor;",
      _addEventListener$3: function(receiver, type, listener, options) {
        return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event0]}), 1), false);
      },
      $isEventTarget: 1,
      "%": ";EventTarget"
    },
    FieldSetElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLFieldSetElement"
    },
    FormElement: {
      "^": "HtmlElement;0length=,0name=",
      "%": "HTMLFormElement"
    },
    HeadElement: {
      "^": "HtmlElement;",
      "%": "HTMLHeadElement"
    },
    HtmlDocument: {
      "^": "Document;",
      "%": "HTMLDocument"
    },
    IFrameElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLIFrameElement"
    },
    InputElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLInputElement"
    },
    Location: {
      "^": "Interceptor;",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isLocation: 1,
      "%": "Location"
    },
    MapElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLMapElement"
    },
    MetaElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLMetaElement"
    },
    MouseEvent: {
      "^": "UIEvent;",
      $isMouseEvent: 1,
      "%": "DragEvent|MouseEvent|PointerEvent|WheelEvent"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;0name=",
      "%": "NavigatorUserMediaError"
    },
    _ChildNodeListLazy: {
      "^": "ListBase;_this",
      get$single: function(_) {
        var t1, l;
        t1 = this._this;
        l = t1.childNodes.length;
        if (l === 0)
          throw H.wrapException(P.StateError$("No elements"));
        if (l > 1)
          throw H.wrapException(P.StateError$("More than one element"));
        return t1.firstChild;
      },
      addAll$1: function(_, iterable) {
        var t1, t2, len, t3, i;
        H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, t3 = J.getInterceptor$x(t2), i = 0; i < len; ++i)
            t3.append$1(t2, t1.firstChild);
        return;
      },
      $indexSet: function(_, index, value) {
        var t1, t2;
        H.interceptedTypeCheck(value, "$isNode");
        t1 = this._this;
        t2 = t1.childNodes;
        if (index < 0 || index >= t2.length)
          return H.ioore(t2, index);
        J._replaceChild$2$x(t1, value, t2[index]);
      },
      get$iterator: function(_) {
        var t1 = this._this.childNodes;
        return new W.FixedSizeListIterator(t1, t1.length, -1, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
      },
      get$length: function(_) {
        return this._this.childNodes.length;
      },
      $index: function(_, index) {
        var t1 = this._this.childNodes;
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;0previousNode:previousSibling=",
      remove$0: function(receiver) {
        var t1 = receiver.parentNode;
        if (t1 != null)
          J._removeChild$1$x(t1, receiver);
      },
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      append$1: function(receiver, node) {
        return receiver.appendChild(node);
      },
      _removeChild$1: function(receiver, child) {
        return receiver.removeChild(child);
      },
      _replaceChild$2: function(receiver, node, child) {
        return receiver.replaceChild(node, child);
      },
      $isNode: 1,
      "%": "DocumentFragment|DocumentType|ShadowRoot;Node"
    },
    NodeList: {
      "^": "_NodeList_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "NodeList|RadioNodeList"
    },
    ObjectElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLObjectElement"
    },
    OutputElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLOutputElement"
    },
    OverconstrainedError: {
      "^": "Interceptor;0name=",
      "%": "OverconstrainedError"
    },
    ParamElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLParamElement"
    },
    Range: {
      "^": "Interceptor;",
      createContextualFragment$1: function(receiver, fragment) {
        return receiver.createContextualFragment(fragment);
      },
      selectNodeContents$1: function(receiver, node) {
        return receiver.selectNodeContents(node);
      },
      "%": "Range"
    },
    SelectElement: {
      "^": "HtmlElement;0length=,0name=",
      "%": "HTMLSelectElement"
    },
    SlotElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLSlotElement"
    },
    SpeechSynthesisEvent: {
      "^": "Event0;0name=",
      "%": "SpeechSynthesisEvent"
    },
    TableElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var table, fragment;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
        fragment = document.createDocumentFragment();
        fragment.toString;
        table.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
        return fragment;
      },
      "%": "HTMLTableElement"
    },
    TableRowElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section, row;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        section.toString;
        t1 = new W._ChildNodeListLazy(section);
        row = t1.get$single(t1);
        fragment.toString;
        row.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
        return fragment;
      },
      "%": "HTMLTableRowElement"
    },
    TableSectionElement: {
      "^": "HtmlElement;",
      createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var t1, fragment, section;
        if ("createContextualFragment" in window.Range.prototype)
          return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
        t1 = document;
        fragment = t1.createDocumentFragment();
        t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        section = t1.get$single(t1);
        fragment.toString;
        section.toString;
        new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
        return fragment;
      },
      "%": "HTMLTableSectionElement"
    },
    TemplateElement: {
      "^": "HtmlElement;",
      setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
        var fragment;
        receiver.textContent = null;
        fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
        J.append$1$x(receiver.content, fragment);
      },
      setInnerHtml$2$validator: function($receiver, html, validator) {
        return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, null, validator);
      },
      $isTemplateElement: 1,
      "%": "HTMLTemplateElement"
    },
    TextAreaElement: {
      "^": "HtmlElement;0name=",
      "%": "HTMLTextAreaElement"
    },
    UIEvent: {
      "^": "Event0;",
      "%": "CompositionEvent|FocusEvent|KeyboardEvent|TextEvent|TouchEvent;UIEvent"
    },
    Window: {
      "^": "EventTarget;0name=",
      "%": "DOMWindow|Window"
    },
    _Attr: {
      "^": "Node;0name=",
      $is_Attr: 1,
      "%": "Attr"
    },
    _NamedNodeMap: {
      "^": "__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin;",
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        if (index >>> 0 !== index || index >= receiver.length)
          throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        return receiver[index];
      },
      $indexSet: function(receiver, index, value) {
        H.interceptedTypeCheck(value, "$isNode");
        throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
      },
      elementAt$1: function(receiver, index) {
        if (index < 0 || index >= receiver.length)
          return H.ioore(receiver, index);
        return receiver[index];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": "MozNamedAttrMap|NamedNodeMap"
    },
    _AttributeMap: {
      "^": "MapBase;_element<",
      forEach$1: function(_, f) {
        var t1, t2, t3, t4, _i, key;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
        for (t1 = this.get$keys(), t2 = t1.length, t3 = this._element, t4 = J.getInterceptor$x(t3), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          key = t1[_i];
          f.call$2(key, t4.getAttribute$1(t3, key));
        }
      },
      get$keys: function() {
        var attributes, keys, len, i, attr;
        attributes = this._element.attributes;
        keys = H.setRuntimeTypeInfo([], [P.String]);
        for (len = attributes.length, i = 0; i < len; ++i) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
          if (attr.namespaceURI == null)
            C.JSArray_methods.add$1(keys, attr.name);
        }
        return keys;
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;_element",
      $index: function(_, key) {
        return J.getAttribute$1$x(this._element, H.stringTypeCheck(key));
      },
      get$length: function(_) {
        return this.get$keys().length;
      }
    },
    _EventStream: {
      "^": "Stream;$ti"
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_target,_eventType,_useCapture,$ti"
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture,$ti",
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1, t2;
          t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event0);
          t2 = t1 != null;
          if (t2 && true) {
            H.functionTypeCheck(t1, {func: 1, args: [W.Event0]});
            if (t2)
              J._addEventListener$3$x(_target, _eventType, t1, false);
          }
          return new W._EventStreamSubscription(0, _target, _eventType, t1, false, [$T]);
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:54;onData",
      call$1: function(e) {
        return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent0"));
      }
    },
    _Html5NodeValidator: {
      "^": "Object;uriPolicy",
      _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
        var t1, _i;
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        if (t1.get$isEmpty(t1)) {
          for (_i = 0; _i < 262; ++_i)
            t1.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
          for (_i = 0; _i < 12; ++_i)
            t1.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
        }
      },
      allowsElement$1: function(element) {
        return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        var tagName, t1, validator;
        tagName = W.Element__safeTagName(element);
        t1 = $.$get$_Html5NodeValidator__attributeValidators();
        validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
        if (validator == null)
          validator = t1.$index(0, "*::" + attributeName);
        if (validator == null)
          return false;
        return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
      },
      $isNodeValidator: 1,
      static: {
        _Html5NodeValidator$: function(uriPolicy) {
          var e, t1;
          e = document.createElement("a");
          t1 = new W._SameOriginUriPolicy(e, window.location);
          t1 = new W._Html5NodeValidator(t1);
          t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
          return t1;
        },
        _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
          H.interceptedTypeCheck(element, "$isElement");
          H.stringTypeCheck(attributeName);
          H.stringTypeCheck(value);
          H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
          return true;
        }, "call$4", "html__Html5NodeValidator__standardAttributeValidator$closure", 16, 0, 8],
        _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
          var t1, t2, t3;
          H.interceptedTypeCheck(element, "$isElement");
          H.stringTypeCheck(attributeName);
          H.stringTypeCheck(value);
          t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
          t2 = t1._hiddenAnchor;
          t2.href = value;
          t3 = t2.hostname;
          t1 = t1._loc;
          if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
            if (t3 === "")
              if (t2.port === "") {
                t1 = t2.protocol;
                t1 = t1 === ":" || t1 === "";
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
          return t1;
        }, "call$4", "html__Html5NodeValidator__uriAttributeValidator$closure", 16, 0, 8]
      }
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      get$iterator: function(receiver) {
        return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
      }
    },
    NodeValidatorBuilder: {
      "^": "Object;_validators",
      add$1: function(_, validator) {
        C.JSArray_methods.add$1(this._validators, validator);
      },
      allowsElement$1: function(element) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
      },
      allowsAttribute$3: function(element, attributeName, value) {
        return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
      },
      $isNodeValidator: 1,
      static: {
        NodeValidatorBuilder$common: function() {
          var t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          return new W.NodeValidatorBuilder(t1);
        }
      }
    },
    NodeValidatorBuilder_allowsElement_closure: {
      "^": "Closure:11;element",
      call$1: function(v) {
        return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
      }
    },
    NodeValidatorBuilder_allowsAttribute_closure: {
      "^": "Closure:11;element,attributeName,value",
      call$1: function(v) {
        return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
      }
    },
    _SimpleNodeValidator: {
      "^": "Object;allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
        var t1, legalAttributes, extraUriAttributes;
        t1 = allowedElements == null ? C.List_empty : allowedElements;
        this.allowedElements.addAll$1(0, t1);
        t1 = J.getInterceptor$ax(allowedAttributes);
        legalAttributes = t1.where$1(allowedAttributes, new W._SimpleNodeValidator_closure());
        extraUriAttributes = t1.where$1(allowedAttributes, new W._SimpleNodeValidator_closure0());
        this.allowedAttributes.addAll$1(0, legalAttributes);
        t1 = this.allowedUriAttributes;
        t1.addAll$1(0, C.List_empty);
        t1.addAll$1(0, extraUriAttributes);
      },
      allowsElement$1: function(element) {
        return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
      },
      allowsAttribute$3: ["super$_SimpleNodeValidator$allowsAttribute", function(element, attributeName, value) {
        var tagName, t1;
        tagName = W.Element__safeTagName(element);
        t1 = this.allowedUriAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else if (t1.contains$1(0, "*::" + attributeName))
          return this.uriPolicy.allowsUri$1(value);
        else {
          t1 = this.allowedAttributes;
          if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
            return true;
          else if (t1.contains$1(0, "*::" + attributeName))
            return true;
          else if (t1.contains$1(0, H.S(tagName) + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
        return false;
      }],
      $isNodeValidator: 1,
      static: {
        _SimpleNodeValidator$: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
          var t1 = P.String;
          t1 = new W._SimpleNodeValidator(P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), uriPolicy);
          t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes);
          return t1;
        }
      }
    },
    _SimpleNodeValidator_closure: {
      "^": "Closure:12;",
      call$1: function(x) {
        return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
      }
    },
    _SimpleNodeValidator_closure0: {
      "^": "Closure:12;",
      call$1: function(x) {
        return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
      }
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
      allowsAttribute$3: function(element, attributeName, value) {
        if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
          return true;
        if (attributeName === "template" && value === "")
          return true;
        if (J.getAttribute$1$x(element, "template") === "")
          return this._templateAttrs.contains$1(0, attributeName);
        return false;
      },
      static: {
        _TemplatingNodeValidator$: function() {
          var t1, t2, t3, t4, t5;
          t1 = P.String;
          t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1);
          t3 = H.getTypeArgumentByIndex(C.List_wSV, 0);
          t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]});
          t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
          t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), P.LinkedHashSet_LinkedHashSet(null, null, null, t1), null);
          t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
          return t2;
        }
      }
    },
    _TemplatingNodeValidator_closure: {
      "^": "Closure:2;",
      call$1: function(attr) {
        return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
      }
    },
    _SvgNodeValidator: {
      "^": "Object;",
      allowsElement$1: function(element) {
        var t1 = J.getInterceptor$(element);
        if (!!t1.$isScriptElement)
          return false;
        t1 = !!t1.$isSvgElement;
        if (t1 && W.Element__safeTagName(element) === "foreignObject")
          return false;
        if (t1)
          return true;
        return false;
      },
      allowsAttribute$3: function(element, attributeName, value) {
        if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
          return false;
        return this.allowsElement$1(element);
      },
      $isNodeValidator: 1
    },
    FixedSizeListIterator: {
      "^": "Object;_array,_html$_length,_html$_position,0_html$_current,$ti",
      set$_html$_current: function(_current) {
        this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      moveNext$0: function() {
        var nextPosition, t1;
        nextPosition = this._html$_position + 1;
        t1 = this._html$_length;
        if (nextPosition < t1) {
          this.set$_html$_current(J.$index$asx(this._array, nextPosition));
          this._html$_position = nextPosition;
          return true;
        }
        this.set$_html$_current(null);
        this._html$_position = t1;
        return false;
      },
      get$current: function() {
        return this._html$_current;
      },
      $isIterator: 1
    },
    NodeValidator: {
      "^": "Object;"
    },
    _SameOriginUriPolicy: {
      "^": "Object;_hiddenAnchor,_loc",
      $isUriPolicy: 1
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;validator",
      sanitizeTree$1: function(node) {
        new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
      },
      _removeNode$2: function(node, $parent) {
        if ($parent == null)
          J.remove$0$x(node);
        else
          J._removeChild$1$x($parent, node);
      },
      _sanitizeUntrustedElement$2: function(element, $parent) {
        var corrupted, attrs, isAttr, corruptedTest1, elementText, elementTagName, exception, t1;
        corrupted = true;
        attrs = null;
        isAttr = null;
        try {
          attrs = J.get$attributes$x(element);
          isAttr = J.getAttribute$1$x(attrs.get$_element(), "is");
          corruptedTest1 = function(element) {
            if (!(element.attributes instanceof NamedNodeMap))
              return true;
            var childNodes = element.childNodes;
            if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
              return true;
            if (element.children)
              if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
                return true;
            var length = 0;
            if (element.children)
              length = element.children.length;
            for (var i = 0; i < length; i++) {
              var child = element.children[i];
              if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
                return true;
            }
            return false;
          }(element);
          corrupted = corruptedTest1 ? true : !(element.attributes instanceof NamedNodeMap);
        } catch (exception) {
          H.unwrapException(exception);
        }
        elementText = "element unprintable";
        try {
          elementText = J.toString$0$(element);
        } catch (exception) {
          H.unwrapException(exception);
        }
        try {
          elementTagName = W.Element__safeTagName(element);
          this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
        } catch (exception) {
          if (H.unwrapException(exception) instanceof P.ArgumentError)
            throw exception;
          else {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing corrupted element " + H.S(elementText);
            if (typeof console != "undefined")
              window.console.warn(t1);
          }
        }
      },
      _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
        var t1, keys, i, t2, $name, t3;
        if (corrupted) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing element due to corrupted attributes on <" + text + ">";
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
        if (!this.validator.allowsElement$1(element)) {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
        if (isAttr != null)
          if (!this.validator.allowsAttribute$3(element, "is", isAttr)) {
            this._removeNode$2(element, $parent);
            window;
            t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
            if (typeof console != "undefined")
              window.console.warn(t1);
            return;
          }
        t1 = attrs.get$keys();
        keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
        for (i = attrs.get$keys().length - 1, t1 = attrs._element, t2 = J.getInterceptor$x(t1); i >= 0; --i) {
          if (i >= keys.length)
            return H.ioore(keys, i);
          $name = keys[i];
          if (!this.validator.allowsAttribute$3(element, J.toLowerCase$0$s($name), t2.getAttribute$1(t1, $name))) {
            window;
            t3 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t2.getAttribute$1(t1, $name)) + '">';
            if (typeof console != "undefined")
              window.console.warn(t3);
            t2.getAttribute$1(t1, $name);
            t2._removeAttribute$1(t1, $name);
          }
        }
        if (!!J.getInterceptor$(element).$isTemplateElement)
          this.sanitizeTree$1(element.content);
      },
      $isNodeTreeSanitizer: 1
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: {
      "^": "Closure:15;$this",
      call$2: function(node, $parent) {
        var child, nextChild, t1, exception, t2, t3;
        t1 = this.$this;
        switch (node.nodeType) {
          case 1:
            t1._sanitizeUntrustedElement$2(node, $parent);
            break;
          case 8:
          case 11:
          case 3:
          case 4:
            break;
          default:
            t1._removeNode$2(node, $parent);
        }
        child = node.lastChild;
        for (t1 = node == null; null != child;) {
          nextChild = null;
          try {
            nextChild = J.get$previousNode$x(child);
          } catch (exception) {
            H.unwrapException(exception);
            t2 = H.interceptedTypeCheck(child, "$isNode");
            if (t1) {
              t3 = t2.parentNode;
              if (t3 != null)
                J._removeChild$1$x(t3, t2);
            } else
              J._removeChild$1$x(node, t2);
            child = null;
            nextChild = node.lastChild;
          }
          if (child != null)
            this.call$2(child, node);
          child = H.interceptedTypeCheck(nextChild, "$isNode");
        }
      }
    },
    _NodeList_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NodeList_Interceptor_ListMixin+ImmutableListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin: {
      "^": "Interceptor+ListMixin;"
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__NamedNodeMap_Interceptor_ListMixin+ImmutableListMixin;"
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    Device_isWebKit: function() {
      var t1 = $.Device__isWebKit;
      if (t1 == null) {
        t1 = $.Device__isOpera;
        if (t1 == null) {
          t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
          $.Device__isOpera = t1;
        }
        t1 = !t1 && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
        $.Device__isWebKit = t1;
      }
      return t1;
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": ""
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JSRandom: {
      "^": "Object;",
      nextInt$1: function(max) {
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        return Math.random() * max >>> 0;
      },
      nextDouble$0: function() {
        return Math.random();
      },
      $isRandom: 1
    },
    _Random: {
      "^": "Object;_lo,_hi",
      _Random$1: function(seed) {
        var empty_seed, low, high, tmplow, low0, t1, t2, t3;
        empty_seed = seed < 0 ? -1 : 0;
        do {
          low = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - low, 4294967296);
          high = (seed & 4294967295) >>> 0;
          seed = C.JSInt_methods._tdivFast$1(seed - high, 4294967296);
          tmplow = ((~low & 4294967295) >>> 0) + (low << 21 >>> 0);
          low0 = (tmplow & 4294967295) >>> 0;
          high = (~high >>> 0) + ((high << 21 | low >>> 11) >>> 0) + C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296) & 4294967295;
          tmplow = ((low0 ^ (low0 >>> 24 | high << 8)) >>> 0) * 265;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 24) >>> 0) * 265 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          tmplow = ((low ^ (low >>> 14 | high << 18)) >>> 0) * 21;
          low = (tmplow & 4294967295) >>> 0;
          high = ((high ^ high >>> 14) >>> 0) * 21 + C.JSInt_methods._tdivFast$1(tmplow - low, 4294967296) & 4294967295;
          low = (low ^ (low >>> 28 | high << 4)) >>> 0;
          high = (high ^ high >>> 28) >>> 0;
          tmplow = (low << 31 >>> 0) + low;
          low0 = (tmplow & 4294967295) >>> 0;
          t1 = C.JSInt_methods._tdivFast$1(tmplow - low0, 4294967296);
          tmplow = this._lo * 1037;
          t2 = (tmplow & 4294967295) >>> 0;
          this._lo = t2;
          t3 = (this._hi * 1037 + C.JSInt_methods._tdivFast$1(tmplow - t2, 4294967296) & 4294967295) >>> 0;
          this._hi = t3;
          t2 = (t2 ^ low0) >>> 0;
          this._lo = t2;
          t1 = (t3 ^ high + ((high << 31 | low >>> 1) >>> 0) + t1 & 4294967295) >>> 0;
          this._hi = t1;
        } while (seed !== empty_seed);
        if (t1 === 0 && t2 === 0)
          this._lo = 23063;
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
        this._nextState$0();
      },
      _nextState$0: function() {
        var t1, tmpHi, tmpHiLo, tmpLo, tmpLoLo, newLo;
        t1 = this._lo;
        tmpHi = 4294901760 * t1;
        tmpHiLo = (tmpHi & 4294967295) >>> 0;
        tmpLo = 55905 * t1;
        tmpLoLo = (tmpLo & 4294967295) >>> 0;
        newLo = tmpLoLo + tmpHiLo + this._hi;
        t1 = (newLo & 4294967295) >>> 0;
        this._lo = t1;
        this._hi = (C.JSInt_methods._tdivFast$1(tmpLo - tmpLoLo + (tmpHi - tmpHiLo) + (newLo - t1), 4294967296) & 4294967295) >>> 0;
      },
      nextInt$1: function(max) {
        var t1, rnd32, result;
        if (max <= 0 || max > 4294967296)
          throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
        t1 = max - 1;
        if ((max & t1) >>> 0 === 0) {
          this._nextState$0();
          return (this._lo & t1) >>> 0;
        }
        do {
          this._nextState$0();
          rnd32 = this._lo;
          result = rnd32 % max;
        } while (rnd32 - result + max >= 4294967296);
        return result;
      },
      nextDouble$0: function() {
        this._nextState$0();
        var t1 = this._lo;
        this._nextState$0();
        return ((t1 & 67108863) * 134217728 + (this._lo & 134217727)) / 9007199254740992;
      },
      $isRandom: 1,
      static: {
        _Random$: function(seed) {
          var t1 = new P._Random(0, 0);
          t1._Random$1(seed);
          return t1;
        }
      }
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    ScriptElement: {
      "^": "SvgElement;",
      $isScriptElement: 1,
      "%": "SVGScriptElement"
    },
    SvgElement: {
      "^": "Element;",
      createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
        var t1, html, t2, fragment, svgFragment, root;
        if (validator == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          validator = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
        }
        treeSanitizer = new W._ValidatingTreeSanitizer(validator);
        html = '<svg version="1.1">' + svg + "</svg>";
        t1 = document;
        t2 = t1.body;
        fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
        svgFragment = t1.createDocumentFragment();
        fragment.toString;
        t1 = new W._ChildNodeListLazy(fragment);
        root = t1.get$single(t1);
        for (t1 = J.getInterceptor$x(svgFragment); t2 = root.firstChild, t2 != null;)
          t1.append$1(svgFragment, t2);
        return svgFragment;
      },
      get$onClick: function(receiver) {
        return new W._ElementEventStreamImpl(receiver, "click", false, [W.MouseEvent]);
      },
      $isSvgElement: 1,
      "%": "SVGAElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGCircleElement|SVGClipPathElement|SVGComponentTransferFunctionElement|SVGDefsElement|SVGDescElement|SVGDiscardElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGGradientElement|SVGGraphicsElement|SVGImageElement|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRadialGradientElement|SVGRectElement|SVGSVGElement|SVGSetElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTSpanElement|SVGTextContentElement|SVGTextElement|SVGTextPathElement|SVGTextPositioningElement|SVGTitleElement|SVGUseElement|SVGViewElement;SVGElement"
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": ""
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": ""
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": ""
  }], ["", "package:hauberk/src/content.dart",, T, {
    "^": "",
    GameContent: {
      "^": "Object;",
      createHero$3: function($name, race, heroClass) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, hero, inventory;
        race = $.$get$Races_human();
        heroClass = $.$get$Classes_adventurer();
        t1 = O.Inventory$(C.ItemLocation_wMy, 24, null);
        t2 = new Array(9);
        t2.fixed$length = Array;
        t3 = R.Item;
        t2 = H.setRuntimeTypeInfo(t2, [t3]);
        t4 = O.Inventory$(C.ItemLocation_ukJ, 26, null);
        t5 = O.Inventory$(C.ItemLocation_vOz, 8, null);
        t6 = new D.Strength();
        t7 = new D.Agility();
        t8 = new D.Fortitude();
        t9 = new D.Intellect();
        t10 = new D.Will();
        t11 = P.LinkedHashMap_LinkedHashMap$_empty(O.Shop, O.Inventory);
        t12 = M.Skill;
        t13 = P.int;
        t14 = B.Breed;
        hero = new K.HeroSave($name, race.rollStats$0(), heroClass, t1, new E.Equipment(C.List_tBY, t2), t4, t5, t11, 0, new M.SkillSet(P.LinkedHashMap_LinkedHashMap$_empty(t12, t13), P.LinkedHashMap_LinkedHashMap$_empty(t12, t13)), 60, 0, new V.Lore(P.LinkedHashMap_LinkedHashMap$_empty(t14, t13), P.LinkedHashMap_LinkedHashMap$_empty(t14, t13)), t6, t7, t8, t9, t10);
        t6.bindHero$1(hero);
        t7.bindHero$1(hero);
        t8.bindHero$1(hero);
        t9.bindHero$1(hero);
        t10.bindHero$1(hero);
        P.LinkedHashMap_LinkedHashMap$_literal(["Mending Salve", 3, "Scroll of Sidestepping", 2, "Tallow Candle", 4, "Loaf of Bread", 5], P.String, t13).forEach$1(0, new T.GameContent_createHero_closure(hero));
        heroClass.startingItems.spawnDrop$2(1, t1.get$tryAdd());
        for (t1 = $.$get$Shops_all(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t3 = [t3]; t1.moveNext$0();) {
          t2 = t1.get$current();
          inventory = new O.Inventory(new O.ItemLocation(t2.name, "All sold out!"), H.setRuntimeTypeInfo([], t3), 26);
          t2.update$1(inventory);
          t11.$indexSet(0, t2, inventory);
        }
        return hero;
      },
      createHero$1: function($name) {
        return this.createHero$3($name, null, null);
      },
      $isContent: 1
    },
    GameContent_createHero_closure: {
      "^": "Closure:16;hero",
      call$2: function(type, amount) {
        H.stringTypeCheck(type);
        H.intTypeCheck(amount);
        this.hero._inventory.tryAdd$1(new R.Item($.$get$Items_types().find$1(0, type), null, null, amount));
      }
    }
  }], ["", "package:hauberk/src/content/action/condition.dart",, E, {
    "^": "",
    HasteAction: {
      "^": "ConditionAction;_condition$_duration,_condition$_speed,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    FreezeActorAction: {
      "^": "_FreezeActorAction_ConditionAction_DestroyActionMixin;_condition$_damage,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    PoisonAction: {
      "^": "ConditionAction;_condition$_damage,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    BlindAction: {
      "^": "ConditionAction;_condition$_damage,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    DazzleAction: {
      "^": "ConditionAction;_condition$_damage,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    ResistAction: {
      "^": "ConditionAction;_condition$_duration,_condition$_element,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    _FreezeActorAction_ConditionAction_DestroyActionMixin: {
      "^": "ConditionAction+DestroyActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/detection.dart",, T, {
    "^": "",
    DetectType: {
      "^": "Object;index,_detection$_name",
      toString$0: function(_) {
        return this._detection$_name;
      }
    },
    DetectAction: {
      "^": "Action;_types,_detection$_maxDistance,0_detection$_tilesByDistance,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/eat.dart",, X, {
    "^": "",
    EatAction: {
      "^": "Action;_eat$_amount,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/element.dart",, G, {
    "^": "",
    BurnActorAction: {
      "^": "_BurnActorAction_Action_DestroyActionMixin;0_actor,0_pos,0_game,0_consumesEnergy"
    },
    BurnFloorAction: {
      "^": "_BurnFloorAction_Action_DestroyActionMixin;_element$_pos,_damage,_element$_fuel,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    FreezeFloorAction: {
      "^": "_FreezeFloorAction_Action_DestroyActionMixin;_element$_pos,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    PoisonFloorAction: {
      "^": "_PoisonFloorAction_Action_DestroyActionMixin;_element$_pos,_damage,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    WindAction: {
      "^": "Action;0_actor,0_pos,0_game,0_consumesEnergy"
    },
    LightFloorAction: {
      "^": "Action;_element$_pos,0_element$_emanation,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    _BurnActorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _BurnFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _FreezeFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    },
    _PoisonFloorAction_Action_DestroyActionMixin: {
      "^": "Action+DestroyActionMixin;"
    }
  }], ["", "package:hauberk/src/content/action/flow.dart",, N, {
    "^": "",
    FlowSelfAction: {
      "^": "Action;_flow$_attack,_flow$_motility,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    FlowFromAction: {
      "^": "Action;_flow$_attack,_flow$_pos,_flow$_motility,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/heal.dart",, O, {
    "^": "",
    HealAction: {
      "^": "Action;amount,curePoison,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/illuminate.dart",, F, {
    "^": "",
    IlluminateSelfAction: {
      "^": "Action;_illuminate$_range,_illuminate$_emanationLevel,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/mapping.dart",, Q, {
    "^": "",
    MappingAction: {
      "^": "Action;_maxDistance,_illuminate,_currentDistance,0_tilesByDistance,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/missive.dart",, R, {
    "^": "",
    Missive: {
      "^": "Object;index,_missive$_name",
      toString$0: function(_) {
        return this._missive$_name;
      }
    }
  }], ["", "package:hauberk/src/content/action/ray.dart",, G, {
    "^": "",
    RingSelfAction: {
      "^": "Action;_ray$_attack,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    RingFromAction: {
      "^": "Action;_ray$_attack,_ray$_pos,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/teleport.dart",, S, {
    "^": "",
    TeleportAction: {
      "^": "Action;distance,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/action/tile.dart",, Q, {
    "^": "",
    _OpenTileAction: {
      "^": "Action;"
    },
    OpenBarrelAction: {
      "^": "_OpenTileAction;_tile$_pos,0_actor,0_pos,0_game,0_consumesEnergy"
    },
    OpenChestAction: {
      "^": "_OpenTileAction;_tile$_pos,0_actor,0_pos,0_game,0_consumesEnergy"
    }
  }], ["", "package:hauberk/src/content/classes.dart",, V, {
    "^": "",
    _class: function($name, description, startingItems, masteries, spells) {
      var proficiencies, t1, t2, _i, skill, t3, proficiency;
      proficiencies = P.LinkedHashMap_LinkedHashMap$_empty(M.Skill, P.double);
      for (t1 = $.$get$Skills_all(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        skill = t1[_i];
        t3 = J.getInterceptor$(skill);
        proficiency = !!t3.$isMasteryDiscipline ? masteries : 1;
        proficiencies.$indexSet(0, skill, !!t3.$isSpell ? proficiency * spells : proficiency);
      }
      return new T.HeroClass($name, description, proficiencies, startingItems);
    }
  }], ["", "package:hauberk/src/content/decor/decor.dart",, Y, {
    "^": "",
    Decor: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/content/decor/furnishing.dart",, S, {
    "^": "",
    Furnishing: {
      "^": "Decor;_cells"
    },
    Cell: {
      "^": "Object;_apply,_motility,_require",
      static: {
        Cell$: function(apply, motility, require, requireAny) {
          var t1 = H.setRuntimeTypeInfo([], [Q.TileType]);
          if (require != null)
            C.JSArray_methods.add$1(t1, require);
          if (requireAny != null)
            C.JSArray_methods.addAll$1(t1, requireAny);
          return new S.Cell(apply, motility, t1);
        }
      }
    }
  }], ["", "package:hauberk/src/content/decor/furnishing_builder.dart",, T, {
    "^": "",
    furnishing: function(frequency, symmetry, template) {
      var t1, t2, t3, lines, mirrorLines, i, rotateLines, x, line, y;
      $._furnishingFrequency = frequency;
      if (symmetry == null)
        symmetry = C.Symmetry_0;
      t1 = P.String;
      t2 = H.setRuntimeTypeInfo(template.split("\n"), [t1]);
      t3 = H.getTypeArgumentByIndex(t2, 0);
      lines = new H.MappedListIterable(t2, H.functionTypeCheck(new T.furnishing_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).toList$0(0);
      T._singleFurnishing(lines);
      if (symmetry === C.Symmetry_1 || symmetry === C.Symmetry_3) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; i < lines.length; ++i) {
          t2 = J.get$codeUnits$s(lines[i]);
          C.JSArray_methods.$indexSet(mirrorLines, i, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(t2, [H.getRuntimeTypeArgument(t2, "ListMixin", 0)]), 0, null), T.furnishing_builder___mirrorCharHorizontal$closure()));
        }
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_2 || symmetry === C.Symmetry_3) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; t2 = lines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(lines[i], T.furnishing_builder___mirrorCharVertical$closure()));
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_3 || symmetry === C.Symmetry_5 || symmetry === C.Symmetry_4) {
        mirrorLines = H.setRuntimeTypeInfo(lines.slice(0), [H.getTypeArgumentByIndex(lines, 0)]);
        for (i = 0; t2 = lines.length, i < t2; ++i) {
          t3 = J.get$codeUnits$s(lines[i]);
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(t3, [H.getRuntimeTypeArgument(t3, "ListMixin", 0)]), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
        }
        T._singleFurnishing(mirrorLines);
      }
      if (symmetry === C.Symmetry_4) {
        rotateLines = H.setRuntimeTypeInfo([], [t1]);
        x = 0;
        while (true) {
          if (0 >= lines.length)
            return H.ioore(lines, 0);
          t1 = J.get$length$asx(lines[0]);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(x < t1))
            break;
          for (line = "", y = 0; y < lines.length; ++y)
            line = C.JSString_methods.$add(line, T._rotateChar90(J.$index$asx(lines[y], x)));
          C.JSArray_methods.add$1(rotateLines, line);
          ++x;
        }
        T._singleFurnishing(rotateLines);
        mirrorLines = H.setRuntimeTypeInfo(rotateLines.slice(0), [H.getTypeArgumentByIndex(rotateLines, 0)]);
        for (t1 = [P.int], i = 0; t2 = rotateLines.length, i < t2; ++i)
          C.JSArray_methods.$indexSet(mirrorLines, t2 - i - 1, T._mapString(P.String_String$fromCharCodes(new H.ReversedListIterable(new H.CodeUnits(rotateLines[i]), t1), 0, null), T.furnishing_builder___mirrorCharBoth$closure()));
        T._singleFurnishing(mirrorLines);
      }
    },
    _mapString: function(input, map) {
      var t1, i, t2;
      H.stringTypeCheck(input);
      H.functionTypeCheck(map, {func: 1, ret: P.String, args: [P.String]});
      for (t1 = input.length, i = 0, t2 = ""; i < t1; ++i)
        t2 += H.S(map.call$1(input[i]));
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    _mirrorCharBoth: [function(input) {
      return T._mirrorCharHorizontal(T._mirrorCharVertical(input));
    }, "call$1", "furnishing_builder___mirrorCharBoth$closure", 4, 0, 2],
    _mirrorCharHorizontal: [function(input) {
      var t1, _i, mirror, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_mirrorHorizontal(), _i = 0; _i < 3; ++_i) {
        mirror = t1[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    }, "call$1", "furnishing_builder___mirrorCharHorizontal$closure", 4, 0, 2],
    _mirrorCharVertical: [function(input) {
      var t1, _i, mirror, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_mirrorVertical(), _i = 0; _i < 3; ++_i) {
        mirror = t1[_i];
        index = C.JSString_methods.indexOf$1(mirror, input);
        if (index !== -1) {
          t1 = 1 - index;
          if (t1 < 0 || t1 >= mirror.length)
            return H.ioore(mirror, t1);
          return mirror[t1];
        }
      }
      return input;
    }, "call$1", "furnishing_builder___mirrorCharVertical$closure", 4, 0, 2],
    _rotateChar90: function(input) {
      var t1, _i, rotate, index;
      H.stringTypeCheck(input);
      for (t1 = $.$get$_rotate(), _i = 0; _i < 2; ++_i) {
        rotate = t1[_i];
        index = C.JSString_methods.indexOf$1(rotate, input);
        if (index !== -1) {
          t1 = C.JSInt_methods.$mod(index + 1, 4);
          if (t1 >= rotate.length)
            return H.ioore(rotate, t1);
          return rotate[t1];
        }
      }
      return input;
    },
    _singleFurnishing: function(lines) {
      var cells, t1, t2, t3, y, x, t4, char, cell;
      H.assertSubtype(lines, "$isList", [P.String], "$asList");
      cells = M.Array2D$(J.get$length$asx(C.JSArray_methods.get$first(lines)), lines.length, null, S.Cell);
      for (t1 = H.getTypeArgumentByIndex(cells, 0), t2 = cells._elements, t3 = cells.bounds.size.x, y = 0; y < lines.length; ++y) {
        x = 0;
        while (true) {
          t4 = J.get$length$asx(C.JSArray_methods.get$first(lines));
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(x < t4))
            break;
          if (y >= lines.length)
            return H.ioore(lines, y);
          char = J.$index$asx(lines[y], x);
          t4 = $._categoryCells;
          if (t4 != null && t4.containsKey$1(char))
            cell = $._categoryCells.$index(0, char);
          else {
            t4 = $.$get$_applyCells();
            cell = t4.containsKey$1(char) ? t4.$index(0, char) : $.$get$_requireCells().$index(0, char);
          }
          H.assertSubtypeOfRuntimeType(cell, t1);
          if (typeof t3 !== "number")
            return H.iae(t3);
          C.JSArray_methods.$indexSet(t2, y * t3 + x, cell);
          ++x;
        }
      }
      t1 = $.$get$Decor_all();
      t2 = $._categoryFrequency;
      if (t2 == null)
        t2 = $._furnishingFrequency;
      if (t2 == null)
        t2 = 1;
      t3 = $._themes;
      t1.toString;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new S.Furnishing(cells), H.getTypeArgumentByIndex(t1, 0)), null, null, null, t2, t2, t3);
    },
    Symmetry: {
      "^": "Object;index,_name",
      toString$0: function(_) {
        return this._name;
      }
    },
    furnishing_closure: {
      "^": "Closure:2;",
      call$1: function(line) {
        return J.trim$0$s(H.stringTypeCheck(line));
      }
    }
  }], ["", "package:hauberk/src/content/elements.dart",, A, {
    "^": "",
    Elements_closure3: {
      "^": "Closure:17;",
      call$1: function(_) {
        return new G.WindAction();
      }
    },
    Elements_closure7: {
      "^": "Closure:18;",
      call$1: function(_) {
        return new G.BurnActorAction();
      }
    },
    Elements_closure8: {
      "^": "Closure:19;",
      call$4: function(pos, hit, distance, fuel) {
        return new G.BurnFloorAction(pos, hit.get$averageDamage().toInt$0(0), fuel);
      }
    },
    Elements_closure1: {
      "^": "Closure:13;",
      call$1: function(damage) {
        return new E.FreezeActorAction(damage);
      }
    },
    Elements_closure2: {
      "^": "Closure:21;",
      call$4: function(pos, hit, distance, _) {
        return new G.FreezeFloorAction(pos);
      }
    },
    Elements_closure: {
      "^": "Closure:22;",
      call$1: function(damage) {
        return new E.PoisonAction(damage);
      }
    },
    Elements_closure0: {
      "^": "Closure:23;",
      call$4: function(pos, hit, distance, _) {
        return new G.PoisonFloorAction(pos, hit.get$averageDamage().toInt$0(0));
      }
    },
    Elements_closure4: {
      "^": "Closure:24;",
      call$1: function(damage) {
        return new E.BlindAction(damage);
      }
    },
    Elements_closure5: {
      "^": "Closure:25;",
      call$1: function(damage) {
        return new E.DazzleAction(damage);
      }
    },
    Elements_closure6: {
      "^": "Closure:26;",
      call$4: function(pos, hit, distance, _) {
        var t1, min, max;
        t1 = new G.LightFloorAction(pos);
        min = C.JSNumber_methods.clamp$2(C.JSInt_methods.$add(1, hit.get$averageDamage().toInt$0(0).$mul(0, 4)), 0, 255);
        max = C.JSNumber_methods.clamp$2(C.JSInt_methods.$add(128, hit.get$averageDamage().$mul(0, 16)), 0, 255);
        t1._element$_emanation = C.JSNumber_methods.toInt$0(K.lerpDouble(hit.get$range().$sub(0, distance), 0, hit.get$range(), min, max));
        return t1;
      }
    }
  }], ["", "package:hauberk/src/content/item/affixes.dart",, Z, {
    "^": "",
    Affixes_createItem: function(itemType, droppedDepth) {
      var t1, t2, t3, depth, t4, t5, affixDepth;
      t1 = $.$get$Items_types();
      t2 = itemType.quantifiableName;
      if (J.get$isEmpty$asx(t1.getTags$1(O.Log__categorize(t2, false, true))._iterable))
        return new R.Item(itemType, null, null, 1);
      t3 = itemType.depth;
      if (typeof t3 !== "number")
        return t3.$sub();
      depth = Math.max(1, droppedDepth - C.JSInt_methods._tdivFast$1(t3 - droppedDepth, 3));
      t4 = $.$get$rng();
      t5 = C.JSNumber_methods.ceil$0(1 + 0.006 * depth * depth + 0.2 * depth);
      if (t4.range$1(100) >= t5)
        return new R.Item(itemType, null, null, 1);
      affixDepth = Math.max(droppedDepth, t3) + t4.taper$2(0, 2);
      t3 = $.$get$Affixes_prefixes().tryChooseMatching$2(affixDepth, t1.getTags$1(O.Log__categorize(t2, false, true)));
      t2 = $.$get$Affixes_suffixes().tryChooseMatching$2(affixDepth, t1.getTags$1(O.Log__categorize(t2, false, true)));
      switch (t4.range$1(5)) {
        case 0:
        case 1:
          return new R.Item(itemType, t3, null, 1);
        case 2:
        case 3:
          return new R.Item(itemType, null, t2, 1);
        default:
          return new R.Item(itemType, t3, t2, 1);
      }
    }
  }], ["", "package:hauberk/src/content/item/builder.dart",, R, {
    "^": "",
    category: function(glyph, stack, verb) {
      var t1;
      R.finishItem();
      t1 = new R._CategoryBuilder(false, H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int));
      $._category = t1;
      t1._glyph = glyph;
      t1._builder$_verb = verb;
      t1._maxStack = stack;
      return t1;
    },
    item: function($name, depth, color, frequency, price) {
      var t1;
      R.finishItem();
      t1 = new R._ItemBuilder(H.setRuntimeTypeInfo([], [M.Skill]), P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int));
      $._item = t1;
      t1._builder$_name = $name;
      t1._builder$_depth = depth;
      t1._color = color;
      t1._frequency = frequency == null ? 1 : frequency;
      t1._price = price == null ? 0 : price;
      return t1;
    },
    affix: function($name, depth, frequency) {
      var isPrefix, t1;
      R.finishAffix();
      if (C.JSString_methods.endsWith$1($name, " _")) {
        $name = C.JSString_methods.substring$2($name, 0, $name.length - 2);
        isPrefix = true;
      } else {
        if (C.JSString_methods.startsWith$1($name, "_ "))
          $name = C.JSString_methods.substring$1($name, 2);
        else
          throw H.wrapException('Affix "' + $name + '" must start or end with "_".');
        isPrefix = false;
      }
      t1 = P.int;
      t1 = new R._AffixBuilder($name, isPrefix, depth, frequency, P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, t1), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t1));
      $._affix = t1;
      return t1;
    },
    finishItem: function() {
      var t1, t2, appearance, tossDamage, verb, range, t3, element, use, t4, breakage, toss, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21;
      t1 = $._item;
      if (t1 == null)
        return;
      t2 = $._category;
      appearance = L.Glyph$fromCharCode(t2._glyph, t1._color, null);
      tossDamage = t1._tossDamage;
      if (tossDamage == null)
        tossDamage = t2._tossDamage;
      if (tossDamage != null) {
        t1 = "the " + t1._builder$_name.toLowerCase();
        t2 = t2._builder$_verb;
        if (t2 != null)
          verb = O.Log__categorize(t2, false, false);
        else
          verb = "hits";
        t2 = $._item;
        range = t2._tossRange;
        if (range == null)
          range = $._category._tossRange;
        t3 = t2._tossElement;
        element = t3 == null ? $._category._tossElement : t3;
        if (element == null)
          element = $.$get$Element_none();
        use = t2._tossUse;
        if (use == null)
          use = $._category._tossUse;
        t3 = $._category;
        t4 = t3._breakage;
        breakage = t4 == null ? t2._breakage : t4;
        if (breakage == null)
          breakage = 0;
        toss = new L.Toss(breakage, U.Attack$(new O.Noun(t1), verb, tossDamage, range, element), use);
        t1 = t2;
        t2 = t3;
      } else
        toss = null;
      t3 = t1._builder$_name;
      t4 = t1._builder$_depth;
      t5 = $._sortIndex;
      $._sortIndex = t5 + 1;
      t6 = t2._equipSlot;
      t7 = t2._weaponType;
      t8 = t1._use;
      t9 = t1._attack;
      t10 = t1._armor;
      if (t10 == null)
        t10 = 0;
      t11 = t1._price;
      t12 = t1._maxStack;
      if (t12 == null)
        t12 = t2._maxStack;
      if (t12 == null)
        t12 = 1;
      t13 = t1._weight;
      if (t13 == null)
        t13 = 0;
      t14 = t1._heft;
      if (t14 == null)
        t14 = 0;
      t15 = t1._builder$_emanation;
      if (t15 == null)
        t15 = t2._builder$_emanation;
      t1 = t1._fuel;
      if (t1 == null)
        t1 = t2._fuel;
      t2 = t2._isTreasure;
      t16 = P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, P.int);
      t17 = H.setRuntimeTypeInfo([], [M.Skill]);
      if (t15 == null)
        t15 = 0;
      if (t1 == null)
        t1 = 0;
      t16.addAll$1(0, $._category._destroyChance);
      t16.addAll$1(0, $._item._destroyChance);
      C.JSArray_methods.addAll$1(t17, $._category._skills);
      C.JSArray_methods.addAll$1(t17, $._item._skills);
      t18 = $.$get$Items_types();
      t19 = O.Log__categorize(t3, false, true);
      t20 = $._item._frequency;
      t21 = $._category._builder$_tag;
      t18.toString;
      t18._resource$_add$7(H.assertSubtypeOfRuntimeType(new L.ItemType(t3, appearance, t4, t5, t6, t7, t8, t9, toss, t10, t11, t13, t14, t15, t2, t12, t16, t1, t17), H.getTypeArgumentByIndex(t18, 0)), t19, t4, t4, t20, t20, t21);
      $._item = null;
    },
    finishAffix: function() {
      var t1, affixes, displayName, fullName, index, t2, t3, t4, t5, t6, t7, t8, t9, t10, affix;
      t1 = $._affix;
      if (t1 == null)
        return;
      affixes = t1._isPrefix ? $.$get$Affixes_prefixes() : $.$get$Affixes_suffixes();
      displayName = t1._builder$_name;
      fullName = displayName + " (" + H.S($._affixTag) + ")";
      for (index = 1; affixes.tryFind$1(fullName) != null;) {
        ++index;
        fullName = displayName + " (" + H.S($._affixTag) + " " + index + ")";
      }
      t1 = $._affix;
      t2 = t1._heftScale;
      t3 = t1._weightBonus;
      t4 = t1._damageScale;
      t5 = t1._damageBonus;
      t6 = t1._brand;
      t7 = t1._armor;
      t8 = t1._priceBonus;
      t9 = t1._priceScale;
      t10 = P.int;
      if (t2 == null)
        t2 = 1;
      if (t3 == null)
        t3 = 0;
      if (t4 == null)
        t4 = 1;
      if (t5 == null)
        t5 = 1;
      if (t6 == null)
        t6 = $.$get$Element_none();
      if (t7 == null)
        t7 = 0;
      if (t8 == null)
        t8 = 0;
      if (t9 == null)
        t9 = 1;
      affix = new L.Affix(fullName, displayName, t2, t3, 0, t4, t5, t6, t7, P.LinkedHashMap_LinkedHashMap$_empty(G.Element0, t10), P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, t10), t8, t9);
      t1._resists.forEach$1(0, affix.get$resist());
      $._affix._statBonuses.forEach$1(0, affix.get$setStatBonus());
      t1 = $._affix;
      t9 = t1._builder$_depth;
      t1 = t1._frequency;
      t8 = $._affixTag;
      affixes._resource$_add$7(H.assertSubtypeOfRuntimeType(affix, H.getTypeArgumentByIndex(affixes, 0)), fullName, t9, t9, t1, t1, t8);
      $._affix = null;
    },
    _BaseBuilder: {
      "^": "Object;0_tossUse",
      set$_tossUse: function(_tossUse) {
        this._tossUse = H.functionTypeCheck(_tossUse, {func: 1, ret: V.Action, args: [L.Vec]});
      },
      stack$1: function(stack) {
        this._maxStack = stack;
      },
      toss$4$breakage$damage$element$range: function(breakage, damage, element, range) {
        this._tossDamage = damage;
        this._tossElement = element;
        this._tossRange = range;
        this._breakage = breakage;
      },
      toss$3$breakage$damage$range: function(breakage, damage, range) {
        return this.toss$4$breakage$damage$element$range(breakage, damage, null, range);
      },
      toss$1$breakage: function(breakage) {
        return this.toss$4$breakage$damage$element$range(breakage, null, null, null);
      },
      toss$3$damage$element$range: function(damage, element, range) {
        return this.toss$4$breakage$damage$element$range(null, damage, element, range);
      },
      toss$2$breakage$range: function(breakage, range) {
        return this.toss$4$breakage$damage$element$range(breakage, null, null, range);
      },
      toss$1$damage: function(damage) {
        return this.toss$4$breakage$damage$element$range(null, damage, null, null);
      },
      toss$1$range: function(range) {
        return this.toss$4$breakage$damage$element$range(null, null, null, range);
      },
      toss$2$damage$range: function(damage, range) {
        return this.toss$4$breakage$damage$element$range(null, damage, null, range);
      }
    },
    _CategoryBuilder: {
      "^": "_BaseBuilder;0_glyph,0_equipSlot,0_weaponType,0_builder$_tag,0_builder$_verb,_isTreasure,_skills,_destroyChance,0_maxStack,0_tossElement,0_tossDamage,0_tossRange,0_tossUse,0_builder$_emanation,0_fuel,0_breakage",
      tag$1: function(_, tagPath) {
        var tags, _i, equipSlot, t1;
        $.$get$Items_types().defineTags$1("item/" + tagPath);
        tags = H.setRuntimeTypeInfo(tagPath.split("/"), [P.String]);
        this._builder$_tag = H.stringTypeCheck(C.JSArray_methods.get$last(tags));
        for (_i = 0; _i < 9; ++_i) {
          equipSlot = C.List_tBY[_i];
          if (C.JSArray_methods.contains$1(tags, equipSlot)) {
            this._equipSlot = equipSlot;
            break;
          }
        }
        if (C.JSArray_methods.contains$1(tags, "weapon")) {
          t1 = C.JSArray_methods.indexOf$1(tags, "weapon") + 1;
          if (t1 < 0 || t1 >= tags.length)
            return H.ioore(tags, t1);
          this._weaponType = H.stringTypeCheck(tags[t1]);
        }
        $.$get$Affixes_prefixes().defineTags$1(tagPath);
        $.$get$Affixes_suffixes().defineTags$1(tagPath);
      }
    },
    _ItemBuilder: {
      "^": "_BaseBuilder;0_color,0_frequency,0_price,0_use,0_attack,0_weight,0_heft,0_armor,0_builder$_name,0_builder$_depth,_skills,_destroyChance,0_maxStack,0_tossElement,0_tossDamage,0_tossRange,0_tossUse,0_builder$_emanation,0_fuel,0_breakage",
      set$_use: function(_use) {
        this._use = H.functionTypeCheck(_use, {func: 1, ret: V.Action});
      },
      weapon$3$element$heft: function(damage, element, heft) {
        this._attack = U.Attack$(null, $._category._builder$_verb, damage, null, element);
        this._heft = heft;
      },
      weapon$2$heft: function(damage, heft) {
        return this.weapon$3$element$heft(damage, null, heft);
      },
      ranged$4$damage$heft$range: function(noun, damage, heft, range) {
        this._attack = U.Attack$(new O.Noun(noun), "pierce[s]", damage, range, null);
        this._heft = heft;
      },
      food$1: function(amount) {
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_food_closure(amount), {func: 1, ret: V.Action}));
      },
      detection$2$range: function(types, range) {
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_detection_closure(H.assertSubtype(types, "$isList", [T.DetectType], "$asList"), range), {func: 1, ret: V.Action}));
      },
      detection$1: function(types) {
        return this.detection$2$range(types, null);
      },
      resistSalve$1: function(element) {
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_resistSalve_closure(element), {func: 1, ret: V.Action}));
      },
      mapping$2$illuminate: function(distance, illuminate) {
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_mapping_closure(distance, illuminate), {func: 1, ret: V.Action}));
      },
      mapping$1: function(distance) {
        return this.mapping$2$illuminate(distance, null);
      },
      heal$2$curePoison: function(amount, curePoison) {
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_heal_closure(amount, curePoison), {func: 1, ret: V.Action}));
      },
      heal$1: function(amount) {
        return this.heal$2$curePoison(amount, false);
      },
      ball$5$range: function(element, noun, verb, damage, range) {
        var attack = U.Attack$(new O.Noun(noun), verb, damage, 3, element);
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_ball_closure(attack), {func: 1, ret: V.Action}));
        this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_ball_closure0(attack), {func: 1, ret: V.Action, args: [L.Vec]}));
      },
      ball$4: function(element, noun, verb, damage) {
        return this.ball$5$range(element, noun, verb, damage, null);
      },
      flow$6$fly$range: function(element, noun, verb, damage, fly, range) {
        var t1, attack, motility, t2;
        t1 = {};
        attack = U.Attack$(new O.Noun(noun), verb, damage, range, element);
        motility = $.$get$Motility_walk();
        t1.motility = motility;
        if (fly) {
          t2 = $.$get$Motility_fly();
          t1.motility = new Q.Motility(motility._bitMask | t2._bitMask);
        }
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_flow_closure(t1, attack), {func: 1, ret: V.Action}));
        this.set$_tossUse(H.functionTypeCheck(new R._ItemBuilder_flow_closure0(t1, attack), {func: 1, ret: V.Action, args: [L.Vec]}));
      },
      flow$5$fly: function(element, noun, verb, damage, fly) {
        return this.flow$6$fly$range(element, noun, verb, damage, fly, 5);
      },
      flow$4: function(element, noun, verb, damage) {
        return this.flow$6$fly$range(element, noun, verb, damage, false, 5);
      },
      lightSource$2$level$range: function(level, range) {
        this._builder$_emanation = level;
        this.set$_use(H.functionTypeCheck(new R._ItemBuilder_lightSource_closure(range, level), {func: 1, ret: V.Action}));
      }
    },
    _ItemBuilder_food_closure: {
      "^": "Closure:27;amount",
      call$0: function() {
        return new X.EatAction(this.amount);
      }
    },
    _ItemBuilder_detection_closure: {
      "^": "Closure:28;types,range",
      call$0: function() {
        var t1 = this.types;
        return new T.DetectAction(P.LinkedHashSet_LinkedHashSet$from(t1, H.getTypeArgumentByIndex(t1, 0)), this.range);
      }
    },
    _ItemBuilder_resistSalve_closure: {
      "^": "Closure:29;element",
      call$0: function() {
        return new E.ResistAction(40, this.element);
      }
    },
    _ItemBuilder_mapping_closure: {
      "^": "Closure:30;distance,illuminate",
      call$0: function() {
        return new Q.MappingAction(this.distance, this.illuminate === true, 0);
      }
    },
    _ItemBuilder_heal_closure: {
      "^": "Closure:31;amount,curePoison",
      call$0: function() {
        return new O.HealAction(this.amount, this.curePoison);
      }
    },
    _ItemBuilder_ball_closure: {
      "^": "Closure:32;attack",
      call$0: function() {
        return new G.RingSelfAction(this.attack);
      }
    },
    _ItemBuilder_ball_closure0: {
      "^": "Closure:33;attack",
      call$1: function(pos) {
        return new G.RingFromAction(this.attack, pos);
      }
    },
    _ItemBuilder_flow_closure: {
      "^": "Closure:34;_box_0,attack",
      call$0: function() {
        return new N.FlowSelfAction(this.attack, this._box_0.motility);
      }
    },
    _ItemBuilder_flow_closure0: {
      "^": "Closure:35;_box_0,attack",
      call$1: function(pos) {
        return new N.FlowFromAction(this.attack, pos, this._box_0.motility);
      }
    },
    _ItemBuilder_lightSource_closure: {
      "^": "Closure:36;range,level",
      call$0: function() {
        return new F.IlluminateSelfAction(this.range, this.level + 1);
      }
    },
    _AffixBuilder: {
      "^": "Object;_builder$_name,_isPrefix,_builder$_depth,_frequency,0_heftScale,0_weightBonus,0_strikeBonus,0_damageScale,0_damageBonus,0_brand,0_armor,0_priceBonus,0_priceScale,_resists,_statBonuses",
      brand$2$resist: function(element, resist) {
        var t1;
        this._brand = element;
        t1 = resist == null ? 1 : resist;
        this._resists.$indexSet(0, element, t1);
      },
      brand$1: function(element) {
        return this.brand$2$resist(element, null);
      },
      resist$2: function(element, power) {
        var t1 = power == null ? 1 : power;
        this._resists.$indexSet(0, element, t1);
      },
      resist$1: function(element) {
        return this.resist$2(element, null);
      }
    }
  }], ["", "package:hauberk/src/content/item/drops.dart",, X, {
    "^": "",
    parseDrop: function($name, depth) {
      var itemType = $.$get$Items_types().tryFind$1($name);
      if (itemType != null)
        return new X._ItemDrop(itemType, depth);
      return new X._TagDrop($name, depth);
    },
    _ItemDrop: {
      "^": "Object;_type,_depth",
      spawnDrop$2: function(depth, addItem) {
        var t1;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        t1 = this._depth;
        if (t1 == null)
          t1 = depth;
        addItem.call$1(Z.Affixes_createItem(this._type, t1));
      },
      $isDrop: 1
    },
    _TagDrop: {
      "^": "Object;_tag,_depth",
      spawnDrop$2: function(depth, addItem) {
        var t1, t2, t3, t4, itemType;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        t1 = $.$get$Items_types();
        t2 = this._depth;
        t3 = t2 == null;
        t4 = t3 ? depth : t2;
        itemType = t1.tryChoose$2$tag(t4, this._tag);
        if (itemType == null)
          return;
        addItem.call$1(Z.Affixes_createItem(itemType, t3 ? depth : t2));
      },
      $isDrop: 1
    },
    _PercentDrop: {
      "^": "Object;_chance,_drops$_drop",
      spawnDrop$2: function(depth, addItem) {
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        if ($.$get$rng().range$1(100) >= this._chance)
          return;
        this._drops$_drop.spawnDrop$2(depth, addItem);
      },
      $isDrop: 1
    },
    _AllOfDrop: {
      "^": "Object;_drops",
      spawnDrop$2: function(depth, addItem) {
        var t1, t2, _i;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        for (t1 = this._drops, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].spawnDrop$2(depth, addItem);
      },
      $isDrop: 1
    },
    _OneOfDrop: {
      "^": "Object;_drops$_drop",
      _OneOfDrop$1: function(drops) {
        drops.forEach$1(0, new X._OneOfDrop_closure(this));
      },
      spawnDrop$2: function(depth, addItem) {
        var drop;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        drop = this._drops$_drop.tryChoose$1(1);
        if (drop == null)
          return;
        drop.spawnDrop$2(depth, addItem);
      },
      $isDrop: 1,
      static: {
        _OneOfDrop$: function(drops) {
          var t1 = P.String;
          t1 = new X._OneOfDrop(new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, L.Drop]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, L.Drop]), [L.Drop]));
          t1._OneOfDrop$1(drops);
          return t1;
        }
      }
    },
    _OneOfDrop_closure: {
      "^": "Closure:37;$this",
      call$2: function(drop, frequency) {
        var t1;
        H.interceptedTypeCheck(drop, "$isDrop");
        H.doubleTypeCheck(frequency);
        t1 = this.$this._drops$_drop;
        t1._resource$_add$7(H.assertSubtypeOfRuntimeType(drop, H.getTypeArgumentByIndex(t1, 0)), null, null, null, frequency, frequency, null);
      }
    },
    _RepeatDrop: {
      "^": "Object;_drops$_count,_drops$_drop",
      spawnDrop$2: function(depth, addItem) {
        var t1, taper, t2, count, i;
        H.functionTypeCheck(addItem, {func: 1, ret: -1, args: [R.Item]});
        t1 = this._drops$_count;
        taper = t1 > 3 ? 4 : 5;
        if (t1 > 6)
          taper = 3;
        t2 = $.$get$rng();
        count = t2.triangleInt$2(t1, t1 / 2 | 0) + t2.taper$2(0, taper);
        for (t1 = this._drops$_drop, i = 0; i < count; ++i)
          t1.spawnDrop$2(depth, addItem);
      },
      $isDrop: 1
    }
  }], ["", "package:hauberk/src/content/item/floor_drops.dart",, F, {
    "^": "",
    floorDrop: function(drop, endFrequency, $location, startFrequency) {
      var t1;
      if ($location == null)
        $location = C.SpawnLocation_0;
      t1 = $.$get$_floorDrops();
      t1.toString;
      t1._resource$_add$7(H.assertSubtypeOfRuntimeType(new F.FloorDrop($location, drop), H.getTypeArgumentByIndex(t1, 0)), null, 1, 100, startFrequency, endFrequency, null);
    },
    FloorDrop: {
      "^": "Object;location,drop"
    }
  }], ["", "package:hauberk/src/content/item/items.dart",, V, {}], ["", "package:hauberk/src/content/item/magic.dart",, G, {
    "^": "",
    potions: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      t1 = R.category(231, 10, null);
      t1.tag$1(0, "magic/potion/healing");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t2 = $.$get$Elements_cold();
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      R.item("Soothing Balm", 2, C.Color_255_122_105, 1, 10).heal$1(48);
      R.item("Mending Salve", 7, C.Color_204_35_57, 1, 30).heal$1(100);
      R.item("Healing Poultice", 12, C.Color_84_0_39, 1, 80).heal$2$curePoison(200, true);
      R.item("Potion[s] of Amelioration", 24, C.Color_56_16_125, 1, 220).heal$2$curePoison(400, true);
      R.item("Potion[s] of Rejuvenation", 65, C.Color_86_30_138, 0.5, 1000).heal$2$curePoison(1000, true);
      R.item("Antidote", 2, C.Color_22_117_38, 1, 20).heal$2$curePoison(0, true);
      t1 = R.category(234, 10, null);
      t1.tag$1(0, "magic/potion/resistance");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      t1 = R.item("Salve[s] of Heat Resistance", 5, C.Color_179_74_4, 0.5, 50);
      t3 = $.$get$Elements_fire();
      t1.resistSalve$1(t3);
      R.item("Salve[s] of Cold Resistance", 6, C.Color_64_163_229, 0.5, 55).resistSalve$1(t2);
      t1 = R.item("Salve[s] of Light Resistance", 7, C.Color_255_238_168, 0.5, 60);
      t4 = $.$get$Elements_light();
      t1.resistSalve$1(t4);
      t1 = R.item("Salve[s] of Wind Resistance", 8, C.Color_129_231_235, 0.5, 65);
      t5 = $.$get$Elements_air();
      t1.resistSalve$1(t5);
      t1 = R.item("Salve[s] of Lightning Resistance", 9, C.Color_189_106_235, 0.5, 70);
      t6 = $.$get$Elements_lightning();
      t1.resistSalve$1(t6);
      t1 = R.item("Salve[s] of Darkness Resistance", 10, C.Color_63_64_114, 0.5, 75);
      t7 = $.$get$Elements_dark();
      t1.resistSalve$1(t7);
      t1 = R.item("Salve[s] of Earth Resistance", 13, C.Color_142_82_55, 0.5, 80);
      t8 = $.$get$Elements_earth();
      t1.resistSalve$1(t8);
      t1 = R.item("Salve[s] of Water Resistance", 16, C.Color_26_46_150, 0.5, 85);
      t9 = $.$get$Elements_water();
      t1.resistSalve$1(t9);
      t1 = R.item("Salve[s] of Acid Resistance", 19, C.Color_189_144_108, 0.5, 90);
      t10 = $.$get$Elements_acid();
      t1.resistSalve$1(t10);
      t1 = R.item("Salve[s] of Poison Resistance", 23, C.Color_131_158_13, 0.5, 95);
      t11 = $.$get$Elements_poison();
      t1.resistSalve$1(t11);
      t1 = R.item("Salve[s] of Death Resistance", 30, C.Color_86_30_138, 0.5, 100);
      t12 = $.$get$Elements_spirit();
      t1.resistSalve$1(t12);
      t1 = R.category(235, 10, null);
      t1.tag$1(0, "magic/potion/speed");
      t1.toss$3$breakage$damage$range(100, 1, 6);
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = null;
      t1 = R.item("Potion[s] of Quickness", 3, C.Color_131_158_13, 0.3, 25);
      t1.toString;
      t13 = {func: 1, ret: V.Action};
      t1.set$_use(H.functionTypeCheck(new G.potions_closure(), t13));
      t1 = R.item("Potion[s] of Alacrity", 18, C.Color_22_117_38, 0.3, 60);
      t1.toString;
      t1.set$_use(H.functionTypeCheck(new G.potions_closure0(), t13));
      t1 = R.item("Potion[s] of Speed", 34, C.Color_0_64_39, 0.25, 150);
      t1.toString;
      t1.set$_use(H.functionTypeCheck(new G.potions_closure1(), t13));
      t13 = R.category(232, 10, null);
      t13.tag$1(0, "magic/potion/bottled");
      t13.toss$3$breakage$damage$range(100, 1, 8);
      t13._destroyChance.$indexSet(0, t2, 15);
      t13._fuel = null;
      R.item("Bottled Wind", 4, C.Color_64_163_229, 0.5, 100).flow$5$fly(t5, "the wind", "blasts", 20, true);
      R.item("Bottled Ice", 7, C.Color_21_87_194, 0.5, 120).ball$4(t2, "the cold", "freezes", 30);
      R.item("Bottled Fire", 11, C.Color_204_35_57, 0.5, 140).flow$5$fly(t3, "the fire", "burns", 44, true);
      R.item("Bottled Ocean", 12, C.Color_26_46_150, 0.5, 160).flow$4(t9, "the water", "drowns", 52);
      R.item("Bottled Earth", 13, C.Color_142_82_55, 0.5, 180).ball$4(t8, "the dirt", "crushes", 58);
      R.item("Bottled Lightning", 16, C.Color_189_106_235, 0.5, 200).ball$4(t6, "the lightning", "shocks", 68);
      R.item("Bottled Acid", 18, C.Color_131_158_13, 0.5, 220).flow$4(t10, "the acid", "corrodes", 72);
      R.item("Bottled Poison", 22, C.Color_0_64_39, 0.5, 240).flow$5$fly(t11, "the poison", "infects", 90, true);
      R.item("Bottled Shadow", 28, C.Color_38_38_56, 0.5, 260).ball$4(t7, "the darkness", "torments", 120);
      R.item("Bottled Radiance", 34, C.Color_255_238_168, 0.5, 280).ball$4(t4, "light", "sears", 140);
      R.item("Bottled Spirit", 40, C.Color_63_64_114, 0.5, 300).flow$5$fly(t12, "the spirit", "haunts", 160, true);
    },
    scrolls: function() {
      var t1, t2, t3;
      t1 = R.category(226, 20, null);
      t1.tag$1(0, "magic/scroll/teleportation");
      t1.toss$3$breakage$damage$range(75, 1, 3);
      t2 = $.$get$Elements_fire();
      t1._destroyChance.$indexSet(0, t2, 20);
      t1._fuel = 5;
      t1 = R.item("Scroll[s] of Sidestepping", 2, C.Color_189_106_235, 0.5, 16);
      t1.toString;
      t3 = {func: 1, ret: V.Action};
      t1.set$_use(H.functionTypeCheck(new G.scrolls_closure(), t3));
      t1 = R.item("Scroll[s] of Phasing", 6, C.Color_86_30_138, 0.3, 28);
      t1.toString;
      t1.set$_use(H.functionTypeCheck(new G.scrolls_closure0(), t3));
      t1 = R.item("Scroll[s] of Teleportation", 15, C.Color_56_16_125, 0.3, 52);
      t1.toString;
      t1.set$_use(H.functionTypeCheck(new G.scrolls_closure1(), t3));
      t1 = R.item("Scroll[s] of Disappearing", 26, C.Color_26_46_150, 0.3, 74);
      t1.toString;
      t1.set$_use(H.functionTypeCheck(new G.scrolls_closure2(), t3));
      t3 = R.category(228, 20, null);
      t3.tag$1(0, "magic/scroll/detection");
      t3.toss$3$breakage$damage$range(75, 1, 3);
      t3._destroyChance.$indexSet(0, t2, 20);
      t3._fuel = 5;
      t3 = [T.DetectType];
      R.item("Scroll[s] of Find Nearby Escape", 1, C.Color_255_238_168, 0.5, 12).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0], t3), 20);
      R.item("Scroll[s] of Find Nearby Items", 2, C.Color_222_156_33, 0.5, 24).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_1], t3), 20);
      R.item("Scroll[s] of Detect Nearby", 3, C.Color_131_158_13, 0.25, 36).detection$2$range(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t3), 20);
      R.item("Scroll[s] of Locate Escape", 5, C.Color_189_144_108, 1, 28).detection$1(H.setRuntimeTypeInfo([C.DetectType_0], t3));
      R.item("Scroll[s] of Item Detection", 20, C.Color_179_74_4, 0.5, 64).detection$1(H.setRuntimeTypeInfo([C.DetectType_1], t3));
      R.item("Scroll[s] of Detection", 30, C.Color_122_44_24, 0.25, 124).detection$1(H.setRuntimeTypeInfo([C.DetectType_0, C.DetectType_1], t3));
      t3 = R.category(224, 20, null);
      t3.tag$1(0, "magic/scroll/mapping");
      t3.toss$3$breakage$damage$range(75, 1, 3);
      t3._destroyChance.$indexSet(0, t2, 15);
      t3._fuel = 5;
      R.item("Adventurer's Map", 10, C.Color_0_64_39, 0.25, 70).mapping$1(16);
      R.item("Explorer's Map", 30, C.Color_22_117_38, 0.25, 160).mapping$1(32);
      R.item("Cartographer's Map", 50, C.Color_129_217_117, 0.25, 240).mapping$1(64);
      R.item("Wizard's Map", 70, C.Color_9_95_112, 0.25, 360).mapping$2$illuminate(200, true);
    },
    potions_closure: {
      "^": "Closure:6;",
      call$0: function() {
        return new E.HasteAction(20, 1);
      }
    },
    potions_closure0: {
      "^": "Closure:6;",
      call$0: function() {
        return new E.HasteAction(30, 2);
      }
    },
    potions_closure1: {
      "^": "Closure:6;",
      call$0: function() {
        return new E.HasteAction(40, 3);
      }
    },
    scrolls_closure: {
      "^": "Closure:3;",
      call$0: function() {
        return new S.TeleportAction(6);
      }
    },
    scrolls_closure0: {
      "^": "Closure:3;",
      call$0: function() {
        return new S.TeleportAction(12);
      }
    },
    scrolls_closure1: {
      "^": "Closure:3;",
      call$0: function() {
        return new S.TeleportAction(24);
      }
    },
    scrolls_closure2: {
      "^": "Closure:3;",
      call$0: function() {
        return new S.TeleportAction(48);
      }
    }
  }], ["", "package:hauberk/src/content/item/shops.dart",, R, {
    "^": "",
    shop: function($name, itemTypes) {
      var t1, drops;
      t1 = P.double;
      drops = P.LinkedHashMap_LinkedHashMap$_empty(L.Drop, t1);
      H.assertSubtype(itemTypes, "$isMap", [P.String, t1], "$asMap").forEach$1(0, new R.shop_closure(drops));
      $.$get$Shops_all().$indexSet(0, $name, new O.Shop(X._OneOfDrop$(drops), $name));
    },
    shop_closure: {
      "^": "Closure:61;drops",
      call$2: function($name, frequency) {
        H.stringTypeCheck($name);
        H.doubleTypeCheck(frequency);
        this.drops.$indexSet(0, X.parseDrop($name, 1), frequency);
      }
    }
  }], ["", "package:hauberk/src/content/monster/builder.dart",, R, {
    "^": "",
    family: function(character, dodge, flags, frequency, meander, speed, tracking) {
      var t1;
      R.finishBreed();
      t1 = new R._FamilyBuilder(frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
      $._family = t1;
      t1._character = character;
      t1._meander = meander;
      t1._builder0$_speed = speed;
      t1._dodge = dodge;
      t1._tracking = tracking;
      t1._flags = flags;
      return t1;
    },
    finishBreed: function() {
      var t1, t2, tags, t3, flags, t4, dodge, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, names, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37;
      if ($._builder == null)
        return;
      t1 = P.String;
      t2 = [t1];
      tags = H.setRuntimeTypeInfo([], t2);
      C.JSArray_methods.addAll$1(tags, $.$get$_family()._groups);
      C.JSArray_methods.addAll$1(tags, $._builder._groups);
      if (tags.length === 0)
        C.JSArray_methods.add$1(tags, "monster");
      t3 = $._builder;
      t3.toString;
      flags = P.LinkedHashSet_LinkedHashSet(null, null, null, t1);
      t4 = $.$get$_family()._flags;
      if (t4 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
      t4 = t3._flags;
      if (t4 != null)
        flags.addAll$1(0, H.setRuntimeTypeInfo(t4.split(" "), [t1]));
      dodge = t3._dodge;
      if (dodge == null)
        dodge = $.$get$_family()._dodge;
      if (flags.contains$1(0, "immobile"))
        dodge = 0;
      t1 = t3._builder0$_name;
      t4 = t3._pronoun;
      if (t4 == null)
        t4 = C.Pronoun_it_it_its;
      t5 = t3._appearance;
      t6 = t3._attacks;
      t7 = t3._moves;
      t8 = t3._builder0$_drops;
      t9 = t3._location;
      if (t9 == null)
        t9 = $.$get$_family()._location;
      if (t9 == null)
        t9 = C.SpawnLocation_0;
      t10 = $.$get$_family();
      t11 = t10._builder0$_motility;
      t12 = t3._builder0$_motility;
      t11 = t11._bitMask;
      t12 = t12._bitMask;
      t13 = t3._builder0$_depth;
      t14 = t3._health;
      t15 = t3._tracking;
      if (t15 == null)
        t15 = 0;
      t16 = t10._tracking;
      if (t16 == null)
        t16 = 10;
      t17 = t3._vision;
      if (t17 == null)
        t17 = t10._vision;
      t18 = t3._hearing;
      if (t18 == null)
        t18 = t10._hearing;
      t19 = t3._meander;
      if (t19 == null)
        t19 = t10._meander;
      if (t19 == null)
        t19 = 0;
      t20 = t3._builder0$_speed;
      if (t20 == null)
        t20 = 0;
      t21 = t10._builder0$_speed;
      if (t21 == null)
        t21 = 0;
      t22 = t10._emanationLevel;
      if (t22 == null)
        t22 = t3._emanationLevel;
      t23 = t3._countMin;
      if (t23 == null)
        t23 = t10._countMin;
      if (t23 == null)
        t23 = 1;
      t24 = t3._countMax;
      if (t24 == null)
        t24 = t10._countMax;
      if (t24 == null)
        t24 = 1;
      t25 = t3._stain;
      t10 = t25 == null ? t10._stain : t25;
      names = flags._newSet$0();
      names.addAll$1(0, flags);
      t25 = names.remove$1(0, "berzerk");
      t26 = names.remove$1(0, "cowardly");
      t27 = names.remove$1(0, "fearless");
      t28 = names.remove$1(0, "immobile");
      t29 = names.remove$1(0, "protective");
      t30 = names.remove$1(0, "unique");
      if (names._collection$_length !== 0)
        H.throwExpression(P.ArgumentError$('Unknown flags "' + names.join$1(0, ", ") + '"'));
      t31 = t3._description;
      t32 = H.setRuntimeTypeInfo([], [U.Defense]);
      t33 = H.setRuntimeTypeInfo([], [B.Minion]);
      t2 = H.setRuntimeTypeInfo([], t2);
      if (t17 == null)
        t17 = 8;
      if (t18 == null)
        t18 = 10;
      t34 = dodge == null ? 20 : dodge;
      if (t22 == null)
        t22 = 0;
      C.JSArray_methods.addAll$1(t32, $.$get$_family()._defenses);
      C.JSArray_methods.addAll$1(t32, t3._defenses);
      C.JSArray_methods.addAll$1(t2, $.$get$_family()._groups);
      C.JSArray_methods.addAll$1(t2, t3._groups);
      C.JSArray_methods.addAll$1(t33, t3._minions);
      t3 = $.$get$Monsters_breeds();
      t35 = O.Log__categorize(t1, false, true);
      t36 = $._builder._builder0$_frequency;
      if (t36 == null)
        t36 = $.$get$_family()._builder0$_frequency;
      t37 = C.JSArray_methods.join$1(tags, " ");
      t3.toString;
      t3._resource$_add$7(H.assertSubtypeOfRuntimeType(new B.Breed(t4, t5, t13, t6, t7, t14, t15 + t16, t17, t18, t19, t20 + t21, new X._AllOfDrop(t8), t9, new Q.Motility(t11 | t12), new B.BreedFlags(t25, t26, t27, t28, t29, t30), t34, t22, t32, t23, t24, t33, t1, t10, t2, t31), H.getTypeArgumentByIndex(t3, 0)), t35, t13, t13, t36, t36, t37);
      $._builder = null;
    },
    breed: function($name, depth, color, health, dodge, frequency, meander, speed) {
      var t1;
      R.finishBreed();
      t1 = J._codeUnitAt$1$s($.$get$_family()._character, 0);
      t1 = new R._BreedBuilder($name, depth, new L.Glyph(t1, color, C.Color_0_0_0), health, H.setRuntimeTypeInfo([], [U.Attack]), H.setRuntimeTypeInfo([], [O.Move]), H.setRuntimeTypeInfo([], [L.Drop]), H.setRuntimeTypeInfo([], [B.Minion]), frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
      $._builder = t1;
      t1._builder0$_speed = speed;
      t1._meander = meander;
      return t1;
    },
    _BaseBuilder0: {
      "^": "Object;",
      count$2: function(minOrMax, max) {
        if (max == null) {
          this._countMin = 1;
          this._countMax = minOrMax;
        } else {
          this._countMin = minOrMax;
          this._countMax = max;
        }
      },
      count$1: function(minOrMax) {
        return this.count$2(minOrMax, null);
      }
    },
    _FamilyBuilder: {
      "^": "_BaseBuilder0;0_character,_builder0$_frequency,0_tracking,_builder0$_motility,0_location,0_builder0$_speed,0_meander,0_dodge,_defenses,_groups,0_flags,0_countMin,0_countMax,0_stain,0_emanationLevel,0_vision,0_hearing",
      static: {
        _FamilyBuilder$: function(frequency) {
          return new R._FamilyBuilder(frequency, $.$get$Motility_walk(), H.setRuntimeTypeInfo([], [U.Defense]), H.setRuntimeTypeInfo([], [P.String]));
        }
      }
    },
    _BreedBuilder: {
      "^": "_BaseBuilder0;_builder0$_name,_builder0$_depth,_appearance,_health,_attacks,_moves,_builder0$_drops,_minions,0_pronoun,0_description,_builder0$_frequency,0_tracking,_builder0$_motility,0_location,0_builder0$_speed,0_meander,0_dodge,_defenses,_groups,0_flags,0_countMin,0_countMax,0_stain,0_emanationLevel,0_vision,0_hearing",
      minion$3: function($name, minOrMax, max) {
        var t1;
        if (minOrMax == null) {
          minOrMax = 1;
          max = 1;
        } else if (max == null) {
          max = minOrMax;
          minOrMax = 1;
        }
        t1 = new B.BreedRef($name);
        C.JSArray_methods.add$1($.$get$BreedRef__unresolved(), t1);
        C.JSArray_methods.add$1(this._minions, new B.Minion(t1, minOrMax, max));
      },
      minion$1: function($name) {
        return this.minion$3($name, null, null);
      },
      drop$4$count$depthOffset$percent: function($name, count, depthOffset, percent) {
        var drop = new X._PercentDrop(percent, X.parseDrop($name, this._builder0$_depth + depthOffset));
        if (count > 1)
          drop = new X._RepeatDrop(count, drop);
        C.JSArray_methods.add$1(this._builder0$_drops, drop);
      },
      drop$2$percent: function($name, percent) {
        return this.drop$4$count$depthOffset$percent($name, 1, 0, percent);
      },
      drop$2$count: function($name, count) {
        return this.drop$4$count$depthOffset$percent($name, count, 0, 100);
      },
      drop$3$count$depthOffset: function($name, count, depthOffset) {
        return this.drop$4$count$depthOffset$percent($name, count, depthOffset, 100);
      },
      drop$3$count$percent: function($name, count, percent) {
        return this.drop$4$count$depthOffset$percent($name, count, 0, percent);
      },
      drop$3$depthOffset$percent: function($name, depthOffset, percent) {
        return this.drop$4$count$depthOffset$percent($name, 1, depthOffset, percent);
      },
      drop$1: function($name) {
        return this.drop$4$count$depthOffset$percent($name, 1, 0, 100);
      },
      _bolt$6$damage$range$rate: function(noun, verb, element, damage, range, rate) {
        C.JSArray_methods.add$1(this._moves, new O.BoltMove(U.Attack$(noun != null ? new O.Noun(noun) : null, verb, damage, range, element), rate));
      }
    }
  }], ["", "package:hauberk/src/content/monster/monsters.dart",, D, {
    "^": "",
    Monsters_initialize: function() {
      var groups, _i, group, t1, t2, t3, description, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      groups = ["natural/animal/bird", "natural/animal/herp/salamander", "natural/animal/herp/snake", "natural/animal/mammal/bat", "natural/animal/mammal/canine", "natural/animal/mammal/feline", "natural/animal/mammal/rodent", "natural/bug/fly", "natural/bug/slug", "natural/bug/spider", "natural/bug/worm", "natural/plant/vine", "mythical/beast/dragon", "mythical/beast/hybrid", "magical/eye", "humanoid/hob/fae", "humanoid/hob/goblin", "magical/jelly", "humanoid/hob/kobold", "humanoid/human", "humanoid/saurian", "undead/skeleton"];
      for (_i = 0; _i < 22; ++_i) {
        group = groups[_i];
        $.$get$Monsters_breeds().defineTags$1("monster/" + group);
      }
      t1 = R.family("a", null, "fearless", null, null, null, null);
      t2 = [P.String];
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("spider".split(" "), t2));
      t1._vision = 4;
      t1._hearing = 2;
      t1._stain = $.$get$Tiles_spiderweb();
      t1 = R.breed("brown spider", 5, C.Color_142_82_55, 6, 30, null, 40, 0);
      t3 = $.$get$Elements_poison();
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
      t1 = $.$get$collapseNewlines();
      description = H.stringReplaceAllUnchecked("Like a large dog, if the dog had eight articulated legs, eight\n  glittering eyes, and wanted nothing more than to kill you.", t1, " ");
      $._builder._description = description;
      C.JSArray_methods.add$1(R.breed("gray spider", 7, C.Color_63_64_114, 12, 30, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
      t4 = R.breed("spiderling", 9, C.Color_226_223_240, 8, 35, null, 50, 0);
      t4.count$2(2, 5);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
      C.JSArray_methods.add$1(R.breed("giant spider", 12, C.Color_26_46_150, 40, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 5, 0, t3));
      t4 = R.family("b", null, null, null, null, 1, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("bat".split(" "), t2));
      t4._vision = 2;
      t4._hearing = 8;
      t5 = t4._builder0$_motility;
      t6 = $.$get$Motility_fly();
      t5 = t5._bitMask;
      t6 = t6._bitMask;
      t4._builder0$_motility = new Q.Motility(t5 | t6);
      t4._location = C.SpawnLocation_1;
      t4 = R.breed("brown bat", 1, C.Color_142_82_55, 3, null, 0.5, 50, 0);
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{1} flits out of the way."));
      t4.count$2(2, 4);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
      C.JSArray_methods.add$1(R.breed("giant bat", 4, C.Color_64_31_36, 24, null, null, 30, 0)._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      t4 = R.breed("cave bat", 6, C.Color_132_126_135, 30, null, null, 40, 0);
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{1} flits out of the way."));
      t4.count$2(2, 5);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      t4 = R.family("c", 25, null, null, 25, null, 20);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("canine".split(" "), t2));
      t4._vision = 5;
      t4._hearing = 10;
      t4 = R.breed("mangy cur", 2, C.Color_255_238_168, 11, null, null, null, 0);
      t4.count$1(4);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(6, null, 10));
      t4.drop$2$percent("Fur Pelt", 20);
      t4 = R.breed("wild dog", 4, C.Color_132_126_135, 20, null, null, null, 0);
      t4.count$1(4);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 6, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(8, null, 10));
      t4.drop$2$percent("Fur Pelt", 20);
      t4 = R.breed("mongrel", 7, C.Color_179_74_4, 28, null, null, null, 0);
      t4.count$2(2, 5);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 8, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4.drop$2$percent("Fur Pelt", 20);
      t4 = R.breed("wolf", 26, C.Color_226_223_240, 60, null, null, null, 0);
      t4.count$2(3, 6);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 12, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4 = R.breed("varg", 30, C.Color_63_64_114, 80, null, null, null, 0);
      t4.count$2(2, 6);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 16, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4 = R.breed("Skoll", 36, C.Color_222_156_33, 200, null, null, null, 0);
      t4._flags = "unique";
      t4.minion$3("varg", 3, 5);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 20, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4 = R.breed("Hati", 40, C.Color_21_87_194, 250, null, null, null, 0);
      t4._flags = "unique";
      t4.minion$3("varg", 3, 5);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 23, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4 = R.breed("Fenrir", 44, C.Color_38_38_56, 300, null, null, null, 0);
      t4._flags = "unique";
      t4.minion$3("varg", 3, 5);
      t4.minion$1("Skoll");
      t4.minion$1("Hati");
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 26, 0, null));
      C.JSArray_methods.add$1(t4._moves, new U.HowlMove(10, null, 10));
      t4 = R.family("d", null, null, null, null, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("dragon".split(" "), t2));
      t4._vision = 16;
      t4._hearing = 10;
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(20, "{2} [is|are] deflected by its scales."));
      t4._location = C.SpawnLocation_1;
      t4 = R.breed("green dragon", 60, C.Color_131_158_13, 350, null, null, null, 0);
      t5 = t4._attacks;
      C.JSArray_methods.add$1(t5, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t5, U.Attack$(null, "claw[s]", 25, 0, null));
      t4.drop$2$count("treasure", 7);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 4);
      t4 = R.breed("blue dragon", 65, C.Color_226_223_240, 400, null, null, null, 0);
      t5 = t4._attacks;
      C.JSArray_methods.add$1(t5, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t5, U.Attack$(null, "claw[s]", 25, 0, null));
      t5 = $.$get$Elements_water();
      t7 = U.Attack$(new O.Noun("the water"), "blasts", 70, 10, t5);
      C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t7, 5));
      t4.drop$2$count("treasure", 8);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 5);
      t4 = R.breed("white dragon", 70, C.Color_226_223_240, 500, null, null, null, 0);
      t7 = t4._attacks;
      C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t7, U.Attack$(null, "claw[s]", 25, 0, null));
      t7 = $.$get$Elements_cold();
      t8 = U.Attack$(new O.Noun("the ice"), "freezes", 80, 10, t7);
      C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t8, 5));
      t4.drop$2$count("treasure", 8);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 5);
      t4 = R.breed("purple dragon", 75, C.Color_86_30_138, 600, null, null, null, 0);
      t8 = t4._attacks;
      C.JSArray_methods.add$1(t8, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t8, U.Attack$(null, "claw[s]", 25, 0, null));
      t8 = $.$get$Elements_lightning();
      t9 = U.Attack$(new O.Noun("the lightning"), "shocks", 100, 10, t8);
      C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t9, 5));
      t4.drop$2$count("treasure", 8);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 5);
      t4 = R.breed("red dragon", 75, C.Color_204_35_57, 600, null, null, null, 0);
      t9 = t4._attacks;
      C.JSArray_methods.add$1(t9, U.Attack$(null, "bite[s]", 30, 0, null));
      C.JSArray_methods.add$1(t9, U.Attack$(null, "claw[s]", 25, 0, null));
      t9 = $.$get$Elements_fire();
      t10 = U.Attack$(new O.Noun("the flame"), "burns", 100, 10, t9);
      C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t10, 5));
      t4.drop$2$count("treasure", 8);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 5);
      t4 = R.breed("gold dragon", 80, C.Color_222_156_33, 700, null, null, null, 0);
      t10 = t4._attacks;
      C.JSArray_methods.add$1(t10, U.Attack$(null, "bite[s]", 32, 0, null));
      C.JSArray_methods.add$1(t10, U.Attack$(null, "claw[s]", 27, 0, null));
      t10 = $.$get$Elements_light();
      t11 = U.Attack$(new O.Noun("the light"), "sears", 120, 10, t10);
      C.JSArray_methods.add$1(t4._moves, new Y.ConeMove(t11, 5));
      t4.drop$2$count("treasure", 8);
      t4.drop$2$count("magic", 4);
      t4.drop$2$count("equipment", 5);
      t4 = R.family("e", null, "immobile", null, null, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("eye".split(" "), t2));
      t4._vision = 16;
      t4._hearing = 1;
      C.JSArray_methods.add$1(t4._defenses, new U.Defense(10, "{1} blinks out of the way."));
      t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t6);
      t4._location = C.SpawnLocation_1;
      t4 = R.breed("lazy eye", 5, C.Color_64_163_229, 20, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 12, 8, 5);
      t4 = R.breed("mad eye", 9, C.Color_255_122_105, 40, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 8, 0, null));
      t11 = $.$get$Elements_air();
      t4._bolt$6$damage$range$rate("the wind", "blows", t11, 15, 8, 6);
      t4 = R.breed("floating eye", 15, C.Color_255_238_168, 60, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stare[s] at", 10, 0, null));
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 24, 8, 4);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(7, 10));
      t4 = R.breed("baleful eye", 20, C.Color_179_74_4, 80, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 12, 0, null));
      t4._bolt$6$damage$range$rate("the flame", "burns", t9, 20, 8, 4);
      t4._bolt$6$damage$range$rate("the jet", "splashes", t5, 20, 8, 4);
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(9, 10));
      t4 = R.breed("malevolent eye", 30, C.Color_204_35_57, 120, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 20, 0, null));
      t4._bolt$6$damage$range$rate("the light", "sears", t10, 20, 10, 4);
      t12 = $.$get$Elements_dark();
      t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 20, 10, 4);
      t13 = U.Attack$(new O.Noun("the flame"), "burns", 30, 10, t9);
      t4 = t4._moves;
      C.JSArray_methods.add$1(t4, new Y.ConeMove(t13, 7));
      C.JSArray_methods.add$1(t4, new S.TeleportMove(9, 10));
      t4 = R.breed("murderous eye", 40, C.Color_84_0_39, 180, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "gaze[s] into", 30, 0, null));
      t13 = $.$get$Elements_acid();
      t4._bolt$6$damage$range$rate("the acid", "burns", t13, 40, 8, 7);
      t14 = $.$get$Elements_earth();
      t4._bolt$6$damage$range$rate("the stone", "hits", t14, 40, 8, 7);
      t15 = U.Attack$(new O.Noun("the ice"), "freezes", 30, 10, t7);
      t4 = t4._moves;
      C.JSArray_methods.add$1(t4, new Y.ConeMove(t15, 7));
      C.JSArray_methods.add$1(t4, new S.TeleportMove(9, 10));
      t4 = R.breed("watcher", 60, C.Color_132_126_135, 300, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "see[s]", 50, 0, null));
      t4._bolt$6$damage$range$rate("the light", "sears", t10, 40, 10, 7);
      t10 = U.Attack$(new O.Noun("the light"), "sears", 30, 10, t10);
      t15 = t4._moves;
      C.JSArray_methods.add$1(t15, new Y.ConeMove(t10, 7));
      t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 50, 10, 7);
      C.JSArray_methods.add$1(t15, new Y.ConeMove(U.Attack$(new O.Noun("the darkness"), "crushes", 40, 10, t12), 7));
      t15 = R.family("f", null, null, null, null, null, null);
      t15._vision = 10;
      t15._hearing = 8;
      C.JSArray_methods.addAll$1(t15._groups, H.setRuntimeTypeInfo("feline".split(" "), t2));
      t15 = R.breed("stray cat", 1, C.Color_222_156_33, 11, null, null, 30, 1)._attacks;
      C.JSArray_methods.add$1(t15, U.Attack$(null, "bite[s]", 5, 0, null));
      C.JSArray_methods.add$1(t15, U.Attack$(null, "scratch[es]", 4, 0, null));
      t15 = R.family("g", null, null, null, 10, null, null);
      t15._vision = 8;
      t15._hearing = 4;
      C.JSArray_methods.addAll$1(t15._groups, H.setRuntimeTypeInfo("goblin".split(" "), t2));
      t4 = t15._builder0$_motility;
      t10 = $.$get$Motility_door();
      t4 = t4._bitMask;
      t10 = t10._bitMask;
      t15._builder0$_motility = new Q.Motility(t4 | t10);
      t4 = R.breed("goblin peon", 4, C.Color_189_144_108, 30, null, null, 20, 0);
      t4.count$1(4);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 8, 0, null));
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 8));
      t4.drop$2$percent("treasure", 30);
      t4.drop$2$percent("spear", 20);
      t4.drop$2$percent("healing", 10);
      t4 = R.breed("goblin archer", 6, C.Color_22_117_38, 36, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 4, 0, null));
      t15 = $.$get$Element_none();
      t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 8, 8, 3);
      t4.drop$2$percent("treasure", 30);
      t4.drop$2$percent("bow", 30);
      t4.drop$2$percent("dagger", 15);
      t4.drop$2$percent("healing", 5);
      t4 = R.breed("goblin fighter", 6, C.Color_142_82_55, 58, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("goblin archer", 0, 1);
      t4.minion$3("goblin peon", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 12, 0, null));
      t4.drop$2$percent("treasure", 30);
      t4.drop$2$percent("spear", 20);
      t4.drop$2$percent("armor", 20);
      t4.drop$2$percent("resistance", 5);
      t4.drop$2$percent("healing", 5);
      t4 = R.breed("goblin warrior", 8, C.Color_132_126_135, 68, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("goblin fighter", 0, 1);
      t4.minion$3("goblin archer", 0, 1);
      t4.minion$3("goblin peon", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 16, 0, null));
      t4.drop$2$percent("treasure", 35);
      t4.drop$2$percent("axe", 20);
      t4.drop$2$percent("armor", 20);
      t4.drop$2$percent("resistance", 5);
      t4.drop$2$percent("healing", 5);
      t4._flags = "protective";
      t4 = R.breed("goblin mage", 9, C.Color_26_46_150, 50, null, null, null, 0);
      t4.minion$3("goblin fighter", 0, 1);
      t4.minion$3("goblin archer", 0, 1);
      t4.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "whip[s]", 7, 0, null));
      t4._bolt$6$damage$range$rate("the flame", "burns", t9, 12, 8, 12);
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 16, 8, 12);
      t4.drop$2$percent("treasure", 30);
      t4.drop$2$percent("robe", 20);
      t4.drop$2$percent("whip", 10);
      t4.drop$2$percent("magic", 30);
      t4 = R.breed("goblin ranger", 12, C.Color_0_64_39, 60, null, null, null, 0);
      t4.minion$3("goblin mage", 0, 1);
      t4.minion$3("goblin fighter", 0, 1);
      t4.minion$3("goblin archer", 0, 1);
      t4.minion$3("goblin peon", 0, 2);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 10, 0, null));
      t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 12, 8, 3);
      t4.drop$2$percent("treasure", 20);
      t4.drop$2$percent("bow", 30);
      t4.drop$2$percent("armor", 20);
      t4.drop$2$percent("magic", 20);
      t4 = R.breed("Erlkonig, the Goblin Prince", 14, C.Color_38_38_56, 120, null, null, null, 0);
      t4._pronoun = C.Pronoun_he_him_his;
      t4.minion$3("goblin mage", 1, 2);
      t4.minion$3("goblin fighter", 1, 3);
      t4.minion$3("goblin archer", 1, 3);
      t4.minion$3("goblin peon", 2, 4);
      t16 = t4._attacks;
      C.JSArray_methods.add$1(t16, U.Attack$(null, "hit[s]", 10, 0, null));
      C.JSArray_methods.add$1(t16, U.Attack$(null, "slash[es]", 14, 0, null));
      t4._bolt$6$damage$range$rate("the darkness", "crushes", t12, 20, 10, 20);
      t4.drop$2$count("treasure", 3);
      t4.drop$3$count$depthOffset("equipment", 2, 8);
      t4.drop$3$count$depthOffset("magic", 3, 4);
      t4._flags = "protective unique";
      t4 = R.family("i", null, "fearless", null, 40, null, 3);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("bug".split(" "), t2));
      t4._vision = 5;
      t4._hearing = 2;
      t4 = R.breed("giant cockroach[es]", 1, C.Color_64_31_36, 1, null, 0.4, null, 0);
      t4.count$2(2, 5);
      t4._location = C.SpawnLocation_3;
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 2, 0, null));
      t16 = L.SpawnMove$(6, null);
      C.JSArray_methods.add$1(t4._moves, t16);
      description = H.stringReplaceAllUnchecked("It's not quite as easy to squash one of these when it's as long as\n      your arm.", t1, " ");
      $._builder._description = description;
      t4 = R.breed("giant centipede", 3, C.Color_204_35_57, 14, null, null, 20, 2)._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "crawl[s] on", 4, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 8, 0, null));
      t4 = R.family("i", null, "fearless", null, 40, null, 3);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("fly".split(" "), t2));
      t4._vision = 5;
      t4._hearing = 2;
      t4 = R.breed("firefly", 8, C.Color_179_74_4, 6, null, null, 70, 1);
      t4.count$2(3, 8);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "bite[s]", 12, 0, t9));
      t4 = R.family("j", null, "fearless", 0.7, 30, -1, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("jelly".split(" "), t2));
      t4._vision = 3;
      t4._hearing = 1;
      t4._location = C.SpawnLocation_2;
      t4.count$1(4);
      t4 = R.breed("green jelly", 1, C.Color_131_158_13, 5, null, null, null, 0);
      t16 = $.$get$Tiles_greenJellyStain();
      t4._stain = t16;
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 3, 0, null));
      t4 = R.family("j", null, "fearless immobile", 0.6, null, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("jelly".split(" "), t2));
      t4._vision = 2;
      t4._hearing = 1;
      t4._location = C.SpawnLocation_3;
      t4.count$1(4);
      t4 = R.breed("green slime", 2, C.Color_22_117_38, 10, null, null, null, 0);
      t4._stain = t16;
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 4, 0, null));
      t17 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t4._moves, t17);
      t17 = R.breed("frosty slime", 4, C.Color_226_223_240, 14, null, null, null, 0);
      t17._stain = $.$get$Tiles_whiteJellyStain();
      C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t7));
      t4 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t17._moves, t4);
      t4 = R.breed("mud slime", 6, C.Color_142_82_55, 20, null, null, null, 0);
      t4._stain = $.$get$Tiles_brownJellyStain();
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 8, 0, t14));
      t17 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t4._moves, t17);
      t17 = R.breed("smoking slime", 15, C.Color_204_35_57, 30, null, null, null, 0);
      t17._emanationLevel = 4;
      t17._stain = $.$get$Tiles_redJellyStain();
      C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 10, 0, t9));
      t4 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t17._moves, t4);
      t4 = R.breed("sparkling slime", 20, C.Color_86_30_138, 40, null, null, null, 0);
      t4._emanationLevel = 3;
      t4._stain = $.$get$Tiles_violetJellyStain();
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t8));
      t17 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t4._moves, t17);
      t17 = R.breed("caustic slime", 25, C.Color_129_217_117, 50, null, null, null, 0);
      t17._stain = t16;
      C.JSArray_methods.add$1(t17._attacks, U.Attack$(null, "crawl[s] on", 13, 0, t13));
      t4 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t17._moves, t4);
      t4 = R.breed("virulent slime", 35, C.Color_0_64_39, 60, null, null, null, 0);
      t4._stain = t16;
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "crawl[s] on", 14, 0, t3));
      t16 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t4._moves, t16);
      t16 = R.breed("ectoplasm", 45, C.Color_38_38_56, 40, null, null, null, 0);
      t16._stain = $.$get$Tiles_grayJellyStain();
      t4 = $.$get$Elements_spirit();
      C.JSArray_methods.add$1(t16._attacks, U.Attack$(null, "crawl[s] on", 15, 0, t4));
      t4 = L.SpawnMove$(4, null);
      C.JSArray_methods.add$1(t16._moves, t4);
      t4 = R.family("k", null, "cowardly", null, 15, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("kobold".split(" "), t2));
      t4._vision = 10;
      t4._hearing = 4;
      t4 = R.breed("scurrilous imp", 1, C.Color_255_122_105, 12, null, null, 20, 0);
      t4.count$1(2);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "club[s]", 4, 0, null));
      t16 = t4._moves;
      C.JSArray_methods.add$1(t16, new R.MissiveMove(C.Missive_1, 5));
      C.JSArray_methods.add$1(t16, new X.HasteMove(10, 1, 5));
      t4.drop$2$percent("treasure", 20);
      t4.drop$2$percent("club", 40);
      t4.drop$2$percent("speed", 30);
      t4 = R.breed("vexing imp", 2, C.Color_86_30_138, 16, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("scurrilous imp", 0, 1);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 5));
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 6, 8, 5);
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("teleportation", 50);
      C.JSArray_methods.addAll$1(R.family("k", null, null, null, 20, null, null)._groups, H.setRuntimeTypeInfo("kobold".split(" "), t2));
      t4 = R.breed("kobold", 3, C.Color_204_35_57, 20, null, null, null, 0);
      t4.count$1(3);
      t4.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "poke[s]", 4, 0, null));
      C.JSArray_methods.add$1(t4._moves, new S.TeleportMove(6, 10));
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("equipment", 20);
      t4.drop$2$percent("magic", 40);
      t4 = R.breed("kobold shaman", 4, C.Color_26_46_150, 20, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 4, 0, null));
      t4._bolt$6$damage$range$rate("the jet", "splashes", t5, 8, 8, 10);
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("robe", 20);
      t4.drop$2$percent("magic", 40);
      t4 = R.breed("kobold trickster", 5, C.Color_222_156_33, 24, null, null, null, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 5, 0, null));
      t5 = t4._moves;
      C.JSArray_methods.add$1(t5, new R.MissiveMove(C.Missive_1, 5));
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 8, 8, 5);
      C.JSArray_methods.add$1(t5, new S.TeleportMove(6, 7));
      C.JSArray_methods.add$1(t5, new X.HasteMove(10, 1, 7));
      t4.drop$2$percent("treasure", 45);
      t4.drop$2$percent("magic", 20);
      t4.drop$2$percent("magic", 40);
      t4 = R.breed("kobold priest", 6, C.Color_21_87_194, 30, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("kobold", 1, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "club[s]", 6, 0, null));
      t5 = t4._moves;
      C.JSArray_methods.add$1(t5, new O.HealMove(10, 15));
      C.JSArray_methods.add$1(t5, new X.HasteMove(10, 1, 7));
      t4.drop$2$percent("treasure", 35);
      t4.drop$2$percent("club", 40);
      t4.drop$2$percent("robe", 20);
      t4.drop$2$percent("magic", 40);
      t4 = R.breed("imp incanter", 7, C.Color_189_106_235, 33, null, null, null, 0);
      t4.count$1(2);
      t4.minion$3("kobold", 1, 3);
      t4.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "scratch[es]", 4, 0, null));
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_1, 6));
      t4._bolt$6$damage$range$rate("the flame", "burns", t9, 10, 8, 5);
      t4.drop$2$percent("treasure", 35);
      t4.drop$2$percent("robe", 20);
      t4.drop$2$percent("magic", 50);
      t4._flags = "cowardly";
      t4 = R.breed("imp warlock", 8, C.Color_56_16_125, 46, null, null, null, 0);
      t4.minion$3("imp incanter", 1, 3);
      t4.minion$3("kobold", 1, 3);
      t4.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
      t4._bolt$6$damage$range$rate("the ice", "freezes", t7, 12, 8, 8);
      t4._bolt$6$damage$range$rate("the flame", "burns", t9, 12, 8, 8);
      t4.drop$2$percent("treasure", 35);
      t4.drop$2$percent("staff", 40);
      t4.drop$2$percent("robe", 20);
      t4.drop$3$count$percent("magic", 2, 60);
      t4 = R.breed("Feng", 10, C.Color_179_74_4, 80, null, null, 10, 1);
      t4._pronoun = C.Pronoun_he_him_his;
      t4.minion$3("imp warlock", 1, 2);
      t4.minion$3("imp incanter", 1, 2);
      t4.minion$3("kobold priest", 1, 2);
      t4.minion$3("kobold", 1, 3);
      t4.minion$3("wild dog", 0, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "stab[s]", 5, 0, null));
      t7 = t4._moves;
      C.JSArray_methods.add$1(t7, new R.MissiveMove(C.Missive_1, 7));
      C.JSArray_methods.add$1(t7, new S.TeleportMove(6, 5));
      C.JSArray_methods.add$1(t7, new S.TeleportMove(30, 50));
      C.JSArray_methods.add$1(t7, new Y.ConeMove(U.Attack$(new O.Noun("the lightning"), "shocks", 12, 10, t8), 8));
      t4.drop$3$count$depthOffset("treasure", 3, 5);
      t4.drop$3$depthOffset$percent("spear", 5, 80);
      t4.drop$3$count$depthOffset("armor", 2, 5);
      t4.drop$3$count$depthOffset("magic", 3, 5);
      t4._flags = "unique";
      t4 = R.family("p", null, null, null, 10, null, 14);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("human".split(" "), t2));
      t4._vision = 10;
      t4._hearing = 5;
      t4._builder0$_motility = new Q.Motility(t4._builder0$_motility._bitMask | t10);
      t4._emanationLevel = 2;
      t4 = R.breed("Harold the Misfortunate", 1, C.Color_189_106_235, 30, null, null, null, 0);
      t4._pronoun = C.Pronoun_he_him_his;
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 5));
      t4.drop$2$percent("treasure", 80);
      t4.drop$3$depthOffset$percent("weapon", 4, 50);
      t4.drop$3$depthOffset$percent("armor", 4, 60);
      t4.drop$3$depthOffset$percent("magic", 4, 30);
      t4._flags = "unique";
      t4 = R.breed("hapless adventurer", 1, C.Color_255_238_168, 14, 15, null, 30, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 3, 0, null));
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 12));
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("weapon", 50);
      t4.drop$2$percent("armor", 60);
      t4.drop$2$percent("magic", 30);
      t4._flags = "cowardly";
      t4 = R.breed("simpering knave", 2, C.Color_179_74_4, 17, null, null, null, 0);
      t7 = t4._attacks;
      C.JSArray_methods.add$1(t7, U.Attack$(null, "hit[s]", 2, 0, null));
      C.JSArray_methods.add$1(t7, U.Attack$(null, "stab[s]", 4, 0, null));
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("whip", 30);
      t4.drop$2$percent("armor", 40);
      t4.drop$2$percent("magic", 20);
      t4._flags = "cowardly";
      t4 = R.breed("decrepit mage", 3, C.Color_86_30_138, 20, null, null, 30, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 2, 0, null));
      t4._bolt$6$damage$range$rate("the spark", "zaps", t8, 8, 8, 10);
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("magic", 60);
      t4.drop$2$percent("dagger", 10);
      t4.drop$2$percent("staff", 10);
      t4.drop$2$percent("robe", 20);
      t4.drop$2$percent("boots", 20);
      t4 = R.breed("unlucky ranger", 5, C.Color_22_117_38, 30, 25, null, 20, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "slash[es]", 2, 0, null));
      t4._bolt$6$damage$range$rate("the arrow", "hits", t15, 2, 8, 4);
      C.JSArray_methods.add$1(t4._moves, new R.MissiveMove(C.Missive_0, 10));
      t4.drop$2$percent("treasure", 25);
      t4.drop$2$percent("potion", 30);
      t4.drop$2$percent("bow", 40);
      t4.drop$2$percent("sword", 10);
      t4.drop$2$percent("body", 20);
      t4 = R.breed("drunken priest", 5, C.Color_21_87_194, 34, null, null, 40, 0);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "hit[s]", 8, 0, null));
      t7 = t4._moves;
      C.JSArray_methods.add$1(t7, new O.HealMove(8, 15));
      C.JSArray_methods.add$1(t7, new R.MissiveMove(C.Missive_0, 5));
      t4.drop$2$percent("treasure", 45);
      t4.drop$2$percent("scroll", 30);
      t4.drop$2$percent("club", 20);
      t4.drop$2$percent("robe", 40);
      t4._flags = "fearless";
      t4 = R.family("r", 30, null, null, 30, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("rodent".split(" "), t2));
      t4._vision = 4;
      t4._hearing = 6;
      t4._location = C.SpawnLocation_2;
      t4 = R.breed("[mouse|mice]", 1, C.Color_189_144_108, 2, null, 0.7, null, 0);
      t4.count$2(2, 5);
      t4 = t4._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 3, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 2, 0, null));
      t4 = R.breed("sewer rat", 2, C.Color_38_38_56, 8, null, null, 20, 0);
      t4.count$2(1, 4);
      t4 = t4._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 4, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 3, 0, null));
      t4 = R.breed("sickly rat", 3, C.Color_22_117_38, 10, null, null, null, 0)._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 8, 0, t3));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 4, 0, null));
      t4 = R.breed("plague rat", 6, C.Color_131_158_13, 20, null, null, null, 0);
      t4.count$2(1, 4);
      t4 = t4._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 15, 0, t3));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 8, 0, null));
      t4 = R.breed("giant rat", 8, C.Color_179_74_4, 40, null, null, null, 0)._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 12, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "scratch[es]", 8, 0, null));
      t4 = R.breed("The Rat King", 8, C.Color_84_0_39, 70, null, null, null, 0);
      t4._pronoun = C.Pronoun_he_him_his;
      t7 = t4._attacks;
      C.JSArray_methods.add$1(t7, U.Attack$(null, "bite[s]", 16, 0, null));
      C.JSArray_methods.add$1(t7, U.Attack$(null, "scratch[es]", 10, 0, null));
      t4.minion$3("sewer rat", 3, 5);
      t4.minion$3("plague rat", 3, 5);
      t4.drop$2$count("treasure", 3);
      t4.drop$3$depthOffset$percent("item", 10, 50);
      t4._flags = "unique";
      t4 = R.family("s", 5, "fearless", null, 30, -3, 2);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("slug".split(" "), t2));
      t4._vision = 3;
      t4._hearing = 1;
      C.JSArray_methods.add$1(R.breed("giant slug", 3, C.Color_99_87_7, 20, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 8, 0, null));
      C.JSArray_methods.add$1(R.breed("suppurating slug", 6, C.Color_131_158_13, 50, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 12, 0, t3));
      C.JSArray_methods.add$1(R.breed("acidic slug", 9, C.Color_99_87_7, 70, null, null, null, 0)._attacks, U.Attack$(null, "crawl[s] on", 16, 0, t13));
      t4 = R.family("v", null, "fearless immobile", null, null, null, null);
      C.JSArray_methods.addAll$1(t4._groups, H.setRuntimeTypeInfo("vine".split(" "), t2));
      t4._vision = 10;
      t4._hearing = 10;
      C.JSArray_methods.add$1(R.breed("choker", 16, C.Color_22_117_38, 40, null, null, null, 0)._attacks, U.Attack$(null, "strangle", 12, 0, null));
      t4 = R.breed("nightshade", 19, C.Color_189_106_235, 50, null, null, null, 0);
      t4._bolt$6$damage$range$rate(null, "whips", t15, 10, 2, 3);
      C.JSArray_methods.add$1(t4._attacks, U.Attack$(null, "touch[es]", 12, 0, t3));
      t3 = R.breed("creeper", 22, C.Color_131_158_13, 60, null, null, null, 0);
      t3.toString;
      t4 = L.SpawnMove$(10, true);
      C.JSArray_methods.add$1(t3._moves, t4);
      t3._bolt$6$damage$range$rate(null, "whips", t15, 10, 2, 3);
      C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "strangle", 8, 0, null));
      C.JSArray_methods.add$1(R.breed("strangler", 26, C.Color_0_64_39, 80, null, null, null, 0)._attacks, U.Attack$(null, "strangle", 14, 0, null));
      t3 = R.family("w", 15, "fearless", null, 40, null, null);
      C.JSArray_methods.addAll$1(t3._groups, H.setRuntimeTypeInfo("worm".split(" "), t2));
      t3._vision = 0;
      t3._hearing = 3;
      t3 = R.breed("blood worm", 1, C.Color_84_0_39, 4, null, 0.5, null, 0);
      t3.count$2(2, 5);
      C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
      t3 = R.breed("fire worm", 10, C.Color_179_74_4, 6, null, null, null, 0);
      t3.count$2(2, 6);
      t3._location = C.SpawnLocation_2;
      C.JSArray_methods.add$1(t3._attacks, U.Attack$(null, "crawl[s] on", 5, 0, t9));
      R.family("w", 10, "fearless", null, 30, null, null);
      C.JSArray_methods.add$1(R.breed("giant earthworm", 3, C.Color_255_122_105, 20, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 5, 0, null));
      C.JSArray_methods.add$1(R.breed("giant cave worm", 7, C.Color_189_144_108, 80, null, null, null, -2)._attacks, U.Attack$(null, "crawl[s] on", 8, 0, t13));
      t13 = R.family("x", null, null, null, 30, null, null);
      C.JSArray_methods.addAll$1(t13._groups, H.setRuntimeTypeInfo("skeleton".split(" "), t2));
      t13._vision = 4;
      t13._hearing = 4;
      C.JSArray_methods.add$1(R.breed("bony hand", 3, C.Color_63_64_114, 12, null, 0.3, 40, -1)._attacks, U.Attack$(null, "claw[s]", 5, 0, null));
      C.JSArray_methods.add$1(R.breed("bony arm", 4, C.Color_132_126_135, 18, null, 0.3, 40, 0)._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
      C.JSArray_methods.add$1(R.breed("severed skull", 7, C.Color_189_144_108, 20, null, 0.3, 40, -2)._attacks, U.Attack$(null, "bite[s]", 9, 0, null));
      t13 = R.breed("decapitated skeleton", 10, C.Color_255_238_168, 30, null, 0.5, 60, 0);
      t13._vision = 0;
      t13._hearing = 0;
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
      C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
      t13.drop$2$percent("treasure", 30);
      t13.drop$2$percent("weapon", 20);
      t13.drop$2$percent("armor", 20);
      t13 = R.breed("armless skeleton", 12, C.Color_129_217_117, 25, null, 0.3, null, 0);
      t3 = t13._attacks;
      C.JSArray_methods.add$1(t3, U.Attack$(null, "bite[s]", 9, 0, null));
      C.JSArray_methods.add$1(t3, U.Attack$(null, "kick[s]", 7, 0, null));
      t13.drop$2$percent("treasure", 30);
      t13.drop$2$percent("armor", 20);
      t13 = R.breed("one-armed skeleton", 13, C.Color_131_158_13, 30, null, 0.4, null, 0);
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
      C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "claw[s]", 7, 0, null));
      t3 = new B.BreedRef("armless skeleton");
      t15 = $.$get$BreedRef__unresolved();
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("bony arm");
      C.JSArray_methods.add$1(t15, t4);
      t7 = t13._moves;
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s arm falls off!", 1));
      t4 = new B.BreedRef("armless skeleton");
      C.JSArray_methods.add$1(t15, t4);
      t3 = new B.BreedRef("bony hand");
      C.JSArray_methods.add$1(t15, t3);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s hand falls off!", 1));
      t13.drop$2$percent("treasure", 30);
      t13.drop$2$percent("weapon", 10);
      t13.drop$2$percent("armor", 20);
      t13 = R.breed("skeleton", 15, C.Color_226_223_240, 40, null, null, null, 0);
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
      t3 = t13._attacks;
      C.JSArray_methods.add$1(t3, U.Attack$(null, "claw[s]", 7, 0, null));
      C.JSArray_methods.add$1(t3, U.Attack$(null, "bite[s]", 9, 0, null));
      t3 = new B.BreedRef("decapitated skeleton");
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("severed skull");
      C.JSArray_methods.add$1(t15, t4);
      t7 = t13._moves;
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s head pops off!", 1));
      t4 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t4);
      t3 = new B.BreedRef("bony arm");
      C.JSArray_methods.add$1(t15, t3);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s arm falls off!", 1));
      t3 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("bony hand");
      C.JSArray_methods.add$1(t15, t4);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s hand falls off!", 1));
      t13.drop$2$percent("treasure", 40);
      t13.drop$2$percent("weapon", 30);
      t13.drop$2$percent("armor", 30);
      t13 = R.breed("skeleton warrior", 17, C.Color_255_122_105, 50, null, null, null, 0);
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
      t4 = t13._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "slash[es]", 13, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "stab[s]", 10, 0, null));
      t4 = new B.BreedRef("decapitated skeleton");
      C.JSArray_methods.add$1(t15, t4);
      t3 = new B.BreedRef("severed skull");
      C.JSArray_methods.add$1(t15, t3);
      t7 = t13._moves;
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s head pops off!", 1));
      t3 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("bony arm");
      C.JSArray_methods.add$1(t15, t4);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s arm falls off!", 1));
      t4 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t4);
      t3 = new B.BreedRef("bony hand");
      C.JSArray_methods.add$1(t15, t3);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s hand falls off!", 1));
      t13.drop$2$percent("treasure", 50);
      t13.drop$2$percent("weapon", 50);
      t13.drop$2$percent("armor", 50);
      t13 = R.breed("robed skeleton", 19, C.Color_189_106_235, 50, null, null, null, 0);
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t10);
      t3 = t13._attacks;
      C.JSArray_methods.add$1(t3, U.Attack$(null, "slash[es]", 13, 0, null));
      C.JSArray_methods.add$1(t3, U.Attack$(null, "stab[s]", 10, 0, null));
      t13._bolt$6$damage$range$rate("the lightning", "shocks", t8, 15, 10, 8);
      t3 = new B.BreedRef("decapitated skeleton");
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("severed skull");
      C.JSArray_methods.add$1(t15, t4);
      t7 = t13._moves;
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s head pops off!", 1));
      t4 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t4);
      t3 = new B.BreedRef("bony arm");
      C.JSArray_methods.add$1(t15, t3);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t4, t3, "{1}'s arm falls off!", 1));
      t3 = new B.BreedRef("one-armed skeleton");
      C.JSArray_methods.add$1(t15, t3);
      t4 = new B.BreedRef("bony hand");
      C.JSArray_methods.add$1(t15, t4);
      C.JSArray_methods.add$1(t7, new Q.AmputateMove(t3, t4, "{1}'s hand falls off!", 1));
      t13.drop$2$percent("treasure", 50);
      t13.drop$2$percent("magic", 50);
      t13.drop$2$percent("armor", 50);
      t13 = R.family("B", null, null, null, null, null, null);
      C.JSArray_methods.addAll$1(t13._groups, H.setRuntimeTypeInfo("bird".split(" "), t2));
      t13._vision = 8;
      t13._hearing = 6;
      C.JSArray_methods.add$1(t13._defenses, new U.Defense(10, "{1} flaps out of the way."));
      t13._builder0$_motility = new Q.Motility(t13._builder0$_motility._bitMask | t6);
      t13.count$2(3, 6);
      t13 = R.breed("crow", 4, C.Color_38_38_56, 9, null, null, 30, 2);
      C.JSArray_methods.add$1(t13._attacks, U.Attack$(null, "bite[s]", 5, 0, null));
      t13.drop$2$percent("treasure", 10);
      t13.drop$2$percent("Black Feather", 25);
      description = H.stringReplaceAllUnchecked('"What harm can a stupid little crow do?" you think as it and its\n      murderous friends dive towards your eyes, claws extended.', t1, " ");
      $._builder._description = description;
      t3 = R.breed("raven", 6, C.Color_63_64_114, 22, null, null, 15, 0);
      t4 = t3._attacks;
      C.JSArray_methods.add$1(t4, U.Attack$(null, "bite[s]", 5, 0, null));
      C.JSArray_methods.add$1(t4, U.Attack$(null, "claw[s]", 4, 0, null));
      t3.drop$2$percent("treasure", 10);
      t3.drop$2$percent("Black Feather", 20);
      t3._flags = "protective";
      description = H.stringReplaceAllUnchecked("It's black eyes gleam with a malevolent intelligence.", t1, " ");
      $._builder._description = description;
      t1 = R.family("F", null, "cowardly", null, 30, 2, null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("fae".split(" "), t2));
      t1._vision = 10;
      t1._hearing = 8;
      C.JSArray_methods.add$1(t1._defenses, new U.Defense(10, "{1} flits out of the way."));
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
      t1._location = C.SpawnLocation_1;
      t1 = R.breed("forest sprite", 2, C.Color_129_217_117, 6, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "scratch[es]", 3, 0, null));
      C.JSArray_methods.add$1(t1._moves, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the spark", "zaps", t8, 4, 8, 7);
      t1.drop$2$percent("treasure", 10);
      t1.drop$2$percent("magic", 60);
      t1 = R.breed("house sprite", 5, C.Color_64_163_229, 10, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "poke[s]", 5, 0, null));
      t3 = t1._moves;
      C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the stone", "hits", t14, 4, 8, 10);
      C.JSArray_methods.add$1(t3, new S.TeleportMove(4, 7));
      t1.drop$2$percent("treasure", 10);
      t1.drop$2$percent("magic", 80);
      t1 = R.breed("mischievous sprite", 7, C.Color_255_122_105, 24, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "stab[s]", 6, 0, null));
      t3 = t1._moves;
      C.JSArray_methods.add$1(t3, new R.MissiveMove(C.Missive_1, 4));
      t1._bolt$6$damage$range$rate("the wind", "blows", t11, 8, 8, 8);
      C.JSArray_methods.add$1(t3, new S.TeleportMove(5, 5));
      t1.drop$2$percent("treasure", 10);
      t1.drop$1("magic");
      t1 = R.family("H", null, null, null, null, null, null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("hybrid".split(" "), t2));
      t1._vision = 10;
      t1._hearing = 12;
      t1 = R.breed("harpy", 25, C.Color_189_106_235, 50, null, null, null, 2);
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t6);
      t1.count$2(2, 5);
      t6 = t1._attacks;
      C.JSArray_methods.add$1(t6, U.Attack$(null, "bite[s]", 10, 0, null));
      C.JSArray_methods.add$1(t6, U.Attack$(null, "scratch[es]", 15, 0, null));
      t1 = t1._moves;
      C.JSArray_methods.add$1(t1, new U.HowlMove(10, "screeches", 10));
      C.JSArray_methods.add$1(t1, new R.MissiveMove(C.Missive_2, 5));
      t1 = R.breed("griffin", 35, C.Color_222_156_33, 200, null, null, null, 0)._attacks;
      C.JSArray_methods.add$1(t1, U.Attack$(null, "bite[s]", 20, 0, null));
      C.JSArray_methods.add$1(t1, U.Attack$(null, "scratch[es]", 15, 0, null));
      R.family("Q", null, null, null, null, null, null);
      t1 = R.breed("Nameless Unmaker", 100, C.Color_86_30_138, 1000, null, null, null, 2);
      t1._vision = 16;
      t1._hearing = 16;
      t6 = t1._attacks;
      C.JSArray_methods.add$1(t6, U.Attack$(null, "crushe[s]", 250, 0, t14));
      C.JSArray_methods.add$1(t6, U.Attack$(null, "blast[s]", 200, 0, t8));
      t12 = U.Attack$(new O.Noun("the darkness"), "crushes", 500, 10, t12);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t12, 5));
      t1._flags = "fearless unique";
      t1._builder0$_motility = new Q.Motility(t1._builder0$_motility._bitMask | t10);
      t1.drop$2$count("treasure", 10);
      C.JSArray_methods.addAll$1(R.family("R", null, null, null, null, null, null)._groups, H.setRuntimeTypeInfo("herp".split(" "), t2));
      t1 = R.breed("frog", 1, C.Color_131_158_13, 4, 30, null, 30, 0);
      t1._vision = 6;
      t1._hearing = 4;
      t10 = t1._builder0$_motility;
      t12 = $.$get$Motility_swim();
      t1._builder0$_motility = new Q.Motility(t10._bitMask | t12._bitMask);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "hop[s] on", 2, 0, null));
      t1 = R.family("R", null, "fearless", null, 10, null, null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("saurian".split(" "), t2));
      t1._vision = 10;
      t1._hearing = 5;
      t1 = R.breed("lizard guard", 11, C.Color_222_156_33, 26, null, null, null, 0);
      t12 = t1._attacks;
      C.JSArray_methods.add$1(t12, U.Attack$(null, "claw[s]", 8, 0, null));
      C.JSArray_methods.add$1(t12, U.Attack$(null, "bite[s]", 10, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("lizard protector", 15, C.Color_131_158_13, 30, null, null, null, 0);
      t1.minion$3("lizard guard", 0, 2);
      t12 = t1._attacks;
      C.JSArray_methods.add$1(t12, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t12, U.Attack$(null, "bite[s]", 14, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("armored lizard", 17, C.Color_132_126_135, 38, null, null, null, 0);
      t1.minion$3("lizard guard", 0, 2);
      t12 = t1._attacks;
      C.JSArray_methods.add$1(t12, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t12, U.Attack$(null, "bite[s]", 15, 0, null));
      t1.drop$2$percent("treasure", 30);
      t1.drop$2$percent("armor", 50);
      t1.drop$2$percent("spear", 20);
      t1 = R.breed("scaled guardian", 19, C.Color_38_38_56, 50, null, null, null, 0);
      t1.minion$3("lizard protector", 0, 2);
      t1.minion$3("lizard guard", 0, 1);
      t1.minion$3("salamander", 0, 1);
      t12 = t1._attacks;
      C.JSArray_methods.add$1(t12, U.Attack$(null, "claw[s]", 10, 0, null));
      C.JSArray_methods.add$1(t12, U.Attack$(null, "bite[s]", 15, 0, null));
      t1.drop$2$percent("treasure", 40);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("weapon", 20);
      t1 = R.breed("saurian", 21, C.Color_179_74_4, 64, null, null, null, 0);
      t1.minion$3("lizard protector", 0, 2);
      t1.minion$3("armored lizard", 0, 1);
      t1.minion$3("lizard guard", 0, 1);
      t1.minion$3("salamander", 0, 2);
      t12 = t1._attacks;
      C.JSArray_methods.add$1(t12, U.Attack$(null, "claw[s]", 12, 0, null));
      C.JSArray_methods.add$1(t12, U.Attack$(null, "bite[s]", 17, 0, null));
      t1.drop$2$percent("treasure", 50);
      t1.drop$2$percent("armor", 30);
      t1.drop$2$percent("weapon", 20);
      t1 = R.family("R", 30, null, null, 20, null, null);
      C.JSArray_methods.addAll$1(t1._groups, H.setRuntimeTypeInfo("salamander".split(" "), t2));
      t1._vision = 6;
      t1._hearing = 5;
      t1._location = C.SpawnLocation_1;
      t1._emanationLevel = 3;
      t1 = R.breed("juvenile salamander", 7, C.Color_255_122_105, 20, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 14, 0, t9));
      t12 = U.Attack$(new O.Noun("the flame"), "burns", 20, 4, t9);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t12, 16));
      t12 = R.breed("salamander", 13, C.Color_204_35_57, 30, null, null, null, 0);
      C.JSArray_methods.add$1(t12._attacks, U.Attack$(null, "bite[s]", 18, 0, t9));
      t1 = U.Attack$(new O.Noun("the flame"), "burns", 30, 5, t9);
      C.JSArray_methods.add$1(t12._moves, new Y.ConeMove(t1, 16));
      t1 = R.breed("three-headed salamander", 23, C.Color_84_0_39, 90, null, null, null, 0);
      C.JSArray_methods.add$1(t1._attacks, U.Attack$(null, "bite[s]", 24, 0, t9));
      t9 = U.Attack$(new O.Noun("the flame"), "burns", 20, 5, t9);
      C.JSArray_methods.add$1(t1._moves, new Y.ConeMove(t9, 10));
      t9 = R.family("S", 30, null, null, 30, null, null);
      C.JSArray_methods.addAll$1(t9._groups, H.setRuntimeTypeInfo("snake".split(" "), t2));
      t9._vision = 4;
      t9._hearing = 7;
      C.JSArray_methods.add$1(R.breed("water snake", 1, C.Color_131_158_13, 9, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 3, 0, null));
      C.JSArray_methods.add$1(R.breed("brown snake", 3, C.Color_142_82_55, 25, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 4, 0, null));
      C.JSArray_methods.add$1(R.breed("cave snake", 8, C.Color_132_126_135, 40, null, null, null, 0)._attacks, U.Attack$(null, "bite[s]", 10, 0, null));
      R.finishBreed();
      t9 = $.$get$Monsters_breeds();
      B.BreedRef_resolve(t9.get$find(t9));
    }
  }], ["", "package:hauberk/src/content/move/amputate.dart",, Q, {
    "^": "",
    AmputateMove: {
      "^": "Move;_body,_part,_amputate$_message,rate",
      toString$0: function(_) {
        return "Amputate " + H.S(O.Log__categorize(this._body._breed._breed$_name, false, true)) + " + " + H.S(O.Log__categorize(this._part._breed._breed$_name, false, true));
      }
    }
  }], ["", "package:hauberk/src/content/move/bolt.dart",, O, {
    "^": "",
    BoltMove: {
      "^": "RangedMove;attack,rate",
      toString$0: function(_) {
        return "Bolt " + this.attack.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/cone.dart",, Y, {
    "^": "",
    ConeMove: {
      "^": "Move;attack,rate",
      toString$0: function(_) {
        return "Cone " + this.attack.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/haste.dart",, X, {
    "^": "",
    HasteMove: {
      "^": "Move;_duration,_speed,rate",
      toString$0: function(_) {
        return "Haste " + this._speed + " for " + this._duration + " turns rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/heal.dart",, O, {
    "^": "",
    HealMove: {
      "^": "Move;_amount,rate",
      toString$0: function(_) {
        return "Heal " + this._amount + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/howl.dart",, U, {
    "^": "",
    HowlMove: {
      "^": "Move;_howl$_range,_verb,rate",
      toString$0: function(_) {
        return "Howl " + this._howl$_range;
      }
    }
  }], ["", "package:hauberk/src/content/move/missive.dart",, R, {
    "^": "",
    MissiveMove: {
      "^": "Move;_missive,rate",
      toString$0: function(_) {
        return this._missive.toString$0(0) + " rate: " + this.rate;
      }
    }
  }], ["", "package:hauberk/src/content/move/spawn.dart",, L, {
    "^": "",
    SpawnMove: {
      "^": "Move;_preferStraight,rate",
      toString$0: function(_) {
        return "Spawn rate: " + this.rate;
      },
      static: {
        SpawnMove$: function(rate, preferStraight) {
          return new L.SpawnMove(preferStraight === true, rate);
        }
      }
    }
  }], ["", "package:hauberk/src/content/move/teleport.dart",, S, {
    "^": "",
    TeleportMove: {
      "^": "Move;_range,rate",
      toString$0: function(_) {
        return "Teleport " + this._range;
      }
    }
  }], ["", "package:hauberk/src/content/races.dart",, B, {}], ["", "package:hauberk/src/content/skill/discipline/archery.dart",, X, {
    "^": "",
    Archery: {
      "^": "_Archery_MasteryDiscipline_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Archery";
      }
    },
    _Archery_MasteryDiscipline_TargetSkill: {
      "^": "MasteryDiscipline+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/skill/discipline/axe.dart",, D, {
    "^": "",
    AxeMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Axe Mastery";
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/battle_hardening.dart",, M, {
    "^": "",
    BattleHardening: {
      "^": "Discipline;_sortOrder",
      get$name: function(_) {
        return "Battle Hardening";
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/club.dart",, A, {
    "^": "",
    ClubMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Club Mastery";
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/mastery.dart",, S, {
    "^": "",
    MasteryDiscipline: {
      "^": "Discipline;"
    }
  }], ["", "package:hauberk/src/content/skill/discipline/slay.dart",, A, {
    "^": "",
    SlayDiscipline: {
      "^": "Discipline;_displayName,_breedGroup,_sortOrder",
      get$name: function(_) {
        return "Slay " + this._displayName;
      },
      static: {
        SlayDiscipline$: function(_displayName, _breedGroup) {
          var t1 = $.Skill__nextSortOrder;
          $.Skill__nextSortOrder = t1 + 1;
          return new A.SlayDiscipline(_displayName, _breedGroup, t1);
        }
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/spear.dart",, Z, {
    "^": "",
    SpearMastery: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Spear Mastery";
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/sword.dart",, G, {
    "^": "",
    Swordfighting: {
      "^": "MasteryDiscipline;_sortOrder",
      get$name: function(_) {
        return "Swordfighting";
      }
    }
  }], ["", "package:hauberk/src/content/skill/discipline/whip.dart",, O, {
    "^": "",
    WhipMastery: {
      "^": "_WhipMastery_MasteryDiscipline_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Whip Mastery";
      }
    },
    _WhipMastery_MasteryDiscipline_TargetSkill: {
      "^": "MasteryDiscipline+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/skill/skills.dart",, Q, {
    "^": "",
    Skills_find: [function($name) {
      var t1;
      H.stringTypeCheck($name);
      t1 = $.$get$Skills__byName();
      if (!t1.containsKey$1($name))
        throw H.wrapException(P.ArgumentError$("Unknown skill '" + H.S($name) + "'."));
      return t1.$index(0, $name);
    }, "call$1", "skills_Skills_find$closure", 4, 0, 40],
    Skills_closure: {
      "^": "Closure:41;",
      call$1: function(skill) {
        return J.get$name$x(skill);
      }
    }
  }], ["", "package:hauberk/src/content/skill/spell/conjuring.dart",, K, {
    "^": "",
    Flee: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Flee";
      }
    },
    Escape: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Escape";
      }
    },
    Disappear: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Disappear";
      }
    }
  }], ["", "package:hauberk/src/content/skill/spell/divination.dart",, D, {
    "^": "",
    SenseItems: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Sense Items";
      }
    }
  }], ["", "package:hauberk/src/content/skill/spell/sorcery.dart",, L, {
    "^": "",
    Icicle: {
      "^": "_Icicle_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Icicle";
      }
    },
    BrilliantBeam: {
      "^": "_BrilliantBeam_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Brilliant Beam";
      }
    },
    Windstorm: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Windstorm";
      }
    },
    FireBarrier: {
      "^": "_FireBarrier_Spell_TargetSkill;_sortOrder",
      get$name: function(_) {
        return "Fire Barrier";
      }
    },
    TidalWave: {
      "^": "Spell;_sortOrder",
      get$name: function(_) {
        return "Tidal Wave";
      }
    },
    _BrilliantBeam_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    },
    _FireBarrier_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    },
    _Icicle_Spell_TargetSkill: {
      "^": "Spell+TargetSkill;"
    }
  }], ["", "package:hauberk/src/content/tiles.dart",, Z, {
    "^": "",
    Tiles_closure: {
      "^": "Closure:42;",
      call$1: function(pos) {
        return new Q.OpenChestAction(pos);
      }
    },
    Tiles_closure0: {
      "^": "Closure:43;",
      call$1: function(pos) {
        return new Q.OpenBarrelAction(pos);
      }
    },
    _TileBuilder: {
      "^": "Object;name>,glyphs,0_onClose,0_onOpen,_isExit,_emanation",
      set$_onOpen: function(_onOpen) {
        this._onOpen = H.functionTypeCheck(_onOpen, {func: 1, ret: V.Action, args: [L.Vec]});
      },
      animate$4: function(_, count, maxMix, fore, $back) {
        var t1, glyph, t2, t3, t4, i, mixedFore, mixedBack;
        t1 = this.glyphs;
        glyph = C.JSArray_methods.get$first(t1);
        for (t2 = glyph.fore, t3 = glyph.back, t4 = glyph.char, i = 1; i < count; ++i) {
          mixedFore = t2.blend$2(fore, K.lerpDouble(i, 0, count, 0, maxMix));
          mixedBack = t3.blend$2($back, K.lerpDouble(i, 0, count, 0, maxMix));
          C.JSArray_methods.add$1(t1, new L.Glyph(t4, mixedFore, mixedBack));
        }
        return this;
      },
      emanate$1: function(emanation) {
        this._emanation = emanation;
        return this;
      },
      onOpen$1: function(onOpen) {
        this.set$_onOpen(H.functionTypeCheck(onOpen, {func: 1, ret: V.Action, args: [L.Vec]}));
        return this;
      },
      obstacle$0: function() {
        return this._tiles$_motility$1($.$get$Motility_fly());
      },
      open$0: function(_) {
        return this._tiles$_motility$1($.$get$Motility_flyAndWalk());
      },
      solid$0: function() {
        return this._tiles$_motility$1($.$get$Motility_none());
      },
      _tiles$_motility$1: function(motility) {
        var t1, t2, t3;
        t1 = this.glyphs;
        if (t1.length === 1)
          t1 = C.JSArray_methods.get$first(t1);
        t2 = this._emanation;
        t3 = this._onOpen;
        return new Q.TileType(this.name, false, t2, t1, motility, this._onClose, t3);
      },
      static: {
        _TileBuilder__TileBuilder: function($name, char, fore, $back) {
          var charCode;
          if ($back == null)
            $back = C.Color_19_17_28;
          charCode = C.JSString_methods._codeUnitAt$1(char, 0);
          return new Z._TileBuilder($name, H.setRuntimeTypeInfo([L.Glyph$fromCharCode(charCode, fore, $back)], [L.Glyph]), false, 0);
        }
      }
    }
  }], ["", "package:hauberk/src/engine/action/action.dart",, V, {
    "^": "",
    Action: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/action/condition.dart",, E, {
    "^": "",
    ConditionAction: {
      "^": "Action;"
    }
  }], ["", "package:hauberk/src/engine/action/item.dart",, R, {
    "^": "",
    DestroyActionMixin: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/core/actor.dart",, S, {
    "^": "",
    Actor: {
      "^": "Object;",
      $isNoun: 1
    }
  }], ["", "package:hauberk/src/engine/core/combat.dart",, U, {
    "^": "",
    Attack: {
      "^": "Object;noun,verb,damage,range,element",
      toString$0: function(_) {
        var result, t1;
        result = C.JSInt_methods.toString$0(this.damage);
        t1 = this.element;
        if (t1 != $.$get$Element_none())
          result = H.S(t1) + " " + result;
        t1 = this.range;
        return t1 > 0 ? result + ("@" + t1) : result;
      },
      static: {
        Attack$: function(noun, verb, damage, range, element) {
          var t1 = range == null ? 0 : range;
          return new U.Attack(noun, verb, damage, t1, element == null ? $.$get$Element_none() : element);
        }
      }
    },
    Hit: {
      "^": "Object;"
    },
    Defense: {
      "^": "Object;amount,message"
    }
  }], ["", "package:hauberk/src/engine/core/element.dart",, G, {
    "^": "",
    Element0: {
      "^": "Object;name>,abbreviation,destroyMessage,emanates,experience,attackAction,floorAction",
      toString$0: function(_) {
        return this.name;
      },
      static: {
        Element$: function($name, abbreviation, experience, attack, destroyMessage, emanates, floor) {
          var t1, t2, t3;
          t1 = destroyMessage == null ? "" : destroyMessage;
          t2 = attack == null ? new G.Element_closure() : attack;
          t3 = floor == null ? new G.Element_closure0() : floor;
          return new G.Element0($name, abbreviation, t1, emanates === true, experience, t2, t3);
        }
      }
    },
    Element_closure: {
      "^": "Closure:44;",
      call$1: function(_) {
        return;
      }
    },
    Element_closure0: {
      "^": "Closure:45;",
      call$4: function(_, __, ___, ____) {
        return;
      }
    }
  }], ["", "package:hauberk/src/engine/core/energy.dart",, Y, {
    "^": "",
    Energy: {
      "^": "Object;energy"
    }
  }], ["", "package:hauberk/src/engine/core/game.dart",, D, {
    "^": "",
    Game: {
      "^": "Object;content,_save,log,_actions,_reactions,_events,_substanceEnergy,_substanceUpdateOrder,0_substanceIndex,depth<,0_stage,0hero"
    },
    Event: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/core/log.dart",, O, {
    "^": "",
    Log: {
      "^": "Object;messages",
      static: {
        Log__categorize: function(text, force, isFirst) {
          var optionalSuffix, irregular, match, t1, t2, before, after;
          optionalSuffix = P.RegExp_RegExp("\\[(\\w+?)\\]", true, false);
          irregular = P.RegExp_RegExp("\\[([^|]+)\\|([^\\]]+)\\]", true, false);
          if (force && !isFirst && !J.contains$1$asx(text, "["))
            return H.S(text) + "s";
          for (; true;) {
            match = optionalSuffix.firstMatch$1(text);
            if (match == null)
              break;
            t1 = match._match;
            t2 = t1.index;
            before = J.substring$2$s(text, 0, t2);
            after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
            if (isFirst)
              text = before + after;
            else {
              if (1 >= t1.length)
                return H.ioore(t1, 1);
              text = before + H.S(t1[1]) + after;
            }
          }
          for (; true;) {
            match = irregular.firstMatch$1(text);
            if (match == null)
              break;
            t1 = match._match;
            t2 = t1.index;
            before = J.substring$2$s(text, 0, t2);
            after = C.JSString_methods.substring$1(text, t2 + t1[0].length);
            t2 = t1.length;
            if (isFirst) {
              if (1 >= t2)
                return H.ioore(t1, 1);
              text = before + H.S(t1[1]) + after;
            } else {
              if (2 >= t2)
                return H.ioore(t1, 2);
              text = before + H.S(t1[2]) + after;
            }
          }
          return text;
        }
      }
    },
    Noun: {
      "^": "Object;nounText",
      toString$0: function(_) {
        return this.nounText;
      }
    },
    Pronoun: {
      "^": "Object;subjective,objective,possessive"
    },
    Message: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/core/math.dart",, K, {
    "^": "",
    lerpDouble: function(value, min, max, outMin, outMax) {
      if (value <= min)
        return outMin;
      if (value >= max)
        return outMax;
      return outMin + (value - min) / (max - min) * (outMax - outMin);
    }
  }], ["", "package:hauberk/src/engine/core/resource.dart",, Y, {
    "^": "",
    ResourceSet: {
      "^": "Object;_tags,_resources,_queries,$ti",
      _resource$_add$7: function(object, $name, startDepth, endDepth, startFrequency, endFrequency, tags) {
        var t1, t2, t3, t4, _i, tagName, tag;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(object, t1);
        if ($name == null) {
          t2 = this._resources;
          $name = C.JSInt_methods.toString$0(t2.get$length(t2));
        }
        if (startDepth == null)
          startDepth = 1;
        if (endDepth == null)
          endDepth = startDepth;
        if (startFrequency == null)
          startFrequency = 1;
        if (endFrequency == null)
          endFrequency = startFrequency;
        t2 = this._resources;
        if (t2.containsKey$1($name))
          throw H.wrapException(P.ArgumentError$('Already have a resource named "' + $name + '".'));
        t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, [Y._Tag, t1]);
        t2.$indexSet(0, $name, new Y._Resource(object, startDepth, endDepth, startFrequency, endFrequency, t1, this.$ti));
        if (tags != null && tags !== "")
          for (t2 = tags.split(" "), t3 = t2.length, t4 = this._tags, _i = 0; _i < t3; ++_i) {
            tagName = t2[_i];
            tag = t4.$index(0, tagName);
            if (tag == null)
              throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S(tagName) + '".'));
            t1.add$1(0, tag);
          }
      },
      defineTags$1: function(paths) {
        var t1, t2, t3, t4, _i, t5, t6, $parent, _i0, $name, tag;
        for (t1 = paths.split(" "), t2 = t1.length, t3 = this._tags, t4 = this.$ti, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          for (t5 = J.split$1$s(t1[_i], "/"), t6 = t5.length, $parent = null, _i0 = 0; _i0 < t5.length; t5.length === t6 || (0, H.throwConcurrentModificationError)(t5), ++_i0, $parent = tag) {
            $name = t5[_i0];
            tag = t3.$index(0, $name);
            if (tag == null) {
              tag = new Y._Tag($name, $parent, t4);
              t3.$indexSet(0, $name, tag);
            }
          }
      },
      find$1: [function(_, $name) {
        var resource = this._resources.$index(0, $name);
        if (resource == null)
          throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
        return resource.object;
      }, "call$1", "get$find", 5, 0, function() {
        return H.computeSignature(function(T) {
          return {func: 1, ret: T, args: [P.String]};
        }, this.$receiver, "ResourceSet");
      }],
      tryFind$1: function($name) {
        var resource = this._resources.$index(0, $name);
        if (resource == null)
          return;
        return resource.object;
      },
      getTags$1: function($name) {
        var resource, t1, t2, t3;
        resource = this._resources.$index(0, $name);
        if (resource == null)
          throw H.wrapException(P.ArgumentError$('Unknown resource "' + H.S($name) + '".'));
        t1 = resource._tags;
        t2 = P.String;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Y.ResourceSet_getTags_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
      },
      tryChoose$3$includeParents$tag: function(depth, includeParents, tag) {
        var t1, goalTag, label;
        t1 = {};
        t1.includeParents = includeParents;
        t1.includeParents = true;
        if (tag == null)
          return this._runQuery$3("", depth, new Y.ResourceSet_tryChoose_closure(this));
        goalTag = this._tags.$index(0, tag);
        label = goalTag.name;
        return this._runQuery$3(label, depth, new Y.ResourceSet_tryChoose_closure0(t1, this, goalTag));
      },
      tryChoose$1: function(depth) {
        return this.tryChoose$3$includeParents$tag(depth, null, null);
      },
      tryChoose$2$tag: function(depth, tag) {
        return this.tryChoose$3$includeParents$tag(depth, null, tag);
      },
      tryChooseMatching$2: function(depth, tags) {
        var t1, t2, tagObjects, tagNames;
        H.assertSubtype(tags, "$isIterable", [P.String], "$asIterable");
        t1 = [Y._Tag, H.getTypeArgumentByIndex(this, 0)];
        t2 = H.getRuntimeTypeArgument(tags, "Iterable", 0);
        tagObjects = H.MappedIterable_MappedIterable(tags, H.functionTypeCheck(new Y.ResourceSet_tryChooseMatching_closure(this), {func: 1, ret: t1, args: [t2]}), t2, t1);
        tagNames = P.List_List$from(tags, true, t2);
        C.JSArray_methods.sort$0(tagNames);
        return this._runQuery$3(C.JSArray_methods.join$1(tagNames, "|") + " (match)", depth, new Y.ResourceSet_tryChooseMatching_closure0(this, tagObjects));
      },
      _runQuery$3: function($name, depth, scale) {
        var t1, key, t2, query, resources, chances, totalChance, t3, chance, t4, t5;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(scale, {func: 1, ret: P.double, args: [[Y._Resource, t1]]});
        key = new Y._QueryKey($name, depth);
        t2 = this._queries;
        query = t2.$index(0, key);
        if (query == null) {
          resources = H.setRuntimeTypeInfo([], [[Y._Resource, t1]]);
          chances = H.setRuntimeTypeInfo([], [P.double]);
          for (t1 = this._resources, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), totalChance = 0; t1.moveNext$0();) {
            t3 = t1.get$current();
            chance = scale.call$1(t3);
            if (chance === 0)
              continue;
            t4 = t3.frequencyAtDepth$1(depth);
            t5 = t3.chanceAtDepth$1(depth);
            if (typeof chance !== "number")
              return chance.$mul();
            totalChance += Math.max(1e-7, chance * (t4 * t5));
            C.JSArray_methods.add$1(resources, t3);
            C.JSArray_methods.add$1(chances, totalChance);
          }
          query = new Y._ResourceQuery(depth, resources, chances, totalChance, this.$ti);
          t2.$indexSet(0, key, query);
        }
        return query.choose$0();
      },
      static: {
        ResourceSet$: function($T) {
          var t1 = P.String;
          return new Y.ResourceSet(P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Tag, $T]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [Y._Resource, $T]), P.LinkedHashMap_LinkedHashMap$_empty(Y._QueryKey, [Y._ResourceQuery, $T]), [$T]);
        }
      }
    },
    ResourceSet_getTags_closure: {
      "^": "Closure;$this",
      call$1: function(tag) {
        return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").name;
      },
      $signature: function() {
        return {func: 1, ret: P.String, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChoose_closure: {
      "^": "Closure;$this",
      call$1: function(_) {
        H.assertSubtype(_, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
        return 1;
      },
      $signature: function() {
        return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChoose_closure0: {
      "^": "Closure;_box_0,$this,goalTag",
      call$1: function(resource) {
        var thisTag, t1, scale, t2, t3;
        H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Resource");
        thisTag = this.goalTag;
        for (t1 = this._box_0, scale = 1; thisTag != null;) {
          for (t2 = resource._tags, t3 = new P._LinkedHashSetIterator(t2, t2._collection$_modifications, [H.getTypeArgumentByIndex(t2, 0)]), t3._collection$_cell = t2._collection$_first; t3.moveNext$0();)
            if (t3._current.contains$1(0, thisTag))
              return scale;
          if (!t1.includeParents)
            break;
          thisTag = thisTag.parent;
          scale /= 10;
        }
        return 0;
      },
      $signature: function() {
        return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChooseMatching_closure: {
      "^": "Closure;$this",
      call$1: function($name) {
        var tag;
        H.stringTypeCheck($name);
        tag = this.$this._tags.$index(0, $name);
        if (tag == null)
          throw H.wrapException(P.ArgumentError$('Unknown tag "' + H.S($name) + '".'));
        return tag;
      },
      $signature: function() {
        return {func: 1, ret: [Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)], args: [P.String]};
      }
    },
    ResourceSet_tryChooseMatching_closure0: {
      "^": "Closure;$this,tagObjects",
      call$1: function(resource) {
        var t1, t2, t3;
        t1 = this.$this;
        for (t2 = H.assertSubtype(resource, "$is_Resource", [H.getTypeArgumentByIndex(t1, 0)], "$as_Resource")._tags, t2 = P._LinkedHashSetIterator$(t2, t2._collection$_modifications, H.getTypeArgumentByIndex(t2, 0)), t3 = this.tagObjects; t2.moveNext$0();)
          if (t3.any$1(0, new Y.ResourceSet_tryChooseMatching__closure(t1, t2._current)))
            return 1;
        return 0;
      },
      $signature: function() {
        return {func: 1, ret: P.double, args: [[Y._Resource, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    ResourceSet_tryChooseMatching__closure: {
      "^": "Closure;$this,resourceTag",
      call$1: function(tag) {
        return H.assertSubtype(tag, "$is_Tag", [H.getTypeArgumentByIndex(this.$this, 0)], "$as_Tag").contains$1(0, this.resourceTag);
      },
      $signature: function() {
        return {func: 1, ret: P.bool, args: [[Y._Tag, H.getTypeArgumentByIndex(this.$this, 0)]]};
      }
    },
    _Resource: {
      "^": "Object;object,startDepth,endDepth,startFrequency,endFrequency,_tags,$ti",
      frequencyAtDepth$1: function(depth) {
        var t1, t2;
        t1 = this.startDepth;
        t2 = this.endDepth;
        if (t1 === t2)
          return this.startFrequency;
        return K.lerpDouble(depth, t1, t2, this.startFrequency, this.endFrequency);
      },
      chanceAtDepth$1: function(depth) {
        var t1, relative, deviation;
        t1 = this.startDepth;
        if (depth < t1) {
          relative = t1 - depth;
          deviation = 0.6 + depth * 0.2;
          return Math.exp(-0.5 * relative * relative / (deviation * deviation));
        } else {
          t1 = this.endDepth;
          if (depth > t1) {
            relative = depth - t1;
            deviation = 1 + depth * 0.1;
            return Math.exp(-0.5 * relative * relative / (deviation * deviation));
          } else
            return 1;
        }
      }
    },
    _Tag: {
      "^": "Object;name>,parent,$ti",
      contains$1: function(_, tag) {
        var thisTag;
        H.assertSubtype(tag, "$is_Tag", this.$ti, "$as_Tag");
        for (thisTag = this; thisTag != null; thisTag = thisTag.parent)
          if (tag === thisTag)
            return true;
        return false;
      }
    },
    _QueryKey: {
      "^": "Object;name>,depth<",
      get$hashCode: function(_) {
        return (J.get$hashCode$(this.name) ^ this.depth & 0x1FFFFFFF) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        return this.name == J.get$name$x(other) && this.depth === other.get$depth();
      },
      toString$0: function(_) {
        return H.S(this.name) + " (" + this.depth + ")";
      }
    },
    _ResourceQuery: {
      "^": "Object;depth<,resources,chances,totalChance,$ti",
      choose$0: function() {
        var t1, t, t2, last, t3, t4, first, middle, t5;
        t1 = this.resources;
        if (t1.length === 0)
          return;
        t = $.$get$rng().float$1(this.totalChance);
        t2 = t1.length;
        last = t2 - 1;
        for (t3 = this.chances, t4 = t3.length, first = 0; true;) {
          middle = C.JSInt_methods._tdivFast$1(first + last, 2);
          if (middle > 0) {
            t5 = middle - 1;
            if (t5 >= t4)
              return H.ioore(t3, t5);
            t5 = t < t3[t5];
          } else
            t5 = false;
          if (t5)
            last = middle - 1;
          else {
            if (middle < 0 || middle >= t4)
              return H.ioore(t3, middle);
            if (t < t3[middle]) {
              if (middle >= t2)
                return H.ioore(t1, middle);
              return t1[middle].object;
            } else
              first = middle + 1;
          }
        }
      }
    }
  }], ["", "package:hauberk/src/engine/hero/hero.dart",, G, {
    "^": "",
    experienceLevel: function(experience) {
      var level, t1;
      for (level = 1; level <= 50; ++level) {
        t1 = G.experienceLevelCost(level);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (experience < t1)
          return level - 1;
      }
      return 50;
    },
    experienceLevelCost: function(level) {
      if (level > 50)
        return;
      return C.JSNumber_methods.toInt$0(Math.pow(level - 1, 3)) * 1000;
    }
  }], ["", "package:hauberk/src/engine/hero/hero_class.dart",, T, {
    "^": "",
    HeroClass: {
      "^": "Object;name>,description,_proficiency,startingItems"
    }
  }], ["", "package:hauberk/src/engine/hero/hero_save.dart",, K, {
    "^": "",
    HeroSave: {
      "^": "Object;name>,race,heroClass,_inventory,_equipment,_home,_crucible,shops,experience,skills,gold,maxDepth,_lore,strength,agility,fortitude,intellect,will"
    }
  }], ["", "package:hauberk/src/engine/hero/lore.dart",, V, {
    "^": "",
    Lore: {
      "^": "Object;_seen,_slain"
    }
  }], ["", "package:hauberk/src/engine/hero/race.dart",, N, {
    "^": "",
    Race: {
      "^": "Object;name>,description,stats",
      rollStats$0: function() {
        var rolled, t1, t2, t3, base, t4, value, t5;
        rolled = P.LinkedHashMap_LinkedHashMap$_empty(D.Stat, P.int);
        for (t1 = this.stats, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
          t3 = t2.get$current();
          base = t1.$index(0, t3);
          t4 = $.$get$rng();
          t4 = t4._random.nextInt$1(4);
          if (typeof base !== "number")
            return base.$add();
          value = base + t4;
          t4 = (base / 2 | 0) + 30;
          while (true) {
            if (value < 50) {
              t5 = $.$get$rng();
              t5 = t5._random.nextInt$1(100) < t4;
            } else
              t5 = false;
            if (!t5)
              break;
            ++value;
          }
          rolled.$indexSet(0, t3, value);
        }
        return N.RaceStats$(this, rolled, $.$get$rng().range$1(100000));
      }
    },
    RaceStats: {
      "^": "Object;_race,_max,seed,_stats",
      RaceStats$3: function(_race, _max, seed) {
        var t1, t2, min, current, t3, t4, totalMin, totalMax, t5, t6, random, previous, level, lerp, points, gained, point, worstStats, worstError, t7, ideal, t8, error, max, stat;
        t1 = D.Stat;
        t2 = P.int;
        min = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        current = P.LinkedHashMap_LinkedHashMap$_empty(t1, t2);
        for (t3 = this._max, t4 = t3.get$keys(), t4 = t4.get$iterator(t4), totalMin = 0, totalMax = 0; t4.moveNext$0();) {
          t5 = t4.get$current();
          t6 = t3.$index(0, t5);
          if (typeof t6 !== "number")
            return t6.$tdiv();
          min.$indexSet(0, t5, 10 + C.JSInt_methods._tdivFast$1(t6, 15));
          t6 = min.$index(0, t5);
          if (typeof t6 !== "number")
            return H.iae(t6);
          totalMin += t6;
          t6 = t3.$index(0, t5);
          if (typeof t6 !== "number")
            return H.iae(t6);
          totalMax += t6;
          current.$indexSet(0, t5, 0);
        }
        random = new N.Rng();
        t4 = P._Random$(this.seed);
        random._random = t4;
        for (t4 = this._stats, t5 = [t1], previous = 0, level = 0; level < 50; ++level, previous = points) {
          lerp = new N.RaceStats_lerp(level);
          points = J.toInt$0$n(lerp.call$2(totalMin, totalMax));
          gained = points - previous;
          for (point = 0; point < gained; ++point) {
            worstStats = H.setRuntimeTypeInfo([], t5);
            for (t6 = t3.get$keys(), t6 = t6.get$iterator(t6), worstError = -100; t6.moveNext$0();) {
              t7 = t6.get$current();
              ideal = lerp.call$2(min.$index(0, t7), t3.$index(0, t7));
              t8 = current.$index(0, t7);
              if (typeof ideal !== "number")
                return ideal.$sub();
              if (typeof t8 !== "number")
                return H.iae(t8);
              error = ideal - t8;
              if (error > worstError) {
                worstStats = H.setRuntimeTypeInfo([t7], t5);
                worstError = error;
              } else if (error === worstError)
                C.JSArray_methods.add$1(worstStats, t7);
            }
            H.assertSubtype(worstStats, "$isList", t5, "$asList");
            max = worstStats.length;
            t6 = random._random.nextInt$1(max - 0);
            if (t6 < 0 || t6 >= worstStats.length)
              return H.ioore(worstStats, t6);
            stat = worstStats[t6];
            current.$indexSet(0, stat, J.$add$ansx(current.$index(0, stat), 1));
          }
          C.JSArray_methods.add$1(t4, P.LinkedHashMap_LinkedHashMap$from(current, t1, t2));
        }
      },
      get$name: function(_) {
        return this._race.name;
      },
      static: {
        RaceStats$: function(_race, _max, seed) {
          var t1 = new N.RaceStats(_race, _max, seed, H.setRuntimeTypeInfo([], [[P.Map, D.Stat, P.int]]));
          t1.RaceStats$3(_race, _max, seed);
          return t1;
        }
      }
    },
    RaceStats_lerp: {
      "^": "Closure:46;level",
      call$2: function(from, to) {
        var t = this.level / 49;
        if (typeof from !== "number")
          return H.iae(from);
        if (typeof to !== "number")
          return H.iae(to);
        return (1 - t) * from + t * to;
      }
    }
  }], ["", "package:hauberk/src/engine/hero/skill.dart",, M, {
    "^": "",
    Skill: {
      "^": "Object;",
      compareTo$1: function(_, other) {
        return C.JSInt_methods.compareTo$1(this._sortOrder, H.interceptedTypeCheck(other, "$isSkill")._sortOrder);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [M.Skill];
      }
    },
    TargetSkill: {
      "^": "Object;"
    },
    Discipline: {
      "^": "Skill;"
    },
    Spell: {
      "^": "Skill;"
    },
    SkillSet: {
      "^": "Object;_levels,_points"
    }
  }], ["", "package:hauberk/src/engine/hero/stat.dart",, D, {
    "^": "",
    Property: {
      "^": "Object;0_value,$ti",
      set$_value: function(_value) {
        this._value = H.assertSubtypeOfRuntimeType(_value, H.getRuntimeTypeArgument(this, "Property", 0));
      }
    },
    Stat: {
      "^": "Object;name>"
    },
    StatBase: {
      "^": "Property;",
      get$name: function(_) {
        return this.get$_stat().name;
      },
      bindHero$1: function(hero) {
        var t1, t2, t3;
        this._hero = hero;
        t1 = this.get$_stat();
        t2 = hero.race._stats;
        t3 = G.experienceLevel(this._hero.experience) - 1;
        if (t3 < 0 || t3 >= t2.length)
          return H.ioore(t2, t3);
        this.set$_value(H.intTypeCheck(J.clamp$2$n(t2[t3].$index(0, t1), 1, 60)));
      },
      $asProperty: function() {
        return [P.int];
      }
    },
    Strength: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Strength;
      }
    },
    Agility: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Agility;
      }
    },
    Fortitude: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Fortitude;
      }
    },
    Intellect: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Intellect;
      }
    },
    Will: {
      "^": "StatBase;0_hero,0_value",
      get$_stat: function() {
        return C.Stat_Will;
      }
    }
  }], ["", "package:hauberk/src/engine/items/affix.dart",, L, {
    "^": "",
    Affix: {
      "^": "Object;name>,displayName,heftScale,weightBonus,strikeBonus,damageScale,damageBonus,brand,armor,_affix$_resists,_affix$_statBonuses,priceBonus,priceScale",
      resist$2: [function(element, power) {
        this._affix$_resists.$indexSet(0, H.interceptedTypeCheck(element, "$isElement0"), H.intTypeCheck(power));
      }, "call$2", "get$resist", 8, 0, 47],
      setStatBonus$2: [function(stat, bonus) {
        this._affix$_statBonuses.$indexSet(0, H.interceptedTypeCheck(stat, "$isStat"), H.intTypeCheck(bonus));
      }, "call$2", "get$setStatBonus", 8, 0, 48],
      toString$0: function(_) {
        return this.name;
      }
    }
  }], ["", "package:hauberk/src/engine/items/equipment.dart",, E, {
    "^": "",
    Equipment: {
      "^": "_Equipment_IterableBase_ItemCollection;slotTypes,slots",
      get$location: function(_) {
        return C.ItemLocation_A8D;
      },
      get$length: function(_) {
        return C.JSArray_methods.fold$1$2(this.slots, 0, new E.Equipment_length_closure(), P.int);
      },
      $index: function(_, index) {
        var i;
        for (i = 0; i < 9; ++i)
          ;
        throw H.wrapException("unreachable");
      },
      get$iterator: function(_) {
        var t1, t2, t3;
        t1 = this.slots;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.functionTypeCheck(new E.Equipment_iterator_closure(), {func: 1, ret: P.bool, args: [t2]});
        return new H.WhereIterator(C.JSArray_methods.get$iterator(t1), t3, [t2]);
      },
      $asIterable: function() {
        return [R.Item];
      }
    },
    Equipment_length_closure: {
      "^": "Closure:49;",
      call$2: function(count, item) {
        var t1;
        H.intTypeCheck(count);
        t1 = H.interceptedTypeCheck(item, "$isItem") == null ? 0 : 1;
        if (typeof count !== "number")
          return count.$add();
        return count + t1;
      }
    },
    Equipment_iterator_closure: {
      "^": "Closure:50;",
      call$1: function(item) {
        return H.interceptedTypeCheck(item, "$isItem") != null;
      }
    },
    _Equipment_IterableBase_ItemCollection: {
      "^": "IterableBase+ItemCollection;"
    }
  }], ["", "package:hauberk/src/engine/items/inventory.dart",, O, {
    "^": "",
    ItemLocation: {
      "^": "Object;name>,emptyDescription"
    },
    ItemCollection: {
      "^": "Object;",
      get$name: function(_) {
        return this.get$location(this).name;
      }
    },
    Inventory: {
      "^": "_Inventory_IterableMixin_ItemCollection;location>,_items,_capacity,0_lastUnequipped",
      get$length: function(_) {
        return this._items.length;
      },
      $index: function(_, index) {
        var t1 = this._items;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      },
      tryAdd$2$wasUnequipped: [function(item, wasUnequipped) {
        var adding, t1, t2, t3, _i, t4;
        adding = item._count;
        for (t1 = this._items, t2 = t1.length, t3 = adding, _i = 0; t4 = t1.length, _i < t4; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          t1[_i].stack$1(item);
          t3 = item._count;
          if (t3 === 0)
            return new O.AddItemResult(adding, 0);
        }
        if (t4 >= this._capacity) {
          if (typeof adding !== "number")
            return adding.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          return new O.AddItemResult(adding - t3, t3);
        }
        C.JSArray_methods.add$1(t1, item);
        C.JSArray_methods.sort$0(t1);
        return new O.AddItemResult(adding, 0);
      }, function(item) {
        return this.tryAdd$2$wasUnequipped(item, false);
      }, "tryAdd$1", "call$2$wasUnequipped", "call$1", "get$tryAdd", 4, 3, 51],
      get$iterator: function(_) {
        var t1 = this._items;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      $asIterableMixin: function() {
        return [R.Item];
      },
      $asIterable: function() {
        return [R.Item];
      },
      static: {
        Inventory$: function($location, _capacity, items) {
          var t1 = H.setRuntimeTypeInfo([], [R.Item]);
          return new O.Inventory($location, t1, _capacity);
        }
      }
    },
    AddItemResult: {
      "^": "Object;added,remaining"
    },
    _Inventory_IterableMixin_ItemCollection: {
      "^": "IterableMixin+ItemCollection;"
    }
  }], ["", "package:hauberk/src/engine/items/item.dart",, R, {
    "^": "",
    Item: {
      "^": "Object;type,prefix,suffix,_count",
      compareTo$1: function(_, other) {
        var t1, t2;
        H.interceptedTypeCheck(other, "$isItem");
        t1 = this.type.sortIndex;
        t2 = other.type.sortIndex;
        if (t1 !== t2)
          return C.JSInt_methods.compareTo$1(t1, t2);
        t1 = this._count;
        t2 = other._count;
        if (t1 != t2)
          return J.compareTo$1$ns(t2, t1);
        return 0;
      },
      canStack$1: function(item) {
        if (this.type != item.type)
          return false;
        if (this.prefix != null || item.prefix != null)
          return false;
        if (this.suffix != null || item.suffix != null)
          return false;
        return true;
      },
      stack$1: function(item) {
        var t1, t2, total;
        if (!this.canStack$1(item))
          return;
        t1 = this._count;
        t2 = item._count;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        total = t1 + t2;
        t1 = this.type.maxStack;
        if (total <= t1) {
          this._count = total;
          item._count = 0;
        } else {
          this._count = t1;
          item._count = total - t1;
        }
      },
      toString$0: function(_) {
        var $name, t1, t2, text, quantity;
        $name = this.type.quantifiableName;
        t1 = this.prefix;
        if (t1 != null)
          $name = t1.displayName + " " + H.S($name);
        t1 = this.suffix;
        if (t1 != null)
          $name = H.S($name) + " " + t1.displayName;
        t1 = this._count;
        t2 = t1 === 1;
        if (t2)
          if (J.getInterceptor$s($name).startsWith$1($name, "(a) ")) {
            text = C.JSString_methods.substring$1($name, 4);
            quantity = "a";
          } else {
            if (0 >= $name.length)
              return H.ioore($name, 0);
            quantity = C.JSString_methods.contains$1("aeiouAEIOU", $name[0]) ? "an" : "a";
            text = $name;
          }
        else {
          quantity = J.toString$0$(t1);
          text = $name;
        }
        return quantity + " " + H.S(O.Log__categorize(text, true, t2));
      },
      $isComparable: 1,
      $asComparable: function() {
        return [R.Item];
      },
      $isNoun: 1
    }
  }], ["", "package:hauberk/src/engine/items/item_type.dart",, L, {
    "^": "",
    Drop: {
      "^": "Object;"
    },
    Toss: {
      "^": "Object;breakage,attack,use"
    },
    ItemType: {
      "^": "Object;quantifiableName,appearance,depth<,sortIndex,equipSlot,weaponType,use,attack,toss,armor,price,weight,heft,emanationLevel,isTreasure,maxStack,destroyChance,fuel,skills",
      get$name: function(_) {
        return O.Log__categorize(this.quantifiableName, false, true);
      },
      toString$0: function(_) {
        return O.Log__categorize(this.quantifiableName, false, true);
      }
    }
  }], ["", "package:hauberk/src/engine/items/shop.dart",, O, {
    "^": "",
    Shop: {
      "^": "Object;_drop,name>",
      update$1: function(inventory) {
        var t1, desiredSize, t2, max, t3, t4, item;
        t1 = $.$get$rng();
        desiredSize = C.JSNumber_methods.toInt$0(t1.float$2(7.8, 18.2));
        for (t2 = inventory._items; max = t2.length, max > desiredSize;) {
          t3 = t1._random.nextInt$1(max - 0);
          t4 = t2.length;
          if (t3 < 0 || t3 >= t4)
            return H.ioore(t2, t3);
          item = t2[t3];
          if (t3 >= t4)
            H.throwExpression(P.RangeError$value(t3, null, null));
          t2.splice(t3, 1)[0];
          if (inventory._lastUnequipped == item)
            inventory._lastUnequipped = null;
        }
        for (t1 = this._drop, t3 = inventory.get$tryAdd(); t2.length < desiredSize;)
          t1.spawnDrop$2(1, t3);
      }
    }
  }], ["", "package:hauberk/src/engine/monster/breed.dart",, B, {
    "^": "",
    BreedRef: {
      "^": "Object;_breed$_name,0_breed",
      static: {
        BreedRef_resolve: function(resolver) {
          var t1, t2, _i, ref;
          H.functionTypeCheck(resolver, {func: 1, ret: B.Breed, args: [P.String]});
          for (t1 = $.$get$BreedRef__unresolved(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
            ref = t1[_i];
            ref._breed = H.interceptedTypeCheck(resolver.call$1(ref._breed$_name), "$isBreed");
          }
          C.JSArray_methods.set$length($.$get$BreedRef__unresolved(), 0);
        }
      }
    },
    Breed: {
      "^": "Object;pronoun,appearance,depth<,attacks,moves,maxHealth,tracking,vision,hearing,meander,speed,drop,location,motility,flags,dodge,emanationLevel,defenses,countMin<,countMax<,minions,_breed$_name,stain,groups,description",
      get$name: function(_) {
        return O.Log__categorize(this._breed$_name, false, true);
      },
      spawnAll$0: function() {
        var breeds, count, i, t1, t2, _i, minion, t3, max, max0;
        breeds = H.setRuntimeTypeInfo([], [B.Breed]);
        count = $.$get$rng().inclusive$2(this.countMin, this.countMax);
        for (i = 0; i < count; ++i)
          C.JSArray_methods.add$1(breeds, this);
        for (t1 = this.minions, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          minion = t1[_i];
          t3 = $.$get$rng();
          max = minion.get$countMin();
          max0 = minion.get$countMax();
          count = t3._random.nextInt$1(max0 + 1 - max) + max;
          for (i = 0; i < count; ++i)
            C.JSArray_methods.add$1(breeds, minion.get$breed()._breed);
        }
        return breeds;
      },
      toString$0: function(_) {
        return O.Log__categorize(this._breed$_name, false, true);
      }
    },
    SpawnLocation: {
      "^": "Object;index,_breed$_name",
      toString$0: function(_) {
        return this._breed$_name;
      }
    },
    Minion: {
      "^": "Object;breed<,countMin<,countMax<"
    },
    BreedFlags: {
      "^": "Object;berzerk,cowardly,fearless,immobile,protective,unique",
      toString$0: function(_) {
        var names = [];
        if (this.berzerk)
          names.push("berzerk");
        if (this.cowardly)
          names.push("cowardly");
        if (this.fearless)
          names.push("fearless");
        if (this.immobile)
          names.push("immobile");
        if (this.protective)
          names.push("protective");
        if (this.unique)
          names.push("unique");
        return C.JSArray_methods.join$1(names, " ");
      }
    }
  }], ["", "package:hauberk/src/engine/monster/move.dart",, O, {
    "^": "",
    Move: {
      "^": "Object;"
    },
    RangedMove: {
      "^": "Move;"
    }
  }], ["", "package:hauberk/src/engine/stage/bucket_queue.dart",, B, {
    "^": "",
    BucketQueue: {
      "^": "Object;_buckets,_bucket,$ti"
    }
  }], ["", "package:hauberk/src/engine/stage/fov.dart",, B, {
    "^": "",
    Fov: {
      "^": "Object;_fov$_stage,0_shadows"
    },
    _Shadow: {
      "^": "Object;"
    }
  }], ["", "package:hauberk/src/engine/stage/lighting.dart",, F, {
    "^": "",
    Lighting: {
      "^": "Object;_lighting$_stage,_floorLight,_actorLight,_fov,_lighting$_queue,_floorLightDirty,_actorLightDirty,_visibilityDirty"
    }
  }], ["", "package:hauberk/src/engine/stage/sound.dart",, Z, {
    "^": "",
    Sound: {
      "^": "Object;_sound$_stage,0_flow"
    }
  }], ["", "package:hauberk/src/engine/stage/stage.dart",, L, {
    "^": "",
    Stage: {
      "^": "Object;game,_actors,0_lighting,0_sound,_currentActorIndex,tiles,_itemsByTile,_actorsByTile",
      $index: function(_, pos) {
        return this.tiles.$index(0, H.interceptedTypeCheck(pos, "$isVec"));
      },
      static: {
        Stage$: function(width, height, game) {
          var t1, t2, t3, t4;
          t1 = S.Actor;
          t2 = H.setRuntimeTypeInfo([], [t1]);
          t3 = L.Vec;
          t4 = Q.Tile;
          t4 = new M.Array2D(P.List_List$filled(width * height, null, false, t4), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [t4]);
          t4.generate$1(new L.Stage_closure());
          t1 = new L.Stage(game, t2, 0, t4, P.LinkedHashMap_LinkedHashMap$_empty(t3, O.Inventory), M.Array2D$(width, height, null, t1));
          t4 = H.setRuntimeTypeInfo([], [[P.Queue, L.Vec]]);
          t2 = P.int;
          t1._lighting = new F.Lighting(t1, M.Array2D$(width, height, 0, t2), M.Array2D$(width, height, 0, t2), new B.Fov(t1), new B.BucketQueue(t4, 0, [t3]), true, true, true);
          t1._sound = new Z.Sound(t1);
          return t1;
        }
      }
    },
    Stage_closure: {
      "^": "Closure:52;",
      call$0: function() {
        return new Q.Tile(false, 0, 0, 0, false, $.$get$Element_none(), 0);
      }
    }
  }], ["", "package:hauberk/src/engine/stage/tile.dart",, Q, {
    "^": "",
    Motility: {
      "^": "Object;_bitMask",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof Q.Motility)
          return this._bitMask === other._bitMask;
        return false;
      },
      $or: function(_, other) {
        return new Q.Motility(this._bitMask | other._bitMask);
      },
      toString$0: function(_) {
        return C.JSInt_methods.toString$0(this._bitMask);
      },
      static: {
        Motility$_: function(_bitMask) {
          return new Q.Motility(_bitMask);
        }
      }
    },
    TileType: {
      "^": "Object;name>,isExit,emanation,appearance,motility,onClose,onOpen"
    },
    Tile: {
      "^": "Object;0type,_isOccluded,_fallOff,illumination,_appliedEmanation,_isExplored,element,substance"
    }
  }], ["", "package:malison/src/glyph.dart",, L, {
    "^": "",
    Color: {
      "^": "Object;r,g,b",
      get$hashCode: function(_) {
        return (this.r & 0x1FFFFFFF ^ this.g & 0x1FFFFFFF ^ this.b & 0x1FFFFFFF) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof L.Color)
          return this.r === other.r && this.g === other.g && this.b === other.b;
        return false;
      },
      blend$2: function(other, fractionOther) {
        var fractionThis = 1 - fractionOther;
        return new L.Color(C.JSNumber_methods.toInt$0(this.r * fractionThis + other.r * fractionOther), C.JSNumber_methods.toInt$0(this.g * fractionThis + other.g * fractionOther), C.JSNumber_methods.toInt$0(this.b * fractionThis + other.b * fractionOther));
      }
    },
    Glyph: {
      "^": "Object;char,fore,back",
      get$hashCode: function(_) {
        var t1, t2;
        t1 = this.fore;
        t2 = this.back;
        return (J.get$hashCode$(this.char) ^ t1.get$hashCode(t1) ^ t2.get$hashCode(t2)) >>> 0;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof L.Glyph)
          return this.char == other.char && this.fore.$eq(0, other.fore) && this.back.$eq(0, other.back);
        return false;
      },
      static: {
        Glyph$fromCharCode: function(char, fore, $back) {
          var t1 = fore != null ? fore : C.Color_255_255_255;
          return new L.Glyph(char, t1, $back != null ? $back : C.Color_0_0_0);
        }
      }
    }
  }], ["", "package:piecemeal/src/array2d.dart",, M, {
    "^": "",
    Array2D: {
      "^": "IterableBase;_elements,bounds,$ti",
      $index: function(_, pos) {
        H.interceptedTypeCheck(pos, "$isVec");
        return C.JSArray_methods.$index(this._elements, pos.y.$mul(0, this.bounds.size.x).$add(0, pos.x));
      },
      generate$1: function(generator) {
        var t1, t2, t3, t4, t5, t6, t7;
        t1 = H.getTypeArgumentByIndex(this, 0);
        if (H.functionTypeTest(generator, {func: 1, ret: t1}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._x;
            t6 = t3._y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$0(), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [L.Vec]}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._x;
            t6 = t3._y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$1(new L.Vec(t5, t6)), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else if (H.functionTypeTest(generator, {func: 1, ret: t1, args: [P.int, P.int]}))
          for (t2 = this.bounds, t3 = X.RectIterator$(t2), t4 = this._elements, t2 = t2.size.x; t3.moveNext$0();) {
            t5 = t3._x;
            t6 = t3._y;
            t7 = H.assertSubtypeOfRuntimeType(generator.call$2(t5, t6), t1);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t5 !== "number")
              return H.iae(t5);
            C.JSArray_methods.$indexSet(t4, t6 * t2 + t5, t7);
          }
        else
          throw H.wrapException(P.ArgumentError$("Generator must take zero arguments, one Vec, or two ints."));
      },
      get$iterator: function(_) {
        var t1 = this._elements;
        return new J.ArrayIterator(t1, t1.length, 0, [H.getTypeArgumentByIndex(t1, 0)]);
      },
      static: {
        Array2D$: function(width, height, value, $T) {
          if (typeof width !== "number")
            return width.$mul();
          return new M.Array2D(P.List_List$filled(width * height, value, false, $T), new X.Rect(new L.Vec(0, 0), new L.Vec(width, height)), [$T]);
        }
      }
    }
  }], ["", "package:piecemeal/src/rect.dart",, X, {
    "^": "",
    Rect: {
      "^": "IterableBase;pos,size",
      toString$0: function(_) {
        return "(" + this.pos.toString$0(0) + ")-(" + this.size.toString$0(0) + ")";
      },
      get$iterator: function(_) {
        var t1, t2, t3;
        t1 = new X.RectIterator(this);
        t2 = this.pos;
        t3 = t2.x;
        if (typeof t3 !== "number")
          return t3.$sub();
        t1._x = t3 - 1;
        t1._y = t2.y;
        return t1;
      },
      $asIterable: function() {
        return [L.Vec];
      }
    },
    RectIterator: {
      "^": "Object;_rect,0_x,0_y",
      get$current: function() {
        return new L.Vec(this._x, this._y);
      },
      moveNext$0: function() {
        var t1, t2, t3, t4, t5;
        t1 = this._x;
        if (typeof t1 !== "number")
          return t1.$add();
        ++t1;
        this._x = t1;
        t2 = this._rect;
        t3 = t2.pos;
        t4 = t3.x;
        t2 = t2.size;
        t5 = t2.x;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (t1 >= Math.max(t4, t4 + t5)) {
          this._x = t4;
          ++this._y;
        }
        t1 = t3.y;
        return this._y < Math.max(t1, t1 + t2.y);
      },
      $isIterator: 1,
      $asIterator: function() {
        return [L.Vec];
      },
      static: {
        RectIterator$: function(_rect) {
          var t1, t2, t3;
          t1 = new X.RectIterator(_rect);
          t2 = _rect.pos;
          t3 = t2.x;
          if (typeof t3 !== "number")
            return t3.$sub();
          t1._x = t3 - 1;
          t1._y = t2.y;
          return t1;
        }
      }
    }
  }], ["", "package:piecemeal/src/rng.dart",, N, {
    "^": "",
    Rng: {
      "^": "Object;0_random",
      range$2: function(minOrMax, max) {
        return this._random.nextInt$1(minOrMax - 0);
      },
      range$1: function(minOrMax) {
        return this.range$2(minOrMax, null);
      },
      inclusive$2: function(minOrMax, max) {
        if (max == null) {
          max = minOrMax;
          minOrMax = 0;
        }
        return this._random.nextInt$1(max + 1 - minOrMax) + minOrMax;
      },
      inclusive$1: function(minOrMax) {
        return this.inclusive$2(minOrMax, null);
      },
      float$2: function(minOrMax, max) {
        var t1 = this._random;
        if (max == null)
          return t1.nextDouble$0() * minOrMax;
        else
          return t1.nextDouble$0() * (max - minOrMax) + minOrMax;
      },
      float$1: function(minOrMax) {
        return this.float$2(minOrMax, null);
      },
      triangleInt$2: function(center, range) {
        var x = this.inclusive$1(range);
        if (x <= this.inclusive$1(range))
          return center + x;
        else
          return center - range - 1 + x;
      },
      taper$2: function(start, chanceOfIncrement) {
        while (true) {
          if (!(this._random.nextInt$1(chanceOfIncrement - 0) === 0))
            break;
          ++start;
        }
        return start;
      },
      static: {
        Rng$: function(seed) {
          var t1, t2;
          t1 = new N.Rng();
          t2 = P._Random$(seed);
          t1._random = t2;
          return t1;
        }
      }
    }
  }], ["", "package:piecemeal/src/vec.dart",, L, {
    "^": "",
    VecBase: {
      "^": "Object;",
      get$lengthSquared: function() {
        var t1, t2;
        t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = this.y;
        return t1 * t1 + t2 * t2;
      },
      get$length: function(_) {
        return Math.sqrt(this.get$lengthSquared());
      },
      $add: function(_, other) {
        var t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$add();
        return new L.Vec(t1 + other, this.y + other);
      },
      $gt: function(_, other) {
        var t1 = this.get$lengthSquared();
        return t1 > other * other;
      },
      toString$0: function(_) {
        return H.S(this.x) + ", " + this.y;
      }
    },
    Vec: {
      "^": "VecBase;x,y",
      get$hashCode: function(_) {
        var t1 = this.x;
        if (typeof t1 !== "number")
          return t1.$xor();
        return (t1 ^ this.y) >>> 0 & 0x1FFFFFFF;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (other instanceof L.VecBase)
          return this.x == other.x && this.y === other.y;
        return false;
      }
    }
  }], ["", "histogram.dart",, T, {
    "^": "",
    Histogram: {
      "^": "Object;_counts,$ti",
      add$1: function(_, object) {
        var t1, t2;
        H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0));
        t1 = this._counts;
        t1.putIfAbsent$2(object, new T.Histogram_add_closure());
        t2 = J.$add$ansx(t1.$index(0, object), 1);
        t1.$indexSet(0, object, t2);
        return t2;
      },
      count$1: function(object) {
        var t1;
        H.assertSubtypeOfRuntimeType(object, H.getTypeArgumentByIndex(this, 0));
        t1 = this._counts;
        if (!t1.containsKey$1(object))
          return 0;
        return t1.$index(0, object);
      },
      descending$0: function() {
        var t1, objects;
        t1 = this._counts.get$keys();
        objects = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.sort$1(objects, new T.Histogram_descending_closure(this));
        return objects;
      }
    },
    Histogram_add_closure: {
      "^": "Closure:53;",
      call$0: function() {
        return 0;
      }
    },
    Histogram_descending_closure: {
      "^": "Closure;$this",
      call$2: function(a, b) {
        var t1, t2;
        t1 = this.$this;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        H.assertSubtypeOfRuntimeType(a, t2);
        t1 = t1._counts;
        return J.compareTo$1$ns(t1.$index(0, H.assertSubtypeOfRuntimeType(b, t2)), t1.$index(0, a));
      },
      $signature: function() {
        var t1 = H.getTypeArgumentByIndex(this.$this, 0);
        return {func: 1, ret: P.int, args: [t1, t1]};
      }
    }
  }], ["", "levels.dart",, V, {
    "^": "",
    main: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, tableCells, $content;
      $.$get$Items_types().defineTags$1("item");
      t1 = R.category(199, 10, null);
      t1.tag$1(0, "item");
      t2 = $.$get$Elements_earth();
      t1.toss$4$breakage$damage$element$range(10, 3, t2, 7);
      R.item("Rock", 1, C.Color_142_82_55, 1, null);
      t1 = R.category(252, 4, null);
      t1.tag$1(0, "item");
      t1.toss$3$breakage$damage$range(30, 2, 5);
      R.item("Skull", 1, C.Color_132_126_135, 1, null);
      t1 = R.category(162, null, null);
      t1.tag$1(0, "treasure/coin");
      t1._isTreasure = true;
      R.item("Copper Coins", 1, C.Color_122_44_24, null, 4);
      R.item("Bronze Coins", 7, C.Color_142_82_55, null, 8);
      R.item("Silver Coins", 11, C.Color_129_231_235, null, 20);
      R.item("Electrum Coins", 20, C.Color_255_238_168, null, 50);
      R.item("Gold Coins", 30, C.Color_222_156_33, null, 100);
      R.item("Platinum Coins", 40, C.Color_132_126_135, null, 300);
      t1 = R.category(36, null, null);
      t1.tag$1(0, "treasure/bar");
      t1._isTreasure = true;
      R.item("Copper Bar", 35, C.Color_122_44_24, null, 150);
      R.item("Bronze Bar", 50, C.Color_142_82_55, null, 500);
      R.item("Silver Bar", 60, C.Color_129_231_235, null, 800);
      R.item("Electrum Bar", 70, C.Color_255_238_168, null, 1200);
      R.item("Gold Bar", 80, C.Color_222_156_33, null, 2000);
      R.item("Platinum Bar", 90, C.Color_132_126_135, null, 3000);
      t1 = R.category(233, 20, null);
      t3 = $.$get$Elements_fire();
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 1;
      R.item("Flower", 1, C.Color_64_163_229, 1, null);
      R.item("Insect Wing", 1, C.Color_86_30_138, 1, null);
      R.item("Red Feather", 2, C.Color_204_35_57, 1, null);
      R.item("Black Feather", 2, C.Color_38_38_56, 1, null);
      t1 = R.category(233, 4, null);
      t1._destroyChance.$indexSet(0, t3, 20);
      t1._fuel = 3;
      R.item("Fur Pelt", 1, C.Color_142_82_55, 1, null);
      R.item("Fox Pelt", 2, C.Color_122_44_24, 1, null);
      t1 = R.category(161, null, null);
      t1.tag$1(0, "item/food");
      t1._destroyChance.$indexSet(0, t3, 20);
      t1._fuel = 3;
      t1 = R.item("Stale Biscuit", 1, C.Color_189_144_108, 1, null);
      t1._maxStack = 6;
      t1.food$1(100);
      t1 = R.item("Loa[f|ves] of Bread", 3, C.Color_142_82_55, 1, 4);
      t1._maxStack = 6;
      t1.food$1(200);
      t1 = R.category(188, null, null);
      t1.tag$1(0, "item/food");
      t1._destroyChance.$indexSet(0, t3, 15);
      t1._fuel = 2;
      t1 = R.item("Chunk[s] of Meat", 6, C.Color_64_31_36, 1, 10);
      t1._maxStack = 4;
      t1.food$1(400);
      t1 = R.item("Piece[s] of Jerky", 10, C.Color_142_82_55, 1, 20);
      t1._maxStack = 12;
      t1.food$1(600);
      t1 = R.category(172, null, "hit[s]");
      t1.tag$1(0, "item/light");
      t1.toss$1$breakage(70);
      t1 = R.item("Tallow Candle", 1, C.Color_189_144_108, 1, 6);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(2, t3, 8);
      t1.lightSource$2$level$range(2, 8);
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 20;
      t1 = R.item("Wax Candle", 4, C.Color_226_223_240, 1, 8);
      t1._maxStack = 10;
      t1.toss$3$damage$element$range(3, t3, 8);
      t1.lightSource$2$level$range(3, 10);
      t1._destroyChance.$indexSet(0, t3, 40);
      t1._fuel = 25;
      t1 = R.item("Oil Lamp", 4, C.Color_64_31_36, 1, 18);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(10, t3, 8);
      t1.lightSource$2$level$range(4, 13);
      t1._destroyChance.$indexSet(0, t3, 50);
      t1._fuel = 40;
      t1 = R.item("Torch[es]", 8, C.Color_142_82_55, 1, 16);
      t1._maxStack = 4;
      t1.toss$3$damage$element$range(6, t3, 10);
      t1.lightSource$2$level$range(5, 18);
      t1._destroyChance.$indexSet(0, t3, 60);
      t1._fuel = 60;
      t1 = R.item("Lantern", 15, C.Color_222_156_33, 0.3, 78);
      t1.toss$3$damage$element$range(5, t3, 5);
      t1.lightSource$2$level$range(6, 24);
      G.potions();
      G.scrolls();
      t1 = R.category(189, 3, null);
      t1.tag$1(0, "magic/book/sorcery");
      t1.toss$3$breakage$damage$range(25, 1, 3);
      t1._destroyChance.$indexSet(0, t3, 5);
      t1._fuel = 10;
      t1 = R.item('Spellbook "Elemental Primer"', 1, C.Color_84_0_39, 0.05, 100);
      t4 = P.String;
      t5 = [t4];
      t6 = H.setRuntimeTypeInfo(["Sense Items", "Flee", "Escape", "Disappear", "Icicle", "Brilliant Beam", "Windstorm", "Fire Barrier", "Tidal Wave"], t5);
      t1.toString;
      H.assertSubtype(t6, "$isList", t5, "$asList");
      t5 = M.Skill;
      t7 = H.getTypeArgumentByIndex(t6, 0);
      C.JSArray_methods.addAll$1(t1._skills, new H.MappedListIterable(t6, H.functionTypeCheck(Q.skills_Skills_find$closure(), {func: 1, ret: t5, args: [t7]}), [t7, t5]));
      t5 = R.category(225, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/club");
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Club Mastery"));
      t5.toss$2$breakage$range(25, 5);
      t5 = R.item("Stick", 1, C.Color_142_82_55, 0.5, null);
      t5.weapon$2$heft(8, 6);
      t5.toss$1$damage(3);
      t5._destroyChance.$indexSet(0, t3, 10);
      t5._fuel = 10;
      t5 = R.item("Cudgel", 3, C.Color_132_126_135, 0.5, 20);
      t5.weapon$2$heft(10, 8);
      t5.toss$1$damage(4);
      t5._destroyChance.$indexSet(0, t3, 5);
      t5._fuel = 10;
      t5 = R.item("Club", 6, C.Color_64_31_36, 0.5, 40);
      t5.weapon$2$heft(12, 11);
      t5.toss$1$damage(5);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 10;
      t5 = R.category(237, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/staff");
      t5.toss$2$breakage$range(35, 4);
      t5 = R.item("Walking Stick", 2, C.Color_142_82_55, 0.5, 10);
      t5.weapon$2$heft(10, 9);
      t5.toss$1$damage(3);
      t5._destroyChance.$indexSet(0, t3, 5);
      t5._fuel = 15;
      t5 = R.item("Sta[ff|aves]", 5, C.Color_64_31_36, 0.5, 50);
      t5.weapon$2$heft(14, 11);
      t5.toss$1$damage(5);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 15;
      t5 = R.item("Quartersta[ff|aves]", 11, C.Color_132_126_135, 0.5, 80);
      t5.weapon$2$heft(24, 13);
      t5.toss$1$damage(8);
      t5._destroyChance.$indexSet(0, t3, 2);
      t5._fuel = 15;
      t5 = R.category(243, null, "bash[es]");
      t5.tag$1(0, "equipment/weapon/hammer");
      t5.toss$2$breakage$range(15, 5);
      t5 = R.item("Hammer", 27, C.Color_142_82_55, 0.5, 120);
      t5.weapon$2$heft(32, 22);
      t5.toss$1$damage(12);
      t5 = R.item("Mattock", 39, C.Color_64_31_36, 0.5, 240);
      t5.weapon$2$heft(40, 26);
      t5.toss$1$damage(16);
      t5 = R.item("War Hammer", 45, C.Color_132_126_135, 0.5, 400);
      t5.weapon$2$heft(48, 30);
      t5.toss$1$damage(20);
      t5 = R.category(250, null, "bash[es]");
      t5.tag$1(0, "equipment/weapon/mace");
      t5.toss$2$breakage$range(15, 4);
      t5 = R.item("Morningstar", 24, C.Color_132_126_135, 0.5, 130);
      t5.weapon$2$heft(26, 17);
      t5.toss$1$damage(11);
      t5 = R.item("Mace", 33, C.Color_63_64_114, 0.5, 310);
      t5.weapon$2$heft(36, 23);
      t5.toss$1$damage(16);
      t5 = R.category(241, null, "whip[s]");
      t5.tag$1(0, "equipment/weapon/whip");
      t5.toss$2$breakage$range(25, 4);
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Whip Mastery"));
      t5 = R.item("Whip", 4, C.Color_142_82_55, 0.5, 40);
      t5.weapon$2$heft(10, 7);
      t5.toss$1$damage(1);
      t5._destroyChance.$indexSet(0, t3, 10);
      t5._fuel = 5;
      t5 = R.item("Chain Whip", 15, C.Color_132_126_135, 0.5, 230);
      t5.weapon$2$heft(18, 15);
      t5.toss$1$damage(2);
      t5 = R.item("Flail", 27, C.Color_63_64_114, 0.5, 350);
      t5.weapon$2$heft(28, 24);
      t5.toss$1$damage(4);
      t5 = R.category(209, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/dagger");
      t5.toss$2$breakage$range(2, 8);
      t5 = R.item("Kni[fe|ves]", 3, C.Color_38_38_56, 0.5, 20);
      t5.weapon$2$heft(8, 5);
      t5.toss$1$damage(8);
      t5 = R.item("Dirk", 4, C.Color_132_126_135, 0.5, 30);
      t5.weapon$2$heft(10, 6);
      t5.toss$1$damage(10);
      t5 = R.item("Dagger", 6, C.Color_64_163_229, 0.5, 50);
      t5.weapon$2$heft(12, 7);
      t5.toss$1$damage(12);
      t5 = R.item("Stiletto[es]", 10, C.Color_63_64_114, 0.5, 80);
      t5.weapon$2$heft(14, 6);
      t5.toss$1$damage(14);
      t5 = R.item("Rondel", 20, C.Color_129_231_235, 0.5, 130);
      t5.weapon$2$heft(16, 9);
      t5.toss$1$damage(16);
      t5 = R.item("Baselard", 30, C.Color_222_156_33, 0.5, 200);
      t5.weapon$2$heft(18, 11);
      t5.toss$1$damage(18);
      t5 = R.category(170, null, "slash[es]");
      t5.tag$1(0, "equipment/weapon/sword");
      t5.toss$2$breakage$range(20, 5);
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Swordfighting"));
      t5 = R.item("Rapier", 7, C.Color_38_38_56, 0.5, 140);
      t5.weapon$2$heft(20, 12);
      t5.toss$1$damage(4);
      t5 = R.item("Shortsword", 11, C.Color_63_64_114, 0.5, 230);
      t5.weapon$2$heft(22, 13);
      t5.toss$1$damage(6);
      t5 = R.item("Scimitar", 18, C.Color_132_126_135, 0.5, 370);
      t5.weapon$2$heft(24, 16);
      t5.toss$1$damage(9);
      t5 = R.item("Cutlass[es]", 24, C.Color_255_238_168, 0.5, 520);
      t5.weapon$2$heft(26, 17);
      t5.toss$1$damage(11);
      t5 = R.item("Falchion", 38, C.Color_129_231_235, 0.5, 750);
      t5.weapon$2$heft(28, 18);
      t5.toss$1$damage(15);
      t5 = R.category(186, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/spear");
      t5.toss$1$range(9);
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Spear Mastery"));
      t5 = R.item("Pointed Stick", 2, C.Color_64_31_36, 0.5, 10);
      t5.weapon$2$heft(10, 9);
      t5.toss$1$damage(9);
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 12;
      t5 = R.item("Spear", 7, C.Color_142_82_55, 0.5, 160);
      t5.weapon$2$heft(16, 13);
      t5.toss$1$damage(15);
      t5 = R.item("Angon", 14, C.Color_132_126_135, 0.5, 340);
      t5.weapon$2$heft(20, 19);
      t5.toss$1$damage(20);
      t5 = R.category(186, null, "stab[s]");
      t5.tag$1(0, "equipment/weapon/polearm");
      t5.toss$1$range(4);
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Spear Mastery"));
      t5 = R.item("Lance", 28, C.Color_64_163_229, 0.5, 550);
      t5.weapon$2$heft(24, 27);
      t5.toss$1$damage(20);
      t5 = R.item("Partisan", 35, C.Color_63_64_114, 0.5, 850);
      t5.weapon$2$heft(30, 29);
      t5.toss$1$damage(26);
      t5 = R.category(191, null, "chop[s]");
      t5.tag$1(0, "equipment/weapon/axe");
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Axe Mastery"));
      t5 = R.item("Hatchet", 6, C.Color_63_64_114, 0.5, 90);
      t5.weapon$2$heft(18, 10);
      t5.toss$2$damage$range(20, 8);
      t5 = R.item("Axe", 12, C.Color_142_82_55, 0.5, 210);
      t5.weapon$2$heft(25, 14);
      t5.toss$2$damage$range(24, 7);
      t5 = R.item("Valaska", 24, C.Color_132_126_135, 0.5, 330);
      t5.weapon$2$heft(32, 19);
      t5.toss$2$damage$range(26, 5);
      t5 = R.item("Battleaxe", 40, C.Color_38_38_56, 0.5, 550);
      t5.weapon$2$heft(39, 30);
      t5.toss$2$damage$range(28, 4);
      t5 = R.category(8976, null, "hit[s]");
      t5.tag$1(0, "equipment/weapon/bow");
      t5.toss$2$breakage$range(50, 5);
      C.JSArray_methods.add$1(t5._skills, Q.Skills_find("Archery"));
      t5 = R.item("Short Bow", 5, C.Color_142_82_55, 0.3, 150);
      t5.ranged$4$damage$heft$range("the arrow", 8, 11, 12);
      t5.toss$1$damage(2);
      t5._destroyChance.$indexSet(0, t3, 15);
      t5._fuel = 10;
      t5 = R.item("Longbow", 13, C.Color_64_31_36, 0.3, 250);
      t5.ranged$4$damage$heft$range("the arrow", 16, 20, 14);
      t5.toss$1$damage(3);
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 13;
      t5 = R.item("Crossbow", 28, C.Color_132_126_135, 0.3, 600);
      t5.ranged$4$damage$heft$range("the bolt", 24, 24, 16);
      t5.toss$1$damage(4);
      t5._destroyChance.$indexSet(0, t3, 4);
      t5._fuel = 14;
      t5 = R.category(201, null, null);
      t5.tag$1(0, "equipment/armor/helm");
      t5.toss$3$breakage$damage$range(10, 3, 5);
      t5 = R.item("Leather Cap", 4, C.Color_142_82_55, 0.5, 50);
      t5._armor = 2;
      t5._weight = 2;
      t5._destroyChance.$indexSet(0, t3, 12);
      t5._fuel = 2;
      t5 = R.item("Chainmail Coif", 7, C.Color_38_38_56, 0.5, 160);
      t5._armor = 3;
      t5._weight = 3;
      t5 = R.item("Steel Cap", 12, C.Color_63_64_114, 0.5, 200);
      t5._armor = 4;
      t5._weight = 3;
      t5 = R.item("Visored Helm", 20, C.Color_132_126_135, 0.5, 350);
      t5._armor = 5;
      t5._weight = 6;
      t5 = R.item("Great Helm", 30, C.Color_226_223_240, 0.5, 550);
      t5._armor = 6;
      t5._weight = 8;
      R.category(244, null, null).tag$1(0, "equipment/armor/body/robe");
      t5 = R.item("Robe", 2, C.Color_21_87_194, 0.5, 20);
      t5._armor = 4;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 15);
      t5._fuel = 8;
      t5 = R.item("Fur-lined Robe", 6, C.Color_0_64_39, 0.25, 80);
      t5._armor = 6;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 12);
      t5._fuel = 8;
      R.category(246, null, null).tag$1(0, "equipment/armor/body");
      t5 = R.item("Cloth Shirt", 2, C.Color_189_144_108, 0.5, 40);
      t5._armor = 3;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 15);
      t5._fuel = 4;
      t5 = R.item("Leather Shirt", 5, C.Color_142_82_55, 0.5, 90);
      t5._armor = 6;
      t5._weight = 1;
      t5._destroyChance.$indexSet(0, t3, 12);
      t5._fuel = 4;
      t5 = R.item("Jerkin", 7, C.Color_132_126_135, 0.5, 130);
      t5._armor = 8;
      t5._weight = 1;
      t5 = R.item("Leather Armor", 10, C.Color_64_31_36, 0.5, 240);
      t5._armor = 11;
      t5._weight = 2;
      t5._destroyChance.$indexSet(0, t3, 10);
      t5._fuel = 4;
      t5 = R.item("Padded Armor", 14, C.Color_38_38_56, 0.5, 320);
      t5._armor = 15;
      t5._weight = 3;
      t5._destroyChance.$indexSet(0, t3, 8);
      t5._fuel = 4;
      t5 = R.item("Studded Armor", 17, C.Color_63_64_114, 0.5, 400);
      t5._armor = 22;
      t5._weight = 4;
      t5._destroyChance.$indexSet(0, t3, 6);
      t5._fuel = 4;
      R.category(242, null, null).tag$1(0, "equipment/armor/body");
      t5 = R.item("Mail Hauberk", 20, C.Color_38_38_56, 0.5, 500);
      t5._armor = 28;
      t5._weight = 5;
      t5 = R.item("Scale Mail", 23, C.Color_132_126_135, 0.5, 700);
      t5._armor = 36;
      t5._weight = 7;
      R.category(198, null, null).tag$1(0, "equipment/armor/cloak");
      t5 = R.item("Cloak", 3, C.Color_26_46_150, 0.5, 70);
      t5._armor = 2;
      t5._weight = 1;
      t5._destroyChance.$indexSet(0, t3, 20);
      t5._fuel = 5;
      t5 = R.item("Fur Cloak", 5, C.Color_64_31_36, 0.2, 140);
      t5._armor = 3;
      t5._weight = 1;
      t5._destroyChance.$indexSet(0, t3, 16);
      t5._fuel = 5;
      t5 = R.category(197, null, null);
      t5.tag$1(0, "equipment/armor/gloves");
      t5.toss$3$breakage$damage$range(20, 5, 4);
      t5 = R.item("Pair[s] of Gloves", 4, C.Color_189_144_108, 0.5, 170);
      t5._armor = 2;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 2;
      t5 = R.item("Set[s] of Bracers", 17, C.Color_64_31_36, 0.5, 480);
      t5._armor = 3;
      t5._weight = 1;
      t5 = R.item("Pair[s] of Gauntlets", 23, C.Color_38_38_56, 0.5, 800);
      t5._armor = 4;
      t5._weight = 2;
      t5 = R.category(230, null, null);
      t5.tag$1(0, "equipment/armor/shield");
      t5.toss$3$breakage$damage$range(10, 5, 8);
      t5 = R.item("Small Leather Shield", 3, C.Color_64_31_36, 0.5, 170);
      t5._armor = 3;
      t5._weight = 2;
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 14;
      t5 = R.item("Wooden Targe", 8, C.Color_189_144_108, 0.5, 250);
      t5._armor = 4;
      t5._weight = 4;
      t5._destroyChance.$indexSet(0, t3, 14);
      t5._fuel = 20;
      t5 = R.item("Large Leather Shield", 17, C.Color_142_82_55, 0.5, 320);
      t5._armor = 5;
      t5._weight = 5;
      t5._destroyChance.$indexSet(0, t3, 7);
      t5._fuel = 17;
      t5 = R.item("Steel Buckler", 27, C.Color_38_38_56, 0.5, 450);
      t5._armor = 6;
      t5._weight = 6;
      t5 = R.item("Kite Shield", 35, C.Color_132_126_135, 0.5, 650);
      t5._armor = 7;
      t5._weight = 9;
      R.category(236, null, null).tag$1(0, "equipment/armor/boots");
      t5 = R.item("Pair[s] of Sandals", 2, C.Color_142_82_55, 0.24, 10);
      t5._armor = 1;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 20);
      t5._fuel = 3;
      t5 = R.item("Pair[s] of Shoes", 8, C.Color_64_31_36, 0.3, 30);
      t5._armor = 2;
      t5._weight = null;
      t5._destroyChance.$indexSet(0, t3, 14);
      t5._fuel = 3;
      R.category(196, null, null).tag$1(0, "equipment/armor/boots");
      t5 = R.item("Pair[s] of Boots", 14, C.Color_142_82_55, 0.3, 70);
      t5._armor = 6;
      t5._weight = 1;
      t5 = R.item("Pair[s] of Plated Boots", 22, C.Color_63_64_114, 0.3, 250);
      t5._armor = 8;
      t5._weight = 2;
      t5 = R.item("Pair[s] of Greaves", 47, C.Color_132_126_135, 0.25, 350);
      t5._armor = 12;
      t5._weight = 3;
      R.finishItem();
      D.Monsters_initialize();
      R.finishAffix();
      $._affixTag = "body";
      t5 = R.affix("Elven _", 40, 1);
      t5._priceBonus = 400;
      t5._priceScale = 2;
      t5._weightBonus = -2;
      t5._armor = 2;
      t7 = $.$get$Elements_light();
      t5.resist$1(t7);
      t5 = R.affix("Elven _", 60, 0.3);
      t5._priceBonus = 600;
      t5._priceScale = 3;
      t5._weightBonus = -3;
      t5._armor = 4;
      t5.resist$1(t7);
      R.finishAffix();
      $._affixTag = "cloak";
      t5 = R.affix("Elven _", 40, 1);
      t5._priceBonus = 300;
      t5._priceScale = 2;
      t5._weightBonus = -1;
      t5._armor = 3;
      t5.resist$1(t7);
      t5 = R.affix("Elven _", 60, 0.3);
      t5._priceBonus = 500;
      t5._priceScale = 3;
      t5._weightBonus = -2;
      t5._armor = 5;
      t5.resist$1(t7);
      R.finishAffix();
      $._affixTag = "boots";
      t5 = R.affix("Elven _", 40, 1);
      t5._priceBonus = 400;
      t5._priceScale = 2.5;
      t5._weightBonus = -2;
      t5._armor = 2;
      R.finishAffix();
      $._affixTag = "helm";
      t5 = R.affix("Elven _", 40, 1);
      t5._priceBonus = 400;
      t5._priceScale = 2;
      t5._weightBonus = -1;
      t5._armor = 1;
      t5._statBonuses.$indexSet(0, C.Stat_Intellect, 1);
      t5.resist$1(t7);
      t5 = R.affix("Elven _", 60, 0.3);
      t5._priceBonus = 600;
      t5._priceScale = 3;
      t5._weightBonus = -1;
      t5._armor = 2;
      t5._statBonuses.$indexSet(0, C.Stat_Intellect, 2);
      t5.resist$1(t7);
      R.finishAffix();
      $._affixTag = "shield";
      t5 = R.affix("Elven _", 40, 1);
      t5._priceBonus = 300;
      t5._priceScale = 1.6;
      t5._heftScale = 0.8;
      t5._damageScale = 1.3;
      t5._damageBonus = null;
      t5.resist$1(t7);
      t5 = R.affix("Elven _", 50, 0.5);
      t5._priceBonus = 500;
      t5._priceScale = 2.2;
      t5._heftScale = 0.6;
      t5._damageScale = 1.5;
      t5._damageBonus = null;
      t5._statBonuses.$indexSet(0, C.Stat_Will, 1);
      t5.resist$1(t7);
      R.finishAffix();
      $._affixTag = "body";
      t5 = R.affix("Dwarven _", 30, 1);
      t5._priceBonus = 400;
      t5._priceScale = 2;
      t5._weightBonus = 2;
      t5._armor = 4;
      t5.resist$1(t2);
      t6 = $.$get$Elements_dark();
      t5.resist$1(t6);
      t5 = R.affix("Dwarven _", 40, 0.5);
      t5._priceBonus = 600;
      t5._priceScale = 3;
      t5._weightBonus = 2;
      t5._armor = 6;
      t5.resist$1(t2);
      t5.resist$1(t6);
      R.finishAffix();
      $._affixTag = "helm";
      t5 = R.affix("Dwarven _", 50, 1);
      t5._priceBonus = 300;
      t5._priceScale = 2;
      t5._weightBonus = 1;
      t5._armor = 3;
      t5.resist$1(t6);
      t5 = R.affix("Dwarven _", 60, 0.5);
      t5._priceBonus = 500;
      t5._priceScale = 3;
      t5._weightBonus = 1;
      t5._armor = 4;
      t1 = t5._statBonuses;
      t1.$indexSet(0, C.Stat_Strength, 1);
      t1.$indexSet(0, C.Stat_Fortitude, 1);
      t5.resist$1(t6);
      R.finishAffix();
      $._affixTag = "gloves";
      t5 = R.affix("Dwarven _", 50, 1);
      t5._priceBonus = 300;
      t5._priceScale = 2;
      t5._weightBonus = 1;
      t5._armor = 3;
      t5._statBonuses.$indexSet(0, C.Stat_Strength, 1);
      t5.resist$1(t2);
      R.finishAffix();
      $._affixTag = "boots";
      t5 = R.affix("Dwarven _", 50, 1);
      t5._priceBonus = 300;
      t5._priceScale = 2;
      t5._weightBonus = 1;
      t5._armor = 3;
      t5.resist$1(t2);
      t5 = R.affix("Dwarven _", 60, 0.3);
      t5._priceBonus = 500;
      t5._priceScale = 3;
      t5._weightBonus = 2;
      t5._armor = 5;
      t5._statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
      t5.resist$1(t6);
      t5.resist$1(t2);
      R.finishAffix();
      $._affixTag = "shield";
      t5 = R.affix("Dwarven _", 40, 1);
      t5._priceBonus = 200;
      t5._priceScale = 2.2;
      t5._heftScale = 1.2;
      t5._damageScale = 1.5;
      t5._damageBonus = 4;
      t5.resist$1(t2);
      t5.resist$1(t6);
      t5 = R.affix("Dwarven _", 40, 1);
      t5._priceBonus = 400;
      t5._priceScale = 2.4;
      t5._heftScale = 1.3;
      t5._damageScale = 1.7;
      t5._damageBonus = 5;
      t5._statBonuses.$indexSet(0, C.Stat_Fortitude, 1);
      t5.resist$1(t2);
      t5.resist$1(t6);
      R.finishAffix();
      $._affixTag = "armor";
      t5 = R.affix("_ of Resist Air", 10, 0.5);
      t5._priceBonus = 200;
      t5._priceScale = 1.2;
      t1 = $.$get$Elements_air();
      t5.resist$1(t1);
      t5 = R.affix("_ of Resist Earth", 11, 0.5);
      t5._priceBonus = 230;
      t5._priceScale = 1.2;
      t5.resist$1(t2);
      t5 = R.affix("_ of Resist Fire", 12, 0.5);
      t5._priceBonus = 260;
      t5._priceScale = 1.3;
      t5.resist$1(t3);
      t5 = R.affix("_ of Resist Water", 13, 0.5);
      t5._priceBonus = 310;
      t5._priceScale = 1.2;
      t8 = $.$get$Elements_water();
      t5.resist$1(t8);
      t5 = R.affix("_ of Resist Acid", 14, 0.3);
      t5._priceBonus = 340;
      t5._priceScale = 1.3;
      t9 = $.$get$Elements_acid();
      t5.resist$1(t9);
      t5 = R.affix("_ of Resist Cold", 15, 0.5);
      t5._priceBonus = 400;
      t5._priceScale = 1.2;
      t10 = $.$get$Elements_cold();
      t5.resist$1(t10);
      t5 = R.affix("_ of Resist Lightning", 16, 0.3);
      t5._priceBonus = 430;
      t5._priceScale = 1.2;
      t11 = $.$get$Elements_lightning();
      t5.resist$1(t11);
      t5 = R.affix("_ of Resist Poison", 17, 0.25);
      t5._priceBonus = 460;
      t5._priceScale = 1.5;
      t12 = $.$get$Elements_poison();
      t5.resist$1(t12);
      t5 = R.affix("_ of Resist Dark", 18, 0.25);
      t5._priceBonus = 490;
      t5._priceScale = 1.3;
      t5.resist$1(t6);
      t5 = R.affix("_ of Resist Light", 19, 0.25);
      t5._priceBonus = 490;
      t5._priceScale = 1.3;
      t5.resist$1(t7);
      t5 = R.affix("_ of Resist Spirit", 20, 0.4);
      t5._priceBonus = 520;
      t5._priceScale = 1.4;
      t13 = $.$get$Elements_spirit();
      t5.resist$1(t13);
      t5 = R.affix("_ of Resist Nature", 40, 0.3);
      t5._priceBonus = 3000;
      t5._priceScale = 4;
      t5.resist$1(t1);
      t5.resist$1(t2);
      t5.resist$1(t3);
      t5.resist$1(t8);
      t5.resist$1(t10);
      t5.resist$1(t11);
      t5 = R.affix("_ of Resist Destruction", 40, 0.3);
      t5._priceBonus = 1300;
      t5._priceScale = 2.6;
      t5.resist$1(t9);
      t5.resist$1(t3);
      t5.resist$1(t11);
      t5.resist$1(t12);
      t5 = R.affix("_ of Resist Evil", 60, 0.3);
      t5._priceBonus = 1500;
      t5._priceScale = 3;
      t5.resist$1(t9);
      t5.resist$1(t12);
      t5.resist$1(t6);
      t5.resist$1(t13);
      t5 = R.affix("_ of Resistance", 70, 0.3);
      t5._priceBonus = 5000;
      t5._priceScale = 6;
      t5.resist$1(t1);
      t5.resist$1(t2);
      t5.resist$1(t3);
      t5.resist$1(t8);
      t5.resist$1(t9);
      t5.resist$1(t10);
      t5.resist$1(t11);
      t5.resist$1(t12);
      t5.resist$1(t6);
      t5.resist$1(t7);
      t5.resist$1(t13);
      t5 = R.affix("_ of Protection from Air", 16, 0.25);
      t5._priceBonus = 500;
      t5._priceScale = 1.4;
      t5.resist$2(t1, 2);
      t1 = R.affix("_ of Protection from Earth", 17, 0.25);
      t1._priceBonus = 500;
      t1._priceScale = 1.4;
      t1.resist$2(t2, 2);
      t2 = R.affix("_ of Protection from Fire", 18, 0.25);
      t2._priceBonus = 500;
      t2._priceScale = 1.5;
      t2.resist$2(t3, 2);
      t2 = R.affix("_ of Protection from Water", 19, 0.25);
      t2._priceBonus = 500;
      t2._priceScale = 1.4;
      t2.resist$2(t8, 2);
      t8 = R.affix("_ of Protection from Acid", 20, 0.2);
      t8._priceBonus = 500;
      t8._priceScale = 1.5;
      t8.resist$2(t9, 2);
      t9 = R.affix("_ of Protection from Cold", 21, 0.25);
      t9._priceBonus = 500;
      t9._priceScale = 1.4;
      t9.resist$2(t10, 2);
      t9 = R.affix("_ of Protection from Lightning", 22, 0.16);
      t9._priceBonus = 500;
      t9._priceScale = 1.4;
      t9.resist$2(t11, 2);
      t9 = R.affix("_ of Protection from Poison", 23, 0.14);
      t9._priceBonus = 1000;
      t9._priceScale = 1.6;
      t9.resist$2(t12, 2);
      t9 = R.affix("_ of Protection from Dark", 24, 0.14);
      t9._priceBonus = 500;
      t9._priceScale = 1.5;
      t9.resist$2(t6, 2);
      t9 = R.affix("_ of Protection from Light", 25, 0.14);
      t9._priceBonus = 500;
      t9._priceScale = 1.5;
      t9.resist$2(t7, 2);
      t9 = R.affix("_ of Protection from Spirit", 26, 0.13);
      t9._priceBonus = 800;
      t9._priceScale = 1.6;
      t9.resist$2(t13, 2);
      R.finishAffix();
      $._affixTag = "weapon";
      t9 = R.affix("_ of Harming", 1, 1);
      t9._priceBonus = 100;
      t9._priceScale = 1.2;
      t9._heftScale = 1.05;
      t9._damageScale = null;
      t9._damageBonus = 1;
      t9 = R.affix("_ of Wounding", 10, 1);
      t9._priceBonus = 140;
      t9._priceScale = 1.3;
      t9._heftScale = 1.07;
      t9._damageScale = null;
      t9._damageBonus = 3;
      t9 = R.affix("_ of Maiming", 25, 1);
      t9._priceBonus = 180;
      t9._priceScale = 1.5;
      t9._heftScale = 1.09;
      t9._damageScale = 1.2;
      t9._damageBonus = 3;
      t9 = R.affix("_ of Slaying", 45, 1);
      t9._priceBonus = 200;
      t9._priceScale = 2;
      t9._heftScale = 1.11;
      t9._damageScale = 1.4;
      t9._damageBonus = 5;
      R.finishAffix();
      $._affixTag = "bow";
      t9 = R.affix("Ash _", 10, 1);
      t9._priceBonus = 300;
      t9._priceScale = 1.3;
      t9._heftScale = 0.8;
      t9._damageScale = null;
      t9._damageBonus = 3;
      t9 = R.affix("Yew _", 20, 1);
      t9._priceBonus = 500;
      t9._priceScale = 1.4;
      t9._heftScale = 0.8;
      t9._damageScale = null;
      t9._damageBonus = 5;
      R.finishAffix();
      $._affixTag = "weapon";
      t9 = R.affix("Glimmering _", 20, 0.3);
      t9._priceBonus = 300;
      t9._priceScale = 1.3;
      t9._damageScale = 1.2;
      t9._damageBonus = null;
      t9.brand$1(t7);
      t9 = R.affix("Shining _", 32, 0.25);
      t9._priceBonus = 400;
      t9._priceScale = 1.6;
      t9._damageScale = 1.4;
      t9._damageBonus = null;
      t9.brand$1(t7);
      t9 = R.affix("Radiant _", 48, 0.2);
      t9._priceBonus = 500;
      t9._priceScale = 2;
      t9._damageScale = 1.6;
      t9._damageBonus = null;
      t9.brand$2$resist(t7, 2);
      t7 = R.affix("Dim _", 16, 0.3);
      t7._priceBonus = 300;
      t7._priceScale = 1.3;
      t7._damageScale = 1.2;
      t7._damageBonus = null;
      t7.brand$1(t6);
      t7 = R.affix("Dark _", 32, 0.25);
      t7._priceBonus = 400;
      t7._priceScale = 1.6;
      t7._damageScale = 1.4;
      t7._damageBonus = null;
      t7.brand$1(t6);
      t7 = R.affix("Black _", 56, 0.2);
      t7._priceBonus = 500;
      t7._priceScale = 2;
      t7._damageScale = 1.6;
      t7._damageBonus = null;
      t7.brand$2$resist(t6, 2);
      t6 = R.affix("Chilling _", 20, 0.3);
      t6._priceBonus = 300;
      t6._priceScale = 1.5;
      t6._damageScale = 1.4;
      t6._damageBonus = null;
      t6.brand$1(t10);
      t6 = R.affix("Freezing _", 40, 0.25);
      t6._priceBonus = 400;
      t6._priceScale = 1.7;
      t6._damageScale = 1.6;
      t6._damageBonus = null;
      t6.brand$2$resist(t10, 2);
      t10 = R.affix("Burning _", 20, 0.3);
      t10._priceBonus = 300;
      t10._priceScale = 1.5;
      t10._damageScale = 1.3;
      t10._damageBonus = null;
      t10.brand$1(t3);
      t10 = R.affix("Flaming _", 40, 0.25);
      t10._priceBonus = 360;
      t10._priceScale = 1.8;
      t10._damageScale = 1.6;
      t10._damageBonus = null;
      t10.brand$1(t3);
      t10 = R.affix("Searing _", 60, 0.2);
      t10._priceBonus = 500;
      t10._priceScale = 2.1;
      t10._damageScale = 1.8;
      t10._damageBonus = null;
      t10.brand$2$resist(t3, 2);
      t3 = R.affix("Electric _", 50, 0.2);
      t3._priceBonus = 300;
      t3._priceScale = 1.5;
      t3._damageScale = 1.4;
      t3._damageBonus = null;
      t3.brand$1(t11);
      t3 = R.affix("Shocking _", 70, 0.2);
      t3._priceBonus = 400;
      t3._priceScale = 2;
      t3._damageScale = 1.8;
      t3._damageBonus = null;
      t3.brand$2$resist(t11, 2);
      t11 = R.affix("Poisonous _", 35, 0.2);
      t11._priceBonus = 500;
      t11._priceScale = 1.5;
      t11._damageScale = 1.1;
      t11._damageBonus = null;
      t11.brand$1(t12);
      t11 = R.affix("Venomous _", 70, 0.2);
      t11._priceBonus = 800;
      t11._priceScale = 1.8;
      t11._damageScale = 1.3;
      t11._damageBonus = null;
      t11.brand$2$resist(t12, 2);
      t12 = R.affix("Ghostly _", 45, 0.2);
      t12._priceBonus = 300;
      t12._priceScale = 1.6;
      t12._heftScale = 0.7;
      t12._damageScale = 1.4;
      t12._damageBonus = null;
      t12.brand$1(t13);
      t12 = R.affix("Spiritual _", 80, 0.15);
      t12._priceBonus = 400;
      t12._priceScale = 2.1;
      t12._heftScale = 0.7;
      t12._damageScale = 1.7;
      t12._damageBonus = null;
      t12.brand$2$resist(t13, 2);
      R.finishAffix();
      t13 = P.double;
      R.shop("The General's General Store", P.LinkedHashMap_LinkedHashMap$_literal(["Loaf of Bread", 1, "Tallow Candle", 1, "Wax Candle", 0.7, "Oil Lamp", 0.5, "Torch", 0.4, "Lantern", 0.1, "Soothing Balm", 0.8, "Mending Salve", 0.6, "Healing Poultice", 0.3, "Club", 0.3, "Staff", 0.2, "Quarterstaff", 0.1, "Whip", 0.2, "Dagger", 0.2, "Hatchet", 0.1, "Axe", 0.05], t4, t13));
      R.shop("Dirk's Death Emporium", P.LinkedHashMap_LinkedHashMap$_literal(["Hammer", 1, "Mattock", 1, "War Hammer", 1, "Morningstar", 1, "Mace", 1, "Chain Whip", 1, "Flail", 1, "Falchion", 1, "Rapier", 1, "Shortsword", 1, "Scimitar", 1, "Cutlass", 1, "Spear", 1, "Angon", 1, "Lance", 1, "Partisan", 1, "Valaska", 1, "Battleaxe", 1, "Short Bow", 1, "Longbow", 1, "Crossbow", 1], t4, t13));
      R.shop("Skullduggery and Bamboozelry", P.LinkedHashMap_LinkedHashMap$_literal(["Dirk", 1, "Dagger", 1, "Stiletto", 1, "Rondel", 1, "Baselard", 1], t4, t13));
      R.shop("Garthag's Armoury", P.LinkedHashMap_LinkedHashMap$_literal(["Cloak", 1, "Fur Cloak", 1, "Cloth Shirt", 1, "Leather Shirt", 1, "Jerkin", 1, "Leather Armor", 1, "Padded Armor", 1, "Studded Armor", 1, "Mail Hauberk", 1, "Scale Mail", 1, "Robe", 1, "Fur-lined Robe", 1, "Pair of Sandals", 1, "Pair of Shoes", 1, "Pair of Boots", 1, "Pair of Plated Boots", 1, "Pair of Greaves", 1], t4, t13));
      R.shop("Unguence the Alchemist", P.LinkedHashMap_LinkedHashMap$_literal(["Soothing Balm", 1, "Mending Salve", 1, "Healing Poultice", 1, "Antidote", 1, "Potion of Quickness", 1, "Potion of Alacrity", 1, "Bottled Wind", 1, "Bottled Ice", 1, "Bottled Fire", 1, "Bottled Ocean", 1, "Bottled Earth", 1], t4, t13));
      R.shop("The Droll Magery", P.LinkedHashMap_LinkedHashMap$_literal(['Spellbook "Elemental Primer"', 1, "Scroll of Sidestepping", 1, "Scroll of Phasing", 1, "Scroll of Item Detection", 1], t4, t13));
      t13 = $.$get$_floorDrops();
      t13.defineTags$1("drop/built/dungeon/room");
      t13.defineTags$1("drop/cave/glowing-moss");
      t13.defineTags$1("drop/water");
      t13.defineTags$1("drop/nature/aquatic");
      t13.defineTags$1("drop/passage");
      t13.defineTags$1("drop/room/storage/closet");
      t13.defineTags$1("drop/room/storage/storeroom");
      t13.defineTags$1("drop/room/storage/treasure-room");
      t13.defineTags$1("drop/room/great-hall");
      t13.defineTags$1("drop/room/hall");
      t13.defineTags$1("drop/room/food/kitchen");
      t13.defineTags$1("drop/room/food/larder");
      t13.defineTags$1("drop/room/food/pantry");
      t13.defineTags$1("drop/room/chamber");
      t13.defineTags$1("drop/room/chamber/boss-chamber");
      t13.defineTags$1("drop/room/laboratory");
      t13.defineTags$1("drop/room/workshop");
      F.floorDrop(new X._AllOfDrop(H.setRuntimeTypeInfo([new X._PercentDrop(60, X.parseDrop("Skull", null)), new X._PercentDrop(40, X.parseDrop("treasure", null)), new X._PercentDrop(30, X.parseDrop("weapon", null)), new X._PercentDrop(30, X.parseDrop("armor", null)), new X._PercentDrop(30, X.parseDrop("armor", null)), new X._PercentDrop(20, X.parseDrop("magic", null)), new X._PercentDrop(20, X.parseDrop("magic", null)), new X._PercentDrop(20, X.parseDrop("magic", null))], [L.Drop])), null, C.SpawnLocation_2, 2);
      F.floorDrop(new X._PercentDrop(30, X.parseDrop("magic", null)), null, C.SpawnLocation_2, 20);
      F.floorDrop(X.parseDrop("food", null), 1, null, 10);
      F.floorDrop(X.parseDrop("Rock", null), 0.01, C.SpawnLocation_3, 5);
      F.floorDrop(X.parseDrop("treasure", null), null, null, 10);
      F.floorDrop(X.parseDrop("light", null), 0.1, null, 4);
      F.floorDrop(X.parseDrop("item", null), 0, C.SpawnLocation_0, 10);
      t1 = $.$get$Decor_all();
      t1.defineTags$1("built/room/dungeon");
      t1.defineTags$1("built/room/keep");
      t1.defineTags$1("catacomb");
      t1.defineTags$1("cave/glowing-moss");
      t1.defineTags$1("water");
      t1 = $.$get$Tiles_glowingMoss();
      t2 = $.$get$Motility_walk();
      t3 = S.Cell;
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["*", S.Cell$(t1, t2, null, null)], t4, t3);
      $._themes = "glowing-moss";
      $._categoryFrequency = null;
      $._categoryCells = t1;
      T.furnishing(null, C.Symmetry_4, "    #\n    *");
      T.furnishing(null, C.Symmetry_4, "    ##\n    #*");
      T.furnishing(null, null, "    ?.?\n    .*.\n    ?.?");
      t1 = $.$get$Tiles_candle();
      t5 = P.LinkedHashMap_LinkedHashMap$_literal(["!", S.Cell$(t1, t2, null, null)], t4, t3);
      $._themes = "catacomb dungeon";
      $._categoryFrequency = null;
      $._categoryCells = t5;
      T.furnishing(null, null, "    ?.?\n    .!.\n    ?.?");
      tableCells = P.LinkedHashMap_LinkedHashMap$_literal(["\u250c", S.Cell$($.$get$Tiles_tableTopLeft(), t2, null, null), "\u2500", S.Cell$($.$get$Tiles_tableTop(), t2, null, null), "\u2510", S.Cell$($.$get$Tiles_tableTopRight(), t2, null, null), "-", S.Cell$($.$get$Tiles_tableCenter(), t2, null, null), "\u2502", S.Cell$($.$get$Tiles_tableSide(), t2, null, null), "\u2558", S.Cell$($.$get$Tiles_tableBottomLeft(), t2, null, null), "\u2550", S.Cell$($.$get$Tiles_tableBottom(), t2, null, null), "\u255b", S.Cell$($.$get$Tiles_tableBottomRight(), t2, null, null), "\u255e", S.Cell$($.$get$Tiles_tableLegLeft(), t2, null, null), "\u2564", S.Cell$($.$get$Tiles_tableLeg(), t2, null, null), "\u2561", S.Cell$($.$get$Tiles_tableLegRight(), t2, null, null), "i", S.Cell$(t1, t2, null, null)], t4, t3);
      $._themes = "keep";
      $._categoryFrequency = null;
      $._categoryCells = tableCells;
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #-\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #-\u2502.\n    #i\u2502.\n    #-\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, C.Symmetry_1, "    ?...\n    #\u2500\u2510.\n    #i\u2502.\n    #-\u2502.\n    #i\u2502.\n    #\u2564\u255b.\n    ?...");
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    ?###?");
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    ?###?");
      T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    ?####?");
      T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    ?####?");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    ?#####?");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    ?#####?");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    ?#####?");
      T.furnishing(null, null, "    ?###?\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    ?###?\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    ?####?\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, null, "    ?####?\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, null, "    ?#####?\n    .\u2502---\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      T.furnishing(null, null, "    ?#####?\n    .\u2502-i-\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      T.furnishing(null, null, "    ?#####?\n    .\u2502i-i\u2502.\n    .\u255e\u2550\u2550\u2550\u2561.\n    .......");
      $._themes = "keep";
      $._categoryFrequency = null;
      $._categoryCells = tableCells;
      T.furnishing(null, null, "    ?.....?\n    #\u2500\u2510.\u250c\u2500#\n    #\u2564\u255b.\u2558\u2564#\n    ?.....?");
      T.furnishing(null, null, "    ?.......?\n    #\u2500\u2500\u2510.\u250c\u2500\u2500#\n    #\u2550\u2564\u255b.\u2558\u2564\u2550#\n    ?.......?");
      T.furnishing(null, null, "    ?.........?\n    #\u2500\u2500\u2500\u2510.\u250c\u2500\u2500\u2500#\n    #\u2550\u2550\u2564\u255b.\u2558\u2564\u2550\u2550#\n    ?.........?");
      T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      T.furnishing(null, null, "    ?##?\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u255e\u2561.\n    ....\n    .\u250c\u2510.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    .\u2502\u2502.\n    ?##?");
      $._themes = "keep";
      $._categoryFrequency = null;
      $._categoryCells = tableCells;
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502ii\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i--i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502-\u2502.\n    .\u2502-\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    .....\n    .\u250c\u2500\u2510.\n    .\u2502i\u2502.\n    .\u2502i\u2502.\n    .\u255e\u2550\u2561.\n    .....");
      T.furnishing(null, null, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502--\u2502.\n    .\u2502--\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, C.Symmetry_1, "    ......\n    .\u250c\u2500\u2500\u2510.\n    .\u2502i-\u2502.\n    .\u2502-i\u2502.\n    .\u255e\u2550\u2550\u2561.\n    ......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502---\u2502.\n    .\u2502---\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502-i-\u2502.\n    .\u2502i-i\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    .......\n    .\u250c\u2500\u2500\u2500\u2510.\n    .\u2502i-i\u2502.\n    .\u2502-i-\u2502.\n    .\u2558\u2564\u2550\u2564\u255b.\n    .......");
      T.furnishing(null, null, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502----\u2502.\n    .\u2502----\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(null, C.Symmetry_1, "    ........\n    .\u250c\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---\u2502.\n    .\u2502---i\u2502.\n    .\u2558\u2564\u2550\u2550\u2564\u255b.\n    ........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-----\u2502.\n    .\u2502-----\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502--i--\u2502.\n    .\u2502-i-i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    .........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502i---i\u2502.\n    .\u2502--i--\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2564\u255b.\n    .........");
      T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502------\u2502.\n    .\u2502------\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      T.furnishing(null, null, "    ..........\n    .\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510.\n    .\u2502-i--i-\u2502.\n    .\u2502-i--i-\u2502.\n    .\u2558\u2564\u2550\u2550\u2550\u2550\u2564\u255b.\n    ..........");
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["\u03c0", S.Cell$($.$get$Tiles_chair(), t2, null, null)], t4, t3);
      $._themes = "built";
      $._categoryFrequency = null;
      $._categoryCells = t1;
      T.furnishing(null, C.Symmetry_3, "    \u03c0.\n    .\u250c");
      T.furnishing(null, C.Symmetry_3, "    \u03c0.\n    \u250c?");
      T.furnishing(null, C.Symmetry_3, "    ..\n    \u03c0\u250c");
      T.furnishing(null, C.Symmetry_1, "    .\u255e\n    \u03c0.");
      T.furnishing(null, C.Symmetry_4, "    ?\u2550?\n    .\u03c0.");
      T.furnishing(null, null, "    ?\u2564?\n    .\u03c0.");
      T.furnishing(null, C.Symmetry_4, "    \u03c0\n    #");
      T.furnishing(null, C.Symmetry_4, "    \u03c0\n    .\n    #");
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["%", S.Cell$($.$get$Tiles_closedBarrel(), t2, null, null)], t4, t3);
      $._themes = "built";
      $._categoryFrequency = 0.7;
      $._categoryCells = t1;
      T.furnishing(null, C.Symmetry_4, "    ##\n    #%");
      T.furnishing(null, C.Symmetry_4, "    ?.?\n    .%.\n    ?.?");
      T.furnishing(null, C.Symmetry_4, "    ###\n    #%%");
      T.furnishing(null, C.Symmetry_4, "    ###\n    #%%\n    #%.");
      T.furnishing(null, C.Symmetry_4, "    ?##?\n    .%%.\n    ?..?");
      T.furnishing(null, C.Symmetry_4, "    ?###?\n    .%%%.\n    ?...?");
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["&", S.Cell$($.$get$Tiles_closedChest(), t2, null, null)], t4, t3);
      $._themes = "built";
      $._categoryFrequency = 0.5;
      $._categoryCells = t2;
      T.furnishing(null, C.Symmetry_4, "    ##\n    #&");
      T.furnishing(null, C.Symmetry_4, "    ?#?\n    .&.\n    ?.?");
      t2 = $.$get$Tiles_steppingStone();
      t3 = P.LinkedHashMap_LinkedHashMap$_literal(["*", S.Cell$(t2, null, $.$get$Tiles_water(), null), "o", S.Cell$(null, null, t2, null)], t4, t3);
      $._themes = "water";
      $._categoryFrequency = null;
      $._categoryCells = t3;
      T.furnishing(0.6, C.Symmetry_4, "    .*");
      T.furnishing(0.6, C.Symmetry_4, "    ..\n    .*");
      T.furnishing(null, C.Symmetry_4, "    o*");
      T.furnishing(null, C.Symmetry_4, "    \u2248*\n    o\u2248");
      $content = new T.GameContent();
      t3 = $content.createHero$1("temp");
      t4 = P.ListQueue$(null, O.Message);
      t2 = V.Action;
      t1 = P.ListQueue$(null, t2);
      t2 = H.setRuntimeTypeInfo([], [t2]);
      t5 = H.setRuntimeTypeInfo([], [D.Event]);
      t6 = [L.Vec];
      t7 = H.setRuntimeTypeInfo([], t6);
      t5 = new D.Game($content, t3, new O.Log(t4), t1, t2, t5, new Y.Energy(0), t7, 1);
      t1 = L.Stage$(80, 60, t5);
      t5._stage = t1;
      t1 = t1.tiles.bounds;
      t2 = t1.pos;
      t3 = t2.x;
      if (typeof t3 !== "number")
        return t3.$sub();
      t1 = t1.size;
      t4 = t1.x;
      if (typeof t4 !== "number")
        return t4.$add();
      C.JSArray_methods.addAll$1(t7, new X.Rect(new L.Vec(t3 - -1, t2.y - -1), new L.Vec(t4 + -2, t1.y + -2)));
      t1 = $.$get$rng();
      t1.toString;
      C.JSArray_methods.shuffle$1(H.assertSubtype(t7, "$isList", t6, "$asList"), t1._random);
      $.game = t5;
      V.spawnStuff();
      V.generateTable();
      t5 = J.get$onClick$x(C.HtmlDocument_methods.querySelector$1(document, "table"));
      t1 = H.getTypeArgumentByIndex(t5, 0);
      W._EventStreamSubscription$(t5._target, t5._eventType, H.functionTypeCheck(new V.main_closure(), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    spawnStuff: function() {
      var depth, t1, breeds, spawns, items, affixes, numSpawns, i, breed, t2, _i, numCorpses;
      for (depth = 1; depth <= 100; ++depth) {
        t1 = $.$get$allBreeds();
        if (depth >= t1.length)
          return H.ioore(t1, depth);
        breeds = t1[depth];
        t1 = $.$get$allSpawns();
        if (depth >= t1.length)
          return H.ioore(t1, depth);
        spawns = t1[depth];
        t1 = $.$get$allItems();
        if (depth >= t1.length)
          return H.ioore(t1, depth);
        items = t1[depth];
        t1 = $.$get$allAffixes();
        if (depth >= t1.length)
          return H.ioore(t1, depth);
        affixes = t1[depth];
        numSpawns = 30 + depth;
        for (i = 0; i < numSpawns; ++i) {
          breed = $.$get$Monsters_breeds().tryChoose$1(depth);
          breeds.add$1(0, O.Log__categorize(breed._breed$_name, false, true));
          for (t1 = breed.spawnAll$0(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            spawns.add$1(0, O.Log__categorize(t1[_i]._breed$_name, false, true));
        }
        numCorpses = 5 + C.JSInt_methods._tdivFast$1(depth, 2);
        for (i = 0; i < numCorpses; ++i) {
          breed = $.$get$Monsters_breeds().tryChoose$1(depth);
          if (breed == null)
            continue;
          for (t1 = breed.spawnAll$0(), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
            t1[_i].drop.spawnDrop$2(depth, new V.spawnStuff_closure(items, affixes));
        }
      }
    },
    generateTable: function() {
      var text, depth, t1, t2;
      text = new P.StringBuffer("");
      text._contents = "<thead>\n    <tr>\n      <td>Depth</td>\n      <td>Breeds</td>\n      <td>Monsters</td>\n      <td>Items</td>\n      <td>Affixes</td>\n    </tr>\n  </thead>";
      for (depth = 1; depth <= 100; ++depth) {
        text._contents += "<tr><td>" + depth + "</td>";
        t1 = new V.generateTable_renderColumn(text);
        t2 = $.$get$allBreeds();
        if (depth >= t2.length)
          return H.ioore(t2, depth);
        t1.call$1(t2[depth]);
        t2 = $.$get$allSpawns();
        if (depth >= t2.length)
          return H.ioore(t2, depth);
        t1.call$1(t2[depth]);
        t2 = $.$get$allItems();
        if (depth >= t2.length)
          return H.ioore(t2, depth);
        t1.call$1(t2[depth]);
        t2 = $.$get$allAffixes();
        if (depth >= t2.length)
          return H.ioore(t2, depth);
        t1.call$1(t2[depth]);
        text._contents += "</tr>";
      }
      t1 = C.HtmlDocument_methods.querySelector$1(document, "table");
      t2 = text._contents;
      J.setInnerHtml$2$validator$x(t1, t2.charCodeAt(0) == 0 ? t2 : t2, $.$get$validator());
    },
    closure2: {
      "^": "Closure:4;",
      call$1: function(_) {
        var t1 = P.String;
        return new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int), [t1]);
      }
    },
    closure1: {
      "^": "Closure:4;",
      call$1: function(_) {
        var t1 = P.String;
        return new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int), [t1]);
      }
    },
    closure0: {
      "^": "Closure:4;",
      call$1: function(_) {
        var t1 = P.String;
        return new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int), [t1]);
      }
    },
    closure: {
      "^": "Closure:4;",
      call$1: function(_) {
        var t1 = P.String;
        return new T.Histogram(P.LinkedHashMap_LinkedHashMap$_empty(t1, P.int), [t1]);
      }
    },
    main_closure: {
      "^": "Closure:55;",
      call$1: function(_) {
        H.interceptedTypeCheck(_, "$isMouseEvent");
        V.spawnStuff();
        V.generateTable();
      }
    },
    spawnStuff_closure: {
      "^": "Closure:56;items,affixes",
      call$1: function(item) {
        var t1;
        this.items.add$1(0, O.Log__categorize(item.type.quantifiableName, false, true));
        t1 = item.prefix;
        if (t1 != null)
          this.affixes.add$1(0, t1.name + " _");
        t1 = item.suffix;
        if (t1 != null)
          this.affixes.add$1(0, "_ " + t1.name);
      }
    },
    generateTable_renderColumn: {
      "^": "Closure:57;text",
      call$1: function(histogram) {
        var t1, t2, t3, more, _i, $name, width, t4;
        H.assertSubtype(histogram, "$isHistogram", [P.String], "$asHistogram");
        t1 = this.text;
        t1._contents += '<td width="25%">';
        for (t2 = histogram.descending$0(), t3 = t2.length, more = 0, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          $name = t2[_i];
          width = histogram.count$1($name);
          if (typeof width !== "number")
            return width.$lt();
          if (width < 1) {
            ++more;
            continue;
          }
          if (width > 100)
            width = 100;
          t1._contents += '<div class="bar" style="width: ' + width + 'px;"></div>';
          t4 = t1._contents += " " + H.S($name);
          t1._contents = t4 + "<br>";
        }
        if (more > 0)
          t1._contents += "<em>" + more + " more&hellip;</em>";
        t1._contents += "</td>";
      }
    }
  }, 1]];
  setupProgram(dart, 0, 0);
  // getInterceptor methods
  J.getInterceptor$ = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ansx = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$asx = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$ax = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.get$attributes$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$attributes(receiver);
  };
  J.get$codeUnits$s = function(receiver) {
    return J.getInterceptor$s(receiver).get$codeUnits(receiver);
  };
  J.get$hashCode$ = function(receiver) {
    return J.getInterceptor$(receiver).get$hashCode(receiver);
  };
  J.get$isEmpty$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
  };
  J.get$iterator$ax = function(receiver) {
    return J.getInterceptor$ax(receiver).get$iterator(receiver);
  };
  J.get$length$asx = function(receiver) {
    return J.getInterceptor$asx(receiver).get$length(receiver);
  };
  J.get$name$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$name(receiver);
  };
  J.get$onClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onClick(receiver);
  };
  J.get$previousNode$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$previousNode(receiver);
  };
  J.get$tagName$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$tagName(receiver);
  };
  J.$add$ansx = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ansx(receiver).$add(receiver, a0);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor$(receiver).$eq(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$asx = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$asx(receiver).$index(receiver, a0);
  };
  J._addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
  };
  J._codeUnitAt$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
  };
  J._removeChild$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver)._removeChild$1(receiver, a0);
  };
  J._replaceChild$2$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
  };
  J.append$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).append$1(receiver, a0);
  };
  J.clamp$2$n = function(receiver, a0, a1) {
    return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
  };
  J.compareTo$1$ns = function(receiver, a0) {
    return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
  };
  J.contains$1$asx = function(receiver, a0) {
    return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
  };
  J.contains$2$asx = function(receiver, a0, a1) {
    return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
  };
  J.elementAt$1$ax = function(receiver, a0) {
    return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
  };
  J.getAttribute$1$x = function(receiver, a0) {
    return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
  };
  J.remove$0$x = function(receiver) {
    return J.getInterceptor$x(receiver).remove$0(receiver);
  };
  J.setInnerHtml$2$validator$x = function(receiver, a0, a1) {
    return J.getInterceptor$x(receiver).setInnerHtml$2$validator(receiver, a0, a1);
  };
  J.split$1$s = function(receiver, a0) {
    return J.getInterceptor$s(receiver).split$1(receiver, a0);
  };
  J.substring$2$s = function(receiver, a0, a1) {
    return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
  };
  J.toInt$0$n = function(receiver) {
    return J.getInterceptor$n(receiver).toInt$0(receiver);
  };
  J.toLowerCase$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor$(receiver).toString$0(receiver);
  };
  J.trim$0$s = function(receiver) {
    return J.getInterceptor$s(receiver).trim$0(receiver);
  };
  Isolate.makeConstantList = function(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  };
  var $ = Isolate.$isolateProperties;
  C.BodyElement_methods = W.BodyElement.prototype;
  C.DomImplementation_methods = W.DomImplementation.prototype;
  C.HeadElement_methods = W.HeadElement.prototype;
  C.HtmlDocument_methods = W.HtmlDocument.prototype;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.NodeList_methods = W.NodeList.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.Range_methods = W.Range.prototype;
  C.TableElement_methods = W.TableElement.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C__JSRandom = new P._JSRandom();
  C.C__RootZone = new P._RootZone();
  C.Color_0_0_0 = new L.Color(0, 0, 0);
  C.Color_0_64_39 = new L.Color(0, 64, 39);
  C.Color_122_44_24 = new L.Color(122, 44, 24);
  C.Color_129_217_117 = new L.Color(129, 217, 117);
  C.Color_129_231_235 = new L.Color(129, 231, 235);
  C.Color_131_158_13 = new L.Color(131, 158, 13);
  C.Color_132_126_135 = new L.Color(132, 126, 135);
  C.Color_142_82_55 = new L.Color(142, 82, 55);
  C.Color_179_74_4 = new L.Color(179, 74, 4);
  C.Color_189_106_235 = new L.Color(189, 106, 235);
  C.Color_189_144_108 = new L.Color(189, 144, 108);
  C.Color_19_17_28 = new L.Color(19, 17, 28);
  C.Color_204_35_57 = new L.Color(204, 35, 57);
  C.Color_21_87_194 = new L.Color(21, 87, 194);
  C.Color_222_156_33 = new L.Color(222, 156, 33);
  C.Color_226_223_240 = new L.Color(226, 223, 240);
  C.Color_22_117_38 = new L.Color(22, 117, 38);
  C.Color_255_122_105 = new L.Color(255, 122, 105);
  C.Color_255_238_168 = new L.Color(255, 238, 168);
  C.Color_255_255_255 = new L.Color(255, 255, 255);
  C.Color_26_46_150 = new L.Color(26, 46, 150);
  C.Color_38_38_56 = new L.Color(38, 38, 56);
  C.Color_56_16_125 = new L.Color(56, 16, 125);
  C.Color_63_64_114 = new L.Color(63, 64, 114);
  C.Color_64_163_229 = new L.Color(64, 163, 229);
  C.Color_64_31_36 = new L.Color(64, 31, 36);
  C.Color_84_0_39 = new L.Color(84, 0, 39);
  C.Color_86_30_138 = new L.Color(86, 30, 138);
  C.Color_99_87_7 = new L.Color(99, 87, 7);
  C.Color_9_95_112 = new L.Color(9, 95, 112);
  C.DetectType_0 = new T.DetectType(0, "DetectType.exit");
  C.DetectType_1 = new T.DetectType(1, "DetectType.item");
  C.ItemLocation_A8D = new O.ItemLocation("Equipment", "<not used>");
  C.ItemLocation_ukJ = new O.ItemLocation("Home", "There is nothing in your home.");
  C.ItemLocation_vOz = new O.ItemLocation("Crucible", "The crucible is waiting.");
  C.ItemLocation_wMy = new O.ItemLocation("Inventory", "Your backpack is empty.");
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C.List_2Zi = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
  C.List_ego = H.setRuntimeTypeInfo(Isolate.makeConstantList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
  C.List_empty = H.setRuntimeTypeInfo(Isolate.makeConstantList([]), [P.String]);
  C.List_tBY = H.setRuntimeTypeInfo(Isolate.makeConstantList(["weapon", "ring", "necklace", "body", "cloak", "shield", "helm", "gloves", "boots"]), [P.String]);
  C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
  C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
  C.Missive_0 = new R.Missive(0, "Missive.clumsy");
  C.Missive_1 = new R.Missive(1, "Missive.insult");
  C.Missive_2 = new R.Missive(2, "Missive.screech");
  C.Pronoun_he_him_his = new O.Pronoun("he", "him", "his");
  C.Pronoun_it_it_its = new O.Pronoun("it", "it", "its");
  C.SpawnLocation_0 = new B.SpawnLocation(0, "SpawnLocation.anywhere");
  C.SpawnLocation_1 = new B.SpawnLocation(1, "SpawnLocation.open");
  C.SpawnLocation_2 = new B.SpawnLocation(2, "SpawnLocation.wall");
  C.SpawnLocation_3 = new B.SpawnLocation(3, "SpawnLocation.corner");
  C.Stat_Agility = new D.Stat("Agility");
  C.Stat_Fortitude = new D.Stat("Fortitude");
  C.Stat_Intellect = new D.Stat("Intellect");
  C.Stat_Strength = new D.Stat("Strength");
  C.Stat_Will = new D.Stat("Will");
  C.Symmetry_0 = new T.Symmetry(0, "Symmetry.none");
  C.Symmetry_1 = new T.Symmetry(1, "Symmetry.mirrorHorizontal");
  C.Symmetry_2 = new T.Symmetry(2, "Symmetry.mirrorVertical");
  C.Symmetry_3 = new T.Symmetry(3, "Symmetry.mirrorBoth");
  C.Symmetry_4 = new T.Symmetry(4, "Symmetry.rotate90");
  C.Symmetry_5 = new T.Symmetry(5, "Symmetry.rotate180");
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $.Element__parseDocument = null;
  $.Element__parseRange = null;
  $.Element__defaultValidator = null;
  $.Element__defaultSanitizer = null;
  $.Device__isOpera = null;
  $.Device__isWebKit = null;
  $._categoryFrequency = null;
  $._furnishingFrequency = null;
  $._themes = null;
  $._categoryCells = null;
  $._sortIndex = 0;
  $._category = null;
  $._item = null;
  $._affixTag = null;
  $._affix = null;
  $._builder = null;
  $.Skill__nextSortOrder = 0;
  $.game = null;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    var hunk = $dart_deferred_initializers$[hunkHash];
    if (hunk == null)
      throw "DeferredLoading state error: code with hash '" + hunkHash + "' was not loaded";
    hunk($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryParts = {};
  init.deferredPartUris = [];
  init.deferredPartHashes = [];
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    }));
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = '$arguments$';
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }());
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting", "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
    return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
  }, "_Html5NodeValidator__allowedElements", "_Html5NodeValidator__attributeValidators", "$get$_Html5NodeValidator__attributeValidators", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
  }, "_Html5NodeValidator__attributeValidators", "Classes_adventurer", "$get$Classes_adventurer", function() {
    return V._class("Adventurer", "TODO", X.parseDrop("item", 1), 0.5, 0.2);
  }, "Classes_adventurer", "Decor_all", "$get$Decor_all", function() {
    return Y.ResourceSet$(Y.Decor);
  }, "Decor_all", "_applyCells", "$get$_applyCells", function() {
    var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = $.$get$Tiles_wallTorch();
    t2 = S.Cell$(t1, null, $.$get$Tiles_wall(), null);
    t3 = $.$get$Motility_walk();
    t1 = S.Cell$(t1, t3, null, null);
    t4 = S.Cell$($.$get$Tiles_statue(), t3, null, null);
    t5 = $.$get$Tiles_water();
    t6 = S.Cell$(t5, t3, null, null);
    t7 = S.Cell$($.$get$Tiles_closedBarrel(), t3, null, null);
    t8 = S.Cell$($.$get$Tiles_closedChest(), t3, null, null);
    t9 = S.Cell$($.$get$Tiles_tallGrass(), null, $.$get$Tiles_grass(), null);
    t10 = $.$get$Tiles_bridge();
    return P.LinkedHashMap_LinkedHashMap$_literal(["I", t2, "l", t1, "P", t4, "\u2248", t6, "%", t7, "&", t8, "*", t9, "=", S.Cell$(t10, null, t5, null), "\u2261", S.Cell$(t10, t3, null, null), "\u2022", S.Cell$($.$get$Tiles_steppingStone(), null, t5, null)], P.String, S.Cell);
  }, "_applyCells", "_requireCells", "$get$_requireCells", function() {
    var t1 = [Q.TileType];
    return P.LinkedHashMap_LinkedHashMap$_literal(["?", S.Cell$(null, null, null, null), ".", S.Cell$(null, $.$get$Motility_walk(), null, null), "#", S.Cell$(null, null, null, H.setRuntimeTypeInfo([$.$get$Tiles_wall(), $.$get$Tiles_rock()], t1)), "\u250c", S.Cell$(null, null, $.$get$Tiles_tableTopLeft(), null), "\u2500", S.Cell$(null, null, $.$get$Tiles_tableTop(), null), "\u2510", S.Cell$(null, null, $.$get$Tiles_tableTopRight(), null), "-", S.Cell$(null, null, $.$get$Tiles_tableCenter(), null), "\u2502", S.Cell$(null, null, $.$get$Tiles_tableSide(), null), "\u2558", S.Cell$(null, null, $.$get$Tiles_tableBottomLeft(), null), "\u2550", S.Cell$(null, null, $.$get$Tiles_tableBottom(), null), "\u255b", S.Cell$(null, null, $.$get$Tiles_tableBottomRight(), null), "\u255e", S.Cell$(null, null, $.$get$Tiles_tableLegLeft(), null), "\u2564", S.Cell$(null, null, $.$get$Tiles_tableLeg(), null), "\u2561", S.Cell$(null, null, $.$get$Tiles_tableLegRight(), null), "\u03c0", S.Cell$(null, null, $.$get$Tiles_chair(), null), "\u2248", S.Cell$(null, null, $.$get$Tiles_water(), null), "'", S.Cell$(null, null, null, H.setRuntimeTypeInfo([$.$get$Tiles_grass(), $.$get$Tiles_tallGrass()], t1))], P.String, S.Cell);
  }, "_requireCells", "_mirrorHorizontal", "$get$_mirrorHorizontal", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2510", "\u255b\u2558", "\u255e\u2561"], [P.String]);
  }, "_mirrorHorizontal", "_mirrorVertical", "$get$_mirrorVertical", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2558", "\u2510\u255b", "\u2500\u2550"], [P.String]);
  }, "_mirrorVertical", "_rotate", "$get$_rotate", function() {
    return H.setRuntimeTypeInfo(["\u250c\u2510\u255b\u2558", "\u2500\u2502\u2550\u2502"], [P.String]);
  }, "_rotate", "Elements_air", "$get$Elements_air", function() {
    return G.Element$("air", "Ai", 1.2, new A.Elements_closure3(), null, null, null);
  }, "Elements_air", "Elements_earth", "$get$Elements_earth", function() {
    return G.Element$("earth", "Ea", 1.1, null, null, null, null);
  }, "Elements_earth", "Elements_fire", "$get$Elements_fire", function() {
    return G.Element$("fire", "Fi", 1.2, new A.Elements_closure7(), "burns up", true, new A.Elements_closure8());
  }, "Elements_fire", "Elements_water", "$get$Elements_water", function() {
    return G.Element$("water", "Wa", 1.3, null, null, null, null);
  }, "Elements_water", "Elements_acid", "$get$Elements_acid", function() {
    return G.Element$("acid", "Ac", 1.4, null, null, null, null);
  }, "Elements_acid", "Elements_cold", "$get$Elements_cold", function() {
    return G.Element$("cold", "Co", 1.2, new A.Elements_closure1(), "shatters", null, new A.Elements_closure2());
  }, "Elements_cold", "Elements_lightning", "$get$Elements_lightning", function() {
    return G.Element$("lightning", "Ln", 1.1, null, null, null, null);
  }, "Elements_lightning", "Elements_poison", "$get$Elements_poison", function() {
    return G.Element$("poison", "Po", 2, new A.Elements_closure(), null, null, new A.Elements_closure0());
  }, "Elements_poison", "Elements_dark", "$get$Elements_dark", function() {
    return G.Element$("dark", "Dk", 1.5, new A.Elements_closure4(), null, null, null);
  }, "Elements_dark", "Elements_light", "$get$Elements_light", function() {
    return G.Element$("light", "Li", 1.5, new A.Elements_closure5(), null, null, new A.Elements_closure6());
  }, "Elements_light", "Elements_spirit", "$get$Elements_spirit", function() {
    return G.Element$("spirit", "Sp", 3, null, null, null, null);
  }, "Elements_spirit", "Affixes_prefixes", "$get$Affixes_prefixes", function() {
    return Y.ResourceSet$(L.Affix);
  }, "Affixes_prefixes", "Affixes_suffixes", "$get$Affixes_suffixes", function() {
    return Y.ResourceSet$(L.Affix);
  }, "Affixes_suffixes", "_floorDrops", "$get$_floorDrops", function() {
    return Y.ResourceSet$(F.FloorDrop);
  }, "_floorDrops", "Items_types", "$get$Items_types", function() {
    return Y.ResourceSet$(L.ItemType);
  }, "Items_types", "Shops_all", "$get$Shops_all", function() {
    return P.LinkedHashMap_LinkedHashMap$_empty(P.String, O.Shop);
  }, "Shops_all", "collapseNewlines", "$get$collapseNewlines", function() {
    return P.RegExp_RegExp("\\n\\s*", true, false);
  }, "collapseNewlines", "_family", "$get$_family", function() {
    return R._FamilyBuilder$(null);
  }, "_family", "Monsters_breeds", "$get$Monsters_breeds", function() {
    return Y.ResourceSet$(B.Breed);
  }, "Monsters_breeds", "Races_human", "$get$Races_human", function() {
    return new N.Race("Human", "Humans excel at nothing, but nor are they particularly weak in any area. Most other races considers humans sort of like mice: pesky creatures who seem do little but breed, which they do with great devotion.", P.LinkedHashMap_LinkedHashMap$_literal([C.Stat_Strength, 30, C.Stat_Agility, 30, C.Stat_Fortitude, 30, C.Stat_Intellect, 30, C.Stat_Will, 30], D.Stat, P.int));
  }, "Races_human", "Skills_all", "$get$Skills_all", function() {
    var t1, t2, skills, t3, t4, t5, t6, t7, t8, t9, t10;
    t1 = $.Skill__nextSortOrder;
    $.Skill__nextSortOrder = t1 + 1;
    t2 = [M.Skill];
    skills = H.setRuntimeTypeInfo([new M.BattleHardening(t1)], t2);
    t1 = $.Skill__nextSortOrder;
    t3 = t1 + 1;
    $.Skill__nextSortOrder = t3;
    t4 = t3 + 1;
    $.Skill__nextSortOrder = t4;
    t5 = t4 + 1;
    $.Skill__nextSortOrder = t5;
    t6 = t5 + 1;
    $.Skill__nextSortOrder = t6;
    t7 = t6 + 1;
    $.Skill__nextSortOrder = t7;
    $.Skill__nextSortOrder = t7 + 1;
    C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new X.Archery(t1), new D.AxeMastery(t3), new A.ClubMastery(t4), new Z.SpearMastery(t5), new G.Swordfighting(t6), new O.WhipMastery(t7)], t2));
    C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([A.SlayDiscipline$("Animals", "animal"), A.SlayDiscipline$("Bugs", "bug"), A.SlayDiscipline$("Dragons", "dragon"), A.SlayDiscipline$("Fae Folk", "fae"), A.SlayDiscipline$("Goblins", "goblin"), A.SlayDiscipline$("Humans", "human"), A.SlayDiscipline$("Jellies", "jelly"), A.SlayDiscipline$("Kobolds", "kobold"), A.SlayDiscipline$("Plants", "plant"), A.SlayDiscipline$("Saurians", "saurian"), A.SlayDiscipline$("Undead", "undead")], t2));
    t7 = $.Skill__nextSortOrder;
    t6 = t7 + 1;
    $.Skill__nextSortOrder = t6;
    t5 = t6 + 1;
    $.Skill__nextSortOrder = t5;
    t4 = t5 + 1;
    $.Skill__nextSortOrder = t4;
    t3 = t4 + 1;
    $.Skill__nextSortOrder = t3;
    t1 = t3 + 1;
    $.Skill__nextSortOrder = t1;
    t8 = t1 + 1;
    $.Skill__nextSortOrder = t8;
    t9 = t8 + 1;
    $.Skill__nextSortOrder = t9;
    t10 = t9 + 1;
    $.Skill__nextSortOrder = t10;
    $.Skill__nextSortOrder = t10 + 1;
    C.JSArray_methods.addAll$1(skills, H.setRuntimeTypeInfo([new D.SenseItems(t7), new K.Flee(t6), new K.Escape(t5), new K.Disappear(t4), new L.Icicle(t3), new L.BrilliantBeam(t1), new L.Windstorm(t8), new L.FireBarrier(t9), new L.TidalWave(t10)], t2));
    return skills;
  }, "Skills_all", "Skills__byName", "$get$Skills__byName", function() {
    var t1, map;
    t1 = $.$get$Skills_all();
    map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, M.Skill);
    P.MapBase__fillMapWithMappedIterable(map, t1, new Q.Skills_closure(), null);
    return map;
  }, "Skills__byName", "Tiles_rock", "$get$Tiles_rock", function() {
    return Z._TileBuilder__TileBuilder("rock", "\u2593", C.Color_132_126_135, C.Color_63_64_114).solid$0();
  }, "Tiles_rock", "Tiles_wall", "$get$Tiles_wall", function() {
    return Z._TileBuilder__TileBuilder("wall", "\u2592", C.Color_132_126_135, C.Color_63_64_114).solid$0();
  }, "Tiles_wall", "Tiles_bridge", "$get$Tiles_bridge", function() {
    return Z._TileBuilder__TileBuilder("bridge", "\u2261", C.Color_142_82_55, C.Color_64_31_36).open$0(0);
  }, "Tiles_bridge", "Tiles_glowingMoss", "$get$Tiles_glowingMoss", function() {
    return Z._TileBuilder__TileBuilder("moss", "\u2591", C.Color_9_95_112, null).emanate$1(128).open$0(0);
  }, "Tiles_glowingMoss", "Tiles_water", "$get$Tiles_water", function() {
    return Z._TileBuilder__TileBuilder("water", "\u2248", C.Color_21_87_194, C.Color_26_46_150).animate$4(0, 10, 0.5, C.Color_26_46_150, C.Color_19_17_28)._tiles$_motility$1($.$get$Motility_fly().$or(0, $.$get$Motility_swim()));
  }, "Tiles_water", "Tiles_steppingStone", "$get$Tiles_steppingStone", function() {
    return Z._TileBuilder__TileBuilder("stepping stone", "\u2022", C.Color_132_126_135, C.Color_26_46_150).open$0(0);
  }, "Tiles_steppingStone", "Tiles_grass", "$get$Tiles_grass", function() {
    return Z._TileBuilder__TileBuilder("grass", "\u2591", C.Color_22_117_38, null).open$0(0);
  }, "Tiles_grass", "Tiles_tallGrass", "$get$Tiles_tallGrass", function() {
    return Z._TileBuilder__TileBuilder("tall grass", "\u221a", C.Color_22_117_38, null).open$0(0);
  }, "Tiles_tallGrass", "Tiles_tableTopLeft", "$get$Tiles_tableTopLeft", function() {
    return Z._TileBuilder__TileBuilder("table", "\u250c", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTopLeft", "Tiles_tableTop", "$get$Tiles_tableTop", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2500", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTop", "Tiles_tableTopRight", "$get$Tiles_tableTopRight", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2510", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableTopRight", "Tiles_tableSide", "$get$Tiles_tableSide", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2502", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableSide", "Tiles_tableCenter", "$get$Tiles_tableCenter", function() {
    return Z._TileBuilder__TileBuilder("table", " ", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableCenter", "Tiles_tableBottomLeft", "$get$Tiles_tableBottomLeft", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2558", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottomLeft", "Tiles_tableBottom", "$get$Tiles_tableBottom", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2550", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottom", "Tiles_tableBottomRight", "$get$Tiles_tableBottomRight", function() {
    return Z._TileBuilder__TileBuilder("table", "\u255b", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableBottomRight", "Tiles_tableLegLeft", "$get$Tiles_tableLegLeft", function() {
    return Z._TileBuilder__TileBuilder("table", "\u255e", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLegLeft", "Tiles_tableLeg", "$get$Tiles_tableLeg", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2564", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLeg", "Tiles_tableLegRight", "$get$Tiles_tableLegRight", function() {
    return Z._TileBuilder__TileBuilder("table", "\u2561", C.Color_142_82_55, null).obstacle$0();
  }, "Tiles_tableLegRight", "Tiles_candle", "$get$Tiles_candle", function() {
    return Z._TileBuilder__TileBuilder("candle", "\u2265", C.Color_189_144_108, null).emanate$1(128).obstacle$0();
  }, "Tiles_candle", "Tiles_wallTorch", "$get$Tiles_wallTorch", function() {
    return Z._TileBuilder__TileBuilder("wall torch", "\u2264", C.Color_222_156_33, C.Color_63_64_114).emanate$1(192).solid$0();
  }, "Tiles_wallTorch", "Tiles_closedChest", "$get$Tiles_closedChest", function() {
    return Z._TileBuilder__TileBuilder("closed chest", "\u2321", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure()).obstacle$0();
  }, "Tiles_closedChest", "Tiles_closedBarrel", "$get$Tiles_closedBarrel", function() {
    return Z._TileBuilder__TileBuilder("closed barrel", "\xb0", C.Color_142_82_55, null).onOpen$1(new Z.Tiles_closure0()).obstacle$0();
  }, "Tiles_closedBarrel", "Tiles_statue", "$get$Tiles_statue", function() {
    return Z._TileBuilder__TileBuilder("statue", "P", C.Color_226_223_240, C.Color_63_64_114).obstacle$0();
  }, "Tiles_statue", "Tiles_chair", "$get$Tiles_chair", function() {
    return Z._TileBuilder__TileBuilder("chair", "\u03c0", C.Color_142_82_55, null).open$0(0);
  }, "Tiles_chair", "Tiles_brownJellyStain", "$get$Tiles_brownJellyStain", function() {
    return Z._TileBuilder__TileBuilder("brown jelly stain", "\xb7", C.Color_142_82_55, null).open$0(0);
  }, "Tiles_brownJellyStain", "Tiles_grayJellyStain", "$get$Tiles_grayJellyStain", function() {
    return Z._TileBuilder__TileBuilder("gray jelly stain", "\xb7", C.Color_38_38_56, null).open$0(0);
  }, "Tiles_grayJellyStain", "Tiles_greenJellyStain", "$get$Tiles_greenJellyStain", function() {
    return Z._TileBuilder__TileBuilder("green jelly stain", "\xb7", C.Color_131_158_13, null).open$0(0);
  }, "Tiles_greenJellyStain", "Tiles_redJellyStain", "$get$Tiles_redJellyStain", function() {
    return Z._TileBuilder__TileBuilder("red jelly stain", "\xb7", C.Color_204_35_57, null).open$0(0);
  }, "Tiles_redJellyStain", "Tiles_violetJellyStain", "$get$Tiles_violetJellyStain", function() {
    return Z._TileBuilder__TileBuilder("violet jelly stain", "\xb7", C.Color_86_30_138, null).open$0(0);
  }, "Tiles_violetJellyStain", "Tiles_whiteJellyStain", "$get$Tiles_whiteJellyStain", function() {
    return Z._TileBuilder__TileBuilder("white jelly stain", "\xb7", C.Color_226_223_240, null).open$0(0);
  }, "Tiles_whiteJellyStain", "Tiles_spiderweb", "$get$Tiles_spiderweb", function() {
    return Z._TileBuilder__TileBuilder("spiderweb", "\xf7", C.Color_63_64_114, null).open$0(0);
  }, "Tiles_spiderweb", "Element_none", "$get$Element_none", function() {
    return G.Element$("none", "No", 1, null, null, null, null);
  }, "Element_none", "BreedRef__unresolved", "$get$BreedRef__unresolved", function() {
    return H.setRuntimeTypeInfo([], [B.BreedRef]);
  }, "BreedRef__unresolved", "Motility_none", "$get$Motility_none", function() {
    return Q.Motility$_(0);
  }, "Motility_none", "Motility_door", "$get$Motility_door", function() {
    return Q.Motility$_(1);
  }, "Motility_door", "Motility_fly", "$get$Motility_fly", function() {
    return Q.Motility$_(2);
  }, "Motility_fly", "Motility_swim", "$get$Motility_swim", function() {
    return Q.Motility$_(4);
  }, "Motility_swim", "Motility_walk", "$get$Motility_walk", function() {
    return Q.Motility$_(8);
  }, "Motility_walk", "Motility_flyAndWalk", "$get$Motility_flyAndWalk", function() {
    return $.$get$Motility_fly().$or(0, $.$get$Motility_walk());
  }, "Motility_flyAndWalk", "rng", "$get$rng", function() {
    return N.Rng$(Date.now());
  }, "rng", "allBreeds", "$get$allBreeds", function() {
    return P.List_List$generate(101, new V.closure2(), true, [T.Histogram, P.String]);
  }, "allBreeds", "allSpawns", "$get$allSpawns", function() {
    return P.List_List$generate(101, new V.closure1(), true, [T.Histogram, P.String]);
  }, "allSpawns", "allItems", "$get$allItems", function() {
    return P.List_List$generate(101, new V.closure0(), true, [T.Histogram, P.String]);
  }, "allItems", "allAffixes", "$get$allAffixes", function() {
    return P.List_List$generate(101, new V.closure(), true, [T.Histogram, P.String]);
  }, "allAffixes", "validator", "$get$validator", function() {
    var t1 = W.NodeValidatorBuilder$common();
    t1.add$1(0, W._SimpleNodeValidator$(null, H.setRuntimeTypeInfo(["*::style"], [P.String]), null, null));
    return t1;
  }, "validator"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [];
  init.types = [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: S.TeleportAction}, {func: 1, ret: [T.Histogram, P.String], args: [P.int]}, {func: 1, args: [,]}, {func: 1, ret: E.HasteAction}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: E.FreezeActorAction, args: [P.int]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: P.Null, args: [P.String, P.int]}, {func: 1, ret: G.WindAction, args: [P.int]}, {func: 1, ret: G.BurnActorAction, args: [P.int]}, {func: 1, ret: G.BurnFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: G.FreezeFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.PoisonAction, args: [P.int]}, {func: 1, ret: G.PoisonFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: E.BlindAction, args: [P.int]}, {func: 1, ret: E.DazzleAction, args: [P.int]}, {func: 1, ret: G.LightFloorAction, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: X.EatAction}, {func: 1, ret: T.DetectAction}, {func: 1, ret: E.ResistAction}, {func: 1, ret: Q.MappingAction}, {func: 1, ret: O.HealAction}, {func: 1, ret: G.RingSelfAction}, {func: 1, ret: G.RingFromAction, args: [L.Vec]}, {func: 1, ret: N.FlowSelfAction}, {func: 1, ret: N.FlowFromAction, args: [L.Vec]}, {func: 1, ret: F.IlluminateSelfAction}, {func: 1, ret: P.Null, args: [L.Drop, P.double]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: M.Skill, args: [P.String]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: Q.OpenChestAction, args: [L.Vec]}, {func: 1, ret: Q.OpenBarrelAction, args: [L.Vec]}, {func: 1, ret: P.Null, args: [P.int]}, {func: 1, ret: P.Null, args: [L.Vec, U.Hit, P.num, P.int]}, {func: 1, ret: P.double, args: [P.int, P.int]}, {func: 1, ret: -1, args: [G.Element0, P.int]}, {func: 1, ret: -1, args: [D.Stat, P.int]}, {func: 1, ret: P.int, args: [P.int, R.Item]}, {func: 1, ret: P.bool, args: [R.Item]}, {func: 1, ret: O.AddItemResult, args: [R.Item], named: {wasUnequipped: P.bool}}, {func: 1, ret: Q.Tile}, {func: 1, ret: P.int}, {func: 1, args: [W.Event0]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.Null, args: [R.Item]}, {func: 1, ret: P.Null, args: [[T.Histogram, P.String]]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, args: [P.String]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Null, args: [P.String, P.double]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.makeConstantList = oldIsolate.makeConstantList;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(V.main, []);
    else
      V.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=levels.dart.js.map
